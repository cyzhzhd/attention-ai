!(function (t) {
  var e = {};
  function n(r) {
    if (e[r]) return e[r].exports;
    var a = (e[r] = { i: r, l: !1, exports: {} });
    return t[r].call(a.exports, a, a.exports, n), (a.l = !0), a.exports;
  }
  (n.m = t),
    (n.c = e),
    (n.d = function (t, e, r) {
      n.o(t, e) || Object.defineProperty(t, e, { enumerable: !0, get: r });
    }),
    (n.r = function (t) {
      "undefined" != typeof Symbol &&
        Symbol.toStringTag &&
        Object.defineProperty(t, Symbol.toStringTag, { value: "Module" }),
        Object.defineProperty(t, "__esModule", { value: !0 });
    }),
    (n.t = function (t, e) {
      if ((1 & e && (t = n(t)), 8 & e)) return t;
      if (4 & e && "object" == typeof t && t && t.__esModule) return t;
      var r = Object.create(null);
      if (
        (n.r(r),
        Object.defineProperty(r, "default", { enumerable: !0, value: t }),
        2 & e && "string" != typeof t)
      )
        for (var a in t)
          n.d(
            r,
            a,
            function (e) {
              return t[e];
            }.bind(null, a)
          );
      return r;
    }),
    (n.n = function (t) {
      var e =
        t && t.__esModule
          ? function () {
              return t.default;
            }
          : function () {
              return t;
            };
      return n.d(e, "a", e), e;
    }),
    (n.o = function (t, e) {
      return Object.prototype.hasOwnProperty.call(t, e);
    }),
    (n.p = ""),
    n((n.s = 81));
})([
  function (t, e, n) {
    "use strict";
    n.d(e, "i", function () {
      return ts;
    }),
      n.d(e, "l", function () {
        return N.a;
      }),
      n.d(e, "m", function () {
        return N.b;
      }),
      n.d(e, "md", function () {
        return us.a;
      }),
      n.d(e, "Bd", function () {
        return us.b;
      }),
      n.d(e, "r", function () {
        return k;
      }),
      n.d(e, "s", function () {
        return ca;
      }),
      n.d(e, "A", function () {
        return la;
      }),
      n.d(e, "C", function () {
        return ha;
      }),
      n.d(e, "D", function () {
        return da;
      }),
      n.d(e, "K", function () {
        return yn;
      }),
      n.d(e, "G", function () {
        return fa;
      }),
      n.d(e, "H", function () {
        return ma;
      }),
      n.d(e, "I", function () {
        return ga;
      }),
      n.d(e, "J", function () {
        return ba;
      }),
      n.d(e, "L", function () {
        return ya;
      }),
      n.d(e, "R", function () {
        return xa.a;
      }),
      n.d(e, "S", function () {
        return D;
      }),
      n.d(e, "T", function () {
        return wa;
      }),
      n.d(e, "U", function () {
        return Ca;
      }),
      n.d(e, "V", function () {
        return Oa;
      }),
      n.d(e, "W", function () {
        return Ea;
      }),
      n.d(e, "X", function () {
        return Sa;
      }),
      n.d(e, "Y", function () {
        return we;
      }),
      n.d(e, "Z", function () {
        return Ia;
      }),
      n.d(e, "ab", function () {
        return ka;
      }),
      n.d(e, "db", function () {
        return ke;
      }),
      n.d(e, "eb", function () {
        return Ra;
      }),
      n.d(e, "fb", function () {
        return Aa;
      }),
      n.d(e, "ib", function () {
        return U;
      }),
      n.d(e, "jb", function () {
        return _a;
      }),
      n.d(e, "lb", function () {
        return Fa;
      }),
      n.d(e, "pb", function () {
        return Ma;
      }),
      n.d(e, "ub", function () {
        return ja;
      }),
      n.d(e, "wb", function () {
        return $a;
      }),
      n.d(e, "yb", function () {
        return V;
      }),
      n.d(e, "Cb", function () {
        return Ye;
      }),
      n.d(e, "Db", function () {
        return Ve;
      }),
      n.d(e, "Fb", function () {
        return Ba.a;
      }),
      n.d(e, "Lb", function () {
        return La;
      }),
      n.d(e, "Mb", function () {
        return Ue;
      }),
      n.d(e, "Nb", function () {
        return Je;
      }),
      n.d(e, "Qb", function () {
        return za;
      }),
      n.d(e, "Xb", function () {
        return he;
      }),
      n.d(e, "Yb", function () {
        return Wa;
      }),
      n.d(e, "Zb", function () {
        return Va;
      }),
      n.d(e, "ac", function () {
        return Ua;
      }),
      n.d(e, "bc", function () {
        return Ga;
      }),
      n.d(e, "cc", function () {
        return Pa;
      }),
      n.d(e, "gc", function () {
        return Ha;
      }),
      n.d(e, "hc", function () {
        return qa;
      }),
      n.d(e, "jc", function () {
        return G;
      }),
      n.d(e, "kc", function () {
        return Ka;
      }),
      n.d(e, "nc", function () {
        return Xa;
      }),
      n.d(e, "oc", function () {
        return zr;
      }),
      n.d(e, "rc", function () {
        return Sn;
      }),
      n.d(e, "sc", function () {
        return hn;
      }),
      n.d(e, "tc", function () {
        return ni;
      }),
      n.d(e, "vc", function () {
        return ci;
      }),
      n.d(e, "wc", function () {
        return li;
      }),
      n.d(e, "yc", function () {
        return hi.a;
      }),
      n.d(e, "Cc", function () {
        return di;
      }),
      n.d(e, "Kc", function () {
        return fi;
      }),
      n.d(e, "Lc", function () {
        return mi;
      }),
      n.d(e, "bd", function () {
        return pe;
      }),
      n.d(e, "dd", function () {
        return ge;
      }),
      n.d(e, "fd", function () {
        return pt;
      }),
      n.d(e, "gd", function () {
        return gi;
      }),
      n.d(e, "kd", function () {
        return Me;
      }),
      n.d(e, "vd", function () {
        return je;
      }),
      n.d(e, "zd", function () {
        return bi;
      }),
      n.d(e, "Ec", function () {
        return Ni;
      }),
      n.d(e, "Tc", function () {
        return $n;
      }),
      n.d(e, "Uc", function () {
        return Bn;
      }),
      n.d(e, "Vc", function () {
        return Pn;
      }),
      n.d(e, "Wc", function () {
        return Ln;
      }),
      n.d(e, "Xc", function () {
        return zn;
      }),
      n.d(e, "o", function () {
        return ft;
      }),
      n.d(e, "p", function () {
        return mt;
      }),
      n.d(e, "q", function () {
        return gt;
      }),
      n.d(e, "x", function () {
        return bt;
      }),
      n.d(e, "y", function () {
        return vt;
      }),
      n.d(e, "z", function () {
        return yt;
      }),
      n.d(e, "B", function () {
        return xt;
      }),
      n.d(e, "P", function () {
        return wt;
      }),
      n.d(e, "Q", function () {
        return Ct;
      }),
      n.d(e, "bb", function () {
        return Ot;
      }),
      n.d(e, "cb", function () {
        return Et;
      }),
      n.d(e, "qb", function () {
        return St;
      }),
      n.d(e, "rb", function () {
        return It;
      }),
      n.d(e, "tb", function () {
        return kt;
      }),
      n.d(e, "xb", function () {
        return Nt;
      }),
      n.d(e, "Rb", function () {
        return Rt;
      }),
      n.d(e, "Sb", function () {
        return At;
      }),
      n.d(e, "lc", function () {
        return _t;
      }),
      n.d(e, "zc", function () {
        return Dt;
      }),
      n.d(e, "Gc", function () {
        return Ft;
      }),
      n.d(e, "Hc", function () {
        return Mt;
      }),
      n.d(e, "Pc", function () {
        return jt;
      }),
      n.d(e, "Qc", function () {
        return $t;
      }),
      n.d(e, "Rc", function () {
        return zt;
      }),
      n.d(e, "Sc", function () {
        return Wt;
      }),
      n.d(e, "ad", function () {
        return Vt;
      }),
      n.d(e, "ed", function () {
        return Ut;
      }),
      n.d(e, "nd", function () {
        return Ht;
      }),
      n.d(e, "od", function () {
        return qt;
      }),
      n.d(e, "t", function () {
        return rt;
      }),
      n.d(e, "u", function () {
        return at;
      }),
      n.d(e, "v", function () {
        return it;
      }),
      n.d(e, "w", function () {
        return ot;
      }),
      n.d(e, "dc", function () {
        return ut;
      }),
      n.d(e, "fc", function () {
        return ct;
      }),
      n.d(e, "ic", function () {
        return lt;
      }),
      n.d(e, "ld", function () {
        return ht;
      }),
      n.d(e, "uc", function () {
        return dt;
      }),
      n.d(e, "Ub", function () {
        return an;
      }),
      n.d(e, "Vb", function () {
        return on;
      }),
      n.d(e, "Wb", function () {
        return sn;
      }),
      n.d(e, "Gd", function () {
        return cn;
      }),
      n.d(e, "Hd", function () {
        return ln;
      }),
      n.d(e, "N", function () {
        return F;
      }),
      n.d(e, "O", function () {
        return j;
      }),
      n.d(e, "sb", function () {
        return $;
      }),
      n.d(e, "Dc", function () {
        return B;
      }),
      n.d(e, "hd", function () {
        return P;
      }),
      n.d(e, "id", function () {
        return L;
      }),
      n.d(e, "Ad", function () {
        return z;
      }),
      n.d(e, "Oc", function () {
        return W;
      }),
      n.d(e, "Pb", function () {
        return _.a;
      }),
      n.d(e, "pc", function () {
        return _.b;
      }),
      n.d(e, "xc", function () {
        return _.d;
      }),
      n.d(e, "Ic", function () {
        return _.e;
      }),
      n.d(e, "pd", function () {
        return _.f;
      }),
      n.d(e, "qd", function () {
        return _.g;
      }),
      n.d(e, "rd", function () {
        return _.h;
      }),
      n.d(e, "sd", function () {
        return _.j;
      }),
      n.d(e, "Dd", function () {
        return _.m;
      }),
      n.d(e, "Id", function () {
        return _.n;
      }),
      n.d(e, "qc", function () {
        return _.c;
      }),
      n.d(e, "Jd", function () {
        return _.o;
      }),
      n.d(e, "yd", function () {
        return Ie;
      }),
      n.d(e, "Zc", function () {
        return Ki;
      }),
      n.d(e, "Tb", function () {
        return Xi;
      }),
      n.d(e, "Ab", function () {
        return Si;
      }),
      n.d(e, "jd", function () {
        return to;
      }),
      n.d(e, "wd", function () {
        return eo;
      }),
      n.d(e, "Jc", function () {
        return no;
      }),
      n.d(e, "vb", function () {
        return ro;
      }),
      n.d(e, "Eb", function () {
        return ao;
      }),
      n.d(e, "Fc", function () {
        return io;
      }),
      n.d(e, "Ib", function () {
        return oo;
      }),
      n.d(e, "cd", function () {
        return so;
      }),
      n.d(e, "Bb", function () {
        return uo;
      }),
      n.d(e, "kb", function () {
        return co;
      }),
      n.d(e, "Gb", function () {
        return d;
      }),
      n.d(e, "Ob", function () {
        return h;
      }),
      n.d(e, "zb", function () {
        return p;
      }),
      n.d(e, "xd", function () {
        return ls;
      }),
      n.d(e, "mb", function () {
        return Zr;
      }),
      n.d(e, "nb", function () {
        return ea;
      }),
      n.d(e, "ec", function () {
        return na;
      }),
      n.d(e, "ud", function () {
        return ra;
      }),
      n.d(e, "hb", function () {
        return aa;
      }),
      n.d(e, "Jb", function () {
        return ia;
      }),
      n.d(e, "Nc", function () {
        return oa;
      }),
      n.d(e, "Ac", function () {
        return sa;
      }),
      n.d(e, "E", function () {
        return ua;
      }),
      n.d(e, "Bc", function () {
        return Un.e;
      }),
      n.d(e, "Ed", function () {
        return H;
      }),
      n.d(e, "ob", function () {
        return Hn.b;
      }),
      n.d(e, "Fd", function () {
        return Qr;
      }),
      n.d(e, "mc", function () {
        return hs.a;
      }),
      n.d(e, "M", function () {
        return i;
      }),
      n.d(e, "Hb", function () {
        return a;
      }),
      n.d(e, "Mc", function () {
        return o;
      }),
      n.d(e, "Cd", function () {
        return R;
      }),
      n.d(e, "F", function () {
        return m;
      }),
      n.d(e, "td", function () {
        return E;
      }),
      n.d(e, "Yc", function () {
        return r;
      }),
      n.d(e, "gb", function () {
        return js;
      }),
      n.d(e, "Kb", function () {
        return g;
      }),
      n.d(e, "d", function () {
        return zs;
      }),
      n.d(e, "a", function () {
        return Ls;
      }),
      n.d(e, "b", function () {
        return v.y;
      }),
      n.d(e, "e", function () {
        return v.P;
      }),
      n.d(e, "f", function () {
        return v.U;
      }),
      n.d(e, "g", function () {
        return v.Z;
      }),
      n.d(e, "h", function () {
        return v.ab;
      }),
      n.d(e, "k", function () {
        return v.ob;
      }),
      n.d(e, "j", function () {
        return v.nb;
      }),
      n.d(e, "n", function () {
        return v.rb;
      }),
      n.d(e, "c", function () {
        return v.E;
      });
    var r = {};
    n.r(r),
      n.d(r, "assertParamsValid", function () {
        return In;
      }),
      n.d(r, "maskToAxes", function () {
        return kn;
      }),
      n.d(r, "computeOutShape", function () {
        return Nn;
      }),
      n.d(r, "stridesWithElidedDims", function () {
        return Rn;
      }),
      n.d(r, "startIndicesWithElidedDims", function () {
        return An;
      }),
      n.d(r, "stopIndicesWithElidedDims", function () {
        return Tn;
      }),
      n.d(r, "stridesForAxis", function () {
        return _n;
      }),
      n.d(r, "startForAxis", function () {
        return Dn;
      }),
      n.d(r, "stopForAxis", function () {
        return Fn;
      }),
      n.d(r, "isSliceContinous", function () {
        return Mn;
      }),
      n.d(r, "computeFlatOffset", function () {
        return jn;
      });
    var a = {};
    n.r(a),
      n.d(a, "copyModel", function () {
        return ir;
      }),
      n.d(a, "listModels", function () {
        return rr;
      }),
      n.d(a, "moveModel", function () {
        return or;
      }),
      n.d(a, "removeModel", function () {
        return ar;
      }),
      n.d(a, "browserFiles", function () {
        return Ir;
      }),
      n.d(a, "browserHTTPRequest", function () {
        return jr;
      }),
      n.d(a, "concatenateArrayBuffers", function () {
        return Kn.d;
      }),
      n.d(a, "decodeWeights", function () {
        return Kn.e;
      }),
      n.d(a, "encodeWeights", function () {
        return Kn.f;
      }),
      n.d(a, "fromMemory", function () {
        return Pr;
      }),
      n.d(a, "getLoadHandlers", function () {
        return Zn;
      }),
      n.d(a, "getModelArtifactsInfoForJSON", function () {
        return Kn.g;
      }),
      n.d(a, "getSaveHandlers", function () {
        return Qn;
      }),
      n.d(a, "http", function () {
        return Mr;
      }),
      n.d(a, "isHTTPScheme", function () {
        return Dr;
      }),
      n.d(a, "loadWeights", function () {
        return Ar;
      }),
      n.d(a, "registerLoadRouter", function () {
        return Jn;
      }),
      n.d(a, "registerSaveRouter", function () {
        return Yn;
      }),
      n.d(a, "weightsLoaderFactory", function () {
        return Tr;
      }),
      n.d(a, "withSaveHandler", function () {
        return Lr;
      });
    var i = {};
    n.r(i),
      n.d(i, "toPixels", function () {
        return Vr;
      }),
      n.d(i, "fromPixels", function () {
        return Ur;
      });
    var o = {};
    n.r(o),
      n.d(o, "Serializable", function () {
        return Xr;
      }),
      n.d(o, "SerializationMap", function () {
        return Yr;
      }),
      n.d(o, "registerClass", function () {
        return Jr;
      });
    var s = {};
    n.r(s),
      n.d(s, "segOpComputeOptimalWindowSize", function () {
        return xi;
      }),
      n.d(s, "computeOutShape", function () {
        return wi;
      }),
      n.d(s, "collectGatherOpShapeInfo", function () {
        return Ci;
      });
    var u = {};
    n.r(u),
      n.d(u, "fft", function () {
        return ro;
      }),
      n.d(u, "ifft", function () {
        return ao;
      }),
      n.d(u, "rfft", function () {
        return io;
      }),
      n.d(u, "irfft", function () {
        return oo;
      });
    var c = {};
    n.r(c),
      n.d(c, "hannWindow", function () {
        return ho;
      }),
      n.d(c, "hammingWindow", function () {
        return po;
      }),
      n.d(c, "frame", function () {
        return fo;
      }),
      n.d(c, "stft", function () {
        return mo;
      });
    var l = {};
    n.r(l),
      n.d(l, "Reduction", function () {
        return bo;
      }),
      n.d(l, "absoluteDifference", function () {
        return vo;
      }),
      n.d(l, "computeWeightedLoss", function () {
        return yo;
      }),
      n.d(l, "cosineDistance", function () {
        return xo;
      }),
      n.d(l, "hingeLoss", function () {
        return wo;
      }),
      n.d(l, "huberLoss", function () {
        return Co;
      }),
      n.d(l, "logLoss", function () {
        return Oo;
      }),
      n.d(l, "meanSquaredError", function () {
        return Eo;
      }),
      n.d(l, "sigmoidCrossEntropy", function () {
        return So;
      }),
      n.d(l, "softmaxCrossEntropy", function () {
        return Io;
      });
    var h = {};
    n.r(h),
      n.d(h, "bandPart", function () {
        return No;
      }),
      n.d(h, "gramSchmidt", function () {
        return Ro;
      }),
      n.d(h, "qr", function () {
        return Ao;
      });
    var d = {};
    n.r(d),
      n.d(d, "nonMaxSuppression", function () {
        return Lo;
      }),
      n.d(d, "resizeBilinear", function () {
        return zo;
      }),
      n.d(d, "resizeNearestNeighbor", function () {
        return Wo;
      }),
      n.d(d, "nonMaxSuppressionAsync", function () {
        return Vo;
      }),
      n.d(d, "nonMaxSuppressionWithScore", function () {
        return Uo;
      }),
      n.d(d, "nonMaxSuppressionWithScoreAsync", function () {
        return Go;
      }),
      n.d(d, "cropAndResize", function () {
        return Ho;
      });
    var p = {};
    n.r(p),
      n.d(p, "matMul", function () {
        return Jo;
      }),
      n.d(p, "conv2d", function () {
        return Qo;
      }),
      n.d(p, "depthwiseConv2d", function () {
        return Zo;
      });
    var f = {};
    n.r(f),
      n.d(f, "add", function () {
        return k;
      }),
      n.d(f, "addN", function () {
        return ca;
      }),
      n.d(f, "atan2", function () {
        return la;
      }),
      n.d(f, "avgPool", function () {
        return ha;
      }),
      n.d(f, "avgPool3d", function () {
        return da;
      }),
      n.d(f, "batchToSpaceND", function () {
        return yn;
      }),
      n.d(f, "batchNorm", function () {
        return fa;
      }),
      n.d(f, "batchNorm2d", function () {
        return ma;
      }),
      n.d(f, "batchNorm3d", function () {
        return ga;
      }),
      n.d(f, "batchNorm4d", function () {
        return ba;
      }),
      n.d(f, "broadcastTo", function () {
        return ya;
      }),
      n.d(f, "clone", function () {
        return va;
      }),
      n.d(f, "complex", function () {
        return xa.a;
      }),
      n.d(f, "concat", function () {
        return D;
      }),
      n.d(f, "concat1d", function () {
        return wa;
      }),
      n.d(f, "concat2d", function () {
        return Ca;
      }),
      n.d(f, "concat3d", function () {
        return Oa;
      }),
      n.d(f, "concat4d", function () {
        return Ea;
      }),
      n.d(f, "conv1d", function () {
        return Sa;
      }),
      n.d(f, "conv2d", function () {
        return we;
      }),
      n.d(f, "conv2dTranspose", function () {
        return Ia;
      }),
      n.d(f, "conv3d", function () {
        return ka;
      }),
      n.d(f, "conv3dTranspose", function () {
        return Na;
      }),
      n.d(f, "cumsum", function () {
        return ke;
      }),
      n.d(f, "depthToSpace", function () {
        return Ra;
      }),
      n.d(f, "depthwiseConv2d", function () {
        return Aa;
      }),
      n.d(f, "diag", function () {
        return Ta;
      }),
      n.d(f, "div", function () {
        return U;
      }),
      n.d(f, "divNoNan", function () {
        return _a;
      }),
      n.d(f, "dot", function () {
        return Da;
      }),
      n.d(f, "elu", function () {
        return Fa;
      }),
      n.d(f, "equal", function () {
        return Ma;
      }),
      n.d(f, "eye", function () {
        return ja;
      }),
      n.d(f, "fill", function () {
        return $a;
      }),
      n.d(f, "floorDiv", function () {
        return V;
      }),
      n.d(f, "greater", function () {
        return Ye;
      }),
      n.d(f, "greaterEqual", function () {
        return Ve;
      }),
      n.d(f, "imag", function () {
        return Ba.a;
      }),
      n.d(f, "leakyRelu", function () {
        return La;
      }),
      n.d(f, "less", function () {
        return Ue;
      }),
      n.d(f, "lessEqual", function () {
        return Je;
      }),
      n.d(f, "localResponseNormalization", function () {
        return za;
      }),
      n.d(f, "matMul", function () {
        return he;
      }),
      n.d(f, "max", function () {
        return Wa;
      }),
      n.d(f, "maxPool", function () {
        return Va;
      }),
      n.d(f, "maxPool3d", function () {
        return Ua;
      }),
      n.d(f, "maxPoolWithArgmax", function () {
        return Ga;
      }),
      n.d(f, "maximum", function () {
        return Pa;
      }),
      n.d(f, "minimum", function () {
        return Ha;
      }),
      n.d(f, "mod", function () {
        return qa;
      }),
      n.d(f, "mul", function () {
        return G;
      }),
      n.d(f, "multinomial", function () {
        return Ka;
      }),
      n.d(f, "notEqual", function () {
        return Xa;
      }),
      n.d(f, "oneHot", function () {
        return zr;
      }),
      n.d(f, "outerProduct", function () {
        return Ya;
      }),
      n.d(f, "pad", function () {
        return Sn;
      }),
      n.d(f, "pad1d", function () {
        return Ja;
      }),
      n.d(f, "pad2d", function () {
        return Qa;
      }),
      n.d(f, "pad3d", function () {
        return Za;
      }),
      n.d(f, "pad4d", function () {
        return ti;
      }),
      n.d(f, "pool", function () {
        return ei;
      }),
      n.d(f, "pow", function () {
        return hn;
      }),
      n.d(f, "prelu", function () {
        return ni;
      }),
      n.d(f, "rand", function () {
        return ri;
      }),
      n.d(f, "randomGamma", function () {
        return ui;
      }),
      n.d(f, "randomNormal", function () {
        return ci;
      }),
      n.d(f, "randomUniform", function () {
        return li;
      }),
      n.d(f, "real", function () {
        return hi.a;
      }),
      n.d(f, "relu", function () {
        return di;
      }),
      n.d(f, "relu6", function () {
        return pi;
      }),
      n.d(f, "selu", function () {
        return fi;
      }),
      n.d(f, "separableConv2d", function () {
        return mi;
      }),
      n.d(f, "spaceToBatchND", function () {
        return pe;
      }),
      n.d(f, "split", function () {
        return ge;
      }),
      n.d(f, "square", function () {
        return pt;
      }),
      n.d(f, "squaredDifference", function () {
        return gi;
      }),
      n.d(f, "sub", function () {
        return Me;
      }),
      n.d(f, "tile", function () {
        return je;
      }),
      n.d(f, "truncatedNormal", function () {
        return bi;
      }),
      n.d(f, "booleanMaskAsync", function () {
        return ki;
      }),
      n.d(f, "reverse", function () {
        return Ni;
      }),
      n.d(f, "reverse1d", function () {
        return Ri;
      }),
      n.d(f, "reverse2d", function () {
        return Ai;
      }),
      n.d(f, "reverse3d", function () {
        return Ti;
      }),
      n.d(f, "reverse4d", function () {
        return _i;
      }),
      n.d(f, "slice", function () {
        return $n;
      }),
      n.d(f, "slice1d", function () {
        return Bn;
      }),
      n.d(f, "slice2d", function () {
        return Pn;
      }),
      n.d(f, "slice3d", function () {
        return Ln;
      }),
      n.d(f, "slice4d", function () {
        return zn;
      }),
      n.d(f, "abs", function () {
        return ft;
      }),
      n.d(f, "acos", function () {
        return mt;
      }),
      n.d(f, "acosh", function () {
        return gt;
      }),
      n.d(f, "asin", function () {
        return bt;
      }),
      n.d(f, "asinh", function () {
        return vt;
      }),
      n.d(f, "atan", function () {
        return yt;
      }),
      n.d(f, "atanh", function () {
        return xt;
      }),
      n.d(f, "ceil", function () {
        return wt;
      }),
      n.d(f, "clipByValue", function () {
        return Ct;
      }),
      n.d(f, "cos", function () {
        return Ot;
      }),
      n.d(f, "cosh", function () {
        return Et;
      }),
      n.d(f, "erf", function () {
        return St;
      }),
      n.d(f, "exp", function () {
        return It;
      }),
      n.d(f, "expm1", function () {
        return kt;
      }),
      n.d(f, "floor", function () {
        return Nt;
      }),
      n.d(f, "log", function () {
        return Rt;
      }),
      n.d(f, "log1p", function () {
        return At;
      }),
      n.d(f, "logSigmoid", function () {
        return Tt;
      }),
      n.d(f, "neg", function () {
        return _t;
      }),
      n.d(f, "reciprocal", function () {
        return Dt;
      }),
      n.d(f, "round", function () {
        return Ft;
      }),
      n.d(f, "rsqrt", function () {
        return Mt;
      }),
      n.d(f, "sigmoid", function () {
        return jt;
      }),
      n.d(f, "sign", function () {
        return $t;
      }),
      n.d(f, "isNaN", function () {
        return Bt;
      }),
      n.d(f, "isInf", function () {
        return Pt;
      }),
      n.d(f, "isFinite", function () {
        return Lt;
      }),
      n.d(f, "sin", function () {
        return zt;
      }),
      n.d(f, "sinh", function () {
        return Wt;
      }),
      n.d(f, "softplus", function () {
        return Vt;
      }),
      n.d(f, "sqrt", function () {
        return Ut;
      }),
      n.d(f, "step", function () {
        return Gt;
      }),
      n.d(f, "tan", function () {
        return Ht;
      }),
      n.d(f, "tanh", function () {
        return qt;
      }),
      n.d(f, "all", function () {
        return rt;
      }),
      n.d(f, "any", function () {
        return at;
      }),
      n.d(f, "argMax", function () {
        return it;
      }),
      n.d(f, "argMin", function () {
        return ot;
      }),
      n.d(f, "logSumExp", function () {
        return st;
      }),
      n.d(f, "mean", function () {
        return ut;
      }),
      n.d(f, "min", function () {
        return ct;
      }),
      n.d(f, "moments", function () {
        return lt;
      }),
      n.d(f, "sum", function () {
        return ht;
      }),
      n.d(f, "prod", function () {
        return dt;
      }),
      n.d(f, "equalStrict", function () {
        return Di;
      }),
      n.d(f, "greaterEqualStrict", function () {
        return Fi;
      }),
      n.d(f, "greaterStrict", function () {
        return Mi;
      }),
      n.d(f, "lessEqualStrict", function () {
        return ji;
      }),
      n.d(f, "lessStrict", function () {
        return $i;
      }),
      n.d(f, "notEqualStrict", function () {
        return Bi;
      }),
      n.d(f, "addStrict", function () {
        return Pi;
      }),
      n.d(f, "divStrict", function () {
        return Li;
      }),
      n.d(f, "maximumStrict", function () {
        return zi;
      }),
      n.d(f, "minimumStrict", function () {
        return Wi;
      }),
      n.d(f, "modStrict", function () {
        return Vi;
      }),
      n.d(f, "mulStrict", function () {
        return Ui;
      }),
      n.d(f, "powStrict", function () {
        return Gi;
      }),
      n.d(f, "squaredDifferenceStrict", function () {
        return Hi;
      }),
      n.d(f, "subStrict", function () {
        return qi;
      }),
      n.d(f, "logicalAnd", function () {
        return an;
      }),
      n.d(f, "logicalNot", function () {
        return on;
      }),
      n.d(f, "logicalOr", function () {
        return sn;
      }),
      n.d(f, "logicalXor", function () {
        return un;
      }),
      n.d(f, "where", function () {
        return cn;
      }),
      n.d(f, "whereAsync", function () {
        return ln;
      }),
      n.d(f, "buffer", function () {
        return F;
      }),
      n.d(f, "print", function () {
        return M;
      }),
      n.d(f, "cast", function () {
        return j;
      }),
      n.d(f, "expandDims", function () {
        return $;
      }),
      n.d(f, "reshape", function () {
        return B;
      }),
      n.d(f, "squeeze", function () {
        return P;
      }),
      n.d(f, "stack", function () {
        return L;
      }),
      n.d(f, "unstack", function () {
        return z;
      }),
      n.d(f, "setdiff1dAsync", function () {
        return W;
      }),
      n.d(f, "linspace", function () {
        return _.a;
      }),
      n.d(f, "ones", function () {
        return _.b;
      }),
      n.d(f, "range", function () {
        return _.d;
      }),
      n.d(f, "scalar", function () {
        return _.e;
      }),
      n.d(f, "tensor", function () {
        return _.f;
      }),
      n.d(f, "tensor1d", function () {
        return _.g;
      }),
      n.d(f, "tensor2d", function () {
        return _.h;
      }),
      n.d(f, "tensor3d", function () {
        return _.i;
      }),
      n.d(f, "tensor4d", function () {
        return _.j;
      }),
      n.d(f, "tensor5d", function () {
        return _.k;
      }),
      n.d(f, "tensor6d", function () {
        return _.l;
      }),
      n.d(f, "variable", function () {
        return _.m;
      }),
      n.d(f, "zeros", function () {
        return _.n;
      }),
      n.d(f, "onesLike", function () {
        return _.c;
      }),
      n.d(f, "zerosLike", function () {
        return _.o;
      }),
      n.d(f, "transpose", function () {
        return Ie;
      }),
      n.d(f, "softmax", function () {
        return Ki;
      }),
      n.d(f, "logSoftmax", function () {
        return Xi;
      }),
      n.d(f, "norm", function () {
        return Yi;
      }),
      n.d(f, "gather", function () {
        return Si;
      }),
      n.d(f, "unsortedSegmentSum", function () {
        return Ii;
      }),
      n.d(f, "basicLSTMCell", function () {
        return Ji;
      }),
      n.d(f, "multiRNNCell", function () {
        return Qi;
      }),
      n.d(f, "movingAverage", function () {
        return Zi;
      }),
      n.d(f, "stridedSlice", function () {
        return to;
      }),
      n.d(f, "topk", function () {
        return eo;
      }),
      n.d(f, "scatterND", function () {
        return no;
      }),
      n.d(f, "fft", function () {
        return ro;
      }),
      n.d(f, "ifft", function () {
        return ao;
      }),
      n.d(f, "rfft", function () {
        return io;
      }),
      n.d(f, "irfft", function () {
        return oo;
      }),
      n.d(f, "sparseToDense", function () {
        return so;
      }),
      n.d(f, "gatherND", function () {
        return uo;
      }),
      n.d(f, "dropout", function () {
        return co;
      }),
      n.d(f, "hannWindow", function () {
        return ho;
      }),
      n.d(f, "hammingWindow", function () {
        return po;
      }),
      n.d(f, "frame", function () {
        return fo;
      }),
      n.d(f, "stft", function () {
        return mo;
      }),
      n.d(f, "inTopKAsync", function () {
        return go;
      }),
      n.d(f, "op", function () {
        return I.a;
      }),
      n.d(f, "image", function () {
        return d;
      }),
      n.d(f, "linalg", function () {
        return h;
      }),
      n.d(f, "losses", function () {
        return l;
      }),
      n.d(f, "spectral", function () {
        return u;
      }),
      n.d(f, "fused", function () {
        return p;
      }),
      n.d(f, "signal", function () {
        return c;
      });
    var m = {};
    n.r(m),
      n.d(m, "axesAreInnerMostDims", function () {
        return K;
      }),
      n.d(m, "combineLocations", function () {
        return X;
      }),
      n.d(m, "computeOutAndReduceShapes", function () {
        return Y;
      }),
      n.d(m, "expandShapeToKeepDim", function () {
        return J;
      }),
      n.d(m, "assertAxesAreInnerMostDims", function () {
        return Q;
      }),
      n.d(m, "getAxesPermutation", function () {
        return Z;
      }),
      n.d(m, "getUndoAxesPermutation", function () {
        return tt;
      }),
      n.d(m, "getInnerMostAxes", function () {
        return et;
      }),
      n.d(m, "getBroadcastDims", function () {
        return y;
      }),
      n.d(m, "getReductionAxes", function () {
        return x;
      }),
      n.d(m, "assertAndGetBroadcastShape", function () {
        return w;
      }),
      n.d(m, "assertParamsConsistent", function () {
        return A;
      }),
      n.d(m, "computeOutShape", function () {
        return T;
      }),
      n.d(m, "computePool2DInfo", function () {
        return Xt;
      }),
      n.d(m, "computePool3DInfo", function () {
        return Yt;
      }),
      n.d(m, "computeConv2DInfo", function () {
        return Jt;
      }),
      n.d(m, "computeConv3DInfo", function () {
        return Qt;
      }),
      n.d(m, "computeDefaultPad", function () {
        return Zt;
      }),
      n.d(m, "tupleValuesAreOne", function () {
        return ae;
      }),
      n.d(m, "eitherStridesOrDilationsAreOne", function () {
        return ie;
      }),
      n.d(m, "convertConv2DDataFormat", function () {
        return oe;
      }),
      n.d(m, "PARALLELIZE_THRESHOLD", function () {
        return vi;
      }),
      n.d(m, "computeOptimalWindowSize", function () {
        return yi;
      }),
      n.d(m, "nonMaxSuppressionV3", function () {
        return Do;
      }),
      n.d(m, "nonMaxSuppressionV5", function () {
        return Fo;
      }),
      n.d(m, "upcastType", function () {
        return us.b;
      }),
      n.d(m, "getReshaped", function () {
        return ds;
      }),
      n.d(m, "getPermuted", function () {
        return ps;
      }),
      n.d(m, "getReshapedPermuted", function () {
        return fs;
      }),
      n.d(m, "getSliceBeginCoords", function () {
        return ms;
      }),
      n.d(m, "getSliceSize", function () {
        return gs;
      }),
      n.d(m, "prepareAndValidate", function () {
        return Gr;
      }),
      n.d(m, "validateUpdateShape", function () {
        return Hr;
      }),
      n.d(m, "validateInput", function () {
        return qr;
      }),
      n.d(m, "calculateShapes", function () {
        return Kr;
      }),
      n.d(m, "SELU_SCALEALPHA", function () {
        return gn;
      }),
      n.d(m, "SELU_SCALE", function () {
        return bn;
      }),
      n.d(m, "shouldFuse", function () {
        return qo;
      }),
      n.d(m, "ERF_P", function () {
        return bs;
      }),
      n.d(m, "ERF_A1", function () {
        return vs;
      }),
      n.d(m, "ERF_A2", function () {
        return ys;
      }),
      n.d(m, "ERF_A3", function () {
        return xs;
      }),
      n.d(m, "ERF_A4", function () {
        return ws;
      }),
      n.d(m, "ERF_A5", function () {
        return Cs;
      }),
      n.d(m, "warn", function () {
        return Os;
      }),
      n.d(m, "log", function () {
        return Es;
      }),
      n.d(m, "mergeRealAndImagArrays", function () {
        return Ss;
      }),
      n.d(m, "splitRealAndImagArrays", function () {
        return Is;
      }),
      n.d(m, "complexWithEvenIndex", function () {
        return ks;
      }),
      n.d(m, "complexWithOddIndex", function () {
        return Ns;
      }),
      n.d(m, "getComplexWithIndex", function () {
        return Rs;
      }),
      n.d(m, "assignToTypedArray", function () {
        return As;
      }),
      n.d(m, "exponents", function () {
        return Ts;
      }),
      n.d(m, "exponent", function () {
        return _s;
      }),
      n.d(m, "segment_util", function () {
        return s;
      }),
      n.d(m, "castTensor", function () {
        return Ds;
      }),
      n.d(m, "reshapeTensor", function () {
        return Fs;
      }),
      n.d(m, "linspaceImpl", function () {
        return Ms;
      });
    var g = {};
    n.r(g),
      n.d(g, "nonMaxSuppressionV3", function () {
        return Do;
      }),
      n.d(g, "nonMaxSuppressionV5", function () {
        return Fo;
      }),
      n.d(g, "split", function () {
        return $s;
      }),
      n.d(g, "tile", function () {
        return Bs;
      }),
      n.d(g, "topkImpl", function () {
        return Ps;
      }),
      n.d(g, "whereImpl", function () {
        return rn;
      });
    var b = n(6),
      v = (n(67), n(8));
    /**
     * @license
     * Copyright 2017 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function y(t, e) {
      const n = t.length,
        r = [];
      for (let a = 0; a < n; a++) {
        const i = n - 1 - a,
          o = t[i] || 1;
        (e[e.length - 1 - a] || 1) > 1 && 1 === o && r.unshift(i);
      }
      return r;
    }
    function x(t, e) {
      const n = [];
      for (let r = 0; r < e.length; r++) {
        const a = t[t.length - r - 1],
          i = e.length - r - 1,
          o = e[i];
        (null == a || (1 === a && o > 1)) && n.unshift(i);
      }
      return n;
    }
    function w(t, e) {
      const n = [],
        r = Math.max(t.length, e.length);
      for (let a = 0; a < r; a++) {
        let r = t[t.length - a - 1];
        null == r && (r = 1);
        let i = e[e.length - a - 1];
        if ((null == i && (i = 1), 1 === r)) n.unshift(i);
        else if (1 === i) n.unshift(r);
        else {
          if (r !== i) {
            throw Error(
              `Operands could not be broadcast together with shapes ${t} and ${e}.`
            );
          }
          n.unshift(r);
        }
      }
      return n;
    }
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const C = {
        kernelName: v.a,
        inputsToSave: ["a", "b"],
        gradFunc: (t, e) => {
          const [n, r] = e,
            a = w(n.shape, r.shape);
          return {
            a: () => {
              let e = t;
              const r = x(n.shape, a);
              return r.length > 0 && (e = e.sum(r)), e.reshape(n.shape);
            },
            b: () => {
              let e = t;
              const n = x(r.shape, a);
              return n.length > 0 && (e = e.sum(n)), e.reshape(r.shape);
            },
          };
        },
      },
      O = {
        kernelName: v.b,
        saveAllInputs: !0,
        gradFunc: (t, e) => {
          const n = {};
          return (
            e.forEach((e, r) => {
              n[r] = () => t.clone();
            }),
            n
          );
        },
      };
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ var E = n(12),
      S = n(3),
      I = n(5);
    const k = Object(I.a)({
      add_:
        /**
         * @license
         * Copyright 2020 Google Inc. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (t, e) {
          let n = Object(S.a)(t, "a", "add"),
            r = Object(S.a)(e, "b", "add");
          [n, r] = Object(E.makeTypesMatch)(n, r);
          const a = { a: n, b: r };
          return b.a.runKernelFunc(
            (t, e) => {
              const a = t.add(n, r);
              return e([n, r]), a;
            },
            a,
            null,
            v.a
          );
        },
    });
    var N = n(9),
      R = n(1);
    /**
     * @license
     * Copyright 2017 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function A(t, e) {
      const n = t[0].length;
      t.forEach((t, e) => {
        R.assert(
          t.length === n,
          () =>
            `Error in concat${n}D: rank of tensors[${e}] must be the same as the rank of the rest (${n})`
        );
      }),
        R.assert(
          e >= 0 && e < n,
          () => `Error in concat${n}D: axis must be between 0 and ${n - 1}.`
        );
      const r = t[0];
      t.forEach((t, a) => {
        for (let i = 0; i < n; i++)
          R.assert(
            i === e || t[i] === r[i],
            () =>
              `Error in concat${n}D: Shape of tensors[${a}] (${t}) does not match the shape of the rest (${r}) along the non-concatenated axis ${a}.`
          );
      });
    }
    function T(t, e) {
      const n = t[0].slice();
      for (let r = 1; r < t.length; r++) n[e] += t[r][e];
      return n;
    }
    var _ = n(10);
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const D = Object(I.a)({
      concat_: function (t, e = 0) {
        Object(R.assert)(
          t.length >= 1,
          () => "Pass at least one tensor to concat"
        );
        let n = Object(S.b)(t, "tensors", "concat");
        "complex64" === n[0].dtype &&
          n.forEach((t) => {
            if ("complex64" !== t.dtype)
              throw new Error(
                `Cannot concatenate complex64 tensors with a tensor\n          with dtype ${t.dtype}. `
              );
          });
        const r = Object(R.parseAxisParam)(e, n[0].shape)[0],
          a = T(
            n.map((t) => t.shape),
            r
          );
        if (0 === Object(R.sizeFromShape)(a)) return Object(_.f)([], a);
        if (((n = n.filter((t) => t.size > 0)), 1 === n.length)) return n[0];
        A(
          n.map((t) => t.shape),
          r
        );
        const i = n,
          o = { axis: e };
        return b.a.runKernelFunc(
          (t, e) => {
            const a = t.concat(n, r);
            return e(n), a;
          },
          i,
          null,
          v.l,
          o
        );
      },
    });
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function F(t, e = "float32", n) {
      return (
        (e = e || "float32"),
        R.assertNonNegativeIntegerDimensions(t),
        new N.b(t, e, n)
      );
    }
    function M(t, e = !1) {
      console.log(t.toString(e));
    }
    const j = Object(I.a)({
        cast_: function (t, e) {
          const n = Object(S.a)(t, "x", "cast");
          if (!R.isValidDtype(e))
            throw new Error("Failed to cast to unknown dtype " + e);
          if (
            ("string" === e && "string" !== n.dtype) ||
            ("string" !== e && "string" === n.dtype)
          )
            throw new Error("Only strings can be casted to strings");
          const r = { dtype: e };
          return b.a.runKernelFunc(
            (t) => t.cast(n, e),
            { x: n },
            (t) => ({ x: () => t.clone() }),
            "Cast",
            r
          );
        },
      }),
      $ = Object(I.a)({
        expandDims_: function (t, e = 0) {
          const n = Object(S.a)(t, "x", "expandDims", null);
          R.assert(e <= n.rank, () => "Axis must be <= rank of the tensor");
          const r = n.shape.slice();
          return (
            e < 0 &&
              (R.assert(
                -(n.rank + 1) <= e,
                () =>
                  `Axis must be in the interval [${-(n.rank + 1)}, ${n.rank}]`
              ),
              (e = n.rank + e + 1)),
            r.splice(e, 0, 1),
            B(n, r)
          );
        },
      }),
      B = Object(I.a)({
        reshape_: function (t, e) {
          const n = Object(S.a)(t, "x", "reshape", null);
          (e = R.inferFromImplicitShape(e, n.size)),
            R.assert(
              n.size === R.sizeFromShape(e),
              () =>
                "new shape and old shape must have the same number of elements."
            );
          const r = { shape: e };
          return b.a.runKernelFunc(
            (t) => t.reshape(n, e),
            { x: n },
            (t) => ({ x: () => t.reshape(n.shape) }),
            "Reshape",
            r
          );
        },
      }),
      P = Object(I.a)({
        squeeze_: function (t, e) {
          const n = Object(S.a)(t, "x", "squeeze");
          return B(n, R.squeezeShape(n.shape, e).newShape);
        },
      }),
      L = Object(I.a)({
        stack_: function (t, e = 0) {
          const n = Object(S.b)(t, "tensors", "stack");
          if (
            (R.assert(
              n.length >= 1,
              () => "Pass at least one tensor to tf.stack"
            ),
            1 === n.length)
          )
            return n[0].expandDims(e);
          const r = n[0].rank,
            a = n[0].shape,
            i = n[0].dtype;
          R.assert(e <= r, () => "Axis must be <= rank of the tensor"),
            n.forEach((t) => {
              R.assertShapesMatch(
                a,
                t.shape,
                "All tensors passed to stack must have matching shapes"
              );
            }),
            n.forEach((t) => {
              R.assert(
                i === t.dtype,
                () => "All tensors passed to stack must have matching dtypes"
              );
            });
          const o = n.map((t) => t.expandDims(e));
          return D(o, e);
        },
      }),
      z = Object(I.a)({
        unstack_: function (t, e = 0) {
          e = e || 0;
          const n = Object(S.a)(t, "x", "unstack");
          R.assert(
            e >= -n.shape.length && e < n.shape.length,
            () =>
              `Axis = ${e} is not in [-${n.shape.length}, ${n.shape.length})`
          ),
            e < 0 && (e += n.shape.length);
          const r = { axis: e };
          return b.a.runKernelFunc(
            (t) => t.unstack(n, e),
            { x: n },
            (t) => ({ x: () => L(t, e) }),
            "Unpack",
            r
          );
        },
      }),
      W = async function (t, e) {
        const n = Object(S.a)(t, "x", "setdiff1d"),
          r = Object(S.a)(e, "y", "setdiff1d");
        R.assert(
          n.dtype === r.dtype,
          () =>
            `x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`
        ),
          R.assert(
            1 === n.rank,
            () => `x should be 1D tensor, but got x (${n.shape}).`
          ),
          R.assert(
            1 === r.rank,
            () => `y should be 1D tensor, but got y (${r.shape}).`
          );
        const a = await n.data(),
          i = await r.data(),
          o = new Set(i);
        let s = 0;
        for (let t = 0; t < a.length; t++) o.has(a[t]) || s++;
        const u = new N.b([s], n.dtype),
          c = new N.b([s], "int32");
        for (let t = 0, e = 0; t < a.length; t++)
          o.has(a[t]) || ((u.values[e] = a[t]), (c.values[e] = t), e++);
        return [u.toTensor(), c.toTensor()];
      };
    const V = Object(I.a)({
      floorDiv_:
        /**
         * @license
         * Copyright 2020 Google Inc. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (t, e) {
          let n = Object(S.a)(t, "a", "floorDiv"),
            r = Object(S.a)(e, "b", "floorDiv");
          [n, r] = Object(E.makeTypesMatch)(n, r);
          const a = { a: n, b: r };
          return b.a.runKernelFunc(
            (t, e) => {
              const a = t.floorDiv(n, r);
              return e([n, r]), a;
            },
            a,
            null,
            v.D
          );
        },
    });
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const U = Object(I.a)({
      div_: function (t, e) {
        let n = Object(S.a)(t, "a", "div"),
          r = Object(S.a)(e, "b", "div");
        if (
          (([n, r] = Object(E.makeTypesMatch)(n, r)),
          "int32" === n.dtype && "int32" === r.dtype)
        )
          return V(n, r);
        const a = { a: n, b: r };
        return b.a.runKernelFunc(
          (t, e) => {
            const a = t.realDivide(n, r);
            return e([n, r]), a;
          },
          a,
          null,
          v.y,
          {}
        );
      },
    });
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const G = Object(I.a)({
      mul_: function (t, e) {
        let n = Object(S.a)(t, "a", "mul"),
          r = Object(S.a)(e, "b", "mul");
        [n, r] = Object(E.makeTypesMatch)(n, r);
        const a = { a: n, b: r };
        return b.a.runKernelFunc(
          (t, e) => {
            const a = t.multiply(n, r);
            return e([n, r]), a;
          },
          a,
          null,
          v.Y
        );
      },
    });
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function H(t, e) {
      R.assert(
        R.isFunction(t),
        () => "The f passed in variableGrads(f) must be a function"
      ),
        R.assert(
          null == e || (Array.isArray(e) && e.every((t) => t instanceof N.c)),
          () =>
            "The varList passed in variableGrads(f, varList) must be an array of variables"
        );
      const n = null != e;
      if (!n) {
        e = [];
        for (const t in b.a.registeredVariables)
          e.push(b.a.registeredVariables[t]);
      }
      const r = n ? e.filter((t) => !t.trainable) : null,
        a = e.length;
      (e = e.filter((t) => t.trainable)),
        R.assert(
          e.length > 0,
          () =>
            `variableGrads() expects at least one of the input variables to be trainable, but none of the ${a} variables is trainable.`
        );
      const { value: i, grads: o } = b.a.gradients(t, e, null, !0);
      R.assert(
        o.some((t) => null != t),
        () =>
          "Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."
      ),
        R.assert(
          0 === i.rank,
          () =>
            `The f passed in variableGrads(f) must return a scalar, but it returned a rank-${i.rank} tensor`
        );
      const s = {};
      return (
        e.forEach((t, e) => {
          null != o[e] && (s[t.name] = o[e]);
        }),
        null != r && r.forEach((t) => (s[t.name] = null)),
        { value: i, grads: s }
      );
    }
    function q(t) {
      return b.a.customGrad(t);
    }
    /**
     * @license
     * Copyright 2017 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function K(t, e) {
      for (let n = 0; n < t.length; ++n)
        if (t[t.length - n - 1] !== e - 1 - n) return !1;
      return !0;
    }
    function X(t, e, n) {
      const r = t.length + e.length,
        a = [];
      let i = 0,
        o = 0;
      for (let s = 0; s < r; s++)
        -1 === n.indexOf(s) ? a.push(t[i++]) : a.push(e[o++]);
      return a;
    }
    function Y(t, e) {
      const n = [],
        r = t.length;
      for (let a = 0; a < r; a++) -1 === e.indexOf(a) && n.push(t[a]);
      return [n, e.map((e) => t[e])];
    }
    function J(t, e) {
      return X(
        t,
        e.map((t) => 1),
        e
      );
    }
    function Q(t, e, n) {
      R.assert(
        K(e, n),
        () =>
          t +
          " supports only inner-most axes for now. " +
          `Got axes ${e} and rank-${n} input.`
      );
    }
    function Z(t, e) {
      if (K(t, e)) return null;
      const n = [];
      for (let r = 0; r < e; ++r) -1 === t.indexOf(r) && n.push(r);
      return t.forEach((t) => n.push(t)), n;
    }
    function tt(t) {
      return t
        .map((t, e) => [e, t])
        .sort((t, e) => t[1] - e[1])
        .map((t) => t[0]);
    }
    function et(t, e) {
      const n = [];
      for (let r = e - t; r < e; ++r) n.push(r);
      return n;
    }
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function nt(t, e, n, r, a) {
      return (
        e.rank < n.rank && (e = e.reshape(J(e.shape, r))),
        t.rank < n.rank && (t = t.reshape(J(t.shape, r))),
        {
          x: () => {
            const r = t.mul(n.equal(e).cast(t.dtype));
            return null == a ? r : r.transpose(a);
          },
        }
      );
    }
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const rt = Object(I.a)({
        all_: function (t, e = null, n = !1) {
          let r = Object(S.a)(t, "x", "all", "bool");
          const a = R.parseAxisParam(e, r.shape);
          let i = a;
          const o = Z(i, r.rank);
          null != o && ((r = r.transpose(o)), (i = et(i.length, r.rank)));
          const s = b.a.runKernelFunc((t) => t.all(r, i), { $x: r });
          if (n) {
            const t = J(s.shape, a);
            return s.reshape(t);
          }
          return s;
        },
      }),
      at = Object(I.a)({
        any_: function (t, e = null, n = !1) {
          let r = Object(S.a)(t, "x", "any", "bool");
          const a = R.parseAxisParam(e, r.shape);
          let i = a;
          const o = Z(i, r.rank);
          null != o && ((r = r.transpose(o)), (i = et(i.length, r.rank)));
          const s = b.a.runKernelFunc((t) => t.any(r, i), { $x: r });
          if (n) {
            const t = J(s.shape, a);
            return s.reshape(t);
          }
          return s;
        },
      }),
      it = Object(I.a)({
        argMax_: function (t, e = 0) {
          let n = Object(S.a)(t, "x", "argMax");
          null == e && (e = 0);
          let r = R.parseAxisParam(e, n.shape);
          const a = Z(r, n.rank);
          null != a && ((n = n.transpose(a)), (r = et(r.length, n.rank)));
          const i = { axis: r[0] },
            o = [n];
          return b.a.runKernelFunc(
            (t, e) => {
              const a = t.argMax(n, r[0]);
              return e([n]), a;
            },
            { x: n },
            (t, e) => {
              const [n] = e;
              return { x: () => Object(_.o)(n) };
            },
            "ArgMax",
            i,
            o
          );
        },
      }),
      ot = Object(I.a)({
        argMin_: function (t, e = 0) {
          let n = Object(S.a)(t, "x", "argMin");
          null == e && (e = 0);
          let r = R.parseAxisParam(e, n.shape);
          const a = Z(r, n.rank);
          return (
            null != a && ((n = n.transpose(a)), (r = et(r.length, n.rank))),
            b.a.runKernelFunc(
              (t, e) => {
                const a = t.argMin(n, r[0]);
                return e([n]), a;
              },
              { $x: n },
              (t, e) => {
                const [n] = e;
                return { $x: () => Object(_.o)(n) };
              }
            )
          );
        },
      }),
      st = Object(I.a)({
        logSumExp_: function (t, e = null, n = !1) {
          const r = Object(S.a)(t, "x", "logSumExp"),
            a = R.parseAxisParam(e, r.shape),
            i = r.max(a, !0),
            o = r.sub(i).exp().sum(a).log(),
            s = i.reshape(o.shape).add(o);
          if (n) {
            const t = J(s.shape, a);
            return s.reshape(t);
          }
          return s;
        },
      }),
      ut = Object(I.a)({
        mean_: function (t, e = null, n = !1) {
          const r = Object(S.a)(t, "x", "mean"),
            a = R.parseAxisParam(e, r.shape),
            i = Y(r.shape, a)[1],
            o = R.sizeFromShape(i);
          return q((t) => {
            const r = Object(_.e)(o);
            return {
              value: (r.dtype === t.dtype ? t : t.cast(r.dtype))
                .div(r)
                .sum(e, n),
              gradFunc: (e) => {
                const n = t.shape.slice();
                a.forEach((t) => {
                  n[t] = 1;
                });
                return e.reshape(n).mul(Object(_.b)(t.shape, "float32")).div(o);
              },
            };
          })(r);
        },
      }),
      ct = Object(I.a)({
        min_: function (t, e = null, n = !1) {
          let r = Object(S.a)(t, "x", "min");
          const a = r,
            i = R.parseAxisParam(e, r.shape);
          let o = i;
          const s = Z(o, r.rank);
          null != s && ((r = r.transpose(s)), (o = et(o.length, r.rank)));
          const u = [r];
          let c = b.a.runKernelFunc(
            (t, e) => {
              const n = t.min(r, o);
              return e([a, n]), n;
            },
            { x: r },
            (t, e) => nt(t, e[1], e[0], i, s),
            "Min",
            { axes: o },
            u,
            [!0]
          );
          if (n) {
            const t = J(c.shape, i);
            c = c.reshape(t);
          }
          return c;
        },
      }),
      lt = Object(I.a)({
        moments_: function (t, e = null, n = !1) {
          t = Object(S.a)(t, "x", "moments");
          const r = R.parseAxisParam(e, t.shape),
            a = t.mean(r, n);
          let i = a.shape;
          n || (i = J(a.shape, r));
          const o = t.toFloat().sub(a.reshape(i)).square();
          return { mean: a, variance: o.mean(r, n) };
        },
      }),
      ht = Object(I.a)({
        sum_: function (t, e = null, n = !1) {
          let r = Object(S.a)(t, "x", "sum");
          "bool" === r.dtype && (r = r.toInt());
          const a = R.parseAxisParam(e, r.shape);
          return q((t) => {
            const e = Z(a, t.rank);
            let r = a,
              i = t;
            null != e && ((i = t.transpose(e)), (r = et(r.length, t.rank)));
            const o = (e) => {
                const n = t.shape.slice();
                a.forEach((t) => {
                  n[t] = 1;
                });
                return e.reshape(n).mul(Object(_.b)(t.shape, "float32"));
              },
              s = { axes: r };
            let u = b.a.runKernelFunc(
              (t) => t.sum(i, r),
              { x: i },
              (t) => ({ x: () => o(t) }),
              "Sum",
              s
            );
            if (n) {
              const t = J(u.shape, a);
              u = u.reshape(t);
            }
            return { value: u, gradFunc: o };
          })(r);
        },
      }),
      dt = Object(I.a)({
        prod_: function (t, e = null, n = !1) {
          let r = Object(S.a)(t, "x", "prod");
          "bool" === r.dtype && (r = r.toInt());
          const a = R.parseAxisParam(e, r.shape),
            i = Z(a, r.rank);
          let o = a,
            s = r;
          null != i && ((s = r.transpose(i)), (o = et(o.length, r.rank)));
          let u = b.a.runKernelFunc((t) => t.prod(s, o), { permutedX: s });
          if (n) {
            const t = J(u.shape, a);
            u = u.reshape(t);
          }
          return u;
        },
      });
    const pt = Object(I.a)({
      square_:
        /**
         * @license
         * Copyright 2019 Google Inc. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (t) {
          const e = Object(S.a)(t, "x", "square"),
            n = [e];
          return b.a.runKernelFunc(
            (t, n) => (n([e]), t.square(e)),
            { x: e },
            null,
            "Square",
            {},
            n,
            []
          );
        },
    });
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const ft = Object(I.a)({
        abs_: function (t) {
          const e = Object(S.a)(t, "x", "abs");
          return "complex64" === e.dtype
            ? b.a.runKernelFunc((t) => t.complexAbs(e), { $x: e })
            : b.a.runKernelFunc(
                (t, n) => {
                  const r = t.abs(e);
                  return n([e]), r;
                },
                { x: e },
                (t, e) => {
                  const [n] = e;
                  return { x: () => t.mul(n.toFloat().step(-1)) };
                },
                "Abs"
              );
        },
      }),
      mt = Object(I.a)({
        acos_: function (t) {
          const e = Object(S.a)(t, "x", "acos");
          return b.a.runKernelFunc(
            (t, n) => {
              const r = t.acos(e);
              return n([e]), r;
            },
            { $x: e },
            (t, e) => {
              const [n] = e;
              return {
                $x: () => {
                  const e = n.toFloat().square(),
                    r = Object(_.e)(1).sub(e).sqrt();
                  return t.div(r).neg();
                },
              };
            }
          );
        },
      }),
      gt = Object(I.a)({
        acosh_: function (t) {
          const e = Object(S.a)(t, "x", "acosh");
          return b.a.runKernelFunc(
            (t, n) => {
              const r = t.acosh(e);
              return n([e]), r;
            },
            { $x: e },
            (t, e) => {
              const [n] = e;
              return {
                $x: () => {
                  const e = n.toFloat().square().sub(1).sqrt();
                  return t.div(e);
                },
              };
            }
          );
        },
      }),
      bt = Object(I.a)({
        asin_: function (t) {
          const e = Object(S.a)(t, "x", "asin");
          return b.a.runKernelFunc(
            (t, n) => {
              const r = t.asin(e);
              return n([e]), r;
            },
            { $x: e },
            (t, e) => {
              const [n] = e;
              return {
                $x: () =>
                  t.div(Object(_.e)(1).sub(n.toFloat().square()).sqrt()),
              };
            }
          );
        },
      }),
      vt = Object(I.a)({
        asinh_: function (t) {
          const e = Object(S.a)(t, "x", "asinh");
          return b.a.runKernelFunc(
            (t, n) => {
              const r = t.asinh(e);
              return n([e]), r;
            },
            { $x: e },
            (t, e) => {
              const [n] = e;
              return {
                $x: () => {
                  const e = Object(_.e)(1).add(n.toFloat().square()).sqrt();
                  return t.div(e);
                },
              };
            }
          );
        },
      }),
      yt = Object(I.a)({
        atan_: function (t) {
          const e = Object(S.a)(t, "x", "atan");
          return b.a.runKernelFunc(
            (t, n) => {
              const r = t.atan(e);
              return n([e]), r;
            },
            { $x: e },
            (t, e) => {
              const [n] = e;
              return { $x: () => t.div(n.toFloat().square().add(1)) };
            }
          );
        },
      }),
      xt = Object(I.a)({
        atanh_: function (t) {
          const e = Object(S.a)(t, "x", "atanh");
          return b.a.runKernelFunc(
            (t, n) => {
              const r = t.atanh(e);
              return n([e]), r;
            },
            { $x: e },
            (t, e) => {
              const [n] = e;
              return {
                $x: () => t.div(Object(_.e)(1).sub(n.toFloat().square())),
              };
            }
          );
        },
      }),
      wt = Object(I.a)({
        ceil_: function (t) {
          const e = Object(S.a)(t, "x", "ceil");
          return b.a.runKernelFunc(
            (t) => t.ceil(e),
            { $x: e },
            (t) => ({ $x: () => Object(_.o)(t) })
          );
        },
      }),
      Ct = Object(I.a)({
        clipByValue_: function (t, e, n) {
          const r = Object(S.a)(t, "x", "clipByValue");
          R.assert(
            e <= n,
            () =>
              `Error in clip: min (${e}) must be less than or equal to max (${n}).`
          );
          const a = [r],
            i = { min: e, max: n };
          return b.a.runKernelFunc(
            (t, a) => {
              const i = t.clip(r, e, n);
              return a([r]), i;
            },
            { x: r },
            (t, r) => {
              const [a] = r;
              return {
                x: () =>
                  t.where(
                    a.greaterEqual(e).logicalAnd(a.lessEqual(n)),
                    Object(_.o)(t)
                  ),
              };
            },
            "ClipByValue",
            i,
            a
          );
        },
      }),
      Ot = Object(I.a)({
        cos_: function (t) {
          const e = Object(S.a)(t, "x", "cos"),
            n = [e];
          return b.a.runKernelFunc(
            (t, n) => {
              const r = t.cos(e);
              return n([e]), r;
            },
            { x: e },
            (t, e) => {
              const [n] = e;
              return { x: () => n.toFloat().sin().neg().mul(t) };
            },
            "Cos",
            {},
            n
          );
        },
      }),
      Et = Object(I.a)({
        cosh_: function (t) {
          const e = Object(S.a)(t, "x", "cosh");
          return b.a.runKernelFunc(
            (t, n) => {
              const r = t.cosh(e);
              return n([e]), r;
            },
            { $x: e },
            (t, e) => {
              const [n] = e;
              return { $x: () => n.toFloat().sinh().mul(t) };
            }
          );
        },
      }),
      St = Object(I.a)({
        erf_: function (t) {
          let e = Object(S.a)(t, "x", "erf");
          return (
            R.assert(
              "int32" === e.dtype || "float32" === e.dtype,
              () => "Input dtype must be `int32` or `float32`."
            ),
            "int32" === e.dtype && (e = e.toFloat()),
            b.a.runKernelFunc(
              (t, n) => {
                const r = t.erf(e);
                return n([e]), r;
              },
              { $x: e },
              (t, e) => {
                const [n] = e;
                return {
                  $x: () =>
                    t.mul(
                      n
                        .square()
                        .neg()
                        .exp()
                        .mul(2 / Math.sqrt(Math.PI))
                    ),
                };
              }
            )
          );
        },
      }),
      It = Object(I.a)({
        exp_: function (t) {
          const e = Object(S.a)(t, "x", "exp");
          return b.a.runKernelFunc(
            (t, n) => {
              const r = t.exp(e);
              return n([r]), r;
            },
            { x: e },
            (t, e) => ({ x: () => t.mul(e[0]) }),
            "Exp",
            {},
            [],
            [!0]
          );
        },
      }),
      kt = Object(I.a)({
        expm1_: function (t) {
          const e = Object(S.a)(t, "x", "expm1");
          return b.a.runKernelFunc(
            (t, n) => {
              const r = t.expm1(e);
              return n([e]), r;
            },
            { $x: e },
            (t, e) => {
              const [n] = e;
              return { $x: () => t.mul(n.exp()) };
            }
          );
        },
      }),
      Nt = Object(I.a)({
        floor_: function (t) {
          const e = Object(S.a)(t, "x", "floor");
          return b.a.runKernelFunc(
            (t) => t.floor(e),
            { $x: e },
            (t) => ({ $x: () => Object(_.o)(t) })
          );
        },
      }),
      Rt = Object(I.a)({
        log_: function (t) {
          const e = Object(S.a)(t, "x", "log"),
            n = [e];
          return b.a.runKernelFunc(
            (t, n) => {
              const r = t.log(e);
              return n([e]), r;
            },
            { x: e },
            (t, e) => {
              const [n] = e;
              return { x: () => t.div(n.toFloat()) };
            },
            "Log",
            {},
            n
          );
        },
      }),
      At = Object(I.a)({
        log1p_: function (t) {
          const e = Object(S.a)(t, "x", "log1p");
          return b.a.runKernelFunc(
            (t, n) => {
              const r = t.log1p(e);
              return n([e]), r;
            },
            { $x: e },
            (t, e) => {
              const [n] = e;
              return { $x: () => t.div(n.add(1)) };
            }
          );
        },
      }),
      Tt = Object(I.a)({
        logSigmoid_: function (t) {
          const e = Object(S.a)(t, "x", "logSigmoid");
          return b.a.runKernelFunc(
            (t, n) => {
              const r = t.softplus(e.neg()).neg();
              return n([e]), r;
            },
            { $x: e },
            (t, e) => {
              const [n] = e;
              return { $x: () => t.mul(n.neg().sigmoid()) };
            }
          );
        },
      }),
      _t = Object(I.a)({
        neg_: function (t) {
          const e = Object(S.a)(t, "x", "neg"),
            n = [e];
          return b.a.runKernelFunc(
            (t) => t.neg(e),
            { x: e },
            (t) => ({ x: () => t.neg() }),
            "Neg",
            {},
            n
          );
        },
      }),
      Dt = Object(I.a)({
        reciprocal_: function (t) {
          const e = Object(S.a)(t, "x", "reciprocal");
          return b.a.runKernelFunc(
            (t, n) => {
              const r = t.reciprocal(e);
              return n([e]), r;
            },
            { $x: e },
            (t, e) => {
              const [n] = e;
              return { $x: () => t.div(n.square().neg()) };
            }
          );
        },
      }),
      Ft = Object(I.a)({
        round_: function (t) {
          const e = Object(S.a)(t, "x", "round");
          return b.a.runKernelFunc(
            (t) => t.round(e),
            { $x: e },
            (t) => ({ $x: () => Object(_.o)(t) })
          );
        },
      }),
      Mt = Object(I.a)({
        rsqrt_: function (t) {
          const e = Object(S.a)(t, "x", "rsqrt"),
            n = [e];
          return b.a.runKernelFunc(
            (t, n) => {
              const r = t.rsqrt(e);
              return n([e]), r;
            },
            { x: e },
            (t, e) => {
              const [n] = e;
              return { x: () => t.div(n.pow(1.5).mul(2)).neg() };
            },
            "Rsqrt",
            {},
            n
          );
        },
      }),
      jt = Object(I.a)({
        sigmoid_: function (t) {
          const e = Object(S.a)(t, "x", "sigmoid");
          return b.a.runKernelFunc(
            (t, n) => {
              const r = t.sigmoid(e);
              return n([r]), r;
            },
            { x: e },
            (t, e) => {
              const [n] = e;
              return { x: () => t.mul(n.mul(Object(_.e)(1).sub(n))) };
            },
            "Sigmoid"
          );
        },
      }),
      $t = Object(I.a)({
        sign_: function (t) {
          const e = Object(S.a)(t, "x", "sign");
          return b.a.runKernelFunc(
            (t) => t.sign(e),
            { $x: e },
            (t) => ({ $x: () => Object(_.o)(t) })
          );
        },
      }),
      Bt = Object(I.a)({
        isNaN_: function (t) {
          const e = Object(S.a)(t, "x", "isNaN");
          return b.a.runKernelFunc(
            (t) => t.isNaN(e),
            { $x: e },
            (t) => ({ $x: () => Object(_.o)(t) })
          );
        },
      }),
      Pt = Object(I.a)({
        isInf_: function (t) {
          const e = Object(S.a)(t, "x", "isInf");
          return b.a.runKernelFunc(
            (t) => t.isInf(e),
            { $x: e },
            (t) => ({ $x: () => Object(_.o)(t) })
          );
        },
      }),
      Lt = Object(I.a)({
        isFinite_: function (t) {
          const e = Object(S.a)(t, "x", "isFinite");
          return b.a.runKernelFunc(
            (t) => t.isFinite(e),
            { $x: e },
            (t) => ({ $x: () => Object(_.o)(t) })
          );
        },
      }),
      zt = Object(I.a)({
        sin_: function (t) {
          const e = Object(S.a)(t, "x", "sin"),
            n = [e];
          return b.a.runKernelFunc(
            (t, n) => {
              const r = t.sin(e);
              return n([e]), r;
            },
            { x: e },
            (t, e) => {
              const [n] = e;
              return { x: () => n.toFloat().cos().mul(t) };
            },
            "Sin",
            {},
            n
          );
        },
      }),
      Wt = Object(I.a)({
        sinh_: function (t) {
          const e = Object(S.a)(t, "x", "sinh");
          return b.a.runKernelFunc(
            (t, n) => {
              const r = t.sinh(e);
              return n([e]), r;
            },
            { $x: e },
            (t, e) => {
              const [n] = e;
              return { $x: () => n.toFloat().cosh().mul(t) };
            }
          );
        },
      }),
      Vt = Object(I.a)({
        softplus_: function (t) {
          const e = Object(S.a)(t, "x", "softplus");
          return b.a.runKernelFunc(
            (t, n) => {
              const r = t.softplus(e);
              return n([e]), r;
            },
            { $x: e },
            (t, e) => {
              const [n] = e;
              return { $x: () => t.mul(n.sigmoid()) };
            }
          );
        },
      }),
      Ut = Object(I.a)({
        sqrt_: function (t) {
          const e = Object(S.a)(t, "x", "sqrt");
          return b.a.runKernelFunc(
            (t, n) => {
              const r = t.sqrt(e);
              return n([e]), r;
            },
            { x: e },
            (t, e) => {
              const [n] = e;
              return { x: () => t.div(n.toFloat().sqrt().mul(2)) };
            },
            "Sqrt",
            {}
          );
        },
      }),
      Gt = Object(I.a)({
        step_: function (t, e = 0) {
          const n = Object(S.a)(t, "x", "step");
          return b.a.runKernelFunc(
            (t) => t.step(n, e),
            { $x: n },
            (t) => ({ $x: () => Object(_.o)(t) })
          );
        },
      }),
      Ht = Object(I.a)({
        tan_: function (t) {
          const e = Object(S.a)(t, "x", "tan");
          return b.a.runKernelFunc(
            (t, n) => {
              const r = t.tan(e);
              return n([e]), r;
            },
            { $x: e },
            (t, e) => {
              const [n] = e;
              return { $x: () => t.div(n.cos().square()) };
            }
          );
        },
      }),
      qt = Object(I.a)({
        tanh_: function (t) {
          const e = Object(S.a)(t, "x", "tanh");
          return b.a.runKernelFunc(
            (t, n) => {
              const r = t.tanh(e);
              return n([r]), r;
            },
            { x: e },
            (t, e) => {
              const [n] = e;
              return { x: () => Object(_.e)(1).sub(n.square()).mul(t) };
            },
            "Tanh",
            {},
            null,
            [!0]
          );
        },
      }),
      Kt = {
        kernelName: v.c,
        inputsToSave: ["a", "b"],
        gradFunc: (t, e) => {
          const [n, r] = e,
            a = w(n.shape, r.shape);
          return {
            a: () => {
              const e = k(pt(n), pt(r));
              let i = G(t, U(r, e));
              const o = x(n.shape, a);
              return o.length > 0 && (i = ht(i, o)), B(i, n.shape);
            },
            b: () => {
              const e = k(pt(n), pt(r));
              let i = _t(G(t, U(n, e)));
              const o = x(r.shape, a);
              return o.length > 0 && (i = ht(i, o)), B(i, r.shape);
            },
          };
        },
      };
    /**
     * @license
     * Copyright 2017 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function Xt(t, e, n, r, a, i, o = "channelsLast") {
      const [s, u] = te(e);
      let c;
      if ("channelsLast" === o) c = [s, u, t[3], t[3]];
      else {
        if ("channelsFirst" !== o) throw new Error("Unknown dataFormat " + o);
        c = [s, u, t[1], t[1]];
      }
      return Jt(t, c, n, r, a, i, !1, o);
    }
    function Yt(t, e, n, r, a, i, o = "NDHWC") {
      const [s, u, c] = ee(e);
      let l, h;
      if ("NDHWC" === o) (h = "channelsLast"), (l = [s, u, c, t[4], t[4]]);
      else {
        if ("NCDHW" !== o) throw new Error("Unknown dataFormat " + o);
        (h = "channelsFirst"), (l = [s, u, c, t[1], t[1]]);
      }
      return Qt(t, l, n, r, a, !1, h, i);
    }
    function Jt(t, e, n, r, a, i, o = !1, s = "channelsLast") {
      let [u, c, l, h] = [-1, -1, -1, -1];
      if ("channelsLast" === s) [u, c, l, h] = t;
      else {
        if ("channelsFirst" !== s) throw new Error("Unknown dataFormat " + s);
        [u, h, c, l] = t;
      }
      const [d, p, , f] = e,
        [m, g] = te(n),
        [b, v] = te(r),
        y = ne(d, b),
        x = ne(p, v),
        { padInfo: w, outHeight: C, outWidth: O } = (function (
          t,
          e,
          n,
          r,
          a,
          i,
          o,
          s,
          u
        ) {
          let c, l, h;
          if ("number" == typeof t) {
            c = {
              top: t,
              bottom: t,
              left: t,
              right: t,
              type: 0 === t ? "VALID" : "NUMBER",
            };
            const a = (function (t, e, n, r, a) {
              null == r && (r = Zt(t, e, n));
              const i = t[0],
                o = t[1],
                s = re((i - e + 2 * r) / n + 1, a);
              R.assert(
                R.isInt(s),
                () =>
                  `The output # of rows (${s}) must be an integer. Change the stride and/or zero pad parameters`
              );
              const u = re((o - e + 2 * r) / n + 1, a);
              return (
                R.assert(
                  R.isInt(u),
                  () =>
                    `The output # of columns (${u}) must be an integer. Change the stride and/or zero pad parameters`
                ),
                [s, u]
              );
            })([e, n], i, r, t, s);
            (l = a[0]), (h = a[1]);
          } else if ("same" === t) {
            (l = Math.ceil(e / r)), (h = Math.ceil(n / a));
            const t = Math.max(0, (l - 1) * r + i - e),
              s = Math.max(0, (h - 1) * a + o - n),
              u = Math.floor(t / 2),
              d = t - u,
              p = Math.floor(s / 2);
            c = { top: u, bottom: d, left: p, right: s - p, type: "SAME" };
          } else if ("valid" === t)
            (c = { top: 0, bottom: 0, left: 0, right: 0, type: "VALID" }),
              (l = Math.ceil((e - i + 1) / r)),
              (h = Math.ceil((n - o + 1) / a));
          else {
            if ("object" != typeof t)
              throw Error("Unknown padding parameter: " + t);
            {
              const d = "channelsLast" === u ? t[1][0] : t[2][0],
                p = "channelsLast" === u ? t[1][1] : t[2][1],
                f = "channelsLast" === u ? t[2][0] : t[3][0],
                m = "channelsLast" === u ? t[2][1] : t[3][1];
              (c = {
                top: d,
                bottom: p,
                left: f,
                right: m,
                type:
                  0 === d && 0 === p && 0 === f && 0 === m
                    ? "VALID"
                    : "EXPLICIT",
              }),
                (l = re((e - i + d + p) / r + 1, s)),
                (h = re((n - o + f + m) / a + 1, s));
            }
          }
          return { padInfo: c, outHeight: l, outWidth: h };
        })(a, c, l, m, g, y, x, i, s),
        E = o ? f * h : f;
      let S;
      return (
        "channelsFirst" === s
          ? (S = [u, E, C, O])
          : "channelsLast" === s && (S = [u, C, O, E]),
        {
          batchSize: u,
          dataFormat: s,
          inHeight: c,
          inWidth: l,
          inChannels: h,
          outHeight: C,
          outWidth: O,
          outChannels: E,
          padInfo: w,
          strideHeight: m,
          strideWidth: g,
          filterHeight: d,
          filterWidth: p,
          effectiveFilterHeight: y,
          effectiveFilterWidth: x,
          dilationHeight: b,
          dilationWidth: v,
          inShape: t,
          outShape: S,
          filterShape: e,
        }
      );
    }
    function Qt(t, e, n, r, a, i = !1, o = "channelsLast", s) {
      let [u, c, l, h, d] = [-1, -1, -1, -1, -1];
      if ("channelsLast" === o) [u, c, l, h, d] = t;
      else {
        if ("channelsFirst" !== o) throw new Error("Unknown dataFormat " + o);
        [u, d, c, l, h] = t;
      }
      const [p, f, m, , g] = e,
        [b, v, y] = ee(n),
        [x, w, C] = ee(r),
        O = ne(p, x),
        E = ne(f, w),
        S = ne(m, C),
        { padInfo: I, outDepth: k, outHeight: N, outWidth: A } = (function (
          t,
          e,
          n,
          r,
          a,
          i,
          o,
          s,
          u,
          c,
          l
        ) {
          let h, d, p, f;
          if ("number" == typeof t) {
            h = {
              top: t,
              bottom: t,
              left: t,
              right: t,
              front: t,
              back: t,
              type: 0 === t ? "VALID" : "NUMBER",
            };
            const i = (function (t, e, n, r, a, i) {
              null == a && (a = Zt(t, e, r));
              const o = t[0],
                s = t[1],
                u = t[2],
                c = re((o - e + 2 * a) / r + 1, i);
              R.assert(
                R.isInt(c),
                () =>
                  `The output # of depths (${c}) must be an integer. Change the stride and/or zero pad parameters`
              );
              const l = re((s - e + 2 * a) / r + 1, i);
              R.assert(
                R.isInt(l),
                () =>
                  `The output # of rows (${l}) must be an integer. Change the stride and/or zero pad parameters`
              );
              const h = re((u - e + 2 * a) / r + 1, i);
              return (
                R.assert(
                  R.isInt(h),
                  () =>
                    `The output # of columns (${h}) must be an integer. Change the stride and/or zero pad parameters`
                ),
                [c, l, h, n]
              );
            })([e, n, r, 1], s, 1, a, t, l);
            (d = i[0]), (p = i[1]), (f = i[2]);
          } else if ("same" === t) {
            (d = Math.ceil(e / a)),
              (p = Math.ceil(n / i)),
              (f = Math.ceil(r / o));
            const t = (d - 1) * a + s - e,
              l = (p - 1) * i + u - n,
              m = (f - 1) * o + c - r,
              g = Math.floor(t / 2),
              b = t - g,
              v = Math.floor(l / 2),
              y = l - v,
              x = Math.floor(m / 2);
            h = {
              top: v,
              bottom: y,
              left: x,
              right: m - x,
              front: g,
              back: b,
              type: "SAME",
            };
          } else {
            if ("valid" !== t) throw Error("Unknown padding parameter: " + t);
            (h = {
              top: 0,
              bottom: 0,
              left: 0,
              right: 0,
              front: 0,
              back: 0,
              type: "VALID",
            }),
              (d = Math.ceil((e - s + 1) / a)),
              (p = Math.ceil((n - u + 1) / i)),
              (f = Math.ceil((r - c + 1) / o));
          }
          return { padInfo: h, outDepth: d, outHeight: p, outWidth: f };
        })(a, c, l, h, b, v, y, O, E, S, s),
        T = i ? g * d : g;
      let _;
      return (
        "channelsFirst" === o
          ? (_ = [u, T, k, N, A])
          : "channelsLast" === o && (_ = [u, k, N, A, T]),
        {
          batchSize: u,
          dataFormat: o,
          inDepth: c,
          inHeight: l,
          inWidth: h,
          inChannels: d,
          outDepth: k,
          outHeight: N,
          outWidth: A,
          outChannels: T,
          padInfo: I,
          strideDepth: b,
          strideHeight: v,
          strideWidth: y,
          filterDepth: p,
          filterHeight: f,
          filterWidth: m,
          effectiveFilterDepth: O,
          effectiveFilterHeight: E,
          effectiveFilterWidth: S,
          dilationDepth: x,
          dilationHeight: w,
          dilationWidth: C,
          inShape: t,
          outShape: _,
          filterShape: e,
        }
      );
    }
    function Zt(t, e, n, r = 1) {
      const a = ne(e, r);
      return Math.floor((t[0] * (n - 1) - n + a) / 2);
    }
    function te(t) {
      return "number" == typeof t
        ? [t, t, t]
        : 2 === t.length
        ? [t[0], t[1], 1]
        : t;
    }
    function ee(t) {
      return "number" == typeof t ? [t, t, t] : t;
    }
    function ne(t, e) {
      return e <= 1 ? t : t + (t - 1) * (e - 1);
    }
    function re(t, e) {
      if (!e) return t;
      switch (e) {
        case "round":
          return Math.round(t);
        case "ceil":
          return Math.ceil(t);
        case "floor":
          return Math.floor(t);
        default:
          throw new Error("Unknown roundingMode " + e);
      }
    }
    function ae(t) {
      const [e, n, r] = te(t);
      return 1 === e && 1 === n && 1 === r;
    }
    function ie(t, e) {
      return ae(t) || ae(e);
    }
    function oe(t) {
      if ("NHWC" === t) return "channelsLast";
      if ("NCHW" === t) return "channelsFirst";
      throw new Error("Unknown dataFormat " + t);
    }
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const se = Object(I.a)({
        avgPool3dBackprop_: function (t, e, n, r, a = [1, 1, 1], i, o) {
          const s = Object(S.a)(t, "dy", "avgPool3dBackprop"),
            u = Object(S.a)(e, "input", "avgPool3dBackprop");
          let c = s,
            l = u,
            h = !1;
          4 === u.rank &&
            ((h = !0),
            (c = B(s, [1, s.shape[0], s.shape[1], s.shape[2], s.shape[3]])),
            (l = B(u, [1, u.shape[0], u.shape[1], u.shape[2], u.shape[3]]))),
            R.assert(
              5 === c.rank,
              () =>
                "Error in avgPool3dBackprop: dy must be rank 5 but got rank " +
                c.rank +
                "."
            ),
            R.assert(
              5 === l.rank,
              () =>
                "Error in avgPool3dBackprop: input must be rank 5 but got rank " +
                l.rank +
                "."
            ),
            R.assert(
              ie(r, a),
              () =>
                `Error in avgPool3dBackprop: Either strides or dilations must be 1. Got strides ${r} and dilations '${a}'`
            ),
            null != o &&
              R.assert(
                R.isInt(i),
                () =>
                  `Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode ${o} but got pad ${i}.`
              );
          const d = { dy: c, input: l },
            p = {
              filterSize: n,
              strides: r,
              dilations: a,
              pad: i,
              dimRoundingMode: o,
            },
            f = b.a.runKernelFunc(
              (t) => {
                const e = Yt(l.shape, n, r, a, i, o);
                return t.avgPool3dBackprop(c, l, e);
              },
              d,
              null,
              v.f,
              p
            );
          return h ? B(f, [f.shape[1], f.shape[2], f.shape[3], f.shape[4]]) : f;
        },
      }),
      ue = {
        kernelName: v.e,
        inputsToSave: ["x"],
        gradFunc: (t, e, n) => {
          const [r] = e,
            {
              filterSize: a,
              strides: i,
              dilations: o,
              pad: s,
              dimRoundingMode: u,
            } = n,
            c = null == o ? [1, 1, 1] : o;
          return { x: () => se(t, r, a, i, c, s, u) };
        },
      };
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const ce = Object(I.a)({
        avgPoolBackprop_:
          /**
           * @license
           * Copyright 2020 Google Inc. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (t, e, n, r, a) {
            const i = Object(S.a)(t, "dy", "avgPoolBackprop"),
              o = Object(S.a)(e, "input", "avgPoolBackprop");
            R.assert(
              o.rank === i.rank,
              () =>
                `Rank of input (${o.rank}) does not match rank of dy (${i.rank})`
            );
            let s = o,
              u = i,
              c = !1;
            3 === o.rank &&
              ((c = !0),
              (s = B(o, [1, o.shape[0], o.shape[1], o.shape[2]])),
              (u = B(i, [1, i.shape[0], i.shape[1], i.shape[2]]))),
              R.assert(
                4 === u.rank,
                () =>
                  "Error in avgPoolBackprop: dy must be rank 4 but got rank " +
                  u.rank +
                  "."
              ),
              R.assert(
                4 === s.rank,
                () =>
                  "Error in avgPoolBackprop: input must be rank 4 but got rank " +
                  s.rank +
                  "."
              );
            const l = { dy: u, input: s },
              h = { filterSize: n, strides: r, pad: a },
              d = b.a.runKernelFunc(
                (t) => {
                  const e = Xt(s.shape, n, r, 1, a);
                  return t.avgPoolBackprop(u, s, e);
                },
                l,
                null,
                v.g,
                h
              );
            return c ? B(d, [d.shape[1], d.shape[2], d.shape[3]]) : d;
          },
      }),
      le = {
        kernelName: v.d,
        inputsToSave: ["x"],
        gradFunc: (t, e, n) => {
          const [r] = e,
            { filterSize: a, strides: i, pad: o } = n;
          return { x: () => ce(t, r, a, i, o) };
        },
      };
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const he = Object(I.a)({
        matMul_:
          /**
           * @license
           * Copyright 2020 Google Inc. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (t, e, n = !1, r = !1) {
            let a = Object(S.a)(t, "a", "matMul"),
              i = Object(S.a)(e, "b", "matMul");
            ([a, i] = Object(E.makeTypesMatch)(a, i)),
              R.assert(
                a.rank >= 2 && i.rank >= 2 && a.rank === i.rank,
                () =>
                  `Error in matMul: inputs must have the same rank of at least 2, got ranks ${a.rank} and ${i.rank}.`
              );
            const o = n ? a.shape[a.rank - 2] : a.shape[a.rank - 1],
              s = r ? i.shape[i.rank - 1] : i.shape[i.rank - 2],
              u = n ? a.shape[a.rank - 1] : a.shape[a.rank - 2],
              c = r ? i.shape[i.rank - 2] : i.shape[i.rank - 1],
              l = a.shape.slice(0, -2),
              h = i.shape.slice(0, -2),
              d = R.sizeFromShape(l),
              p = R.sizeFromShape(h);
            R.assert(
              R.arraysEqual(l, h),
              () =>
                `Error in matMul: outer dimensions (${l}) and (${h}) of Tensors with shapes ${a.shape} and ` +
                i.shape +
                " must match."
            ),
              R.assert(
                o === s,
                () =>
                  `Error in matMul: inner shapes (${o}) and (${s}) of Tensors with shapes ${a.shape} and ${i.shape} and transposeA=${n} and transposeB=${r} must match.`
              );
            const f = a.shape.slice(0, -2).concat([u, c]),
              m = B(a, n ? [d, o, u] : [d, u, o]),
              g = B(i, r ? [p, c, s] : [p, s, c]),
              y = { a: m, b: g },
              x = { transposeA: n, transposeB: r },
              w = b.a.runKernelFunc(
                (t, e) => (e([m, g]), t.batchMatMul(m, g, n, r)),
                y,
                null,
                v.h,
                x
              );
            return B(w, f);
          },
      }),
      de = {
        kernelName: v.h,
        inputsToSave: ["a", "b"],
        gradFunc: (t, e, n) => {
          const [r, a] = e,
            { transposeA: i, transposeB: o } = n;
          return i || o
            ? !i && o
              ? { a: () => he(t, a, !1, !1), b: () => he(t, r, !0, !1) }
              : i && !o
              ? { a: () => he(a, t, !1, !0), b: () => he(r, t, !1, !1) }
              : { a: () => he(a, t, !0, !0), b: () => he(t, r, !0, !0) }
            : { a: () => he(t, a, !1, !0), b: () => he(r, t, !0, !1) };
        },
      };
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const pe = Object(I.a)({
        spaceToBatchND_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (t, e, n) {
            const r = Object(S.a)(t, "x", "spaceToBatchND");
            R.assert(
              r.rank >= 1 + e.length,
              () =>
                `input rank ${r.rank} should be > than [blockShape] ${e.length}`
            ),
              R.assert(
                n.length === e.length,
                () =>
                  `paddings.shape[0] ${n.length} must be equal to [blockShape] ${e.length}`
              ),
              R.assert(
                r.shape.reduce(
                  (t, r, a) =>
                    a > 0 && a <= e.length
                      ? t && (r + n[a - 1][0] + n[a - 1][1]) % e[a - 1] == 0
                      : t,
                  !0
                ),
                () =>
                  `input spatial dimensions ${r.shape.slice(
                    1
                  )} with paddings ${n.toString()} must be divisible by blockShapes ${e.toString()}`
              );
            const a = { x: r },
              i = { blockShape: e, paddings: n };
            return b.a.runKernelFunc(
              (t) => t.spaceToBatchND(r, e, n),
              a,
              null,
              v.lb,
              i
            );
          },
      }),
      fe = {
        kernelName: v.i,
        gradFunc: (t, e, n) => {
          const { blockShape: r, crops: a } = n;
          return { x: () => pe(t, r, a) };
        },
      },
      me = {
        kernelName: v.j,
        gradFunc: (t, e, n) => {
          const r = n,
            a = r.inputShape,
            i = r.shape,
            o = Array.from(i);
          for (let t = a.length - 1; t >= 0; t--)
            if (a[t] === i[t]) o[t] = 1;
            else if (1 !== a[t])
              throw new Error(
                `broadcastTo(): [${a}] cannot be broadcast to [${i}].`
              );
          const s = [];
          for (let t = 0; t < o.length; t++) o[t] > 1 && s.push(t);
          return { x: () => ht(t, s, !0) };
        },
      };
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const ge = Object(I.a)({
        split_:
          /**
           * @license
           * Copyright 2020 Google Inc. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (t, e, n = 0) {
            const r = Object(S.a)(t, "x", "split"),
              a = Object(R.parseAxisParam)(n, r.shape)[0];
            let i;
            "number" == typeof e
              ? (Object(R.assert)(
                  r.shape[a] % e == 0,
                  () => "Number of splits must evenly divide the axis."
                ),
                (i = new Array(e).fill(r.shape[a] / e)))
              : (Object(R.assert)(
                  r.shape[a] === e.reduce((t, e) => t + e),
                  () =>
                    "The sum of sizes must match the size of the axis dimension."
                ),
                (i = e));
            const o = { x: r },
              s = { numOrSizeSplits: e, axis: n };
            return b.a.runKernelFunc(
              (t, e) => t.split(r, i, a),
              o,
              null,
              v.mb,
              s
            );
          },
      }),
      be = {
        kernelName: v.l,
        saveAllInputs: !0,
        gradFunc: (t, e, n) => {
          const r = e.map((t) => t.shape),
            { axis: a } = n,
            i = Object(R.parseAxisParam)(a, e[0].shape)[0],
            o = r.map((t) => t[i]);
          return ge(t, o, i).map((t) => () => t);
        },
      };
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const ve = Object(I.a)({
      conv2DBackpropFilter_:
        /**
         * @license
         * Copyright 2020 Google Inc. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (t, e, n, r, a, i = "NHWC", o) {
          let s = t;
          3 === t.rank && (s = B(t, [1, t.shape[0], t.shape[1], t.shape[2]]));
          let u = e;
          3 === u.rank && (u = B(e, [1, e.shape[0], e.shape[1], e.shape[2]])),
            R.assert(
              4 === s.rank,
              () =>
                "Error in conv2dDerFilter: input must be rank 4, but got shape " +
                s.shape +
                "."
            ),
            R.assert(
              4 === u.rank,
              () =>
                "Error in conv2dDerFilter: dy must be rank 4, but got shape " +
                u.shape +
                "."
            ),
            R.assert(
              4 === n.length,
              () =>
                "Error in conv2dDerFilter: filterShape must be length 4, but got " +
                n +
                "."
            );
          const c = "NHWC" === i ? s.shape[3] : s.shape[1],
            l = "NHWC" === i ? u.shape[3] : u.shape[1];
          R.assert(
            c === n[2],
            () =>
              `Error in conv2dDerFilter: depth of input ${c}) must match input depth in filter (${n[2]}.`
          ),
            R.assert(
              l === n[3],
              () =>
                `Error in conv2dDerFilter: depth of dy (${l}) must match output depth for filter (${n[3]}).`
            ),
            null != o &&
              R.assert(
                R.isInt(a),
                () =>
                  `Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode ${o} but got pad ${a}.`
              );
          const h = { x: s, dy: u },
            d = { strides: r, pad: a, dataFormat: i, dimRoundingMode: o };
          return b.a.runKernelFunc(
            (t) => {
              const e = oe(i),
                c = Jt(s.shape, n, r, 1, a, o, !1, e);
              return t.conv2dDerFilter(s, u, c);
            },
            h,
            null,
            v.n,
            d
          );
        },
    });
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const ye = Object(I.a)({
        conv2DBackpropInput_: function (t, e, n, r, a, i = "NHWC", o) {
          R.assert(
            t.length === e.rank,
            () =>
              `Length of inShape (${t.length}) and rank of dy (${e.rank}) must match`
          );
          let s = t,
            u = e,
            c = !1;
          3 === e.rank &&
            ((c = !0),
            (u = B(e, [1, e.shape[0], e.shape[1], e.shape[2]])),
            (s = [1, t[0], t[1], t[2]])),
            R.assert(
              4 === s.length,
              () =>
                "Error in conv2dDerInput: inShape must be length 4, but got length " +
                s.length +
                "."
            ),
            R.assert(
              4 === u.rank,
              () =>
                "Error in conv2dDerInput: dy must be rank 4, but got rank " +
                u.rank
            ),
            R.assert(
              4 === n.rank,
              () =>
                "Error in conv2dDerInput: filter must be rank 4, but got rank " +
                n.rank
            );
          const l = "NHWC" === i ? s[3] : s[1],
            h = "NHWC" === i ? u.shape[3] : u.shape[1];
          R.assert(
            l === n.shape[2],
            () =>
              `Error in conv2dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[2]}.`
          ),
            R.assert(
              h === n.shape[3],
              () =>
                `Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${n.shape[3]}.`
            ),
            null != o &&
              R.assert(
                R.isInt(a),
                () =>
                  `Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode ${o} but got pad ${a}.`
              );
          const d = { dy: u, filter: n },
            p = { strides: r, pad: a, dataFormat: i, dimRoundingMode: o },
            f = b.a.runKernelFunc(
              (t, e) => {
                const c = oe(i),
                  l = Jt(s, n.shape, r, 1, a, o, !1, c),
                  h = t.conv2dDerInput(u, n, l);
                return e([u, n]), h;
              },
              d,
              null,
              v.o,
              p
            );
          return c ? B(f, [f.shape[1], f.shape[2], f.shape[3]]) : f;
        },
      }),
      xe = {
        kernelName: v.m,
        inputsToSave: ["x", "filter"],
        gradFunc: (t, e, n) => {
          const [r, a] = e,
            { dilations: i, strides: o, pad: s, dataFormat: u } = n;
          return (
            R.assert(
              ae(i),
              () =>
                `Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${i}'`
            ),
            {
              x: () => ye(r.shape, t, a, o, s, u),
              filter: () => ve(r, t, a.shape, o, s, u),
            }
          );
        },
      };
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const we = Object(I.a)({
        conv2d_:
          /**
           * @license
           * Copyright 2020 Google Inc. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (t, e, n, r, a = "NHWC", i = [1, 1], o) {
            const s = Object(S.a)(t, "x", "conv2d"),
              u = Object(S.a)(e, "filter", "conv2d");
            let c = s,
              l = !1;
            3 === s.rank &&
              ((l = !0), (c = B(s, [1, s.shape[0], s.shape[1], s.shape[2]]))),
              R.assert(
                4 === c.rank,
                () =>
                  `Error in conv2d: input must be rank 4, but got rank ${c.rank}.`
              ),
              R.assert(
                4 === u.rank,
                () =>
                  "Error in conv2d: filter must be rank 4, but got rank " +
                  u.rank +
                  "."
              ),
              null != o &&
                R.assert(
                  R.isInt(r),
                  () =>
                    `Error in conv2d: pad must be an integer when using, dimRoundingMode ${o} but got pad ${r}.`
                );
            const h = "NHWC" === a ? c.shape[3] : c.shape[1];
            R.assert(
              h === u.shape[2],
              () =>
                `Error in conv2d: depth of input (${h}) must match input depth for filter ${u.shape[2]}.`
            ),
              R.assert(
                ie(n, i),
                () =>
                  `Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`
              );
            const d = { x: c, filter: u },
              p = {
                strides: n,
                pad: r,
                dataFormat: a,
                dilations: i,
                dimRoundingMode: o,
              },
              f = b.a.runKernelFunc(
                (t, e) => {
                  const s = oe(a),
                    l = Jt(c.shape, u.shape, n, i, r, o, !1, s),
                    h = t.conv2d(c, u, l);
                  return e([c, u]), h;
                },
                d,
                null,
                v.m,
                p
              );
            return l ? B(f, [f.shape[1], f.shape[2], f.shape[3]]) : f;
          },
      }),
      Ce = {
        kernelName: v.o,
        inputsToSave: ["dy", "filter"],
        gradFunc: (t, e, n) => {
          const [r, a] = e,
            { strides: i, pad: o, dataFormat: s, dimRoundingMode: u } = n;
          return {
            dy: () => we(t, a, i, o, s, 1, u),
            filter: () => ve(t, r, a.shape, i, o, s, u),
          };
        },
      };
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const Oe = Object(I.a)({
      conv3DBackpropFilter_:
        /**
         * @license
         * Copyright 2020 Google Inc. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (t, e, n, r, a) {
          let i = t;
          4 === t.rank &&
            (i = B(t, [1, t.shape[0], t.shape[1], t.shape[2], t.shape[3]]));
          let o = e;
          4 === o.rank &&
            (o = B(e, [1, e.shape[0], e.shape[1], e.shape[2], e.shape[3]])),
            R.assert(
              5 === i.rank,
              () =>
                "Error in conv3dDerFilter: input must be rank 5, but got shape " +
                i.shape +
                "."
            ),
            R.assert(
              5 === o.rank,
              () =>
                "Error in conv3dDerFilter: dy must be rank 5, but got shape " +
                o.shape +
                "."
            ),
            R.assert(
              5 === n.length,
              () =>
                "Error in conv3dDerFilter: filterShape must be length 5, but got " +
                n +
                "."
            ),
            R.assert(
              i.shape[4] === n[3],
              () =>
                `Error in conv3dDerFilter: depth of input ${i.shape[4]}) must match input depth in filter (${n[3]}.`
            ),
            R.assert(
              o.shape[4] === n[4],
              () =>
                `Error in conv3dDerFilter: depth of dy (${o.shape[4]}) must match output depth for filter (${n[4]}).`
            );
          const s = { x: i, y: o },
            u = { strides: r, pad: a };
          return b.a.runKernelFunc(
            (t) => {
              const e = Qt(i.shape, n, r, 1, a);
              return t.conv3dDerFilter(i, o, e);
            },
            s,
            null,
            v.q,
            u
          );
        },
    });
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const Ee = Object(I.a)({
        conv3DBackpropInput_: function (t, e, n, r, a) {
          R.assert(
            t.length === e.rank,
            () =>
              `Length of inShape (${t.length}) and rank of dy (${e.rank}) must match`
          );
          let i = t,
            o = e,
            s = !1;
          4 === e.rank &&
            ((s = !0),
            (o = B(e, [1, e.shape[0], e.shape[1], e.shape[2], e.shape[3]])),
            (i = [1, t[0], t[1], t[2], t[3]]));
          const u = i[4],
            c = o.shape[4];
          R.assert(
            5 === i.length,
            () =>
              "Error in conv3dDerInput: inShape must be length 5, but got length " +
              i.length +
              "."
          ),
            R.assert(
              5 === o.rank,
              () =>
                "Error in conv3dDerInput: dy must be rank 5, but got rank " +
                o.rank
            ),
            R.assert(
              5 === n.rank,
              () =>
                "Error in conv3dDerInput: filter must be rank 5, but got rank " +
                n.rank
            ),
            R.assert(
              u === n.shape[3],
              () =>
                `Error in conv3dDerInput: depth of input (${u}) must match input depth for filter ${n.shape[3]}.`
            ),
            R.assert(
              c === n.shape[4],
              () =>
                `Error in conv3dDerInput: depth of output (${c}) must match output depth for filter ${n.shape[4]}.`
            );
          const l = { dy: o },
            h = { pad: a },
            d = b.a.runKernelFunc(
              (t) => {
                const e = Qt(i, n.shape, r, 1, a);
                return t.conv3dDerInput(o, n, e);
              },
              l,
              null,
              v.r,
              h
            );
          return s ? B(d, [d.shape[1], d.shape[2], d.shape[3], d.shape[4]]) : d;
        },
      }),
      Se = {
        kernelName: v.p,
        inputsToSave: ["x", "filter"],
        gradFunc: (t, e, n) => {
          const { dilations: r, strides: a, pad: i } = n;
          R.assert(
            ae(r),
            () =>
              `Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`
          );
          const [o, s] = e;
          return {
            x: () => Ee(o.shape, t, s, a, i),
            filter: () => Oe(o, t, s.shape, a, i),
          };
        },
      };
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const Ie = Object(I.a)({
      transpose_:
        /**
         * @license
         * Copyright 2018 Google Inc. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (t, e) {
          const n = Object(S.a)(t, "x", "transpose");
          if (
            (null == e && (e = n.shape.map((t, e) => e).reverse()),
            R.assert(
              n.rank === e.length,
              () =>
                `Error in transpose: rank of input ${n.rank} must match length of perm ${e}.`
            ),
            e.forEach((t) => {
              R.assert(
                t >= 0 && t < n.rank,
                () =>
                  "All entries in 'perm' must be between 0 and " +
                  (n.rank - 1) +
                  " but got " +
                  e
              );
            }),
            n.rank <= 1)
          )
            return n.clone();
          const r = { perm: e };
          return b.a.runKernelFunc(
            (t) => t.transpose(n, e),
            { x: n },
            null,
            "Transpose",
            r
          );
        },
    });
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const ke = Object(I.a)({
        cumsum_: function (t, e = 0, n = !1, r = !1) {
          const a = Object(S.a)(t, "x", "cumsum"),
            i = { x: a },
            o = { axis: e, exclusive: n, reverse: r };
          return b.a.runKernelFunc(
            (t, i) => {
              const o = Z([e], a.rank);
              let s = a;
              null != o && (s = Ie(a, o));
              const u = et(1, a.rank)[0];
              let c = t.cumsum(s, u, n, r);
              return i([a]), null != o && (c = Ie(c, o)), c;
            },
            i,
            null,
            v.s,
            o
          );
        },
      }),
      Ne = {
        kernelName: v.s,
        inputsToSave: ["x"],
        gradFunc: (t, e, n) => {
          const [r] = e,
            { axis: a, exclusive: i, reverse: o } = n;
          return {
            x: () => {
              const e = Z([a], r.rank);
              let n = ke(t, a, i, !o);
              return null != e && (n = Ie(n, e)), n;
            },
          };
        },
      };
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const Re = Object(I.a)({
      depthwiseConv2dNativeBackpropFilter_:
        /**
         * @license
         * Copyright 2020 Google Inc. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (t, e, n, r) {
          let a = t;
          3 === t.rank && (a = B(t, [1, t.shape[0], t.shape[1], t.shape[2]]));
          let i = e;
          3 === i.rank && (i = B(e, [1, e.shape[0], e.shape[1], e.shape[2]]));
          const o = { x: a, dy: i };
          return b.a.runKernelFunc(
            (t) => t.depthwiseConv2DDerFilter(a, i, r),
            o,
            null,
            v.v
          );
        },
    });
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const Ae = Object(I.a)({
        depthwiseConv2dNativeBackpropInput_: function (t, e, n, r) {
          let a = e,
            i = !1;
          3 === e.rank &&
            ((i = !0), (a = B(e, [1, e.shape[0], e.shape[1], e.shape[2]])));
          const o = { dy: a },
            s = b.a.runKernelFunc(
              (t) => t.depthwiseConv2DDerInput(a, n, r),
              o,
              null,
              v.w
            );
          return i ? B(s, [s.shape[1], s.shape[2], s.shape[3]]) : s;
        },
      }),
      Te = {
        kernelName: v.u,
        inputsToSave: ["x", "filter"],
        gradFunc: (t, e, n) => {
          const { dilations: r, strides: a, pad: i, dimRoundingMode: o } = n,
            s = null == r ? [1, 1] : r;
          R.assert(
            ae(s),
            () =>
              `Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${s}'`
          );
          const [u, c] = e;
          R.assert(
            4 === u.rank,
            () =>
              `Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${u.rank}.`
          ),
            R.assert(
              4 === c.rank,
              () =>
                `Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${c.rank}.`
            ),
            R.assert(
              u.shape[3] === c.shape[2],
              () =>
                `Error in gradient of depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${c.shape[2]}.`
            ),
            R.assert(
              ie(a, s),
              () =>
                `Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${a} and dilations '${s}'.`
            ),
            null != o &&
              R.assert(
                R.isInt(i),
                () =>
                  `Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${o} but got pad ${i}.`
              );
          const l = Jt(u.shape, c.shape, a, s, i, o, !0);
          return {
            x: () => Ae(u.shape, t, c, l),
            filter: () => Re(u, t, c.shape, l),
          };
        },
      },
      _e = {
        kernelName: v.y,
        inputsToSave: ["a", "b"],
        gradFunc: (t, e) => {
          const [n, r] = e,
            a = w(n.shape, r.shape);
          return {
            a: () => {
              const e = U(t, r.toFloat()),
                i = x(n.shape, a);
              return i.length > 0 ? ht(e, i).reshape(n.shape) : e;
            },
            b: () => {
              let e = G(t, n.toFloat());
              const i = x(r.shape, a);
              i.length > 0 && (e = B(ht(e, i), r.shape));
              const o = pt(r);
              return _t(U(e, o.toFloat()));
            },
          };
        },
      },
      De = {
        kernelName: v.z,
        outputsToSave: [!0],
        gradFunc: (t, e) => {
          const [n] = e,
            r = (e) => e.eluDer(t, n),
            a = { dy: t, y: n };
          return { x: () => b.a.runKernelFunc(r, a, null, v.A) };
        },
      },
      Fe = {
        kernelName: v.D,
        inputsToSave: ["a", "b"],
        gradFunc: (t, e) => {
          const [n, r] = e,
            a = w(n.shape, r.shape);
          return {
            a: () => {
              const e = t.div(r.toFloat()),
                i = x(n.shape, a);
              return i.length > 0 ? e.sum(i).reshape(n.shape) : e;
            },
            b: () => {
              let e = t.mul(n.toFloat());
              const i = x(r.shape, a);
              i.length > 0 && (e = e.sum(i).reshape(r.shape));
              const o = r.square();
              return e.div(o.toFloat()).neg();
            },
          };
        },
      };
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const Me = Object(I.a)({
      sub_:
        /**
         * @license
         * Copyright 2020 Google Inc. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (t, e) {
          let n = Object(S.a)(t, "a", "sub"),
            r = Object(S.a)(e, "b", "sub");
          [n, r] = Object(E.makeTypesMatch)(n, r);
          const a = { a: n, b: r };
          return b.a.runKernelFunc(
            (t, e) => {
              const a = t.subtract(n, r);
              return e([n, r]), a;
            },
            a,
            null,
            v.pb
          );
        },
    });
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const je = Object(I.a)({
        tile_: function (t, e) {
          const n = Object(S.a)(t, "x", "tile", null);
          R.assert(
            n.rank === e.length,
            () =>
              `Error in transpose: rank of input ${n.rank} must match length of reps ${e}.`
          );
          const r = [n],
            a = { x: n },
            i = { reps: e };
          return b.a.runKernelFunc(
            (t, r) => {
              const a = t.tile(n, e);
              return r([n]), a;
            },
            a,
            null,
            v.qb,
            i,
            r
          );
        },
      }),
      $e = {
        kernelName: v.F,
        inputsToSave: ["x", "mean", "variance", "scale"],
        gradFunc: (t, e, n) => {
          const { varianceEpsilon: r } = n,
            [a, i, o, s] = e,
            u = null == s ? Object(_.e)(1) : s,
            c = x(i.shape, a.shape),
            l = [];
          if (1 === i.rank) {
            for (let t = 0; t < a.shape.length - 1; ++t) l.push(a.shape[t]);
            l.push(1);
          }
          const h = Me(a, i),
            d = G(t, u),
            p = Mt(k(o, Object(_.e)(r))),
            f = G(G(G(p, p), p), Object(_.e)(-0.5));
          return {
            x: () =>
              1 === i.rank
                ? B(G(G(t, je(p.as4D(1, 1, 1, i.shape[0]), l)), u), a.shape)
                : B(G(G(t, p), u), a.shape),
            mean: () => {
              let t = G(G(p, Object(_.e)(-1)), d);
              return 1 === i.rank && (t = ht(t, c)), B(t, i.shape);
            },
            variance: () => {
              let t = G(G(f, h), d);
              return 1 === i.rank && (t = ht(t, c)), B(t, i.shape);
            },
            scale: () => {
              const e = G(h, p);
              let n = G(t, e);
              return 1 === i.rank && (n = ht(n, c)), B(n, i.shape);
            },
            offset: () => {
              let e = t;
              return 1 === i.rank && (e = ht(e, c)), B(e, i.shape);
            },
          };
        },
      },
      Be = {
        kernelName: v.I,
        inputsToSave: ["a", "b"],
        gradFunc: (t, e) => {
          const [n, r] = e;
          return { a: () => Object(_.o)(n), b: () => Object(_.o)(r) };
        },
      },
      Pe = { kernelName: v.J, gradFunc: (t) => ({ x: () => t.toFloat() }) };
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const Le = Object(I.a)({
        localResponseNormalizationBackprop_:
          /**
           * @license
           * Copyright 2020 Google Inc. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (t, e, n, r = 5, a = 1, i = 1, o = 0.5) {
            const s = { x: t, y: e, dy: n },
              u = { depthRadius: r, bias: a, alpha: i, beta: o };
            return b.a.runKernelFunc(
              (s) => s.LRNGrad(n, t, e, r, a, i, o),
              s,
              null,
              v.M,
              u
            );
          },
      }),
      ze = {
        kernelName: v.L,
        inputsToSave: ["x"],
        outputsToSave: [!0],
        gradFunc: (t, e, n) => {
          const [r, a] = e,
            { depthRadius: i, bias: o, alpha: s, beta: u } = n;
          return { x: () => Le(r, a, t, i, o, s, u) };
        },
      },
      We = {
        kernelName: v.P,
        inputsToSave: ["x"],
        outputsToSave: [!0],
        gradFunc: (t, e, n) => {
          const r = n,
            { reductionIndices: a } = r,
            [i, o] = e,
            s = R.parseAxisParam(a, i.shape),
            u = Z(s, i.rank),
            c = nt(t, o, i, s, u);
          return {
            x: () => {
              let t = c.x();
              return null != u && (t = Ie(t)), t;
            },
          };
        },
      };
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const Ve = Object(I.a)({
      greaterEqual_:
        /**
         * @license
         * Copyright 2020 Google Inc. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (t, e) {
          let n = Object(S.a)(t, "a", "greaterEqual"),
            r = Object(S.a)(e, "b", "greaterEqual");
          ([n, r] = Object(E.makeTypesMatch)(n, r)), w(n.shape, r.shape);
          const a = { a: n, b: r };
          return b.a.runKernelFunc(
            (t, e) => {
              const a = t.greaterEqual(n, r);
              return e([n, r]), a;
            },
            a,
            null,
            v.I
          );
        },
    });
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const Ue = Object(I.a)({
        less_: function (t, e) {
          let n = Object(S.a)(t, "a", "less"),
            r = Object(S.a)(e, "b", "less");
          ([n, r] = Object(E.makeTypesMatch)(n, r)), w(n.shape, r.shape);
          const a = { a: n, b: r };
          return b.a.runKernelFunc((t) => t.less(n, r), a, null, v.N);
        },
      }),
      Ge = {
        kernelName: v.V,
        inputsToSave: ["a", "b"],
        gradFunc: (t, e) => {
          const [n, r] = e;
          return {
            a: () => G(t, j(Ve(n, r), "float32")),
            b: () => G(t, j(Ue(n, r), "float32")),
          };
        },
      };
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const He = Object(I.a)({
        maxPool3dBackprop_:
          /**
           * @license
           * Copyright 2020 Google Inc. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (t, e, n, r, a, i = [1, 1, 1], o, s) {
            const u = Object(S.a)(t, "dy", "maxPool3dBackprop"),
              c = Object(S.a)(e, "input", "maxPool3dBackprop"),
              l = Object(S.a)(n, "output", "maxPool3dBackprop");
            let h = u,
              d = c,
              p = l,
              f = !1;
            4 === c.rank &&
              ((f = !0),
              (h = B(u, [1, u.shape[0], u.shape[1], u.shape[2], u.shape[3]])),
              (d = B(c, [1, c.shape[0], c.shape[1], c.shape[2], c.shape[3]])),
              (p = B(l, [1, l.shape[0], l.shape[1], l.shape[2], l.shape[3]]))),
              R.assert(
                5 === h.rank,
                () =>
                  "Error in maxPool3dBackprop: dy must be rank 5 but got rank " +
                  h.rank +
                  "."
              ),
              R.assert(
                5 === d.rank,
                () =>
                  "Error in maxPool3dBackprop: input must be rank 5 but got rank " +
                  d.rank +
                  "."
              ),
              R.assert(
                5 === p.rank,
                () =>
                  "Error in maxPool3dBackprop: output must be rank 5 but got rank " +
                  p.rank +
                  "."
              ),
              R.assert(
                ie(a, i),
                () =>
                  `Error in maxPool3dBackprop: Either strides or dilations must be 1. Got strides ${a} and dilations '${i}'`
              ),
              null != s &&
                R.assert(
                  R.isInt(o),
                  () =>
                    `Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode ${s} but got pad ${o}.`
                );
            const m = { dy: h, input: d, output: p },
              g = {
                filterSize: r,
                strides: a,
                dilations: i,
                pad: o,
                dimRoundingMode: s,
              },
              y = b.a.runKernelFunc(
                (t) => {
                  const e = Yt(d.shape, r, a, i, o, s);
                  return t.maxPool3dBackprop(h, d, p, e);
                },
                m,
                null,
                v.S,
                g
              );
            return f
              ? B(y, [y.shape[1], y.shape[2], y.shape[3], y.shape[4]])
              : y;
          },
      }),
      qe = {
        kernelName: v.R,
        inputsToSave: ["x"],
        outputsToSave: [!0],
        gradFunc: (t, e, n) => {
          const [r, a] = e,
            {
              filterSize: i,
              strides: o,
              dilations: s,
              pad: u,
              dimRoundingMode: c,
            } = n,
            l = null == s ? [1, 1, 1] : s;
          return { x: () => He(t, r, a, i, o, l, u, c) };
        },
      };
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const Ke = Object(I.a)({
        maxPoolBackprop_:
          /**
           * @license
           * Copyright 2020 Google Inc. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (t, e, n, r, a, i, o) {
            const s = Object(S.a)(t, "dy", "maxPoolBackprop"),
              u = Object(S.a)(e, "input", "maxPoolBackprop"),
              c = Object(S.a)(n, "output", "maxPoolBackprop");
            R.assert(
              u.rank === s.rank,
              () =>
                `Rank of input (${u.rank}) does not match rank of dy (${s.rank})`
            ),
              R.assert(
                4 === s.rank,
                () =>
                  "Error in maxPoolBackprop: dy must be rank 4 but got rank " +
                  s.rank +
                  "."
              ),
              R.assert(
                4 === u.rank,
                () =>
                  "Error in maxPoolBackprop: input must be rank 4 but got rank " +
                  u.rank +
                  "."
              ),
              null != o &&
                R.assert(
                  R.isInt(i),
                  () =>
                    `Error in maxPoolBackprop: pad must be an integer when using, dimRoundingMode ${o} but got pad ${i}.`
                );
            const l = { dy: s, input: u, output: c },
              h = { filterSize: r, strides: a, pad: i, dimRoundingMode: o };
            return b.a.runKernelFunc(
              (t) => {
                const e = Xt(u.shape, r, a, 1, i, o);
                return t.maxPoolBackprop(s, u, c, e);
              },
              l,
              null,
              v.T,
              h
            );
          },
      }),
      Xe = {
        kernelName: v.Q,
        inputsToSave: ["x"],
        outputsToSave: [!0],
        gradFunc: (t, e, n) => {
          const [r, a] = e,
            { filterSize: i, strides: o, pad: s } = n;
          return { x: () => Ke(t, r, a, i, o, s) };
        },
      };
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const Ye = Object(I.a)({
      greater_:
        /**
         * @license
         * Copyright 2020 Google Inc. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (t, e) {
          let n = Object(S.a)(t, "a", "greater"),
            r = Object(S.a)(e, "b", "greater");
          ([n, r] = Object(E.makeTypesMatch)(n, r)), w(n.shape, r.shape);
          const a = { a: n, b: r };
          return b.a.runKernelFunc((t) => t.greater(n, r), a, null, v.H);
        },
    });
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const Je = Object(I.a)({
        lessEqual_: function (t, e) {
          let n = Object(S.a)(t, "a", "lessEqual"),
            r = Object(S.a)(e, "b", "lessEqual");
          ([n, r] = Object(E.makeTypesMatch)(n, r)), w(n.shape, r.shape);
          const a = { a: n, b: r };
          return b.a.runKernelFunc(
            (t, e) => {
              const a = t.lessEqual(n, r);
              return e([n, r]), a;
            },
            a,
            null,
            v.O
          );
        },
      }),
      Qe = {
        kernelName: v.W,
        inputsToSave: ["a", "b"],
        gradFunc: (t, e) => {
          const [n, r] = e;
          return {
            a: () => G(t, j(Je(n, r), "float32")),
            b: () => G(t, j(Ye(n, r), "float32")),
          };
        },
      },
      Ze = {
        kernelName: v.X,
        inputsToSave: ["a", "b"],
        gradFunc: (t, e) => {
          const [n, r] = e,
            a = w(n.shape, r.shape);
          return {
            a: () => {
              const e = x(n.shape, a);
              return e.length > 0 ? B(ht(t, e), n.shape) : t;
            },
            b: () => {
              const e = G(t, _t(Nt(U(n, r)))),
                i = x(r.shape, a);
              return i.length > 0 ? B(ht(e, i), r.shape) : e;
            },
          };
        },
      },
      tn = {
        kernelName: v.Y,
        inputsToSave: ["a", "b"],
        gradFunc: (t, e) => {
          const [n, r] = e,
            a = w(n.shape, r.shape);
          return {
            a: () => {
              const e = G(t, j(r, "float32")),
                i = x(n.shape, a);
              return i.length > 0 ? B(ht(e, i), n.shape) : e;
            },
            b: () => {
              const e = G(t, j(n, "float32")),
                i = x(r.shape, a);
              return i.length > 0 ? B(ht(e, i), r.shape) : e;
            },
          };
        },
      },
      en = {
        kernelName: v.cb,
        inputsToSave: ["indices"],
        gradFunc: (t, e) => {
          const n = e[0];
          return { indices: () => Object(_.n)(n.shape, "float32") };
        },
      },
      nn = {
        kernelName: v.db,
        inputsToSave: ["x"],
        gradFunc: (t, e, n) => {
          const r = e[0],
            { paddings: a } = n,
            i = a.map((t) => t[0]);
          return { x: () => t.slice(i, r.shape) };
        },
      };
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function rn(t, e) {
      const n = [];
      for (let t = 0; t < e.length; t++) e[t] && n.push(t);
      const r = F(t, "int32"),
        a = F([n.length, t.length], "int32");
      for (let e = 0; e < n.length; e++) {
        const i = r.indexToLoc(n[e]),
          o = e * t.length;
        a.values.set(i, o);
      }
      return a.toTensor();
    }
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const an = Object(I.a)({
        logicalAnd_: function (t, e) {
          const n = Object(S.a)(t, "a", "logicalAnd", "bool"),
            r = Object(S.a)(e, "b", "logicalAnd", "bool");
          return (
            w(n.shape, r.shape),
            b.a.runKernelFunc(
              (t) => t.logicalAnd(n, r),
              { a: n, b: r },
              null,
              "LogicalAnd"
            )
          );
        },
      }),
      on = Object(I.a)({
        logicalNot_: function (t) {
          const e = Object(S.a)(t, "x", "logicalNot", "bool");
          return b.a.runKernelFunc((t) => t.logicalNot(e), { $x: e });
        },
      }),
      sn = Object(I.a)({
        logicalOr_: function (t, e) {
          const n = Object(S.a)(t, "a", "logicalOr", "bool"),
            r = Object(S.a)(e, "b", "logicalOr", "bool");
          return (
            w(n.shape, r.shape),
            b.a.runKernelFunc((t) => t.logicalOr(n, r), { $a: n, $b: r })
          );
        },
      }),
      un = Object(I.a)({
        logicalXor_: function (t, e) {
          const n = Object(S.a)(t, "a", "logicalXor", "bool"),
            r = Object(S.a)(e, "b", "logicalXor", "bool");
          return (
            w(n.shape, r.shape), sn(t, e).logicalAnd(an(t, e).logicalNot())
          );
        },
      }),
      cn = Object(I.a)({
        where_: function (t, e, n) {
          const r = Object(S.a)(e, "a", "where"),
            a = Object(S.a)(n, "b", "where"),
            i = Object(S.a)(t, "condition", "where", "bool");
          Object(R.assertShapesMatch)(r.shape, a.shape, "Error in where: "),
            1 === i.rank
              ? Object(R.assert)(
                  i.shape[0] === r.shape[0],
                  () =>
                    "The first dimension of `a` must match the size of `condition`."
                )
              : Object(R.assertShapesMatch)(
                  i.shape,
                  a.shape,
                  "Error in where: "
                );
          const o = { condition: i, t: r, e: a };
          return b.a.runKernelFunc(
            (t, e) => {
              const n = t.select(i, r, a);
              return e([i]), n;
            },
            o,
            (t, e) => {
              const [n] = e;
              return {
                condition: () => Object(_.o)(n).toFloat(),
                t: () => t.mul(n.cast(t.dtype)),
                e: () => t.mul(n.logicalNot().cast(t.dtype)),
              };
            },
            v.jb
          );
        },
      }),
      ln = async function (t) {
        const e = Object(S.a)(t, "condition", "whereAsync", "bool"),
          n = await e.data(),
          r = rn(e.shape, n);
        return t !== e && e.dispose(), r;
      };
    const hn = Object(I.a)({
        pow_:
          /**
           * @license
           * Copyright 2020 Google Inc. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (t, e) {
            let n = Object(S.a)(t, "base", "pow"),
              r = Object(S.a)(e, "exp", "pow");
            [n, r] = Object(E.makeTypesMatch)(n, r);
            const a = { a: n, b: r };
            return b.a.runKernelFunc(
              (t, e) => {
                const a = t.pow(n, r);
                return e([n, r, a]), a;
              },
              a,
              null,
              v.eb
            );
          },
      }),
      dn = {
        kernelName: v.eb,
        inputsToSave: ["a", "b"],
        outputsToSave: [!0],
        gradFunc: (t, e) => {
          const [n, r, a] = e,
            i = n,
            o = r,
            s = w(i.shape, o.shape);
          return {
            a: () => {
              const e = j(o, "float32");
              let n = G(t, G(e, hn(i, Me(e, Object(_.e)(1)))));
              const r = x(i.shape, s);
              return r.length > 0 && (n = ht(n, r)), B(n, i.shape);
            },
            b: () => {
              const e = Ye(i, 0),
                n = cn(e, Rt(i), Object(_.o)(i));
              let r = G(t, G(a, n));
              const u = x(o.shape, s);
              return u.length > 0 && (r = ht(r, u)), B(r, o.shape);
            },
          };
        },
      },
      pn = {
        kernelName: v.fb,
        inputsToSave: ["x", "alpha"],
        gradFunc: (t, e) => {
          const [n, r] = e,
            a = Ye(n, 0);
          return {
            x: () => cn(a, t, G(t, r)),
            alpha: () => {
              let e = cn(a, Object(_.o)(t), G(t, n));
              const i = x(r.shape, t.shape);
              return i.length > 0 && (e = ht(e, i)), B(e, r.shape);
            },
          };
        },
      },
      fn = {
        kernelName: v.ib,
        inputsToSave: ["x"],
        gradFunc: (t, e) => {
          const [n] = e,
            r = G(Je(n, 6), Gt(n));
          return { x: () => G(t, j(r, "float32")) };
        },
      },
      mn = {
        kernelName: v.hb,
        inputsToSave: ["x"],
        gradFunc: (t, e) => {
          const [n] = e;
          return { x: () => G(t, j(Gt(n), "float32")) };
        },
      },
      gn = 1.7580993408473768,
      bn = 1.0507009873554805,
      vn = {
        kernelName: v.kb,
        inputsToSave: ["x"],
        gradFunc: (t, e) => {
          const [n] = e;
          return {
            x: () => {
              const e = Ye(n, Object(_.e)(0)),
                r = Object(_.e)(gn),
                a = Object(_.e)(bn),
                i = G(t, a),
                o = G(G(t, r), It(j(n, "float32")));
              return cn(e, i, o);
            },
          };
        },
      };
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const yn = Object(I.a)({
        batchToSpaceND_:
          /**
           * @license
           * Copyright 2020 Google Inc. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (t, e, n) {
            const r = Object(S.a)(t, "x", "batchToSpaceND"),
              a = e.reduce((t, e) => t * e);
            R.assert(
              r.rank >= 1 + e.length,
              () =>
                `input rank is ${r.rank} but should be > than blockShape.length ${e.length}`
            ),
              R.assert(
                n.length === e.length,
                () =>
                  `crops.length is ${n.length} but should be equal to blockShape.length  ${e.length}`
              ),
              R.assert(
                r.shape[0] % a == 0,
                () =>
                  `input tensor batch is ${
                    r.shape[0]
                  } but is not divisible by the product of the elements of blockShape ${e.join(
                    " * "
                  )} === ${a}`
              );
            const i = { x: r },
              o = { blockShape: e, crops: n };
            return b.a.runKernelFunc(
              (t) => t.batchToSpaceND(r, e, n),
              i,
              null,
              v.i,
              o
            );
          },
      }),
      xn = {
        kernelName: v.lb,
        gradFunc: (t, e, n) => {
          const { blockShape: r, paddings: a } = n;
          return { x: () => yn(t, r, a) };
        },
      },
      wn = {
        kernelName: v.mb,
        gradFunc: (t, e, n) => {
          const { axis: r } = n;
          return { x: () => D(t, r) };
        },
      },
      Cn = {
        kernelName: v.nb,
        inputsToSave: ["x"],
        gradFunc: (t, e) => {
          const [n] = e;
          return { x: () => G(t, G(n.toFloat(), 2)) };
        },
      },
      On = {
        kernelName: v.ob,
        inputsToSave: ["a", "b"],
        gradFunc: (t, e) => {
          const [n, r] = e,
            a = Object(_.e)(2);
          return {
            a: () => G(t, G(a, Me(n, r))),
            b: () => G(t, G(a, Me(r, n))),
          };
        },
      },
      En = {
        kernelName: v.pb,
        inputsToSave: ["a", "b"],
        gradFunc: (t, e) => {
          const [n, r] = e,
            a = w(n.shape, r.shape);
          return {
            a: () => {
              let e = t;
              const r = x(n.shape, a);
              return r.length > 0 && (e = ht(e, r)), B(e, n.shape);
            },
            b: () => {
              let e = t;
              const n = x(r.shape, a);
              return n.length > 0 && (e = ht(e, n)), B(_t(e), r.shape);
            },
          };
        },
      };
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const Sn = Object(I.a)({
      pad_:
        /**
         * @license
         * Copyright 2020 Google Inc. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (t, e, n = 0) {
          const r = Object(S.a)(t, "x", "pad");
          if (0 === r.rank)
            throw new Error(
              "pad(scalar) is not defined. Pass non-scalar to pad"
            );
          const a = { paddings: e, constantValue: n },
            i = { x: r };
          return b.a.runKernelFunc(
            (t, a) => (a([r]), t.pad(r, e, n)),
            i,
            null,
            v.db,
            a
          );
        },
    });
    /**
     * @license
     * Copyright 2017 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function In(t, e, n) {
      R.assert(
        t.rank === e.length,
        () =>
          `Error in slice${t.rank}D: Length of begin ${e} must match the rank of the array (${t.rank}).`
      ),
        R.assert(
          t.rank === n.length,
          () =>
            `Error in slice${t.rank}D: Length of size ${n} must match the rank of the array (${t.rank}).`
        );
      for (let r = 0; r < t.rank; ++r)
        R.assert(
          e[r] + n[r] <= t.shape[r],
          () =>
            `Error in slice${t.rank}D: begin[${r}] + size[${r}] (${
              e[r] + n[r]
            }) would overflow input.shape[${r}] (${t.shape[r]})`
        );
    }
    function kn(t) {
      const e = [];
      let n = 0;
      for (; t > 0; ) 1 & t && e.push(n), (t /= 2), n++;
      return e;
    }
    function Nn(t, e, n) {
      const r = [];
      for (let a = 0; a < t.length; a++) r[a] = Math.ceil((e[a] - t[a]) / n[a]);
      return r;
    }
    function Rn(t, e, n) {
      const r = [...t];
      for (let t = 0; t < n; t++)
        0 === t ? (r[e] = 1) : (r.splice(e, 0, 1), r.pop());
      return r;
    }
    function An(t, e, n) {
      const r = [...t];
      for (let t = 0; t < n; t++)
        0 === t ? (r[e] = 0) : (r.splice(e, 0, 0), r.pop());
      return r;
    }
    function Tn(t, e, n, r) {
      const a = [...t];
      for (let t = 0; t < n; t++)
        0 === t
          ? (a[e] = Number.MAX_SAFE_INTEGER)
          : (a.splice(e, 0, Number.MAX_SAFE_INTEGER), a.pop());
      for (let t = 0; t < a.length; t++) a[t] = R.clamp(0, a[t], r[t]);
      return a;
    }
    function _n(t, e, n) {
      let r = t[e];
      return (n & (1 << e) || null == r) && (r = 1), r;
    }
    function Dn(t, e, n, r, a, i) {
      let o = e[a];
      const s = n[a] || 1;
      (t & (1 << a) || i & (1 << a) || null == o) &&
        (o = s > 0 ? Number.MIN_SAFE_INTEGER : Number.MAX_SAFE_INTEGER);
      const u = r[a];
      return o < 0 && (o += u), (o = R.clamp(0, o, u - 1)), o;
    }
    function Fn(t, e, n, r, a, i) {
      let o = e[a];
      const s = n[a] || 1;
      (t & (1 << a) || i & (1 << a) || null == o) &&
        (o = s > 0 ? Number.MAX_SAFE_INTEGER : Number.MIN_SAFE_INTEGER);
      const u = r[a];
      return (
        o < 0 && (o += u),
        (o = s > 0 ? R.clamp(0, o, u) : R.clamp(-1, o, u - 1)),
        o
      );
    }
    function Mn(t, e, n) {
      let r = n.length;
      for (let t = 0; t < n.length; t++)
        if (n[t] > 1) {
          r = t;
          break;
        }
      for (let a = r + 1; a < n.length; a++)
        if (e[a] > 0 || n[a] !== t[a]) return !1;
      return !0;
    }
    function jn(t, e) {
      let n = t.length > 0 ? t[t.length - 1] : 1;
      for (let r = 0; r < t.length - 1; r++) n += t[r] * e[r];
      return n;
    }
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const $n = Object(I.a)({
        slice_: function (t, e, n) {
          const r = Object(S.a)(t, "x", "slice");
          if (0 === r.rank) throw new Error("Slicing scalar is not possible");
          let a, i;
          (a =
            "number" == typeof e
              ? [e, ...new Array(r.rank - 1).fill(0)]
              : e.length < r.rank
              ? e.concat(new Array(r.rank - e.length).fill(0))
              : e.slice()),
            a.forEach((t) => {
              R.assert(
                -1 !== t,
                () => "slice() does not support negative begin indexing."
              );
            }),
            (i =
              null == n
                ? new Array(r.rank).fill(-1)
                : "number" == typeof n
                ? [n, ...new Array(r.rank - 1).fill(-1)]
                : n.length < r.rank
                ? n.concat(new Array(r.rank - n.length).fill(-1))
                : n),
            (i = i.map((t, e) =>
              t >= 0
                ? t
                : (R.assert(
                    -1 === t,
                    () =>
                      `Negative size values should be exactly -1 but got ${t} for the slice() size at index ${e}.`
                  ),
                  r.shape[e] - a[e])
            )),
            In(r, a, i);
          const o = r.shape,
            s = { begin: a, size: i };
          return b.a.runKernelFunc(
            (t) => t.slice(r, a, i),
            { x: r },
            (t) => {
              const e = [];
              for (let n = 0; n < t.rank; n++)
                e.push([a[n], o[n] - a[n] - i[n]]);
              return { x: () => Sn(t, e) };
            },
            "Slice",
            s
          );
        },
      }),
      Bn = Object(I.a)({
        slice1d_: function (t, e, n) {
          const r = Object(S.a)(t, "x", "slice1d");
          return (
            R.assert(
              1 === r.rank,
              () =>
                `slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`
            ),
            $n(r, [e], [n])
          );
        },
      }),
      Pn = Object(I.a)({
        slice2d_: function (t, e, n) {
          const r = Object(S.a)(t, "x", "slice2d");
          return (
            R.assert(
              2 === r.rank,
              () =>
                `slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`
            ),
            $n(r, e, n)
          );
        },
      }),
      Ln = Object(I.a)({
        slice3d_: function (t, e, n) {
          const r = Object(S.a)(t, "x", "slice3d");
          return (
            R.assert(
              3 === r.rank,
              () =>
                `slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`
            ),
            $n(r, e, n)
          );
        },
      }),
      zn = Object(I.a)({
        slice4d_: function (t, e, n) {
          const r = Object(S.a)(t, "x", "slice4d");
          return (
            R.assert(
              4 === r.rank,
              () =>
                `slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`
            ),
            $n(r, e, n)
          );
        },
      }),
      Wn = {
        kernelName: v.qb,
        inputsToSave: ["x"],
        gradFunc: (t, e, n) => {
          const [r] = e,
            { reps: a } = n;
          return {
            x: () => {
              let e = Object(_.o)(r);
              if (1 === r.rank)
                for (let n = 0; n < a[0]; ++n)
                  e = k(e, $n(t, [n * r.shape[0]], [r.shape[0]]));
              else if (2 === r.rank)
                for (let n = 0; n < a[0]; ++n)
                  for (let i = 0; i < a[1]; ++i)
                    e = k(
                      e,
                      $n(
                        t,
                        [n * r.shape[0], i * r.shape[1]],
                        [r.shape[0], r.shape[1]]
                      )
                    );
              else if (3 === r.rank)
                for (let n = 0; n < a[0]; ++n)
                  for (let i = 0; i < a[1]; ++i)
                    for (let o = 0; o < a[2]; ++o)
                      e = k(
                        e,
                        $n(
                          t,
                          [n * r.shape[0], i * r.shape[1], o * r.shape[2]],
                          [r.shape[0], r.shape[1], r.shape[2]]
                        )
                      );
              else {
                if (4 !== r.rank)
                  throw new Error(
                    "Gradient for tile operation is not implemented for rank-" +
                      r.rank +
                      " tensors yet."
                  );
                for (let n = 0; n < a[0]; ++n)
                  for (let i = 0; i < a[1]; ++i)
                    for (let o = 0; o < a[2]; ++o)
                      for (let s = 0; s < a[3]; ++s)
                        e = k(
                          e,
                          $n(
                            t,
                            [
                              n * r.shape[0],
                              i * r.shape[1],
                              o * r.shape[2],
                              s * r.shape[3],
                            ],
                            [r.shape[0], r.shape[1], r.shape[2], r.shape[3]]
                          )
                        );
              }
              return e;
            },
          };
        },
      },
      Vn = {
        kernelName: v.rb,
        gradFunc: (t, e, n) => {
          const r = n,
            { perm: a } = r,
            i = tt(a);
          return { x: () => Ie(t, i) };
        },
      };
    var Un = n(17);
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const Gn = [
      C,
      O,
      Kt,
      le,
      ue,
      de,
      fe,
      me,
      be,
      xe,
      Ce,
      Se,
      Ne,
      Te,
      _e,
      De,
      Fe,
      $e,
      Be,
      Pe,
      ze,
      en,
      nn,
      wn,
      We,
      xn,
      We,
      Ge,
      Xe,
      qe,
      Qe,
      Ze,
      tn,
      en,
      nn,
      dn,
      pn,
      mn,
      fn,
      vn,
      xn,
      wn,
      Cn,
      On,
      Wn,
      Vn,
      En,
    ];
    for (const t of Gn) Object(Un.d)(t);
    var Hn = n(11);
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class qn {
      fetch(t, e) {
        return fetch(t, e);
      }
      now() {
        return performance.now();
      }
      encode(t, e) {
        if ("utf-8" !== e && "utf8" !== e)
          throw new Error(
            "Browser's encoder only supports utf-8, but got " + e
          );
        return (
          null == this.textEncoder && (this.textEncoder = new TextEncoder()),
          this.textEncoder.encode(t)
        );
      }
      decode(t, e) {
        return new TextDecoder(e).decode(t);
      }
    }
    Object(Hn.b)().get("IS_BROWSER") &&
      Object(Hn.b)().setPlatform("browser", new qn());
    n(68);
    var Kn = n(13);
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class Xn {
      constructor() {
        (this.saveRouters = []), (this.loadRouters = []);
      }
      static getInstance() {
        return null == Xn.instance && (Xn.instance = new Xn()), Xn.instance;
      }
      static registerSaveRouter(t) {
        Xn.getInstance().saveRouters.push(t);
      }
      static registerLoadRouter(t) {
        Xn.getInstance().loadRouters.push(t);
      }
      static getSaveHandlers(t) {
        return Xn.getHandlers(t, "save");
      }
      static getLoadHandlers(t, e) {
        return Xn.getHandlers(t, "load", e);
      }
      static getHandlers(t, e, n) {
        const r = [];
        return (
          ("load" === e
            ? Xn.getInstance().loadRouters
            : Xn.getInstance().saveRouters
          ).forEach((e) => {
            const a = e(t, n);
            null !== a && r.push(a);
          }),
          r
        );
      }
    }
    const Yn = (t) => Xn.registerSaveRouter(t),
      Jn = (t) => Xn.registerLoadRouter(t),
      Qn = (t) => Xn.getSaveHandlers(t),
      Zn = (t, e) => Xn.getLoadHandlers(t, e);
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class tr {
      constructor() {
        this.managers = {};
      }
      static getInstance() {
        return null == tr.instance && (tr.instance = new tr()), tr.instance;
      }
      static registerManager(t, e) {
        Object(R.assert)(
          null != t,
          () => "scheme must not be undefined or null."
        ),
          t.endsWith("://") && (t = t.slice(0, t.indexOf("://"))),
          Object(R.assert)(
            t.length > 0,
            () => "scheme must not be an empty string."
          );
        const n = tr.getInstance();
        Object(R.assert)(
          null == n.managers[t],
          () => `A model store manager is already registered for scheme '${t}'.`
        ),
          (n.managers[t] = e);
      }
      static getManager(t) {
        const e = this.getInstance().managers[t];
        if (null == e)
          throw new Error(`Cannot find model manager for scheme '${t}'`);
        return e;
      }
      static getSchemes() {
        return Object.keys(this.getInstance().managers);
      }
    }
    function er(t) {
      if (-1 === t.indexOf("://"))
        throw new Error(
          "The url string provided does not contain a scheme. Supported schemes are: " +
            tr.getSchemes().join(",")
        );
      return { scheme: t.split("://")[0], path: t.split("://")[1] };
    }
    async function nr(t, e, n = !1) {
      Object(R.assert)(
        t !== e,
        () => `Old path and new path are the same: '${t}'`
      );
      const r = Xn.getLoadHandlers(t);
      Object(R.assert)(
        r.length > 0,
        () =>
          `Copying failed because no load handler is found for source URL ${t}.`
      ),
        Object(R.assert)(
          r.length < 2,
          () =>
            `Copying failed because more than one (${r.length}) load handlers for source URL ${t}.`
        );
      const a = r[0],
        i = Xn.getSaveHandlers(e);
      Object(R.assert)(
        i.length > 0,
        () =>
          `Copying failed because no save handler is found for destination URL ${e}.`
      ),
        Object(R.assert)(
          i.length < 2,
          () =>
            `Copying failed because more than one (${r.length}) save handlers for destination URL ${e}.`
        );
      const o = i[0],
        s = er(t).scheme,
        u = er(t).path,
        c = s === er(t).scheme,
        l = await a.load();
      n && c && (await tr.getManager(s).removeModel(u));
      const h = await o.save(l);
      return (
        n && !c && (await tr.getManager(s).removeModel(u)), h.modelArtifactsInfo
      );
    }
    async function rr() {
      const t = tr.getSchemes(),
        e = {};
      for (const n of t) {
        const t = await tr.getManager(n).listModels();
        for (const r in t) {
          e[n + "://" + r] = t[r];
        }
      }
      return e;
    }
    async function ar(t) {
      const e = er(t);
      return tr.getManager(e.scheme).removeModel(e.path);
    }
    async function ir(t, e) {
      return nr(t, e, !1);
    }
    async function or(t, e) {
      return nr(t, e, !0);
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function sr() {
      if (!Object(Hn.b)().getBool("IS_BROWSER"))
        throw new Error(
          "Failed to obtain IndexedDB factory because the current environmentis not a web browser."
        );
      const t = "undefined" == typeof window ? self : window,
        e =
          t.indexedDB ||
          t.mozIndexedDB ||
          t.webkitIndexedDB ||
          t.msIndexedDB ||
          t.shimIndexedDB;
      if (null == e)
        throw new Error(
          "The current browser does not appear to support IndexedDB."
        );
      return e;
    }
    function ur(t) {
      const e = t.result;
      e.createObjectStore("models_store", { keyPath: "modelPath" }),
        e.createObjectStore("model_info_store", { keyPath: "modelPath" });
    }
    class cr {
      constructor(t) {
        if (((this.indexedDB = sr()), null == t || !t))
          throw new Error(
            "For IndexedDB, modelPath must not be null, undefined or empty."
          );
        this.modelPath = t;
      }
      async save(t) {
        if (t.modelTopology instanceof ArrayBuffer)
          throw new Error(
            "BrowserLocalStorage.save() does not support saving model topology in binary formats yet."
          );
        return this.databaseAction(this.modelPath, t);
      }
      async load() {
        return this.databaseAction(this.modelPath);
      }
      databaseAction(t, e) {
        return new Promise((t, n) => {
          const r = this.indexedDB.open("tensorflowjs", 1);
          (r.onupgradeneeded = () => ur(r)),
            (r.onsuccess = () => {
              const a = r.result;
              if (null == e) {
                const e = a.transaction("models_store", "readonly"),
                  r = e.objectStore("models_store").get(this.modelPath);
                (r.onsuccess = () => {
                  if (null == r.result)
                    return (
                      a.close(),
                      n(
                        new Error(
                          `Cannot find model with path '${this.modelPath}' in IndexedDB.`
                        )
                      )
                    );
                  t(r.result.modelArtifacts);
                }),
                  (r.onerror = (t) => (a.close(), n(r.error))),
                  (e.oncomplete = () => a.close());
              } else {
                const r = Object(Kn.g)(e),
                  i = a.transaction("model_info_store", "readwrite");
                let o = i.objectStore("model_info_store");
                const s = o.put({
                  modelPath: this.modelPath,
                  modelArtifactsInfo: r,
                });
                let u;
                (s.onsuccess = () => {
                  u = a.transaction("models_store", "readwrite");
                  const s = u
                    .objectStore("models_store")
                    .put({
                      modelPath: this.modelPath,
                      modelArtifacts: e,
                      modelArtifactsInfo: r,
                    });
                  (s.onsuccess = () => t({ modelArtifactsInfo: r })),
                    (s.onerror = (t) => {
                      o = i.objectStore("model_info_store");
                      const e = o.delete(this.modelPath);
                      (e.onsuccess = () => (a.close(), n(s.error))),
                        (e.onerror = (t) => (a.close(), n(s.error)));
                    });
                }),
                  (s.onerror = (t) => (a.close(), n(s.error))),
                  (i.oncomplete = () => {
                    null == u ? a.close() : (u.oncomplete = () => a.close());
                  });
              }
            }),
            (r.onerror = (t) => n(r.error));
        });
      }
    }
    cr.URL_SCHEME = "indexeddb://";
    const lr = (t) => {
      return Object(Hn.b)().getBool("IS_BROWSER") &&
        !Array.isArray(t) &&
        t.startsWith(cr.URL_SCHEME)
        ? ((e = t.slice(cr.URL_SCHEME.length)), new cr(e))
        : null;
      var e;
    };
    Xn.registerSaveRouter(lr), Xn.registerLoadRouter(lr);
    class hr {
      constructor() {
        this.indexedDB = sr();
      }
      async listModels() {
        return new Promise((t, e) => {
          const n = this.indexedDB.open("tensorflowjs", 1);
          (n.onupgradeneeded = () => ur(n)),
            (n.onsuccess = () => {
              const r = n.result,
                a = r.transaction("model_info_store", "readonly"),
                i = a.objectStore("model_info_store").getAll();
              (i.onsuccess = () => {
                const e = {};
                for (const t of i.result) e[t.modelPath] = t.modelArtifactsInfo;
                t(e);
              }),
                (i.onerror = (t) => (r.close(), e(i.error))),
                (a.oncomplete = () => r.close());
            }),
            (n.onerror = (t) => e(n.error));
        });
      }
      async removeModel(t) {
        var e;
        return (
          (t = (e = t).startsWith(cr.URL_SCHEME)
            ? e.slice(cr.URL_SCHEME.length)
            : e),
          new Promise((e, n) => {
            const r = this.indexedDB.open("tensorflowjs", 1);
            (r.onupgradeneeded = () => ur(r)),
              (r.onsuccess = () => {
                const a = r.result,
                  i = a.transaction("model_info_store", "readwrite"),
                  o = i.objectStore("model_info_store"),
                  s = o.get(t);
                let u;
                (s.onsuccess = () => {
                  if (null == s.result)
                    return (
                      a.close(),
                      n(
                        new Error(
                          `Cannot find model with path '${t}' in IndexedDB.`
                        )
                      )
                    );
                  {
                    const r = o.delete(t),
                      i = () => {
                        u = a.transaction("models_store", "readwrite");
                        const r = u.objectStore("models_store").delete(t);
                        (r.onsuccess = () => e(s.result.modelArtifactsInfo)),
                          (r.onerror = (t) => n(s.error));
                      };
                    (r.onsuccess = i),
                      (r.onerror = (t) => (i(), a.close(), n(s.error)));
                  }
                }),
                  (s.onerror = (t) => (a.close(), n(s.error))),
                  (i.oncomplete = () => {
                    null == u ? a.close() : (u.oncomplete = () => a.close());
                  });
              }),
              (r.onerror = (t) => n(r.error));
          })
        );
      }
    }
    if (Object(Hn.b)().getBool("IS_BROWSER"))
      try {
        tr.registerManager(cr.URL_SCHEME, new hr());
      } catch (t) {}
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const dr = "tensorflowjs_models",
      pr = "info",
      fr = "model_topology",
      mr = "weight_specs",
      gr = "weight_data",
      br = "model_metadata";
    function vr(t) {
      return {
        info: [dr, t, pr].join("/"),
        topology: [dr, t, fr].join("/"),
        weightSpecs: [dr, t, mr].join("/"),
        weightData: [dr, t, gr].join("/"),
        modelMetadata: [dr, t, br].join("/"),
      };
    }
    function yr(t) {
      const e = t.split("/");
      if (e.length < 3) throw new Error("Invalid key format: " + t);
      return e.slice(1, e.length - 1).join("/");
    }
    class xr {
      constructor(t) {
        if (
          !Object(Hn.b)().getBool("IS_BROWSER") ||
          "undefined" == typeof window ||
          void 0 === window.localStorage
        )
          throw new Error(
            "The current environment does not support local storage."
          );
        if (((this.LS = window.localStorage), null == t || !t))
          throw new Error(
            "For local storage, modelPath must not be null, undefined or empty."
          );
        (this.modelPath = t), (this.keys = vr(this.modelPath));
      }
      async save(t) {
        if (t.modelTopology instanceof ArrayBuffer)
          throw new Error(
            "BrowserLocalStorage.save() does not support saving model topology in binary formats yet."
          );
        {
          const e = JSON.stringify(t.modelTopology),
            n = JSON.stringify(t.weightSpecs),
            r = Object(Kn.g)(t);
          try {
            return (
              this.LS.setItem(this.keys.info, JSON.stringify(r)),
              this.LS.setItem(this.keys.topology, e),
              this.LS.setItem(this.keys.weightSpecs, n),
              this.LS.setItem(this.keys.weightData, Object(Kn.a)(t.weightData)),
              this.LS.setItem(
                this.keys.modelMetadata,
                JSON.stringify({
                  format: t.format,
                  generatedBy: t.generatedBy,
                  convertedBy: t.convertedBy,
                  userDefinedMetadata: t.userDefinedMetadata,
                })
              ),
              { modelArtifactsInfo: r }
            );
          } catch (t) {
            throw (
              (this.LS.removeItem(this.keys.info),
              this.LS.removeItem(this.keys.topology),
              this.LS.removeItem(this.keys.weightSpecs),
              this.LS.removeItem(this.keys.weightData),
              this.LS.removeItem(this.keys.modelMetadata),
              new Error(
                `Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`
              ))
            );
          }
        }
      }
      async load() {
        const t = JSON.parse(this.LS.getItem(this.keys.info));
        if (null == t)
          throw new Error(
            `In local storage, there is no model with name '${this.modelPath}'`
          );
        if ("JSON" !== t.modelTopologyType)
          throw new Error(
            "BrowserLocalStorage does not support loading non-JSON model topology yet."
          );
        const e = {},
          n = JSON.parse(this.LS.getItem(this.keys.topology));
        if (null == n)
          throw new Error(
            `In local storage, the topology of model '${this.modelPath}' is missing.`
          );
        e.modelTopology = n;
        const r = JSON.parse(this.LS.getItem(this.keys.weightSpecs));
        if (null == r)
          throw new Error(
            `In local storage, the weight specs of model '${this.modelPath}' are missing.`
          );
        e.weightSpecs = r;
        const a = this.LS.getItem(this.keys.modelMetadata);
        if (null != a) {
          const t = JSON.parse(a);
          (e.format = t.format),
            (e.generatedBy = t.generatedBy),
            (e.convertedBy = t.convertedBy),
            (e.userDefinedMetadata = t.userDefinedMetadata);
        }
        const i = this.LS.getItem(this.keys.weightData);
        if (null == i)
          throw new Error(
            `In local storage, the binary weight values of model '${this.modelPath}' are missing.`
          );
        return (e.weightData = Object(Kn.b)(i)), e;
      }
    }
    xr.URL_SCHEME = "localstorage://";
    const wr = (t) => {
      return Object(Hn.b)().getBool("IS_BROWSER") &&
        !Array.isArray(t) &&
        t.startsWith(xr.URL_SCHEME)
        ? ((e = t.slice(xr.URL_SCHEME.length)), new xr(e))
        : null;
      var e;
    };
    Xn.registerSaveRouter(wr), Xn.registerLoadRouter(wr);
    class Cr {
      constructor() {
        Object(R.assert)(
          Object(Hn.b)().getBool("IS_BROWSER"),
          () => "Current environment is not a web browser"
        ),
          Object(R.assert)(
            "undefined" == typeof window || void 0 !== window.localStorage,
            () => "Current browser does not appear to support localStorage"
          ),
          (this.LS = window.localStorage);
      }
      async listModels() {
        const t = {},
          e = dr + "/",
          n = "/" + pr;
        for (let r = 0; r < this.LS.length; ++r) {
          const a = this.LS.key(r);
          if (a.startsWith(e) && a.endsWith(n)) {
            t[yr(a)] = JSON.parse(this.LS.getItem(a));
          }
        }
        return t;
      }
      async removeModel(t) {
        var e;
        const n = vr(
          (t = (e = t).startsWith(xr.URL_SCHEME)
            ? e.slice(xr.URL_SCHEME.length)
            : e)
        );
        if (null == this.LS.getItem(n.info))
          throw new Error(`Cannot find model at path '${t}'`);
        const r = JSON.parse(this.LS.getItem(n.info));
        return (
          this.LS.removeItem(n.info),
          this.LS.removeItem(n.topology),
          this.LS.removeItem(n.weightSpecs),
          this.LS.removeItem(n.weightData),
          r
        );
      }
    }
    if (Object(Hn.b)().getBool("IS_BROWSER"))
      try {
        tr.registerManager(xr.URL_SCHEME, new Cr());
      } catch (t) {}
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Or(t) {
      return new Promise((t) => setTimeout(t)).then(t);
    }
    class Er {
      constructor(t) {
        if (!Object(Hn.b)().getBool("IS_BROWSER"))
          throw new Error(
            "browserDownloads() cannot proceed because the current environment is not a browser."
          );
        t.startsWith(Er.URL_SCHEME) && (t = t.slice(Er.URL_SCHEME.length)),
          (null != t && 0 !== t.length) || (t = "model"),
          (this.modelTopologyFileName = t + ".json"),
          (this.weightDataFileName = t + ".weights.bin");
      }
      async save(t) {
        if ("undefined" == typeof document)
          throw new Error(
            "Browser downloads are not supported in this environment since `document` is not present"
          );
        const e = window.URL.createObjectURL(
          new Blob([t.weightData], { type: "application/octet-stream" })
        );
        if (t.modelTopology instanceof ArrayBuffer)
          throw new Error(
            "BrowserDownloads.save() does not support saving model topology in binary formats yet."
          );
        {
          const n = [
              {
                paths: ["./" + this.weightDataFileName],
                weights: t.weightSpecs,
              },
            ],
            r = {
              modelTopology: t.modelTopology,
              format: t.format,
              generatedBy: t.generatedBy,
              convertedBy: t.convertedBy,
              weightsManifest: n,
            },
            a = window.URL.createObjectURL(
              new Blob([JSON.stringify(r)], { type: "application/json" })
            ),
            i =
              null == this.jsonAnchor
                ? document.createElement("a")
                : this.jsonAnchor;
          if (
            ((i.download = this.modelTopologyFileName),
            (i.href = a),
            await Or(() => i.dispatchEvent(new MouseEvent("click"))),
            null != t.weightData)
          ) {
            const t =
              null == this.weightDataAnchor
                ? document.createElement("a")
                : this.weightDataAnchor;
            (t.download = this.weightDataFileName),
              (t.href = e),
              await Or(() => t.dispatchEvent(new MouseEvent("click")));
          }
          return { modelArtifactsInfo: Object(Kn.g)(t) };
        }
      }
    }
    Er.URL_SCHEME = "downloads://";
    class Sr {
      constructor(t) {
        if (null == t || t.length < 1)
          throw new Error(
            "When calling browserFiles, at least 1 file is required, but received " +
              t
          );
        this.files = t;
      }
      async load() {
        const t = this.files[0],
          e = this.files.slice(1);
        return new Promise((n, r) => {
          const a = new FileReader();
          (a.onload = (a) => {
            const i = JSON.parse(a.target.result),
              o = i.modelTopology;
            if (null == o)
              return void r(
                new Error("modelTopology field is missing from file " + t.name)
              );
            0 === e.length && n({ modelTopology: o });
            const s = i.weightsManifest;
            if (null == s)
              return void r(
                new Error("weightManifest field is missing from file " + t.name)
              );
            let u;
            try {
              u = this.checkManifestAndWeightFiles(s, e);
            } catch (t) {
              return void r(t);
            }
            const c = [],
              l = [],
              h = [];
            s.forEach((t) => {
              t.paths.forEach((t) => {
                l.push(t), h.push(null);
              }),
                c.push(...t.weights);
            }),
              s.forEach((t) => {
                t.paths.forEach((t) => {
                  const e = new FileReader();
                  (e.onload = (e) => {
                    const r = e.target.result,
                      a = l.indexOf(t);
                    (h[a] = r),
                      -1 === h.indexOf(null) &&
                        n({
                          modelTopology: o,
                          weightSpecs: c,
                          weightData: Object(Kn.d)(h),
                          format: i.format,
                          generatedBy: i.generatedBy,
                          convertedBy: i.convertedBy,
                          userDefinedMetadata: i.userDefinedMetadata,
                        });
                  }),
                    (e.onerror = (e) =>
                      r(`Failed to weights data from file of path '${t}'.`)),
                    e.readAsArrayBuffer(u[t]);
                });
              });
          }),
            (a.onerror = (e) =>
              r(
                `Failed to read model topology and weights manifest JSON from file '${t.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`
              )),
            a.readAsText(t);
        });
      }
      checkManifestAndWeightFiles(t, e) {
        const n = [],
          r = e.map((t) => Object(Kn.c)(t.name)),
          a = {};
        for (const i of t)
          i.paths.forEach((t) => {
            const i = Object(Kn.c)(t);
            if (-1 !== n.indexOf(i))
              throw new Error(
                `Duplicate file basename found in weights manifest: '${i}'`
              );
            if ((n.push(i), -1 === r.indexOf(i)))
              throw new Error(
                `Weight file with basename '${i}' is not provided.`
              );
            a[t] = e[r.indexOf(i)];
          });
        if (n.length !== e.length)
          throw new Error(
            `Mismatch in the number of files in weights manifest (${n.length}) and the number of weight files provided (${e.length}).`
          );
        return a;
      }
    }
    function Ir(t) {
      return new Sr(t);
    }
    /**
     * @license
     * Copyright 2019 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function kr(t, e, n, r) {
      !(function (t) {
        Object(R.assert)(
          null != t && Array.isArray(t) && t.length > 0,
          () => "promises must be a none empty array"
        );
      })(t),
        (function (t, e) {
          Object(R.assert)(
            t >= 0 && t <= 1,
            () =>
              "Progress fraction must be in range [0, 1], but got startFraction " +
              t
          ),
            Object(R.assert)(
              e >= 0 && e <= 1,
              () =>
                "Progress fraction must be in range [0, 1], but got endFraction " +
                e
            ),
            Object(R.assert)(
              e >= t,
              () =>
                `startFraction must be no more than endFraction, but got startFraction ${t} and endFraction ` +
                e
            );
        })((n = null == n ? 0 : n), (r = null == r ? 1 : r));
      let a = 0;
      return Promise.all(
        t.map(
          (i) => (
            i.then((i) => {
              const o = n + (++a / t.length) * (r - n);
              return e(o), i;
            }),
            i
          )
        )
      );
    }
    Xn.registerSaveRouter((t) =>
      Object(Hn.b)().getBool("IS_BROWSER") &&
      !Array.isArray(t) &&
      t.startsWith(Er.URL_SCHEME)
        ? (function (t = "model") {
            return new Er(t);
          })(t.slice(Er.URL_SCHEME.length))
        : null
    );
    var Nr = n(31);
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ async function Rr(t, e) {
      null == e && (e = {});
      const n =
          null == e.fetchFunc ? Object(Hn.b)().platform.fetch : e.fetchFunc,
        r = t.map((t) => n(t, e.requestInit, { isBinary: !0 })),
        a = (null == e.onProgress
          ? await Promise.all(r)
          : await kr(r, e.onProgress, 0, 0.5)
        ).map((t) => t.arrayBuffer());
      return null == e.onProgress
        ? await Promise.all(a)
        : await kr(a, e.onProgress, 0.5, 1);
    }
    async function Ar(t, e = "", n, r) {
      return Tr((t) => Rr(t, { requestInit: r }))(t, e, n);
    }
    function Tr(t) {
      return async (e, n = "", r) => {
        const a = e.map(() => !1),
          i = {},
          o = null != r ? r.map(() => !1) : [],
          s = [];
        if (
          (e.forEach((t, e) => {
            let n = 0;
            t.weights.forEach((t) => {
              const u = "quantization" in t ? t.quantization.dtype : t.dtype,
                c = Nr.a[u] * R.sizeFromShape(t.shape),
                l = () => {
                  (a[e] = !0),
                    null == i[e] && (i[e] = []),
                    i[e].push({
                      manifestEntry: t,
                      groupOffset: n,
                      sizeBytes: c,
                    });
                };
              null != r
                ? r.forEach((e, n) => {
                    e === t.name && (l(), (o[n] = !0));
                  })
                : l(),
                s.push(t.name),
                (n += c);
            });
          }),
          !o.every((t) => t))
        ) {
          const t = r.filter((t, e) => !o[e]);
          throw new Error(
            "Could not find weights in manifest with names: " +
              t.join(", ") +
              ". \nManifest JSON has weights with names: " +
              s.join(", ") +
              "."
          );
        }
        const u = a.reduce((t, e, n) => (e && t.push(n), t), []),
          c = [];
        u.forEach((t) => {
          e[t].paths.forEach((t) => {
            const e = n + (n.endsWith("/") ? "" : "/") + t;
            c.push(e);
          });
        });
        const l = await t(c),
          h = {};
        let d = 0;
        return (
          u.forEach((t) => {
            const n = e[t].paths.length;
            let r = 0;
            for (let t = 0; t < n; t++) r += l[d + t].byteLength;
            const a = new ArrayBuffer(r),
              o = new Uint8Array(a);
            let s = 0;
            for (let t = 0; t < n; t++) {
              const e = new Uint8Array(l[d + t]);
              o.set(e, s), (s += e.byteLength);
            }
            i[t].forEach((t) => {
              const e = a.slice(t.groupOffset, t.groupOffset + t.sizeBytes),
                n = Object(Kn.e)(e, [t.manifestEntry]);
              for (const t in n) h[t] = n[t];
            }),
              (d += n);
          }),
          h
        );
      };
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class _r {
      constructor(t, e) {
        if (
          ((this.DEFAULT_METHOD = "POST"),
          null == e && (e = {}),
          (this.weightPathPrefix = e.weightPathPrefix),
          (this.onProgress = e.onProgress),
          null != e.fetchFunc
            ? (Object(R.assert)(
                "function" == typeof e.fetchFunc,
                () =>
                  "Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"
              ),
              (this.fetch = e.fetchFunc))
            : (this.fetch = Object(Hn.b)().platform.fetch),
          Object(R.assert)(
            null != t && t.length > 0,
            () => "URL path for http must not be null, undefined or empty."
          ),
          Array.isArray(t) &&
            Object(R.assert)(
              2 === t.length,
              () =>
                `URL paths for http must have a length of 2, (actual length is ${t.length}).`
            ),
          (this.path = t),
          null != e.requestInit && null != e.requestInit.body)
        )
          throw new Error(
            "requestInit is expected to have no pre-existing body, but has one."
          );
        this.requestInit = e.requestInit || {};
      }
      async save(t) {
        if (t.modelTopology instanceof ArrayBuffer)
          throw new Error(
            "BrowserHTTPRequest.save() does not support saving model topology in binary formats yet."
          );
        const e = Object.assign(
          { method: this.DEFAULT_METHOD },
          this.requestInit
        );
        e.body = new FormData();
        const n = [{ paths: ["./model.weights.bin"], weights: t.weightSpecs }],
          r = {
            modelTopology: t.modelTopology,
            format: t.format,
            generatedBy: t.generatedBy,
            convertedBy: t.convertedBy,
            userDefinedMetadata: t.userDefinedMetadata,
            weightsManifest: n,
          };
        e.body.append(
          "model.json",
          new Blob([JSON.stringify(r)], { type: "application/json" }),
          "model.json"
        ),
          null != t.weightData &&
            e.body.append(
              "model.weights.bin",
              new Blob([t.weightData], { type: "application/octet-stream" }),
              "model.weights.bin"
            );
        const a = await this.fetch(this.path, e);
        if (a.ok)
          return { modelArtifactsInfo: Object(Kn.g)(t), responses: [a] };
        throw new Error(
          "BrowserHTTPRequest.save() failed due to HTTP response status " +
            a.status +
            "."
        );
      }
      async load() {
        const t = await this.fetch(this.path, this.requestInit);
        if (!t.ok)
          throw new Error(
            `Request to ${this.path} failed with status code ` +
              t.status +
              ". Please verify this URL points to the model JSON of the model to load."
          );
        let e;
        try {
          e = await t.json();
        } catch (t) {
          let e = `Failed to parse model JSON of response from ${this.path}.`;
          throw (
            (this.path.endsWith(".pb")
              ? (e +=
                  " Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.")
              : (e +=
                  " Please make sure the server is serving valid JSON for this request."),
            new Error(e))
          );
        }
        const n = e.modelTopology,
          r = e.weightsManifest,
          a = e.generatedBy,
          i = e.convertedBy,
          o = e.format,
          s = e.userDefinedMetadata;
        if (null == n && null == r)
          throw new Error(
            `The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`
          );
        let u, c;
        if (null != r) {
          const t = await this.loadWeights(r);
          [u, c] = t;
        }
        return {
          modelTopology: n,
          weightSpecs: u,
          weightData: c,
          userDefinedMetadata: s,
          generatedBy: a,
          convertedBy: i,
          format: o,
        };
      }
      async loadWeights(t) {
        const e = Array.isArray(this.path) ? this.path[1] : this.path,
          [n, r] = (function (t) {
            const e = t.lastIndexOf("/"),
              n = t.lastIndexOf("?"),
              r = t.substring(0, e),
              a = n > e ? t.substring(n) : "";
            return [r + "/", a];
          })(e),
          a = this.weightPathPrefix || n,
          i = [];
        for (const e of t) i.push(...e.weights);
        const o = [];
        t.forEach((t) => {
          t.paths.forEach((t) => {
            o.push(a + t + r);
          });
        });
        const s = await Rr(o, {
          requestInit: this.requestInit,
          fetchFunc: this.fetch,
          onProgress: this.onProgress,
        });
        return [i, Object(Kn.d)(s)];
      }
    }
    function Dr(t) {
      return null != t.match(_r.URL_SCHEME_REGEX);
    }
    _r.URL_SCHEME_REGEX = /^https?:\/\//;
    const Fr = (t, e) => {
      if ("undefined" == typeof fetch && (null == e || null == e.fetchFunc))
        return null;
      {
        let n = !0;
        if (((n = Array.isArray(t) ? t.every((t) => Dr(t)) : Dr(t)), n))
          return Mr(t, e);
      }
      return null;
    };
    function Mr(t, e) {
      return new _r(t, e);
    }
    function jr(t, e) {
      return Mr(t, e);
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ Xn.registerSaveRouter(Fr), Xn.registerLoadRouter(Fr);
    class $r {
      constructor(t) {
        this.modelArtifacts = t;
      }
      async load() {
        return this.modelArtifacts;
      }
    }
    class Br {
      constructor(t) {
        this.saveHandler = t;
      }
      async save(t) {
        return this.saveHandler(t);
      }
    }
    function Pr(t, e, n, r) {
      if (1 === arguments.length) {
        return null != t.modelTopology || null != t.weightSpecs
          ? new $r(t)
          : (console.warn(
              "Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."
            ),
            new $r({ modelTopology: t }));
      }
      return (
        console.warn(
          "Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."
        ),
        new $r({
          modelTopology: t,
          weightSpecs: e,
          weightData: n,
          trainingConfig: r,
        })
      );
    }
    function Lr(t) {
      return new Br(t);
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const zr = Object(I.a)({
      oneHot_: function (t, e, n = 1, r = 0) {
        if (e < 2)
          throw new Error("Error in oneHot: depth must be >=2, but it is " + e);
        let a = Object(S.a)(t, "indices", "oneHot", "int32");
        const i = [...a.shape, e];
        a = a.flatten();
        const o = { indices: a },
          s = { depth: e, onValue: n, offValue: r };
        return b.a.runKernelFunc(
          (t, o) => (o([a]), B(t.oneHot(a, e, n, r), i)),
          o,
          null,
          v.cb,
          s
        );
      },
    });
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ Object(I.a)({
      confusionMatrix_: function (t, e, n) {
        const r = Object(S.a)(t, "labels", "confusionMatrix"),
          a = Object(S.a)(e, "predictions", "confusionMatrix");
        R.assert(
          null == n || (n > 0 && Number.isInteger(n)),
          () =>
            "If provided, numClasses must be a positive integer, but got " + n
        ),
          R.assert(
            1 === r.rank,
            () => "Expected the rank of labels to be 1, but got " + r.rank
          ),
          R.assert(
            1 === a.rank,
            () => "Expected the rank of predictions to be 1, but got " + a.rank
          ),
          R.assert(
            r.shape[0] === a.shape[0],
            () =>
              `Mismatch in the number of examples: ${r.shape[0]} vs. ${a.shape[0]}. Labels and predictions should have the same number of elements.`
          ),
          R.assert(
            n > 0 && Number.isInteger(n),
            () =>
              "numClasses is required to be a positive integer, but got " + n
          );
        const i = zr(r.asType("int32"), n),
          o = zr(a.asType("int32"), n);
        return i.transpose().matMul(o).asType("int32");
      },
    });
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * @license
     * Copyright 2019 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ let Wr;
    async function Vr(t, e) {
      let n = Object(S.a)(t, "img", "toPixels");
      if (!(t instanceof N.a)) {
        const t = n;
        (n = t.toInt()), t.dispose();
      }
      if (2 !== n.rank && 3 !== n.rank)
        throw new Error(
          `toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`
        );
      const [r, a] = n.shape.slice(0, 2),
        i = 2 === n.rank ? 1 : n.shape[2];
      if (i > 4 || 2 === i)
        throw new Error(
          "toPixels only supports depth of size 1, 3 or 4 but got " + i
        );
      const o = await n.data(),
        s = n.min(),
        u = n.max(),
        c = await Promise.all([s.data(), u.data()]),
        l = c[0],
        h = c[1],
        d = l[0],
        p = h[0];
      if ((s.dispose(), u.dispose(), "float32" === n.dtype)) {
        if (d < 0 || p > 1)
          throw new Error(
            `Tensor values for a float32 Tensor must be in the range [0 - 1] but got range [${d} - ${p}].`
          );
      } else {
        if ("int32" !== n.dtype)
          throw new Error(
            `Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`
          );
        if (d < 0 || p > 255)
          throw new Error(
            `Tensor values for a int32 Tensor must be in the range [0 - 255] but got range [${d} - ${p}].`
          );
      }
      const f = "float32" === n.dtype ? 255 : 1,
        m = new Uint8ClampedArray(a * r * 4);
      for (let t = 0; t < r * a; ++t) {
        let e, n, r, a;
        1 === i
          ? ((e = o[t] * f), (n = o[t] * f), (r = o[t] * f), (a = 255))
          : 3 === i
          ? ((e = o[3 * t] * f),
            (n = o[3 * t + 1] * f),
            (r = o[3 * t + 2] * f),
            (a = 255))
          : 4 === i &&
            ((e = o[4 * t] * f),
            (n = o[4 * t + 1] * f),
            (r = o[4 * t + 2] * f),
            (a = o[4 * t + 3] * f));
        const s = 4 * t;
        (m[s + 0] = Math.round(e)),
          (m[s + 1] = Math.round(n)),
          (m[s + 2] = Math.round(r)),
          (m[s + 3] = Math.round(a));
      }
      if (null != e) {
        (e.width = a), (e.height = r);
        const t = e.getContext("2d"),
          n = new ImageData(m, a, r);
        t.putImageData(n, 0, 0);
      }
      return n !== t && n.dispose(), m;
    }
    const Ur = Object(I.a)({
      fromPixels_: function (t, e = 3) {
        if (e > 4)
          throw new Error(
            "Cannot construct Tensor with more than 4 channels from pixels."
          );
        if (null == t)
          throw new Error(
            "pixels passed to tf.browser.fromPixels() can not be null"
          );
        let n = !1,
          r = !1,
          a = !1,
          i = !1,
          o = !1;
        if (t.data instanceof Uint8Array) n = !0;
        else if ("undefined" != typeof ImageData && t instanceof ImageData)
          r = !0;
        else if (
          "undefined" != typeof HTMLVideoElement &&
          t instanceof HTMLVideoElement
        )
          a = !0;
        else if (
          "undefined" != typeof HTMLImageElement &&
          t instanceof HTMLImageElement
        )
          i = !0;
        else {
          if (null == t.getContext)
            throw new Error(
              "pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was " +
                t.constructor.name
            );
          o = !0;
        }
        if (a) {
          const e = 2;
          if (a && t.readyState < e)
            throw new Error(
              "The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element."
            );
        }
        if (null != Object(Un.b)(v.E, b.a.backendName)) {
          const n = { pixels: t },
            r = { numChannels: e };
          return b.a.runKernel(v.E, n, r);
        }
        const [s, u] = a ? [t.videoWidth, t.videoHeight] : [t.width, t.height];
        let c, l;
        if (
          (o
            ? (c = t.getContext("2d").getImageData(0, 0, s, u).data)
            : r || n
            ? (c = t.data)
            : (i || a) &&
              (null == Wr &&
                (Wr = document.createElement("canvas").getContext("2d")),
              (Wr.canvas.width = s),
              (Wr.canvas.height = u),
              Wr.drawImage(t, 0, 0, s, u),
              (c = Wr.getImageData(0, 0, s, u).data)),
          4 === e)
        )
          l = new Int32Array(c);
        else {
          const t = s * u;
          l = new Int32Array(t * e);
          for (let n = 0; n < t; n++)
            for (let t = 0; t < e; ++t) l[n * e + t] = c[4 * n + t];
        }
        const h = [u, s, e];
        return Object(_.i)(l, h, "int32");
      },
    });
    function Gr(t, e) {
      if (t.rank < 1)
        throw new Error(
          `tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${t.rank}.`
        );
      if (e.rank < 1)
        throw new Error(
          `tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`
        );
      if ("int32" !== e.dtype)
        throw new Error(
          `tf.gatherND() expects the indices to be int32 type, but the dtype was ${e.dtype}.`
        );
      if (e.shape[e.rank - 1] > t.rank)
        throw new Error(
          `index innermost dimension length must be <= tensor rank; saw: ${
            e.shape[e.rank - 1]
          } vs. ${t.rank}`
        );
      if (0 === t.size)
        throw new Error(
          `Requested more than 0 entries, but input is empty. Input shape: ${t.shape}.`
        );
      const n = e.shape,
        r = n[n.length - 1];
      let a = 1;
      for (let t = 0; t < n.length - 1; ++t) a *= n[t];
      const i = t.shape,
        o = n.slice();
      o.pop();
      let s = 1;
      for (let e = r; e < t.rank; ++e) (s *= i[e]), o.push(i[e]);
      const u = [
        ...Object(R.computeStrides)(t.shape).map((t) => t / s),
        1,
      ].slice(0, r);
      return [o, a, s, u];
    }
    function Hr(t, e, n) {
      const r = e.rank > 1 ? e.shape[e.rank - 1] : 1,
        a = e.rank > 1 ? e.rank - 1 : 1,
        i =
          "Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: " +
          n.shape +
          `, indices.shape: ${e.shape}, shape: ${t}` +
          `, sliceDim: ${r}, and batchDim: ${a}.`;
      if (n.rank < a) throw new Error(i + ` update.rank < ${a}. `);
      if (t.length < r + (n.rank - a))
        throw new Error(i + " Output shape length < " + (r + (n.rank - a)));
      if (n.rank !== a + t.length - r)
        throw new Error(i + " update.rank != " + (a + t.length - r));
      for (let t = 0; t < a; ++t)
        if (n.shape[t] !== e.shape[t])
          throw new Error(
            i +
              ` updates.shape[${t}] (${n.shape[t]}) != indices.shape[${t}] (${e.shape[t]}).`
          );
      for (let e = 0; e < n.rank - a; ++e)
        if (n.shape[e + a] !== t[e + r])
          throw new Error(
            i +
              ` updates.shape[${e + a}] (${n.shape[e + a]}) != shape[${
                e + a
              }] (${t[e + a]})`
          );
    }
    function qr(t, e, n) {
      if (e.rank < 1)
        throw new Error(
          `tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`
        );
      if (t.rank < 1)
        throw new Error(
          `tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${t.rank}.`
        );
      if ("int32" !== e.dtype)
        throw new Error(
          "The dtype of 'indices' should be int32, but got dtype: " + e.dtype
        );
      if (n.length < 1)
        throw new Error(
          "Output rank must be greater or equal to 1, but got shape: " + n
        );
      if (0 === n.length) {
        if (0 === e.size)
          throw new Error(
            "Indices specified for empty output. indices shape: " + e.shape
          );
        if (0 === t.size)
          throw new Error(
            "Updates specified for empty output. updates shape: " + t.shape
          );
      }
      Hr(n, e, t);
    }
    function Kr(t, e, n) {
      const r = e.shape.length,
        a = r > 1 ? e.shape[r - 1] : 1,
        i = n.length;
      let o = 1;
      for (let t = a; t < i; ++t) o *= n[t];
      const s = a < 1 ? 1 : a;
      return {
        sliceRank: a,
        numUpdates: Object(R.sizeFromShape)(e.shape) / s,
        sliceSize: o,
        strides: [...Object(R.computeStrides)(n.slice(0, a)), 1],
        outputSize: Object(R.sizeFromShape)(n),
      };
    }
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class Xr {
      getClassName() {
        return this.constructor.className;
      }
      static fromConfig(t, e) {
        return new t(e);
      }
    }
    class Yr {
      constructor() {
        this.classNameMap = {};
      }
      static getMap() {
        return null == Yr.instance && (Yr.instance = new Yr()), Yr.instance;
      }
      static register(t) {
        Yr.getMap().classNameMap[t.className] = [t, t.fromConfig];
      }
    }
    function Jr(t) {
      Object(R.assert)(
        null != t.className,
        () =>
          "Class being registered does not have the static className property defined."
      ),
        Object(R.assert)(
          "string" == typeof t.className,
          () =>
            "className is required to be a string, but got type " +
            typeof t.className
        ),
        Object(R.assert)(
          t.className.length > 0,
          () =>
            "Class being registered has an empty-string as its className, which is disallowed."
        ),
        Yr.register(t);
    }
    /**
     * @license
     * Copyright 2017 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /** @license See the LICENSE file. */
    const Qr = "2.0.1";
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Zr() {
      Object(Hn.b)().set("PROD", !0);
    }
    function ta(t) {
      Object(Hn.b)().getBool("DEPRECATION_WARNINGS_ENABLED") &&
        console.warn(
          t +
            " You can disable deprecation warnings with tf.disableDeprecationWarnings()."
        );
    }
    function ea() {
      return b.a;
    }
    function na() {
      return b.a.memory();
    }
    function ra(t, e) {
      return b.a.tidy(t, e);
    }
    function aa(t) {
      Object(E.getTensorsInContainer)(t).forEach((t) => t.dispose());
    }
    function ia(t) {
      return b.a.keep(t);
    }
    function oa(t) {
      return b.a.setBackend(t);
    }
    function sa(t, e, n = 1) {
      return b.a.registerBackend(t, e, n);
    }
    function ua() {
      return b.a.backend;
    }
    Object(N.d)(ta);
    const ca = Object(I.a)({
      addN_:
        /**
         * @license
         * Copyright 2020 Google Inc. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (t) {
          R.assert(
            Array.isArray(t),
            () => "The argument passed to tf.addN() must be a list of tensors"
          ),
            R.assert(
              t.length >= 1,
              () =>
                "Must pass at least one tensor to tf.addN(), but got " +
                t.length
            );
          const e = t.map((t, e) => Object(S.a)(t, "tensors" + e, "addN")),
            n = e[0];
          e.forEach((t) => {
            if (t.dtype !== n.dtype)
              throw new Error(
                "All tensors passed to tf.addN() must have the same dtype"
              );
          }),
            e.forEach((t) => {
              if (!R.arraysEqual(t.shape, n.shape))
                throw new Error(
                  "All tensors passed to tf.addN() must have the same shape"
                );
            });
          const r = e;
          return b.a.runKernelFunc(
            (t, n) => {
              const r = t.addN(e);
              return n(e), r;
            },
            r,
            null,
            v.b
          );
        },
    });
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const la = Object(I.a)({
      atan2_: function (t, e) {
        let n = Object(S.a)(t, "a", "atan2"),
          r = Object(S.a)(e, "b", "atan2");
        [n, r] = Object(E.makeTypesMatch)(n, r);
        const a = { a: n, b: r };
        return b.a.runKernelFunc(
          (t, e) => {
            const a = t.atan2(n, r);
            return e([n, r]), a;
          },
          a,
          null,
          v.c
        );
      },
    });
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const ha = Object(I.a)({
      avgPool_: function (t, e, n, r, a) {
        const i = Object(S.a)(t, "x", "avgPool", "float32");
        R.assert(
          ie(n, 1),
          () =>
            `Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`
        );
        let o = i,
          s = !1;
        3 === i.rank &&
          ((s = !0), (o = B(i, [1, i.shape[0], i.shape[1], i.shape[2]]))),
          R.assert(
            4 === o.rank,
            () => `Error in avgPool: x must be rank 4 but got rank ${o.rank}.`
          ),
          null != a &&
            R.assert(
              R.isInt(r),
              () =>
                `Error in avgPool: pad must be an integer when using, dimRoundingMode ${a} but got pad ${r}.`
            );
        const u = { x: o },
          c = { filterSize: e, strides: n, pad: r, dimRoundingMode: a };
        let l = b.a.runKernelFunc(
          (t, i) => {
            const s = Xt(o.shape, e, n, 1, r, a);
            return (
              i([o]),
              1 === s.filterWidth &&
              1 === s.filterHeight &&
              R.arraysEqual(s.inShape, s.outShape)
                ? o.clone()
                : t.avgPool(o, s)
            );
          },
          u,
          null,
          v.d,
          c
        );
        return (
          (l = j(l, i.dtype)),
          s ? l.as3D(l.shape[1], l.shape[2], l.shape[3]) : l
        );
      },
    });
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const da = Object(I.a)({
      avgPool3d_: function (t, e, n, r, a, i = "NDHWC", o) {
        null == o
          ? (o = [1, 1, 1])
          : ta("dilations is deprecated, this field will be gone in v3.0.0.");
        const s = Object(S.a)(t, "x", "avgPool3d", "float32");
        let u = s,
          c = !1;
        4 === s.rank &&
          ((c = !0),
          (u = B(s, [1, s.shape[0], s.shape[1], s.shape[2], s.shape[3]]))),
          R.assert(
            5 === u.rank,
            () => `Error in avgPool3d: x must be rank 5 but got rank ${u.rank}.`
          ),
          R.assert(
            "NDHWC" === i,
            () =>
              "Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of " +
              i
          ),
          R.assert(
            ie(n, o),
            () =>
              `Error in avgPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${o}'`
          ),
          null != a &&
            R.assert(
              R.isInt(r),
              () =>
                `Error in avgPool3d: pad must be an integer when using, dimRoundingMode ${a} but got pad ${r}.`
            );
        const l = { x: u },
          h = {
            filterSize: e,
            strides: n,
            pad: r,
            dimRoundingMode: a,
            dataFormat: i,
            dilations: o,
          };
        let d = b.a.runKernelFunc(
          (t, s) => {
            null == o && (o = [1, 1, 1]);
            const c = Yt(u.shape, e, n, o, r, a, i);
            return s([u]), t.avgPool3d(u, c);
          },
          l,
          null,
          v.e,
          h
        );
        return (
          (d = j(d, u.dtype)),
          c ? d.as4D(d.shape[1], d.shape[2], d.shape[3], d.shape[4]) : d
        );
      },
    });
    function pa(t) {
      return null == t
        ? null
        : 0 === t.rank
        ? t.as1D()
        : 1 === t.rank
        ? t
        : 2 === t.rank
        ? t.as4D(1, 1, t.shape[0], t.shape[1])
        : 3 === t.rank
        ? t.as4D(1, t.shape[0], t.shape[1], t.shape[2])
        : t;
    }
    const fa = Object(I.a)({
      batchNorm_:
        /**
         * @license
         * Copyright 2020 Google Inc. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (t, e, n, r, a, i) {
          null == i && (i = 0.001);
          const o = Object(S.a)(t, "x", "batchNorm"),
            s = Object(S.a)(e, "mean", "batchNorm"),
            u = Object(S.a)(n, "variance", "batchNorm");
          let c, l;
          null != a && (c = Object(S.a)(a, "scale", "batchNorm")),
            null != r && (l = Object(S.a)(r, "offset", "batchNorm")),
            R.assert(
              s.rank === u.rank,
              () =>
                "Batch normalization gradient requires mean and variance to have equal ranks."
            ),
            R.assert(
              null == l || s.rank === l.rank,
              () =>
                "Batch normalization gradient requires mean and offset to have equal ranks."
            ),
            R.assert(
              null == c || s.rank === c.rank,
              () =>
                "Batch normalization gradient requires mean and scale to have equal ranks."
            );
          const h = (function (t) {
              let e;
              return (
                (e =
                  0 === t.rank || 1 === t.rank
                    ? t.as4D(1, 1, 1, t.size)
                    : 2 === t.rank
                    ? t.as4D(1, 1, t.shape[0], t.shape[1])
                    : 3 === t.rank
                    ? t.as4D(1, t.shape[0], t.shape[1], t.shape[2])
                    : t),
                e
              );
            })(o),
            d = { x: h, scale: c, offset: l, mean: s, variance: u },
            p = { varianceEpsilon: i },
            f = b.a.runKernelFunc(
              (t, e) => (
                e([h, s, u, c]), t.batchNorm(h, pa(s), pa(u), pa(l), pa(c), i)
              ),
              d,
              null,
              v.F,
              p
            );
          return B(f, o.shape);
        },
    });
    const ma = Object(I.a)({
      batchNorm2d_: function (t, e, n, r, a, i) {
        const o = Object(S.a)(t, "x", "batchNorm"),
          s = Object(S.a)(e, "mean", "batchNorm"),
          u = Object(S.a)(n, "variance", "batchNorm");
        let c, l;
        return (
          null != a && (c = Object(S.a)(a, "scale", "batchNorm")),
          null != r && (l = Object(S.a)(r, "offset", "batchNorm")),
          R.assert(
            2 === o.rank,
            () =>
              "Error in batchNorm3D: x must be rank 3 but got rank " +
              o.rank +
              "."
          ),
          R.assert(
            2 === s.rank || 1 === s.rank,
            () =>
              `Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${s.rank}.`
          ),
          R.assert(
            2 === u.rank || 1 === u.rank,
            () =>
              `Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${u.rank}.`
          ),
          null != c &&
            R.assert(
              2 === c.rank || 1 === c.rank,
              () =>
                `Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${c.rank}.`
            ),
          null != l &&
            R.assert(
              2 === l.rank || 1 === l.rank,
              () =>
                `Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${l.rank}.`
            ),
          fa(o, s, u, l, c, i)
        );
      },
    });
    const ga = Object(I.a)({
      batchNorm3d_: function (t, e, n, r, a, i) {
        const o = Object(S.a)(t, "x", "batchNorm"),
          s = Object(S.a)(e, "mean", "batchNorm"),
          u = Object(S.a)(n, "variance", "batchNorm");
        let c, l;
        return (
          null != a && (c = Object(S.a)(a, "scale", "batchNorm")),
          null != r && (l = Object(S.a)(r, "offset", "batchNorm")),
          R.assert(
            3 === o.rank,
            () =>
              "Error in batchNorm3D: x must be rank 3 but got rank " +
              o.rank +
              "."
          ),
          R.assert(
            3 === s.rank || 1 === s.rank,
            () =>
              `Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${s.rank}.`
          ),
          R.assert(
            3 === u.rank || 1 === u.rank,
            () =>
              `Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${u.rank}.`
          ),
          null != c &&
            R.assert(
              3 === c.rank || 1 === c.rank,
              () =>
                `Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${c.rank}.`
            ),
          null != l &&
            R.assert(
              3 === l.rank || 1 === l.rank,
              () =>
                `Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${l.rank}.`
            ),
          fa(o, s, u, l, c, i)
        );
      },
    });
    const ba = Object(I.a)({
      batchNorm4d_: function (t, e, n, r, a, i) {
        const o = Object(S.a)(t, "x", "batchNorm"),
          s = Object(S.a)(e, "mean", "batchNorm"),
          u = Object(S.a)(n, "variance", "batchNorm");
        let c, l;
        return (
          null != a && (c = Object(S.a)(a, "scale", "batchNorm")),
          null != r && (l = Object(S.a)(r, "offset", "batchNorm")),
          R.assert(
            4 === o.rank,
            () =>
              "Error in batchNorm4D: x must be rank 4 but got rank " +
              o.rank +
              "."
          ),
          R.assert(
            4 === s.rank || 1 === s.rank,
            () =>
              `Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${s.rank}.`
          ),
          R.assert(
            4 === u.rank || 1 === u.rank,
            () =>
              `Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${u.rank}.`
          ),
          null != c &&
            R.assert(
              4 === c.rank || 1 === c.rank,
              () =>
                `Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${c.rank}.`
            ),
          null != l &&
            R.assert(
              4 === l.rank || 1 === l.rank,
              () =>
                `Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${l.rank}.`
            ),
          fa(o, s, u, l, c, i)
        );
      },
    });
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const va = Object(I.a)({
      clone_: function (t) {
        const e = Object(S.a)(t, "x", "clone", null);
        return b.a.runKernelFunc(
          () => b.a.makeTensorFromDataId(e.dataId, e.shape, e.dtype),
          { x: e },
          null,
          v.J
        );
      },
    });
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const ya = Object(I.a)({
      broadcastTo_: function (t, e) {
        let n = Object(S.a)(t, "broadcastTo", "x");
        const r = n.shape;
        if (e.some((t) => !(t > 0) || t % 1 != 0))
          throw new Error(`broadcastTo(): Invalid broadcast shape [${e}].`);
        if (e.length < n.rank)
          throw new Error(
            `broadcastTo(): shape.length=${e.length} < input.rank=${n.rank}.`
          );
        if (e.length > n.rank) {
          const t = n.shape.slice();
          for (; t.length < e.length; ) t.unshift(1);
          n = B(n, t);
        }
        const a = n.shape,
          i = Array.from(e);
        for (let t = e.length - 1; t >= 0; t--)
          if (a[t] === e[t]) i[t] = 1;
          else if (1 !== n.shape[t])
            throw new Error(
              `broadcastTo(): [${r}] cannot be broadcast to [${e}].`
            );
        if (
          0 === i.map((t, e) => (t > 1 ? e : -1)).filter((t) => t >= 0).length
        )
          return va(n);
        const o = { x: n },
          s = { shape: e, inputShape: a };
        return b.a.runKernelFunc((t) => t.tile(n, i), o, null, v.j, s);
      },
    });
    var xa = n(18);
    const wa = Object(I.a)({
      concat1d_: function (t) {
        return D(t, 0);
      },
    });
    const Ca = Object(I.a)({
      concat2d_: function (t, e) {
        return D(t, e);
      },
    });
    const Oa = Object(I.a)({
      concat3d_: function (t, e) {
        return D(t, e);
      },
    });
    const Ea = Object(I.a)({
      concat4d_: function (t, e) {
        return D(t, e);
      },
    });
    const Sa = Object(I.a)({
      conv1d_: function (t, e, n, r, a = "NWC", i = 1, o) {
        const s = Object(S.a)(t, "x", "conv1d"),
          u = Object(S.a)(e, "filter", "conv1d");
        let c = s,
          l = !1;
        2 === s.rank && ((l = !0), (c = B(s, [1, s.shape[0], s.shape[1]]))),
          R.assert(
            3 === c.rank,
            () =>
              `Error in conv1d: input must be rank 3, but got rank ${c.rank}.`
          ),
          R.assert(
            3 === u.rank,
            () =>
              "Error in conv1d: filter must be rank 3, but got rank " +
              u.rank +
              "."
          ),
          null != o &&
            R.assert(
              R.isInt(r),
              () =>
                `Error in conv1d: pad must be an integer when using, dimRoundingMode ${o} but got pad ${r}.`
            ),
          R.assert(
            c.shape[2] === u.shape[1],
            () =>
              `Error in conv1d: depth of input (${c.shape[2]}) must match input depth for filter ${u.shape[1]}.`
          ),
          R.assert(
            ie(n, i),
            () =>
              `Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${i}'`
          ),
          R.assert(
            "NWC" === a,
            () =>
              `Error in conv1d: got dataFormat of ${a} but only NWC is currently supported.`
          );
        const h = B(u, [1, u.shape[0], u.shape[1], u.shape[2]]),
          d = B(c, [c.shape[0], 1, c.shape[1], c.shape[2]]),
          p = we(d, h, [1, n], r, "NHWC", [1, i], o);
        return B(
          p,
          l ? [p.shape[2], p.shape[3]] : [p.shape[0], p.shape[2], p.shape[3]]
        );
      },
    });
    const Ia = Object(I.a)({
      conv2dTranspose_: function (t, e, n, r, a, i) {
        const o = Object(S.a)(t, "x", "conv2dTranspose"),
          s = Object(S.a)(e, "filter", "conv2dTranspose");
        return ye(n, o, s, r, a, "NHWC", i);
      },
    });
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const ka = Object(I.a)({
      conv3d_: function (t, e, n, r, a = "NDHWC", i = [1, 1, 1]) {
        const o = Object(S.a)(t, "x", "conv3d"),
          s = Object(S.a)(e, "filter", "conv3d");
        let u = o,
          c = !1;
        4 === o.rank &&
          ((c = !0),
          (u = B(o, [1, o.shape[0], o.shape[1], o.shape[2], o.shape[3]]))),
          R.assert(
            5 === u.rank,
            () =>
              `Error in conv3d: input must be rank 5, but got rank ${u.rank}.`
          ),
          R.assert(
            5 === s.rank,
            () =>
              "Error in conv3d: filter must be rank 5, but got rank " +
              s.rank +
              "."
          ),
          R.assert(
            u.shape[4] === s.shape[3],
            () =>
              `Error in conv3d: depth of input (${u.shape[4]}) must match input depth for filter ${s.shape[3]}.`
          ),
          R.assert(
            ie(n, i),
            () =>
              `Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`
          ),
          R.assert(
            "NDHWC" === a,
            () =>
              `Error in conv3d: got dataFormat of ${a} but only NDHWC is currently supported.`
          );
        const l = { x: u, filter: s },
          h = { strides: n, pad: r, dataFormat: a, dilations: i },
          d = b.a.runKernelFunc(
            (t, e) => {
              const a = Qt(u.shape, s.shape, n, i, r),
                o = t.conv3d(u, s, a);
              return e([u, s]), o;
            },
            l,
            null,
            v.p,
            h
          );
        return c ? d.as4D(d.shape[1], d.shape[2], d.shape[3], d.shape[4]) : d;
      },
    });
    const Na = Object(I.a)({
      conv3dTranspose_: function (t, e, n, r, a) {
        const i = Object(S.a)(t, "x", "conv3dTranspose"),
          o = Object(S.a)(e, "filter", "conv3dTranspose");
        return Ee(n, i, o, r, a);
      },
    });
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const Ra = Object(I.a)({
      depthToSpace_: function (t, e, n = "NHWC") {
        const r = Object(S.a)(t, "x", "depthToSpace"),
          a = "NHWC" === n ? r.shape[1] : r.shape[2],
          i = "NHWC" === n ? r.shape[2] : r.shape[3],
          o = "NHWC" === n ? r.shape[3] : r.shape[1];
        R.assert(
          a * e >= 0,
          () =>
            `Negative dimension size caused by overflow when multiplying\n    ${a} and ${e}  for depthToSpace with input shape\n    ${r.shape}`
        ),
          R.assert(
            i * e >= 0,
            () =>
              `Negative dimension size caused by overflow when multiplying\n    ${i} and ${e} for depthToSpace with input shape\n        ${r.shape}`
          ),
          R.assert(
            o % (e * e) == 0,
            () =>
              `Dimension size must be evenly divisible by ${
                e * e
              } but is ${o} for depthToSpace with input shape ${r.shape}`
          );
        const s = { x: r },
          u = { blockSize: e, dataFormat: n };
        return b.a.runKernelFunc(
          (t) => t.depthToSpace(r, e, n),
          s,
          null,
          v.t,
          u
        );
      },
    });
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const Aa = Object(I.a)({
      depthwiseConv2d_: function (t, e, n, r, a = "NHWC", i = [1, 1], o) {
        const s = Object(S.a)(t, "x", "depthwiseConv2d"),
          u = Object(S.a)(e, "filter", "depthwiseConv2d");
        let c = s,
          l = !1;
        3 === s.rank &&
          ((l = !0), (c = B(s, [1, s.shape[0], s.shape[1], s.shape[2]]))),
          R.assert(
            4 === c.rank,
            () =>
              `Error in depthwiseConv2d: input must be rank 4, but got rank ${c.rank}.`
          ),
          R.assert(
            4 === u.rank,
            () =>
              "Error in depthwiseConv2d: filter must be rank 4, but got rank " +
              u.rank +
              "."
          ),
          R.assert(
            c.shape[3] === u.shape[2],
            () =>
              `Error in depthwiseConv2d: number of input channels (${c.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`
          ),
          null != o &&
            R.assert(
              R.isInt(r),
              () =>
                `Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${o} but got pad ${r}.`
            );
        const h = { x: c, filter: u },
          d = {
            strides: n,
            pad: r,
            dataFormat: a,
            dilations: i,
            dimRoundingMode: o,
          },
          p = b.a.runKernelFunc(
            (t, e) => {
              null == i && (i = [1, 1]),
                R.assert(
                  ie(n, i),
                  () =>
                    `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`
                );
              const a = Jt(c.shape, u.shape, n, i, r, o, !0),
                s = t.depthwiseConv2D(c, u, a);
              return e([c, u]), s;
            },
            h,
            null,
            v.u,
            d
          );
        return l ? B(p, [p.shape[1], p.shape[2], p.shape[3]]) : p;
      },
    });
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const Ta = Object(I.a)({
      diag_: function (t) {
        const e = Object(S.a)(t, "x", "diag").flatten(),
          n = { x: e };
        return b.a.runKernelFunc(
          (n) => {
            const r = n.diag(e),
              a = [...t.shape, ...t.shape];
            return B(r, a);
          },
          n,
          null,
          v.x
        );
      },
    });
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const _a = Object(I.a)({
      divNoNan_: function (t, e) {
        let n = Object(S.a)(t, "a", "div"),
          r = Object(S.a)(e, "b", "div");
        [n, r] = Object(E.makeTypesMatch)(n, r);
        const a = U(n, r),
          i = Object(_.o)(a),
          o = r.equal(i);
        return cn(o, i, a);
      },
    });
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const Da = Object(I.a)({
      dot_: function (t, e) {
        const n = Object(S.a)(t, "t1", "dot"),
          r = Object(S.a)(e, "t2", "dot");
        R.assert(
          !((1 !== n.rank && 2 !== n.rank) || (1 !== r.rank && 2 !== r.rank)),
          () =>
            `Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`
        );
        const a = 1 === n.rank ? n.size : n.shape[1],
          i = 1 === r.rank ? r.size : r.shape[0];
        if (
          (R.assert(
            a === i,
            () =>
              `Error in dot: inner dimensions of inputs must match, but got ${a} and ${i}.`
          ),
          1 === n.rank && 1 === r.rank)
        ) {
          const t = B(n, [1, -1]),
            e = B(r, [-1, 1]),
            a = he(t, e);
          return B(a, []);
        }
        if (1 === n.rank && 2 === r.rank) {
          const t = B(n, [1, -1]),
            e = B(r, [r.shape[0], r.shape[1]]),
            a = he(t, e);
          return B(a, [a.size]);
        }
        if (2 === n.rank && 1 === r.rank) {
          const t = B(r, [-1, 1]),
            e = he(n, t);
          return B(e, [e.size]);
        }
        {
          const t = B(r, [r.shape[0], r.shape[1]]);
          return he(n, t);
        }
      },
    });
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const Fa = Object(I.a)({
      elu_: function (t) {
        const e = Object(S.a)(t, "x", "elu"),
          n = { x: e };
        return b.a.runKernelFunc(
          (t, n) => {
            const r = t.elu(e);
            return n([r]), r;
          },
          n,
          null,
          v.z
        );
      },
    });
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const Ma = Object(I.a)({
      equal_: function (t, e) {
        let n = Object(S.a)(t, "a", "equal"),
          r = Object(S.a)(e, "b", "equal");
        ([n, r] = Object(E.makeTypesMatch)(n, r)), w(n.shape, r.shape);
        const a = { a: n, b: r };
        return b.a.runKernelFunc((t) => t.equal(n, r), a, null, v.B);
      },
    });
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const ja = Object(I.a)({
      eye_: function (t, e, n, r = "float32") {
        null == e && (e = t);
        const a = F([t, e], r),
          i = t <= e ? t : e;
        for (let t = 0; t < i; ++t) a.set(1, t, t);
        const o = a.toTensor().as2D(t, e);
        if (null == n) return o;
        if (1 === n.length) return je($(o, 0), [n[0], 1, 1]);
        if (2 === n.length) return je($($(o, 0), 0), [n[0], n[1], 1, 1]);
        if (3 === n.length)
          return je($($($(o, 0), 0), 0), [n[0], n[1], n[2], 1, 1]);
        throw new Error(
          `eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`
        );
      },
    });
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function $a(t, e, n) {
      const r = { shape: t, value: e, dtype: n };
      return b.a.runKernelFunc((r) => r.fill(t, e, n), {}, null, v.C, r);
    }
    var Ba = n(26);
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const Pa = Object(I.a)({
      maximum_: function (t, e) {
        let n = Object(S.a)(t, "a", "maximum"),
          r = Object(S.a)(e, "b", "maximum");
        ([n, r] = Object(E.makeTypesMatch)(n, r)),
          "bool" === n.dtype && ((n = j(n, "int32")), (r = j(r, "int32"))),
          w(n.shape, r.shape);
        const a = { a: n, b: r };
        return b.a.runKernelFunc(
          (t, e) => {
            const a = t.maximum(n, r);
            return e([n, r]), a;
          },
          a,
          null,
          v.V
        );
      },
    });
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const La = Object(I.a)({
      leakyRelu_: function (t, e = 0.2) {
        const n = Object(S.a)(t, "x", "leakyRelu");
        return Pa(G(Object(_.e)(e), n), n);
      },
    });
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const za = Object(I.a)({
      localResponseNormalization_: function (t, e = 5, n = 1, r = 1, a = 0.5) {
        const i = Object(S.a)(t, "x", "localResponseNormalization");
        R.assert(
          4 === i.rank || 3 === i.rank,
          () =>
            `Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${i.rank}.`
        ),
          R.assert(
            R.isInt(e),
            () =>
              `Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${e}.`
          );
        let o = i,
          s = !1;
        3 === i.rank &&
          ((s = !0), (o = B(i, [1, i.shape[0], i.shape[1], i.shape[2]])));
        const u = { x: o },
          c = { depthRadius: e, bias: n, alpha: r, beta: a },
          l = b.a.runKernelFunc(
            (t, i) => {
              const s = t.localResponseNormalization4D(o, e, n, r, a);
              return i([o, s]), s;
            },
            u,
            null,
            v.L,
            c
          );
        return s ? l.as3D(l.shape[1], l.shape[2], l.shape[3]) : l;
      },
    });
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const Wa = Object(I.a)({
      max_: function (t, e = null, n = !1) {
        const r = Object(S.a)(t, "x", "max"),
          a = { x: r },
          i = { reductionIndices: e, keepDims: n },
          o = b.a.runKernelFunc(
            (t, n) => {
              let a = R.parseAxisParam(e, r.shape);
              const i = Z(a, r.rank);
              let o = r;
              null != i && ((o = Ie(r, i)), (a = et(a.length, o.rank)));
              const s = t.max(o, a);
              return n([r, s]), null != i && t.disposeData(o.dataId), s;
            },
            a,
            null,
            v.P,
            i
          );
        return n ? B(o, J(o.shape, R.parseAxisParam(e, r.shape))) : o;
      },
    });
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const Va = Object(I.a)({
      maxPool_: function (t, e, n, r, a) {
        const i = Object(S.a)(t, "x", "maxPool");
        let o = i,
          s = !1;
        3 === i.rank &&
          ((s = !0), (o = B(i, [1, i.shape[0], i.shape[1], i.shape[2]]))),
          R.assert(
            4 === o.rank,
            () =>
              `Error in maxPool: input must be rank 4 but got rank ${o.rank}.`
          ),
          R.assert(
            ie(n, 1),
            () =>
              `Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`
          ),
          null != a &&
            R.assert(
              R.isInt(r),
              () =>
                `Error in maxPool: pad must be an integer when using, dimRoundingMode ${a} but got pad ${r}.`
            );
        const u = { x: o },
          c = { filterSize: e, strides: n, pad: r, dimRoundingMode: a },
          l = b.a.runKernelFunc(
            (t, i) => {
              const s = Xt(o.shape, e, n, 1, r, a);
              let u;
              return (
                (u =
                  1 === s.filterWidth &&
                  1 === s.filterHeight &&
                  R.arraysEqual(s.inShape, s.outShape)
                    ? o.clone()
                    : t.maxPool(o, s)),
                i([o, u]),
                u
              );
            },
            u,
            null,
            v.Q,
            c
          );
        return s ? B(l, [l.shape[1], l.shape[2], l.shape[3]]) : l;
      },
    });
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const Ua = Object(I.a)({
      maxPool3d_: function (t, e = [1, 1, 1], n, r, a, i = "NDHWC", o) {
        null == o
          ? (o = [1, 1, 1])
          : ta("dilations is deprecated, this field will be gone in v3.0.0.");
        const s = Object(S.a)(t, "x", "maxPool3d");
        let u = s,
          c = !1;
        4 === s.rank &&
          ((c = !0),
          (u = s.as5D(1, s.shape[0], s.shape[1], s.shape[2], s.shape[3]))),
          R.assert(
            5 === u.rank,
            () => `Error in maxPool3d: x must be rank 5 but got rank ${u.rank}.`
          ),
          R.assert(
            "NDHWC" === i,
            () =>
              "Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of " +
              i
          ),
          R.assert(
            ie(n, o),
            () =>
              `Error in maxPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${o}'`
          ),
          null != a &&
            R.assert(
              R.isInt(r),
              () =>
                `Error in maxPool3d: pad must be an integer when using, dimRoundingMode ${a} but got pad ${r}.`
            );
        const l = { x: u },
          h = {
            filterSize: e,
            strides: n,
            pad: r,
            dimRoundingMode: a,
            dataFormat: i,
            dilations: o,
          },
          d = b.a.runKernelFunc(
            (t, s) => {
              null == o && (o = [1, 1, 1]);
              const c = Yt(u.shape, e, n, o, r, a, i),
                l = t.maxPool3d(u, c);
              return s([u, l]), l;
            },
            l,
            null,
            v.R,
            h
          );
        return c ? B(d, [d.shape[1], d.shape[2], d.shape[3], d.shape[4]]) : d;
      },
    });
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const Ga = Object(I.a)({
      maxPoolWithArgmax_: function (t, e, n, r, a = !1) {
        const i = { x: Object(S.a)(t, "x", "maxPoolWithArgmax") },
          o = { filterSize: e, strides: n, pad: r, includeBatchInIndex: a },
          s = b.a.runKernel(v.U, i, o);
        return { result: s[0], indexes: s[1] };
      },
    });
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const Ha = Object(I.a)({
      minimum_: function (t, e) {
        let n = Object(S.a)(t, "a", "minimum"),
          r = Object(S.a)(e, "b", "minimum");
        ([n, r] = Object(E.makeTypesMatch)(n, r)),
          "bool" === n.dtype && ((n = j(n, "int32")), (r = j(r, "int32"))),
          w(n.shape, r.shape);
        const a = { a: n, b: r };
        return b.a.runKernelFunc(
          (t, e) => {
            const a = t.minimum(n, r);
            return e([n, r]), a;
          },
          a,
          null,
          v.W
        );
      },
    });
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const qa = Object(I.a)({
      mod_: function (t, e) {
        let n = Object(S.a)(t, "a", "mod"),
          r = Object(S.a)(e, "b", "mod");
        [n, r] = Object(E.makeTypesMatch)(n, r);
        const a = { a: n, b: r };
        return b.a.runKernelFunc(
          (t, e) => {
            const a = t.mod(n, r);
            return e([n, r]), a;
          },
          a,
          null,
          v.X
        );
      },
    });
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const Ka = Object(I.a)({
      multinomial_: function (t, e, n, r = !1) {
        const a = Object(S.a)(t, "logits", "multinomial"),
          i = a.size,
          o = a.rank;
        if (i < 2)
          throw new Error(
            "Error in multinomial: you need at least 2 outcomes, but got " +
              i +
              "."
          );
        if (o > 2)
          throw new Error("Rank of probabilities must be 1 or 2, but is " + o);
        n = n || Math.random();
        const s = 1 === o ? a.as2D(1, -1) : a,
          u = b.a.runKernelFunc((t) => t.multinomial(s, r, e, n), {
            logits2D: s,
          });
        return 1 === o ? u.as1D() : u;
      },
    });
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const Xa = Object(I.a)({
      notEqual_: function (t, e) {
        let n = Object(S.a)(t, "a", "notEqual"),
          r = Object(S.a)(e, "b", "notEqual");
        ([n, r] = Object(E.makeTypesMatch)(n, r)), w(n.shape, r.shape);
        const a = { a: n, b: r };
        return b.a.runKernelFunc((t) => t.notEqual(n, r), a, null, v.bb);
      },
    });
    const Ya = Object(I.a)({
      outerProduct_: function (t, e) {
        const n = Object(S.a)(t, "v1", "outerProduct"),
          r = Object(S.a)(e, "v2", "outerProduct");
        R.assert(
          1 === n.rank && 1 === r.rank,
          () =>
            `Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`
        );
        const a = B(n, [-1, 1]),
          i = B(r, [1, -1]);
        return he(a, i);
      },
    });
    const Ja = Object(I.a)({
      pad1d_: function (t, e, n = 0) {
        return (
          Object(R.assert)(
            2 === e.length,
            () => "Invalid number of paddings. Must be length of 2."
          ),
          Sn(t, [e], n)
        );
      },
    });
    const Qa = Object(I.a)({
      pad2d_: function (t, e, n = 0) {
        return (
          Object(R.assert)(
            2 === e.length && 2 === e[0].length && 2 === e[1].length,
            () => "Invalid number of paddings. Must be length of 2 each."
          ),
          Sn(t, e, n)
        );
      },
    });
    const Za = Object(I.a)({
      pad3d_: function (t, e, n = 0) {
        return (
          Object(R.assert)(
            3 === e.length &&
              2 === e[0].length &&
              2 === e[1].length &&
              2 === e[2].length,
            () => "Invalid number of paddings. Must be length of 2 each."
          ),
          Sn(t, e, n)
        );
      },
    });
    const ti = Object(I.a)({
      pad4d_: function (t, e, n = 0) {
        return (
          Object(R.assert)(
            4 === e.length &&
              2 === e[0].length &&
              2 === e[1].length &&
              2 === e[2].length &&
              2 === e[3].length,
            () => "Invalid number of paddings. Must be length of 2 each."
          ),
          Sn(t, e, n)
        );
      },
    });
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const ei = Object(I.a)({
      pool_: function (t, e, n, r, a, i) {
        null == a && (a = [1, 1]),
          null == i && (i = 1),
          0 === r && (r = "valid");
        const o = Object(S.a)(t, "x", "maxPool");
        let s = o,
          u = !1;
        3 === o.rank &&
          ((u = !0), (s = B(o, [1, o.shape[0], o.shape[1], o.shape[2]]))),
          R.assert(
            ie(i, a),
            () =>
              `Error in pool: Either strides or dilations must be 1. Got strides ${i} and dilations '${a}'`
          );
        const c = Xt(s.shape, e, i, a, r),
          l = [c.dilationHeight, c.dilationWidth];
        let h;
        h =
          "same" === r
            ? (function (t, e) {
                const n = t
                    .map((t, n) => t + (t - 1) * (e[n] - 1))
                    .map((t) => t - 1),
                  r = n.map((t) => Math.floor(t / 2)),
                  a = n.map((t, e) => t - r[e]);
                return n.map((t, e) => [r[e], a[e]]);
              })([c.filterHeight, c.filterWidth], l)
            : [
                [0, 0],
                [0, 0],
              ];
        const d = 1 === l[0] && 1 === l[1],
          [p, f] = (function (t, e, n) {
            const r = n.map((t) => t[0]),
              a = n.map((t) => t[1]),
              i = t.concat(r, a),
              o = e.map((t, e) => (t - (i[e] % t)) % t),
              s = a.map((t, e) => t + o[e]),
              u = e.map((t, e) => [r[e], s[e]]),
              c = e.map((t, e) => [0, o[e]]);
            return [u, c];
          })([c.inHeight, c.inWidth], l, h),
          m = d ? r : "valid",
          g = d ? s : pe(s, l, p),
          b = ("avg" === n ? () => ha(g, e, i, m) : () => Va(g, e, i, m))(),
          v = d ? b : yn(b, l, f);
        return u ? B(v, [v.shape[1], v.shape[2], v.shape[3]]) : v;
      },
    });
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const ni = Object(I.a)({
      prelu_: function (t, e) {
        const n = Object(S.a)(t, "x", "prelu"),
          r = Object(S.a)(e, "alpha", "prelu"),
          a = { x: n, alpha: r };
        return b.a.runKernelFunc(
          (t, e) => {
            const a = t.prelu(n, r);
            return e([n, r]), a;
          },
          a,
          null,
          v.fb
        );
      },
    });
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const ri = Object(I.a)({
      rand_: function (t, e, n) {
        const r = Object(R.sizeFromShape)(t);
        let a = null;
        if (null == n || "float32" === n) a = new Float32Array(r);
        else if ("int32" === n) a = new Int32Array(r);
        else {
          if ("bool" !== n) throw new Error("Unknown data type " + n);
          a = new Uint8Array(r);
        }
        for (let t = 0; t < r; t++) a[t] = e();
        return b.a.makeTensor(a, t, n);
      },
    });
    var ai = n(20);
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class ii {
      constructor(t, e, n, r, a) {
        (this.mean = t),
          (this.stdDev = e),
          (this.dtype = n),
          (this.nextVal = NaN),
          (this.truncated = r),
          this.truncated &&
            ((this.upper = this.mean + 2 * this.stdDev),
            (this.lower = this.mean - 2 * this.stdDev));
        const i = a || Math.random();
        this.random = ai.alea(i.toString());
      }
      nextValue() {
        if (!isNaN(this.nextVal)) {
          const t = this.nextVal;
          return (this.nextVal = NaN), t;
        }
        let t,
          e,
          n = !1;
        for (; !n; ) {
          let r, a, i;
          do {
            (r = 2 * this.random() - 1),
              (a = 2 * this.random() - 1),
              (i = r * r + a * a);
          } while (i >= 1 || 0 === i);
          const o = Math.sqrt((-2 * Math.log(i)) / i);
          (t = this.mean + this.stdDev * r * o),
            (e = this.mean + this.stdDev * a * o),
            (this.truncated && !this.isValidTruncated(t)) || (n = !0);
        }
        return (
          (this.truncated && !this.isValidTruncated(e)) ||
            (this.nextVal = this.convertValue(e)),
          this.convertValue(t)
        );
      }
      convertValue(t) {
        return null == this.dtype || "float32" === this.dtype
          ? t
          : Math.round(t);
      }
      isValidTruncated(t) {
        return t <= this.upper && t >= this.lower;
      }
    }
    class oi {
      constructor(t, e, n, r) {
        (this.alpha = t), (this.beta = 1 / e), (this.dtype = n);
        const a = r || Math.random();
        (this.randu = ai.alea(a.toString())),
          (this.randn = new ii(0, 1, n, !1, this.randu())),
          (this.d = t < 1 ? t + 2 / 3 : t - 1 / 3),
          (this.c = 1 / Math.sqrt(9 * this.d));
      }
      nextValue() {
        let t, e, n, r, a, i;
        for (;;) {
          do {
            (r = this.randn.nextValue()), (i = 1 + this.c * r);
          } while (i <= 0);
          if (
            ((i *= i * i),
            (t = r * r),
            (e = 1 - 0.331 * t * t),
            (n = 0.5 * t + this.d * (1 - i + Math.log(i))),
            (a = this.randu()),
            a < e || Math.log(a) < n)
          )
            break;
        }
        return (
          (i = (1 / this.beta) * this.d * i),
          this.alpha < 1 && (i *= Math.pow(this.randu(), 1 / this.alpha)),
          this.convertValue(i)
        );
      }
      convertValue(t) {
        return "float32" === this.dtype ? t : Math.round(t);
      }
    }
    class si {
      constructor(t = 0, e = 1, n, r) {
        if (
          ((this.canReturnFloat = () =>
            null == this.dtype || "float32" === this.dtype),
          (this.min = t),
          (this.range = e - t),
          (this.dtype = n),
          null == r && (r = Math.random()),
          "number" == typeof r && (r = r.toString()),
          !this.canReturnFloat() && this.range <= 1)
        )
          throw new Error(
            `The difference between ${t} - ${e} <= 1 and dtype is not float`
          );
        this.random = ai.alea(r);
      }
      convertValue(t) {
        return this.canReturnFloat() ? t : Math.round(t);
      }
      nextValue() {
        return this.convertValue(this.min + this.range * this.random());
      }
    }
    const ui = Object(I.a)({
      randomGamma_:
        /**
         * @license
         * Copyright 2020 Google Inc. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (t, e, n = 1, r = "float32", a) {
          if (
            (null == n && (n = 1),
            null == r && (r = "float32"),
            "float32" !== r && "int32" !== r)
          )
            throw new Error("Unsupported data type " + r);
          const i = new oi(e, n, r, a),
            o = F(t, r);
          for (let t = 0; t < o.values.length; t++) o.values[t] = i.nextValue();
          return o.toTensor();
        },
    });
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const ci = Object(I.a)({
      randomNormal_: function (t, e = 0, n = 1, r, a) {
        if (null != r && "bool" === r)
          throw new Error("Unsupported data type " + r);
        const i = new ii(e, n, r, !1, a),
          o = F(t, r);
        for (let t = 0; t < o.values.length; t++) o.values[t] = i.nextValue();
        return o.toTensor();
      },
    });
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const li = Object(I.a)({
      randomUniform_: function (t, e = 0, n = 1, r = "float32", a) {
        const i = F(t, r),
          o = new si(e, n, null, a);
        for (let t = 0; t < i.values.length; t++) i.values[t] = o.nextValue();
        return i.toTensor();
      },
    });
    var hi = n(22);
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const di = Object(I.a)({
      relu_: function (t) {
        const e = Object(S.a)(t, "x", "relu"),
          n = { x: e };
        return b.a.runKernelFunc(
          (t, n) => (n([e]), "bool" === e.dtype ? e.toInt() : t.relu(e)),
          n,
          null,
          v.hb
        );
      },
    });
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const pi = Object(I.a)({
      relu6_: function (t) {
        const e = Object(S.a)(t, "x", "relu6"),
          n = { x: e };
        return b.a.runKernelFunc(
          (t, n) => (n([e]), "bool" === e.dtype ? j(e, "int32") : t.relu6(e)),
          n,
          null,
          v.ib
        );
      },
    });
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const fi = Object(I.a)({
      selu_: function (t) {
        const e = Object(S.a)(t, "x", "selu"),
          n = { x: e };
        return b.a.runKernelFunc(
          (t, n) => {
            const r = t.selu(e);
            return n([e]), r;
          },
          n,
          null,
          v.kb
        );
      },
    });
    const mi = Object(I.a)({
      separableConv2d_: function (t, e, n, r, a, i = [1, 1], o = "NHWC") {
        const s = Object(S.a)(t, "x", "separableConv2d"),
          u = Object(S.a)(e, "depthwiseFilter", "separableConv2d"),
          c = Object(S.a)(n, "pointwiseFilter", "separableConv2d");
        let l = s,
          h = !1;
        if (
          (3 === s.rank &&
            ((h = !0), (l = s.as4D(1, s.shape[0], s.shape[1], s.shape[2]))),
          "NCHW" === o)
        )
          throw new Error(
            "separableConv2d currently does not support dataFormat NCHW; only NHWC is supported"
          );
        R.assert(
          4 === l.rank,
          () =>
            `Error in separableConv2d: input must be rank 4, but got rank ${l.rank}.`
        ),
          R.assert(
            4 === u.rank,
            () =>
              `Error in separableConv2d: depthwise filter must be rank 4, but got rank ${u.rank}.`
          ),
          R.assert(
            4 === c.rank,
            () =>
              `Error in separableConv2d: pointwise filter must be rank 4, but got rank ${u.rank}.`
          ),
          R.assert(
            1 === c.shape[0],
            () =>
              `Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${c.shape[0]}.`
          ),
          R.assert(
            1 === c.shape[1],
            () =>
              `Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${c.shape[1]}.`
          );
        const d = u.shape[2],
          p = u.shape[3];
        R.assert(
          c.shape[2] === d * p,
          () =>
            `Error in separableConv2d: the third dimension of pointwise filter must be ${
              d * p
            }, but got ${c.shape[2]}.`
        );
        const f = Aa(l, u, r, a, o, i),
          m = we(f, c, 1, "valid", o);
        return h ? m.as3D(m.shape[1], m.shape[2], m.shape[3]) : m;
      },
    });
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const gi = Object(I.a)({
      squaredDifference_: function (t, e) {
        let n = Object(S.a)(t, "a", "squaredDifference"),
          r = Object(S.a)(e, "b", "squaredDifference");
        ([n, r] = Object(E.makeTypesMatch)(n, r)), w(n.shape, r.shape);
        const a = { a: n, b: r };
        return b.a.runKernelFunc(
          (t, e) => {
            const a = t.squaredDifference(n, r);
            return e([n, r]), a;
          },
          a,
          null,
          v.ob,
          {}
        );
      },
    });
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const bi = Object(I.a)({
        truncatedNormal_: function (t, e = 0, n = 1, r, a) {
          if (null != r && "bool" === r)
            throw new Error("Unsupported data type $ { dtype }");
          const i = new ii(e, n, r, !0, a),
            o = F(t, r);
          for (let t = 0; t < o.values.length; t++) o.values[t] = i.nextValue();
          return o.toTensor();
        },
      }),
      vi = 30;
    /**
     * @license
     * Copyright 2017 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function yi(t) {
      return t <= vi
        ? t
        : Object(R.nearestDivisor)(t, Math.floor(Math.sqrt(t)));
    }
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function xi(t, e) {
      let n,
        r = !1;
      for (
        t <= vi
          ? ((n = t), (r = !0))
          : (n = Object(R.nearestDivisor)(t, Math.floor(Math.sqrt(t))));
        !r;

      )
        n > e || n === t ? (r = !0) : (n = Object(R.nearestDivisor)(t, n + 1));
      return n;
    }
    function wi(t, e, n) {
      const r = [],
        a = t.length;
      for (let i = 0; i < a; i++) i !== e ? r.push(t[i]) : r.push(n);
      return r;
    }
    function Ci(t, e, n) {
      const r = t.shape[n],
        a = [];
      let i = 1,
        o = 1;
      for (let e = 0; e < n; e++) a.push(t.shape[e]), (i *= t.shape[e]);
      for (let t = 0; t < e.rank; t++) a.push(e.shape[t]);
      for (let e = n + 1; e < t.rank; e++)
        a.push(t.shape[e]), (o *= t.shape[e]);
      return { batchSize: i, sliceSize: o, dimSize: r, outputShape: a };
    }
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Oi(t, e) {
      const n = [];
      for (let r = t; r < e; ++r) n.push(r);
      return n;
    }
    function Ei(t) {
      const e = [];
      for (let n = 0; n < t.length; ++n)
        for (let r = 0; r < t[n].length; ++r) e.push(t[n][r]);
      return e;
    }
    const Si = Object(I.a)({
        gather_: function (t, e, n = 0) {
          const r = Object(S.a)(t, "x", "gather"),
            a = Object(S.a)(e, "indices", "gather", "int32");
          n = Object(R.parseAxisParam)(n, r.shape)[0];
          const i = Ci(r, a, n);
          return b.a
            .runKernelFunc(
              (t, e) => {
                const i = t.gather(r, a.flatten(), n);
                return e([a]), i;
              },
              { x: r, indices: a },
              (t, e) => {
                const [a] = e;
                return {
                  x: () => {
                    const e = r.shape,
                      i = a.size,
                      o = e.slice(0, n),
                      s = o.length,
                      u = e.slice(n, e.length).slice(1),
                      c = u.length,
                      l = Oi(0, s),
                      h = Oi(s + 1, s + 1 + c),
                      d = Ei([o, [i], u]),
                      p = t.reshape(d),
                      f = a.reshape([i]),
                      m = Ei([[s], l, h]),
                      g = p.transpose(m);
                    let b = Ii(g, f, r.shape[n]);
                    const v = tt(m);
                    return (b = b.transpose(v)), b;
                  },
                  indices: () => a,
                };
              },
              "Gather",
              { axis: n }
            )
            .reshape(i.outputShape);
        },
      }),
      Ii = Object(I.a)({
        unsortedSegmentSum_: function (t, e, n) {
          const r = Object(S.a)(t, "x", "unsortedSegmentSum"),
            a = Object(S.a)(e, "segmentIds", "unsortedSegmentSum", "int32");
          return (
            Object(R.assert)(
              Object(R.isInt)(n),
              () => "numSegments must be of dtype int"
            ),
            b.a.runKernelFunc(
              (t, e) => {
                const i = t.unsortedSegmentSum(r, a, n);
                return e([a]), i;
              },
              { $x: r },
              (t, e) => {
                const [n] = e;
                return {
                  $x: () =>
                    (function (t, e) {
                      const n = Pa(e, Object(_.o)(e)),
                        r = Si(t, n);
                      let a = Ve(e, Object(_.e)(0, "int32"));
                      const i = r.rank - a.rank;
                      for (let t = 0; t < i; ++t) a = $(a, t + 1);
                      a = an(a, Object(_.b)(r.shape, "bool"));
                      const o = Object(_.o)(r);
                      return cn(a, r, o);
                    })(t, n),
                };
              }
            )
          );
        },
      });
    const ki =
      /**
       * @license
       * Copyright 2018 Google Inc. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      async function (t, e, n) {
        const r = Object(S.a)(t, "tensor", "boolMask"),
          a = Object(S.a)(e, "mask", "boolMask", "bool"),
          i = null == n ? 0 : n,
          o = a.rank,
          s = r.shape;
        R.assert(o > 0, () => "mask cannot be scalar"),
          R.assertShapesMatch(
            s.slice(i, i + o),
            a.shape,
            "mask's shape must match the first K dimensions of tensor's shape,"
          );
        let u = 1;
        for (let t = i; t < i + o; t++) u *= s[t];
        const c = s.slice(0, i).concat([u], s.slice(i + o)),
          l = r.reshape(c),
          h = a.reshape([-1]),
          d = await ln(h),
          p = d.squeeze([1]),
          f = Si(l, p, i);
        return (
          t !== r && r.dispose(),
          e !== a && a.dispose(),
          p.dispose(),
          l.dispose(),
          h.dispose(),
          d.dispose(),
          f
        );
      };
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const Ni = Object(I.a)({
        reverse_: function (t, e) {
          const n = Object(S.a)(t, "x", "reverse");
          if (0 === n.rank) return n.clone();
          const r = R.parseAxisParam(e, n.shape);
          return b.a
            .runKernelFunc(
              (t) => t.reverse(n, r),
              { $x: n },
              (t) => ({ $x: () => t.reverse(r) })
            )
            .reshapeAs(n);
        },
      }),
      Ri = Object(I.a)({
        reverse1d_: function (t) {
          const e = Object(S.a)(t, "x", "reverse");
          return (
            R.assert(
              1 === e.rank,
              () =>
                `Error in reverse1D: x must be rank 1 but got rank ${e.rank}.`
            ),
            Ni(e, 0)
          );
        },
      }),
      Ai = Object(I.a)({
        reverse2d_: function (t, e) {
          const n = Object(S.a)(t, "x", "reverse");
          return (
            R.assert(
              2 === n.rank,
              () =>
                `Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`
            ),
            Ni(n, e)
          );
        },
      }),
      Ti = Object(I.a)({
        reverse3d_: function (t, e) {
          const n = Object(S.a)(t, "x", "reverse");
          return (
            R.assert(
              3 === n.rank,
              () =>
                `Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`
            ),
            Ni(n, e)
          );
        },
      }),
      _i = Object(I.a)({
        reverse4d_: function (t, e) {
          const n = Object(S.a)(t, "x", "reverse");
          return (
            R.assert(
              4 === n.rank,
              () =>
                `Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`
            ),
            Ni(n, e)
          );
        },
      });
    const Di = Object(I.a)({
        equalStrict_: function (t, e) {
          ta(
            "strict variants of ops have been deprecated and will be removed in future"
          );
          const n = Object(S.a)(t, "a", "equalStrict"),
            r = Object(S.a)(e, "b", "equalStrict");
          return (
            Object(R.assertShapesMatch)(
              n.shape,
              r.shape,
              "Error in equalStrict: "
            ),
            n.equal(r)
          );
        },
      }),
      Fi = Object(I.a)({
        greaterEqualStrict_: function (t, e) {
          ta(
            "strict variants of ops have been deprecated and will be removed in future"
          );
          const n = Object(S.a)(t, "a", "greaterEqualStrict"),
            r = Object(S.a)(e, "b", "greaterEqualStrict");
          return (
            Object(R.assertShapesMatch)(
              n.shape,
              r.shape,
              "Error in greaterEqualStrict: "
            ),
            n.greaterEqual(r)
          );
        },
      }),
      Mi = Object(I.a)({
        greaterStrict_: function (t, e) {
          ta(
            "strict variants of ops have been deprecated and will be removed in future"
          );
          const n = Object(S.a)(t, "a", "greaterStrict"),
            r = Object(S.a)(e, "b", "greaterStrict");
          return (
            Object(R.assertShapesMatch)(
              n.shape,
              r.shape,
              "Error in greaterStrict: "
            ),
            n.greater(r)
          );
        },
      }),
      ji = Object(I.a)({
        lessEqualStrict_: function (t, e) {
          ta(
            "strict variants of ops have been deprecated and will be removed in future"
          );
          const n = Object(S.a)(t, "a", "lessEqualStrict"),
            r = Object(S.a)(e, "b", "lessEqualStrict");
          return (
            Object(R.assertShapesMatch)(
              n.shape,
              r.shape,
              "Error in lessEqualStrict: "
            ),
            n.lessEqual(r)
          );
        },
      }),
      $i = Object(I.a)({
        lessStrict_: function (t, e) {
          ta(
            "strict variants of ops have been deprecated and will be removed in future"
          );
          const n = Object(S.a)(t, "a", "lessStrict"),
            r = Object(S.a)(e, "b", "lessStrict");
          return (
            Object(R.assertShapesMatch)(
              n.shape,
              r.shape,
              "Error in lessStrict: "
            ),
            n.less(r)
          );
        },
      }),
      Bi = Object(I.a)({
        notEqualStrict_:
          /**
           * @license
           * Copyright 2018 Google Inc. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (t, e) {
            ta(
              "strict variants of ops have been deprecated and will be removed in future"
            );
            const n = Object(S.a)(t, "a", "notEqualStrict"),
              r = Object(S.a)(e, "b", "notEqualStrict");
            return (
              Object(R.assertShapesMatch)(
                n.shape,
                r.shape,
                "Error in notEqualStrict: "
              ),
              n.notEqual(r)
            );
          },
      });
    const Pi = Object(I.a)({
        addStrict_:
          /**
           * @license
           * Copyright 2018 Google Inc. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (t, e) {
            ta(
              "strict variants of ops have been deprecated and will be removed in future"
            );
            const n = Object(S.a)(t, "a", "addStrict"),
              r = Object(S.a)(e, "b", "addStrict");
            return (
              R.assertShapesMatch(n.shape, r.shape, "Error in addStrict: "),
              n.add(r)
            );
          },
      }),
      Li = Object(I.a)({
        divStrict_: function (t, e) {
          ta(
            "strict variants of ops have been deprecated and will be removed in future"
          );
          const n = Object(S.a)(t, "a", "div"),
            r = Object(S.a)(e, "b", "div");
          return (
            R.assertShapesMatch(n.shape, r.shape, "Error in divideStrict: "),
            n.div(r)
          );
        },
      }),
      zi = Object(I.a)({
        maximumStrict_: function (t, e) {
          ta(
            "strict variants of ops have been deprecated and will be removed in future"
          );
          const n = Object(S.a)(t, "a", "maximumStrict"),
            r = Object(S.a)(e, "b", "maximumStrict");
          return (
            R.assertShapesMatch(n.shape, r.shape, "Error in maximumStrict: "),
            n.maximum(r)
          );
        },
      }),
      Wi = Object(I.a)({
        minimumStrict_: function (t, e) {
          ta(
            "strict variants of ops have been deprecated and will be removed in future"
          );
          const n = Object(S.a)(t, "a", "minimumStrict"),
            r = Object(S.a)(e, "b", "minimumStrict");
          return (
            R.assertShapesMatch(n.shape, r.shape, "Error in minimumStrict: "),
            n.minimum(r)
          );
        },
      }),
      Vi = Object(I.a)({
        modStrict_: function (t, e) {
          ta(
            "strict variants of ops have been deprecated and will be removed in future"
          );
          const n = Object(S.a)(t, "a", "modStrict"),
            r = Object(S.a)(e, "b", "modStrict");
          return (
            R.assertShapesMatch(n.shape, r.shape, "Error in modStrict: "),
            n.mod(r)
          );
        },
      }),
      Ui = Object(I.a)({
        mulStrict_: function (t, e) {
          ta(
            "strict variants of ops have been deprecated and will be removed in future"
          );
          const n = Object(S.a)(t, "a", "mul"),
            r = Object(S.a)(e, "b", "mul");
          return (
            R.assertShapesMatch(n.shape, r.shape, "Error in multiplyStrict: "),
            n.mul(r)
          );
        },
      }),
      Gi = Object(I.a)({
        powStrict_: function (t, e) {
          return (
            ta(
              "strict variants of ops have been deprecated and will be removed in future"
            ),
            R.assertShapesMatch(t.shape, e.shape, "Error in powStrict: "),
            t.pow(e)
          );
        },
      }),
      Hi = Object(I.a)({
        squaredDifferenceStrict_: function (t, e) {
          ta(
            "strict variants of ops have been deprecated and will be removed in future"
          );
          const n = Object(S.a)(t, "a", "squaredDifferenceStrict"),
            r = Object(S.a)(e, "b", "squaredDifferenceStrict");
          return (
            R.assertShapesMatch(
              n.shape,
              r.shape,
              "Error in squaredDifferenceStrict: "
            ),
            n.squaredDifference(r)
          );
        },
      }),
      qi = Object(I.a)({
        subStrict_: function (t, e) {
          ta(
            "strict variants of ops have been deprecated and will be removed in future"
          );
          const n = Object(S.a)(t, "a", "subStrict"),
            r = Object(S.a)(e, "b", "subStrict");
          return (
            R.assertShapesMatch(n.shape, r.shape, "Error in subStrict: "),
            n.sub(r)
          );
        },
      });
    const Ki = Object(I.a)({
        softmax_:
          /**
           * @license
           * Copyright 2018 Google Inc. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (t, e = -1) {
            const n = Object(S.a)(t, "logits", "softmax", "float32");
            if ((-1 === e && (e = n.rank - 1), e !== n.rank - 1))
              throw Error(
                `Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${e}`
              );
            return b.a.runKernelFunc(
              (t, r) => {
                const a = t.softmax(n, e);
                return r([a]), a;
              },
              { logits: n },
              (t, n) => {
                const [r] = n,
                  a = t.mul(r);
                return { logits: () => a.sub(a.sum([e], !0).mul(r)) };
              },
              "Softmax",
              { dim: e },
              [],
              [!0]
            );
          },
      }),
      Xi = Object(I.a)({
        logSoftmax_: function (t, e = -1) {
          const n = Object(S.a)(t, "logits", "logSoftmax");
          if ((-1 === e && (e = n.rank - 1), e !== n.rank - 1))
            throw Error(
              `Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${e}`
            );
          return q((t, n) => {
            const r = t.max(e, !0),
              a = t.sub(r),
              i = a.toFloat().sub(a.exp().sum(e, !0).log());
            n([i]);
            return {
              value: i,
              gradFunc: (t, n) => {
                const [r] = n,
                  a = r.exp();
                return t.sub(t.sum(e, !0).mul(a));
              },
            };
          })(n);
        },
      });
    const Yi = Object(I.a)({
      norm_:
        /**
         * @license
         * Copyright 2018 Google Inc. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (t, e = "euclidean", n = null, r = !1) {
          const a = (function t(e, n, r = null) {
            if (0 === e.rank) return e.abs();
            if (1 !== e.rank && null === r) return t(e.reshape([-1]), n, r);
            if (
              1 === e.rank ||
              "number" == typeof r ||
              (Array.isArray(r) && 1 === r.length)
            ) {
              if (1 === n) return e.abs().sum(r);
              if (n === 1 / 0) return e.abs().max(r);
              if (n === -1 / 0) return e.abs().min(r);
              if ("euclidean" === n || 2 === n)
                return e.abs().pow(Object(_.e)(2, "int32")).sum(r).sqrt();
              throw new Error("Error in norm: invalid ord value: " + n);
            }
            if (Array.isArray(r) && 2 === r.length) {
              if (1 === n)
                return e
                  .abs()
                  .sum(r[0])
                  .max(r[1] - 1);
              if (n === 1 / 0) return e.abs().sum(r[1]).max(r[0]);
              if (n === -1 / 0) return e.abs().sum(r[1]).min(r[0]);
              if ("fro" === n || "euclidean" === n)
                return e.square().sum(r).sqrt();
              throw new Error("Error in norm: invalid ord value: " + n);
            }
            throw new Error("Error in norm: invalid axis: " + r);
          })((t = Object(S.a)(t, "x", "norm")), e, n);
          let i = a.shape;
          if (r) {
            const e = Object(R.parseAxisParam)(n, t.shape);
            i = J(a.shape, e);
          }
          return a.reshape(i);
        },
    });
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const Ji = Object(I.a)({
        basicLSTMCell_: function (t, e, n, r, a, i) {
          const o = Object(S.a)(t, "forgetBias", "basicLSTMCell"),
            s = Object(S.a)(e, "lstmKernel", "basicLSTMCell"),
            u = Object(S.a)(n, "lstmBias", "basicLSTMCell"),
            c = Object(S.a)(r, "data", "basicLSTMCell"),
            l = Object(S.a)(a, "c", "basicLSTMCell"),
            h = Object(S.a)(i, "h", "basicLSTMCell"),
            d = c.concat(h, 1).matMul(s).add(u),
            p = d.shape[0],
            f = d.shape[1] / 4,
            m = [p, f],
            g = d.slice([0, 0], m),
            b = d.slice([0, f], m),
            v = d.slice([0, 2 * f], m),
            y = d.slice([0, 3 * f], m),
            x = g
              .sigmoid()
              .mul(b.tanh())
              .add(l.mul(o.add(v).sigmoid())),
            w = x.tanh().mul(y.sigmoid());
          return [x, w];
        },
      }),
      Qi = Object(I.a)({
        multiRNNCell_: function (t, e, n, r) {
          const a = Object(S.a)(e, "data", "multiRNNCell"),
            i = Object(S.b)(n, "c", "multiRNNCell"),
            o = Object(S.b)(r, "h", "multiRNNCell");
          let s = a;
          const u = [];
          for (let e = 0; e < t.length; e++) {
            const n = t[e](s, i[e], o[e]);
            u.push(n[0]), u.push(n[1]), (s = n[1]);
          }
          const c = [],
            l = [];
          for (let t = 0; t < u.length; t += 2) c.push(u[t]), l.push(u[t + 1]);
          return [c, l];
        },
      });
    const Zi = Object(I.a)({
      movingAverage_:
        /**
         * @license
         * Copyright 2018 Google Inc. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (t, e, n, r, a = !0) {
          const i = Object(S.a)(t, "v", "movingAverage"),
            o = Object(S.a)(e, "x", "movingAverage"),
            s = Object(S.a)(n, "decay", "movingAverage");
          Object(E.assertTypesMatch)(i, o),
            R.assert(
              R.arraysEqual(i.shape, o.shape),
              () => "Shape mismatch in v and x"
            );
          const u = Object(_.e)(1),
            c = u.sub(s);
          let l = o.sub(i).mul(c);
          if (a) {
            R.assert(
              null != r,
              () => "When using zeroDebias: true, step is required."
            );
            const t = Object(S.a)(r, "step", "movingAverage");
            l = l.div(u.sub(hn(s, t)));
          }
          return i.add(l);
        },
    });
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const to = Object(I.a)({
      stridedSlice_: function (t, e, n, r, a = 0, i = 0, o = 0, s = 0, u = 0) {
        null == r && (r = new Array(e.length));
        const c = kn(o);
        if (c.length > 1)
          throw new Error("Multiple ellipses in slice is not allowed.");
        if (0 !== o && 0 !== s)
          throw new Error(
            "Using both ellipsisMask and newAxisMask is not yet supported."
          );
        if (0 !== o && 0 !== u)
          throw new Error(
            "Using both ellipsisMask and shrinkAxisMask is not yet supported."
          );
        let l = Object(S.a)(t, "x", "stridedSlice");
        const h = l.rank - e.length,
          d = kn(s),
          p = l.shape.slice();
        d.forEach((t) => {
          (e[t] = 0), (n[t] = 1), p.splice(t, 0, 1);
        }),
          (l = l.reshape(p));
        for (let t = 0; t < l.rank; t++)
          (e[t] = Dn(a, e, r, l.shape, t, o)),
            (n[t] = Fn(i, n, r, l.shape, t, o)),
            (r[t] = _n(r, t, o));
        if (c.length && h > 0) {
          const t = c[0],
            a = h + 1;
          (e = An(e, t, a)), (n = Tn(n, t, a, l.shape)), (r = Rn(r, t, a));
        }
        const f = kn(u);
        f.forEach((t) => {
          (n[t] = e[t] + 1), (r[t] = 1);
        });
        const m = Nn(e, n, r),
          g = m.filter((t, e) => -1 === f.indexOf(e));
        return r.every((t) => 1 === t)
          ? $n(l, e, m).reshape(g)
          : b.a
              .runKernelFunc((t) => t.stridedSlice(l, e, n, r), { $x: l })
              .reshape(g);
      },
    });
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const eo = Object(I.a)({
      topk_: function (t, e = 1, n = !0) {
        const r = Object(S.a)(t, "x", "topk");
        if (0 === r.rank)
          throw new Error("topk() expects the input to be of rank 1 or higher");
        const a = r.shape[r.shape.length - 1];
        if (e > a)
          throw new Error(
            `'k' passed to topk() must be <= the last dimension (${a}) but got ` +
              e
          );
        const [i, o] = b.a.runKernelFunc((t) => t.topk(r, e, n), { $x: r });
        return { values: i, indices: o };
      },
    });
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const no = Object(I.a)({
      scatterND_: function (t, e, n) {
        const r = Object(S.a)(t, "indices", "scatterND", "int32"),
          a = Object(S.a)(e, "updates", "scatterND");
        return (
          qr(a, r, n),
          b.a.runKernelFunc(
            (t) => t.scatterND(r, a, n),
            { indices: r, updates: a },
            null,
            "ScatterNd",
            { shape: n }
          )
        );
      },
    });
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const ro = Object(I.a)({
        fft_: function (t) {
          Object(R.assert)(
            "complex64" === t.dtype,
            () =>
              `The dtype for tf.spectral.fft() must be complex64 but got ${t.dtype}.`
          );
          const e = t.shape[t.shape.length - 1],
            n = t.size / e,
            r = t.as2D(n, e);
          return b.a
            .runKernelFunc((t) => t.fft(r), { input: t })
            .reshape(t.shape);
        },
      }),
      ao = Object(I.a)({
        ifft_: function (t) {
          Object(R.assert)(
            "complex64" === t.dtype,
            () =>
              `The dtype for tf.spectral.ifft() must be complex64 but got ${t.dtype}.`
          );
          const e = t.shape[t.shape.length - 1],
            n = t.size / e,
            r = t.as2D(n, e);
          return b.a
            .runKernelFunc((t) => t.ifft(r), { input: t })
            .reshape(t.shape);
        },
      }),
      io = Object(I.a)({
        rfft_: function (t, e) {
          Object(R.assert)(
            "float32" === t.dtype,
            () => "The dtype for rfft() must be real value but got " + t.dtype
          );
          let n = t.shape[t.shape.length - 1];
          const r = t.size / n;
          let a;
          if (null != e && e < n) {
            const r = t.shape.map((t) => 0),
              i = t.shape.map((t) => t);
            (i[t.shape.length - 1] = e), (a = t.slice(r, i)), (n = e);
          } else if (null != e && e > n) {
            const r = t.shape.map((t) => t);
            (r[t.shape.length - 1] = e - n),
              (a = t.concat(Object(_.n)(r), t.shape.length - 1)),
              (n = e);
          } else a = t;
          const i = a.zerosLike(),
            o = Object(xa.a)(a, i).as2D(r, n),
            s = ro(o),
            u = Math.floor(n / 2) + 1,
            c = Object(hi.a)(s),
            l = Object(Ba.a)(s),
            h = c.split([u, n - u], c.shape.length - 1),
            d = l.split([u, n - u], l.shape.length - 1),
            p = a.shape.slice();
          return (
            (p[a.shape.length - 1] = u), Object(xa.a)(h[0], d[0]).reshape(p)
          );
        },
      }),
      oo = Object(I.a)({
        irfft_: function (t) {
          const e = t.shape[t.shape.length - 1],
            n = t.size / e;
          if (e <= 2) {
            const r = t.as2D(n, e),
              a = ao(r);
            return Object(hi.a)(a);
          }
          {
            const r = [n, 2 * (e - 1)],
              a = Object(hi.a)(t).as2D(n, e),
              i = Object(Ba.a)(t).as2D(n, e),
              o = a.slice([0, 1], [n, e - 2]).reverse(1),
              s = i
                .slice([0, 1], [n, e - 2])
                .reverse(1)
                .mul(Object(_.e)(-1)),
              u = a.concat(o, 1),
              c = i.concat(s, 1),
              l = Object(xa.a)(u, c).as2D(r[0], r[1]),
              h = ao(l);
            return Object(hi.a)(h);
          }
        },
      });
    const so = Object(I.a)({
      sparseToDense_:
        /**
         * @license
         * Copyright 2018 Google Inc. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (t, e, n, r = 0) {
          const a = Object(S.a)(t, "sparseIndices", "sparseToDense", "int32"),
            i = Object(S.a)(e, "sparseValues", "sparseToDense"),
            o = Object(S.a)(r, "defaultValue", "sparseToDense", i.dtype);
          return (
            (function (t, e, n, r) {
              if ("int32" !== t.dtype)
                throw new Error(
                  `tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${t.dtype}.`
                );
              if (t.rank > 2)
                throw new Error(
                  `sparseIndices should be a scalar, vector, or matrix, but got shape ${t.shape}.`
                );
              const a = t.rank > 0 ? t.shape[0] : 1,
                i = t.rank > 1 ? t.shape[1] : 1;
              if (n.length !== i)
                throw new Error(
                  `outputShape has incorrect number of elements:, ${n.length}, should be: ${i}.`
                );
              const o = e.size;
              if (0 !== e.rank && (1 !== e.rank || o !== a))
                throw new Error(
                  `sparseValues has incorrect shape ${e.shape}, should be [] or [${a}]`
                );
              if (e.dtype !== r.dtype)
                throw new Error(
                  "sparseValues.dtype must match defaultValues.dtype"
                );
            })(a, i, n, o),
            b.a.runKernelFunc((t) => t.sparseToDense(a, i, n, o), {
              $sparseIndices: a,
              $sparseValues: i,
              $defaultValue: o,
            })
          );
        },
    });
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const uo = Object(I.a)({
      gatherND_: function (t, e) {
        const n = Object(S.a)(e, "indices", "gatherND", "int32"),
          r = Object(S.a)(t, "x", "gatherND"),
          a = { params: r, indices: n };
        return b.a.runKernelFunc((t) => t.gatherND(r, n), a, null, v.G);
      },
    });
    /**
     * @license
     * Copyright 2019 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const co = Object(I.a)({
      dropout_:
        /**
         * @license
         * Copyright 2018 Google Inc. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (t, e, n, r) {
          const a = Object(S.a)(t, "x", "dropout");
          if (
            (R.assert(
              "float32" === a.dtype,
              () =>
                `x has to be a floating point tensor since it's going to be scaled, but got a ${a.dtype} tensor instead.`
            ),
            R.assert(
              e >= 0 && e < 1,
              () => `rate must be a float in the range [0, 1), but got ${e}.`
            ),
            0 === e)
          )
            return t instanceof N.a ? a.clone() : a;
          const i = (function (t, e) {
              if (null == e) return t.shape.slice();
              if (R.arraysEqual(t.shape, e)) return e;
              if (t.shape.length === e.length) {
                const n = [];
                for (let r = 0; r < t.shape.length; r++)
                  null == e[r] && null != t.shape[r]
                    ? n.push(t.shape[r])
                    : n.push(e[r]);
                return n;
              }
              return e;
            })(a, n),
            o = 1 - e,
            s = li(i, 0, 1, "float32", r).add(o).floor().div(o);
          return a.mul(s);
        },
    });
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function lo(t, e, n) {
      const r = 1 - (t % 2),
        a = new Float32Array(t);
      for (let i = 0; i < t; ++i) {
        const o = (2 * Math.PI * i) / (t + r - 1);
        a[i] = e - n * Math.cos(o);
      }
      return Object(_.g)(a, "float32");
    }
    const ho = Object(I.a)({
        hannWindow_: function (t) {
          return lo(t, 0.5, 0.5);
        },
      }),
      po = Object(I.a)({
        hammingWindow_: function (t) {
          return lo(t, 0.54, 0.46);
        },
      }),
      fo = Object(I.a)({
        frame_: function (t, e, n, r = !1, a = 0) {
          let i = 0;
          const o = [];
          for (; i + e <= t.size; ) o.push($n(t, i, e)), (i += n);
          if (r)
            for (; i < t.size; ) {
              const r = i + e - t.size,
                s = D([$n(t, i, e - r), $a([r], a)]);
              o.push(s), (i += n);
            }
          return 0 === o.length
            ? Object(_.h)([], [0, e])
            : D(o).as2D(o.length, e);
        },
      }),
      mo = Object(I.a)({
        stft_: function (t, e, n, r, a = ho) {
          var i;
          null == r &&
            ((i = e),
            (r = Math.floor(
              Math.pow(2, Math.ceil(Math.log(i) / Math.log(2)))
            )));
          const o = fo(t, e, n),
            s = G(o, a(e)),
            u = [];
          for (let t = 0; t < o.shape[0]; t++)
            u.push(io(s.slice([t, 0], [1, e]), r));
          return D(u);
        },
      });
    const go =
      /**
       * @license
       * Copyright 2019 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      async function (t, e, n = 1) {
        const r = Object(S.a)(t, "predictions", "inTopK"),
          a = Object(S.a)(e, "targets", "inTopK");
        Object(R.assert)(
          r.rank > 1,
          () =>
            "inTopK() expects the predictions to be of rank 2 or higher, but got " +
            r.rank
        ),
          Object(R.assert)(
            r.rank - 1 === a.rank,
            () =>
              `predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${a.rank}`
          ),
          Object(R.assertShapesMatch)(
            r.shape.slice(0, r.shape.length - 1),
            a.shape,
            "predictions's shape should be align with the targets' shape, except the last dimension."
          );
        const i = r.shape[r.shape.length - 1];
        Object(R.assert)(
          n > 0 && n <= i,
          () =>
            `'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${i}), but got ${n}`
        );
        const o = await r.data(),
          s = await a.data(),
          [u, c] = [o.length / i, i],
          l = Object(R.getTypedArrayFromDType)("bool", u);
        for (let t = 0; t < u; t++) {
          const e = t * c,
            r = o.subarray(e, e + c),
            a = [];
          for (let t = 0; t < r.length; t++) a.push({ value: r[t], index: t });
          a.sort((t, e) => e.value - t.value), (l[t] = 0);
          for (let e = 0; e < n; e++)
            if (a[e].index === s[t]) {
              l[t] = 1;
              break;
            }
        }
        return (
          t !== r && r.dispose(),
          e !== a && a.dispose(),
          Object(_.f)(l, a.shape, "bool")
        );
      };
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ var bo;
    !(function (t) {
      (t[(t.NONE = 0)] = "NONE"),
        (t[(t.MEAN = 1)] = "MEAN"),
        (t[(t.SUM = 2)] = "SUM"),
        (t[(t.SUM_BY_NONZERO_WEIGHTS = 3)] = "SUM_BY_NONZERO_WEIGHTS");
    })(bo || (bo = {}));
    const vo = Object(I.a)({
        absoluteDifference_: function (t, e, n, r = bo.SUM_BY_NONZERO_WEIGHTS) {
          const a = Object(S.a)(t, "labels", "absoluteDifference"),
            i = Object(S.a)(e, "predictions", "absoluteDifference");
          let o = null;
          null != n && (o = Object(S.a)(n, "weights", "absoluteDifference")),
            Object(R.assertShapesMatch)(
              a.shape,
              i.shape,
              "Error in absoluteDifference: "
            );
          const s = a.sub(i).abs();
          return yo(s, o, r);
        },
      }),
      yo = Object(I.a)({
        computeWeightedLoss_: function (t, e, n = bo.SUM_BY_NONZERO_WEIGHTS) {
          const r = Object(S.a)(t, "losses", "computeWeightedLoss");
          let a = null;
          null != e && (a = Object(S.a)(e, "weights", "computeWeightedLoss"));
          const i = null == a ? r : r.mul(a);
          if (n === bo.NONE) return i;
          if (n === bo.SUM) return i.sum();
          if (n === bo.MEAN) {
            if (null == a) return i.mean();
            {
              const t = r.size / a.size,
                e = i.sum().div(a.sum());
              return t > 1 ? e.div(Object(_.e)(t)) : e;
            }
          }
          if (n === bo.SUM_BY_NONZERO_WEIGHTS) {
            if (null == a) return i.sum().div(Object(_.e)(r.size));
            {
              const t = a
                .mul(Object(_.b)(r.shape))
                .notEqual(Object(_.e)(0))
                .sum()
                .toFloat();
              return i.sum().div(t);
            }
          }
          throw Error("Unknown reduction: " + n);
        },
      }),
      xo = Object(I.a)({
        cosineDistance_: function (t, e, n, r, a = bo.SUM_BY_NONZERO_WEIGHTS) {
          const i = Object(S.a)(t, "labels", "cosineDistance"),
            o = Object(S.a)(e, "predictions", "cosineDistance");
          let s = null;
          null != r && (s = Object(S.a)(r, "weights", "cosineDistance")),
            Object(R.assertShapesMatch)(
              i.shape,
              o.shape,
              "Error in cosineDistance: "
            );
          const u = Object(_.e)(1).sub(i.mul(o).sum(n, !0));
          return yo(u, s, a);
        },
      }),
      wo = Object(I.a)({
        hingeLoss_: function (t, e, n, r = bo.SUM_BY_NONZERO_WEIGHTS) {
          let a = Object(S.a)(t, "labels", "hingeLoss");
          const i = Object(S.a)(e, "predictions", "hingeLoss");
          let o = null;
          null != n && (o = Object(S.a)(n, "weights", "hingeLoss")),
            Object(R.assertShapesMatch)(
              a.shape,
              i.shape,
              "Error in hingeLoss: "
            );
          const s = Object(_.e)(1);
          a = Object(_.e)(2).mul(a).sub(s);
          const u = s.sub(a.mul(i)).relu();
          return yo(u, o, r);
        },
      }),
      Co = Object(I.a)({
        huberLoss_: function (t, e, n, r = 1, a = bo.SUM_BY_NONZERO_WEIGHTS) {
          const i = Object(S.a)(t, "labels", "huberLoss"),
            o = Object(S.a)(e, "predictions", "huberLoss");
          let s = null;
          null != n && (s = Object(S.a)(n, "weights", "huberLoss")),
            Object(R.assertShapesMatch)(
              i.shape,
              o.shape,
              "Error in huberLoss: "
            );
          const u = Object(_.e)(r),
            c = o.sub(i).abs(),
            l = Ha(c, u),
            h = c.sub(l),
            d = Object(_.e)(0.5).mul(l.square()).add(u.mul(h));
          return yo(d, s, a);
        },
      }),
      Oo = Object(I.a)({
        logLoss_: function (t, e, n, r = 1e-7, a = bo.SUM_BY_NONZERO_WEIGHTS) {
          const i = Object(S.a)(t, "labels", "logLoss"),
            o = Object(S.a)(e, "predictions", "logLoss");
          let s = null;
          null != n && (s = Object(S.a)(n, "weights", "logLoss")),
            Object(R.assertShapesMatch)(i.shape, o.shape, "Error in logLoss: ");
          const u = Object(_.e)(1),
            c = Object(_.e)(r),
            l = i
              .mul(o.add(c).log())
              .neg()
              .sub(u.sub(i).mul(u.sub(o).add(c).log()));
          return yo(l, s, a);
        },
      }),
      Eo = Object(I.a)({
        meanSquaredError_: function (t, e, n, r = bo.SUM_BY_NONZERO_WEIGHTS) {
          const a = Object(S.a)(t, "labels", "meanSquaredError"),
            i = Object(S.a)(e, "predictions", "meanSquaredError");
          let o = null;
          null != n && (o = Object(S.a)(n, "weights", "meanSquaredError")),
            Object(R.assertShapesMatch)(
              a.shape,
              i.shape,
              "Error in meanSquaredError: "
            );
          const s = a.squaredDifference(i);
          return yo(s, o, r);
        },
      }),
      So = Object(I.a)({
        sigmoidCrossEntropy_: function (
          t,
          e,
          n,
          r = 0,
          a = bo.SUM_BY_NONZERO_WEIGHTS
        ) {
          let i = Object(S.a)(t, "multiClassLabels", "sigmoidCrossEntropy");
          const o = Object(S.a)(e, "logits", "sigmoidCrossEntropy");
          let s = null;
          if (
            (null != n &&
              (s = Object(S.a)(n, "weights", "sigmoidCrossEntropy")),
            Object(R.assertShapesMatch)(
              i.shape,
              o.shape,
              "Error in sigmoidCrossEntropy: "
            ),
            r > 0)
          ) {
            const t = Object(_.e)(r),
              e = Object(_.e)(1),
              n = Object(_.e)(0.5);
            i = i.mul(e.sub(t)).add(n.mul(t));
          }
          const u = (function (t, e) {
            const n = Object(S.a)(t, "labels", "sigmoidCrossEntropyWithLogits"),
              r = Object(S.a)(e, "logits", "sigmoidCrossEntropyWithLogits");
            Object(R.assertShapesMatch)(
              n.shape,
              r.shape,
              "Error in sigmoidCrossEntropyWithLogits: "
            );
            const a = r.relu(),
              i = r.mul(n),
              o = r.abs().neg().exp().log1p();
            return a.sub(i).add(o);
          })(i, o);
          return yo(u, s, a);
        },
      }),
      Io = Object(I.a)({
        softmaxCrossEntropy_: function (
          t,
          e,
          n,
          r = 0,
          a = bo.SUM_BY_NONZERO_WEIGHTS
        ) {
          let i = Object(S.a)(t, "onehotLabels", "softmaxCrossEntropy");
          const o = Object(S.a)(e, "logits", "softmaxCrossEntropy");
          let s = null;
          if (
            (null != n &&
              (s = Object(S.a)(n, "weights", "softmaxCrossEntropy")),
            Object(R.assertShapesMatch)(
              i.shape,
              o.shape,
              "Error in softmaxCrossEntropy: "
            ),
            r > 0)
          ) {
            const t = Object(_.e)(r),
              e = Object(_.e)(1),
              n = Object(_.e)(i.shape[1]);
            i = i.mul(e.sub(t)).add(t.div(n));
          }
          const u = (function (t, e, n = -1) {
            if ((-1 === n && (n = e.rank - 1), n !== e.rank - 1))
              throw Error(
                `Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${e.rank} and dim was ` +
                  n
              );
            return q((t, e, r) => {
              const a = e.logSumExp([n], !0),
                i = e.toFloat().sub(a);
              r([t, i]);
              return {
                value: i.mul(t).neg().sum([n]),
                gradFunc: (t, e) => {
                  const [r, a] = e,
                    i = J(t.shape, [n]);
                  return [
                    t.reshape(i).mul(r.toFloat().sub(a.exp())),
                    t.reshape(i).mul(a.exp().sub(r.toFloat())),
                  ];
                },
              };
            })(t, e);
          })(i, o);
          return yo(u, s, a);
        },
      });
    function ko(t, e = !1) {
      return b.a.tidy(() => {
        if (2 !== t.shape.length)
          throw new Error(
            `qr2d() requires a 2D Tensor, but got a ${t.shape.length}D Tensor.`
          );
        const n = t.shape[0],
          r = t.shape[1];
        let a = ja(n),
          i = t.clone();
        const o = Object(_.h)([[1]], [1, 1]);
        let s = o.clone();
        const u = n >= r ? r : n;
        for (let t = 0; t < u; ++t) {
          const e = i,
            u = s,
            c = a;
          ([s, i, a] = b.a.tidy(() => {
            const e = i.slice([t, t], [n - t, 1]),
              u = e.norm(),
              c = i.slice([t, t], [1, 1]),
              l = Object(_.h)([[-1]]).where(c.greater(0), Object(_.h)([[1]])),
              h = c.sub(l.mul(u)),
              d = e.div(h);
            s =
              1 === d.shape[0]
                ? o.clone()
                : o.concat(d.slice([1, 0], [d.shape[0] - 1, d.shape[1]]), 0);
            const p = l.matMul(h).div(u).neg(),
              f = i.slice([t, 0], [n - t, r]),
              m = p.mul(s),
              g = s.transpose();
            if (0 === t) i = f.sub(m.matMul(g.matMul(f)));
            else {
              const e = f.sub(m.matMul(g.matMul(f)));
              i = i.slice([0, 0], [t, r]).concat(e, 0);
            }
            const b = m.transpose(),
              v = a.slice([0, t], [n, a.shape[1] - t]);
            if (0 === t) a = v.sub(v.matMul(s).matMul(b));
            else {
              const e = v.sub(v.matMul(s).matMul(b));
              a = a.slice([0, 0], [n, t]).concat(e, 1);
            }
            return [s, i, a];
          })),
            aa([e, u, c]);
        }
        return (
          !e &&
            n > r &&
            ((a = a.slice([0, 0], [n, r])), (i = i.slice([0, 0], [r, r]))),
          [a, i]
        );
      });
    }
    const No = Object(I.a)({
        bandPart_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (t, e, n) {
            if (e % 1 != 0)
              throw new Error(
                `bandPart(): numLower must be an integer, got ${e}.`
              );
            if (n % 1 != 0)
              throw new Error(
                `bandPart(): numUpper must be an integer, got ${n}.`
              );
            const r = Object(S.a)(t, "a", "bandPart");
            if (r.rank < 2)
              throw new Error(
                `bandPart(): Rank must be at least 2, got ${r.rank}.`
              );
            const a = r.shape,
              [i, o] = r.shape.slice(-2);
            if (!(e <= i))
              throw new Error(
                `bandPart(): numLower (${e}) must not be greater than the number of rows (${i}).`
              );
            if (!(n <= o))
              throw new Error(
                `bandPart(): numUpper (${n}) must not be greater than the number of columns (${o}).`
              );
            e < 0 && (e = i), n < 0 && (n = o);
            const s = Object(_.d)(0, i, 1, "int32").reshape([-1, 1]),
              u = Object(_.d)(0, o, 1, "int32"),
              c = Me(s, u),
              l = an(
                c.lessEqual(Object(_.e)(+e, "int32")),
                c.greaterEqual(Object(_.e)(-n, "int32"))
              ),
              h = Object(_.n)([i, o], r.dtype);
            return L(z(r.reshape([-1, i, o])).map((t) => cn(l, t, h))).reshape(
              a
            );
          },
      }),
      Ro = Object(I.a)({
        gramSchmidt_: function (t) {
          let e;
          if (Array.isArray(t)) {
            (e = !1),
              Object(R.assert)(
                null != t && t.length > 0,
                () =>
                  "Gram-Schmidt process: input must not be null, undefined, or empty"
              );
            const n = t[0].shape[0];
            for (let e = 1; e < t.length; ++e)
              Object(R.assert)(
                t[e].shape[0] === n,
                () =>
                  `Gram-Schmidt: Non-unique lengths found in the input vectors: (${t[e].shape[0]} vs. ${n})`
              );
          } else (e = !0), (t = ge(t, t.shape[0], 0).map((t) => P(t, [0])));
          Object(R.assert)(
            t.length <= t[0].shape[0],
            () =>
              `Gram-Schmidt: Number of vectors (${t.length}) exceeds number of dimensions (${t[0].shape[0]}).`
          );
          const n = [],
            r = t;
          for (let e = 0; e < t.length; ++e)
            n.push(
              b.a.tidy(() => {
                let t = r[e];
                if (e > 0)
                  for (let r = 0; r < e; ++r) {
                    const e = ht(n[r].mul(t)).mul(n[r]);
                    t = t.sub(e);
                  }
                return t.div(Yi(t, "euclidean"));
              })
            );
          return e ? L(n, 0) : n;
        },
      }),
      Ao = Object(I.a)({
        qr_: function (t, e = !1) {
          if (t.rank < 2)
            throw new Error(
              "qr() requires input tensor to have a rank >= 2, but got rank " +
                t.rank
            );
          if (2 === t.rank) return ko(t, e);
          {
            const n = t.shape
                .slice(0, t.shape.length - 2)
                .reduce((t, e) => t * e),
              r = z(
                t.reshape([
                  n,
                  t.shape[t.shape.length - 2],
                  t.shape[t.shape.length - 1],
                ]),
                0
              ),
              a = [],
              i = [];
            r.forEach((t) => {
              const [n, r] = ko(t, e);
              a.push(n), i.push(r);
            });
            return [L(a, 0).reshape(t.shape), L(i, 0).reshape(t.shape)];
          }
        },
      });
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function To(t, e, n) {
      const r = (function (t, e, n) {
          return (function (t, e, n) {
            let r = 0,
              a = t.length,
              i = 0,
              o = !1;
            for (; r < a; ) {
              i = r + ((a - r) >>> 1);
              const s = n(e, t[i]);
              s > 0 ? (r = i + 1) : ((a = i), (o = !s));
            }
            return o ? r : -r - 1;
          })(
            /**
             * @license
             * Copyright 2018 Google LLC. All Rights Reserved.
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             * http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             * =============================================================================
             */ t,
            e,
            n || _o
          );
        })(t, e, n),
        a = r < 0 ? -(r + 1) : r;
      t.splice(a, 0, e);
    }
    function _o(t, e) {
      return t > e ? 1 : t < e ? -1 : 0;
    }
    function Do(t, e, n, r, a) {
      const i = Mo(t, e, n, r, a, 0);
      return (
        i.selectedScores.dispose(),
        i.numValidOutputs.dispose(),
        i.selectedIndices
      );
    }
    function Fo(t, e, n, r, a, i) {
      const o = Mo(t, e, n, r, a, i, !0);
      return (
        o.numValidOutputs.dispose(),
        { selectedIndices: o.selectedIndices, selectedScores: o.selectedScores }
      );
    }
    function Mo(t, e, n, r, a, i, o = !1, s = !1) {
      const u = [];
      for (let t = 0; t < e.length; t++)
        e[t] > a && u.push({ score: e[t], boxIndex: t, suppressBeginIndex: 0 });
      u.sort(Bo);
      const c = i > 0 ? -0.5 / i : 0,
        l = [],
        h = [];
      for (; l.length < n && u.length > 0; ) {
        const e = u.pop(),
          { score: n, boxIndex: i, suppressBeginIndex: o } = e;
        if (n < a) break;
        let s = !1;
        for (let n = l.length - 1; n >= o; --n) {
          const o = jo(t, i, l[n]);
          if (o >= r) {
            s = !0;
            break;
          }
          if (((e.score = e.score * $o(r, c, o)), e.score <= a)) break;
        }
        (e.suppressBeginIndex = l.length),
          s ||
            (e.score === n
              ? (l.push(i), h.push(e.score))
              : e.score > a && To(u, e, Bo));
      }
      const d = l.length;
      return (
        s && (l.fill(0, d), h.fill(0, d)),
        {
          selectedIndices: Object(_.g)(l, "int32"),
          selectedScores: Object(_.g)(h, "float32"),
          numValidOutputs: Object(_.e)(d, "int32"),
        }
      );
    }
    function jo(t, e, n) {
      const r = t.subarray(4 * e, 4 * e + 4),
        a = t.subarray(4 * n, 4 * n + 4),
        i = Math.min(r[0], r[2]),
        o = Math.min(r[1], r[3]),
        s = Math.max(r[0], r[2]),
        u = Math.max(r[1], r[3]),
        c = Math.min(a[0], a[2]),
        l = Math.min(a[1], a[3]),
        h = Math.max(a[0], a[2]),
        d = Math.max(a[1], a[3]),
        p = (s - i) * (u - o),
        f = (h - c) * (d - l);
      if (p <= 0 || f <= 0) return 0;
      const m = Math.max(i, c),
        g = Math.max(o, l),
        b = Math.min(s, h),
        v = Math.min(u, d),
        y = Math.max(b - m, 0) * Math.max(v - g, 0);
      return y / (p + f - y);
    }
    function $o(t, e, n) {
      const r = Math.exp(e * n * n);
      return n <= t ? r : 0;
    }
    function Bo(t, e) {
      return (
        t.score - e.score || (t.score === e.score && e.boxIndex - t.boxIndex)
      );
    }
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Po(t, e, n, r, a, i) {
      null == r && (r = 0.5),
        null == a && (a = Number.NEGATIVE_INFINITY),
        null == i && (i = 0);
      const o = t.shape[0];
      return (
        (n = Math.min(n, o)),
        R.assert(
          0 <= r && r <= 1,
          () => `iouThreshold must be in [0, 1], but was '${r}'`
        ),
        R.assert(
          2 === t.rank,
          () => `boxes must be a 2D tensor, but was of rank '${t.rank}'`
        ),
        R.assert(
          4 === t.shape[1],
          () => "boxes must have 4 columns, but 2nd dimension was " + t.shape[1]
        ),
        R.assert(1 === e.rank, () => "scores must be a 1D tensor"),
        R.assert(
          e.shape[0] === o,
          () =>
            `scores has incompatible shape with boxes. Expected ${o}, but was ` +
            e.shape[0]
        ),
        R.assert(
          0 <= i && i <= 1,
          () => `softNmsSigma must be in [0, 1], but was '${i}'`
        ),
        {
          maxOutputSize: n,
          iouThreshold: r,
          scoreThreshold: a,
          softNmsSigma: i,
        }
      );
    }
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const Lo = Object(I.a)({
      nonMaxSuppression_: function (
        t,
        e,
        n,
        r = 0.5,
        a = Number.NEGATIVE_INFINITY
      ) {
        const i = Object(S.a)(t, "boxes", "nonMaxSuppression"),
          o = Object(S.a)(e, "scores", "nonMaxSuppression"),
          s = Po(i, o, n, r, a);
        (n = s.maxOutputSize), (r = s.iouThreshold), (a = s.scoreThreshold);
        const u = { maxOutputSize: n, iouThreshold: r, scoreThreshold: a };
        return b.a.runKernelFunc(
          (t) => t.nonMaxSuppression(i, o, n, r, a),
          { boxes: i, scores: o },
          null,
          v.Z,
          u
        );
      },
    });
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const zo = Object(I.a)({
        resizeBilinear_: function (t, e, n = !1) {
          const r = Object(S.a)(t, "images", "resizeBilinear");
          R.assert(
            3 === r.rank || 4 === r.rank,
            () =>
              `Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`
          ),
            R.assert(
              2 === e.length,
              () =>
                "Error in resizeBilinear: new shape must 2D, but got shape " +
                e +
                "."
            );
          let a = r,
            i = !1;
          3 === r.rank &&
            ((i = !0), (a = r.as4D(1, r.shape[0], r.shape[1], r.shape[2])));
          const [o, s] = e,
            u = b.a.runKernelFunc(
              (t, e) => (e([a]), t.resizeBilinear(a, o, s, n)),
              { x: a },
              (t, e) => ({
                x: () =>
                  b.a.runKernelFunc(
                    (r) => r.resizeBilinearBackprop(t, e[0], n),
                    {}
                  ),
              }),
              "ResizeBilinear",
              { alignCorners: n, newHeight: o, newWidth: s }
            );
          return i ? u.as3D(u.shape[1], u.shape[2], u.shape[3]) : u;
        },
      }),
      Wo = Object(I.a)({
        resizeNearestNeighbor_: function (t, e, n = !1) {
          const r = Object(S.a)(t, "images", "resizeNearestNeighbor");
          R.assert(
            3 === r.rank || 4 === r.rank,
            () =>
              `Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`
          ),
            R.assert(
              2 === e.length,
              () =>
                "Error in resizeNearestNeighbor: new shape must 2D, but got shape " +
                e +
                "."
            ),
            R.assert(
              "float32" === r.dtype || "int32" === r.dtype,
              () => "`images` must have `int32` or `float32` as dtype"
            );
          let a = r,
            i = !1;
          3 === r.rank &&
            ((i = !0), (a = r.as4D(1, r.shape[0], r.shape[1], r.shape[2])));
          const [o, s] = e,
            u = b.a.runKernelFunc(
              (t, e) => (e([a]), t.resizeNearestNeighbor(a, o, s, n)),
              { batchImages: a },
              (t, e) => ({
                batchImages: () =>
                  b.a.runKernelFunc(
                    (r) => r.resizeNearestNeighborBackprop(t, e[0], n),
                    {}
                  ),
              })
            );
          return i ? u.as3D(u.shape[1], u.shape[2], u.shape[3]) : u;
        },
      }),
      Vo = async function (t, e, n, r = 0.5, a = Number.NEGATIVE_INFINITY) {
        const i = Object(S.a)(t, "boxes", "nonMaxSuppressionAsync"),
          o = Object(S.a)(e, "scores", "nonMaxSuppressionAsync"),
          s = Po(i, o, n, r, a);
        (n = s.maxOutputSize), (r = s.iouThreshold), (a = s.scoreThreshold);
        const u = await Promise.all([i.data(), o.data()]),
          c = Do(u[0], u[1], n, r, a);
        return i !== t && i.dispose(), o !== e && o.dispose(), c;
      },
      Uo = Object(I.a)({
        nonMaxSuppressionWithScore_: function (
          t,
          e,
          n,
          r = 0.5,
          a = Number.NEGATIVE_INFINITY,
          i = 0
        ) {
          const o = Object(S.a)(t, "boxes", "nonMaxSuppression"),
            s = Object(S.a)(e, "scores", "nonMaxSuppression"),
            u = Po(o, s, n, r, a, i),
            c = {
              maxOutputSize: (n = u.maxOutputSize),
              iouThreshold: (r = u.iouThreshold),
              scoreThreshold: (a = u.scoreThreshold),
              softNmsSigma: (i = u.softNmsSigma),
            },
            l = b.a.runKernel(
              "NonMaxSuppressionV5",
              { boxes: o, scores: s },
              c
            );
          return { selectedIndices: l[0], selectedScores: l[1] };
        },
      }),
      Go = async function (
        t,
        e,
        n,
        r = 0.5,
        a = Number.NEGATIVE_INFINITY,
        i = 0
      ) {
        const o = Object(S.a)(t, "boxes", "nonMaxSuppressionAsync"),
          s = Object(S.a)(e, "scores", "nonMaxSuppressionAsync"),
          u = Po(o, s, n, r, a, i);
        (n = u.maxOutputSize),
          (r = u.iouThreshold),
          (a = u.scoreThreshold),
          (i = u.softNmsSigma);
        const c = await Promise.all([o.data(), s.data()]),
          l = Fo(c[0], c[1], n, r, a, i);
        return o !== t && o.dispose(), s !== e && s.dispose(), l;
      },
      Ho = Object(I.a)({
        cropAndResize_: function (t, e, n, r, a, i) {
          const o = Object(S.a)(t, "image", "cropAndResize"),
            s = Object(S.a)(e, "boxes", "cropAndResize", "float32"),
            u = Object(S.a)(n, "boxInd", "cropAndResize", "int32");
          (a = a || "bilinear"), (i = i || 0);
          const c = s.shape[0];
          return (
            R.assert(
              4 === o.rank,
              () =>
                `Error in cropAndResize: image must be rank 4,but got rank ${o.rank}.`
            ),
            R.assert(
              2 === s.rank && 4 === s.shape[1],
              () =>
                `Error in cropAndResize: boxes must be have size [${c},4] but had shape ${s.shape}.`
            ),
            R.assert(
              1 === u.rank && u.shape[0] === c,
              () =>
                `Error in cropAndResize: boxInd must be have size [${c}] but had shape ${s.shape}.`
            ),
            R.assert(
              2 === r.length,
              () =>
                `Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`
            ),
            R.assert(
              r[0] >= 1 && r[1] >= 1,
              () => "cropSize must be atleast [1,1], but was " + r
            ),
            R.assert(
              "bilinear" === a || "nearest" === a,
              () => "method must be bilinear or nearest, but was " + a
            ),
            b.a.runKernelFunc(
              (t, e) => t.cropAndResize(o, s, u, r, a, i),
              { images: o, boxes: s, boxInd: u },
              null,
              "CropAndResize",
              { method: a, extrapolationValue: i, cropSize: r }
            )
          );
        },
      }),
      qo = (t, e) => !(t > 0) || "linear" === e,
      Ko = (t, e, n) => {
        if (null == n || "linear" === n) return t;
        if ("relu" === n) return t.mul(e.step());
        throw new Error(
          `Gradient for activation ${n} has not been implemented yet.`
        );
      },
      Xo = (t, e) => {
        let n = e;
        const r = x(t.shape, e.shape);
        return r.length > 0 && (n = n.sum(r)), n.reshape(t.shape);
      },
      Yo = (t, e, n) => {
        if ("linear" === e) return t;
        if ("relu" === e) return di(t);
        if ("elu" === e) return Fa(t);
        if ("relu6" === e) return pi(t);
        if ("prelu" === e) return ni(t, n);
        throw new Error(`Unknown fused activation ${e}.`);
      };
    const Jo = Object(I.a)({
        fusedMatMul_: function ({
          a: t,
          b: e,
          transposeA: n = !1,
          transposeB: r = !1,
          bias: a,
          activation: i = "linear",
          preluActivationWeights: o,
        }) {
          if (!1 === qo(b.a.state.gradientDepth, i)) {
            let s = he(t, e, n, r);
            return null != a && (s = k(s, a)), Yo(s, i, o);
          }
          let s = Object(S.a)(t, "a", "fused matMul"),
            u = Object(S.a)(e, "b", "fused matMul");
          [s, u] = Object(E.makeTypesMatch)(s, u);
          const c = n ? s.shape[s.rank - 2] : s.shape[s.rank - 1],
            l = r ? u.shape[u.rank - 1] : u.shape[u.rank - 2],
            h = n ? s.shape[s.rank - 1] : s.shape[s.rank - 2],
            d = r ? u.shape[u.rank - 2] : u.shape[u.rank - 1],
            p = s.shape.slice(0, -2),
            f = u.shape.slice(0, -2),
            m = R.sizeFromShape(p),
            g = R.sizeFromShape(f);
          R.assert(
            s.rank >= 2 && u.rank >= 2 && s.rank === u.rank,
            () =>
              `Error in fused matMul: inputs must have the same rank of at least 2, got ranks ${s.rank} and ${u.rank}.`
          ),
            R.assert(
              R.arraysEqual(p, f),
              () =>
                `Error in fused matMul: outer dimensions (${p}) and (${f}) of Tensors with shapes ${s.shape} and ` +
                u.shape +
                " must match."
            ),
            R.assert(
              c === l,
              () =>
                `Error in fused matMul: inner shapes (${c}) and (${l}) of Tensors with shapes ${s.shape} and ${u.shape} and transposeA=${n} and transposeB=${r} must match.`
            );
          const v = s.shape.slice(0, -2).concat([h, d]),
            y = n ? s.as3D(m, c, h) : s.as3D(m, h, c),
            x = r ? u.as3D(g, d, l) : u.as3D(g, l, d);
          let C, O;
          null != a &&
            ((C = Object(S.a)(a, "bias", "fused matMul")),
            ([C] = Object(E.makeTypesMatch)(C, s)),
            w(v, C.shape)),
            null != o && (O = Object(S.a)(o, "prelu weights", "fused matMul"));
          const I = { a: y, b: x };
          null != a && (I.bias = C),
            null != o && (I.preluActivationWeights = O);
          const N = [y, x];
          return b.a
            .runKernelFunc(
              (t, e) => {
                const a = t.fusedBatchMatMul({
                  a: y,
                  b: x,
                  transposeA: n,
                  transposeB: r,
                  bias: C,
                  activation: i,
                  preluActivationWeights: O,
                });
                return e([y, x, a]), a;
              },
              I,
              (t, e) => {
                const [o, s, u] = e,
                  c = Ko(t, u, i);
                let l = {};
                return (
                  null != a && (l = { bias: () => Xo(C, c) }),
                  n || r
                    ? !n && r
                      ? Object.assign(
                          {
                            a: () => c.matMul(s, !1, !1),
                            b: () => c.matMul(o, !0, !1),
                          },
                          l
                        )
                      : n && !r
                      ? Object.assign(
                          {
                            a: () => s.matMul(c, !1, !0),
                            b: () => o.matMul(c, !1, !1),
                          },
                          l
                        )
                      : Object.assign(
                          {
                            a: () => s.matMul(c, !0, !0),
                            b: () => c.matMul(o, !0, !0),
                          },
                          l
                        )
                    : Object.assign(
                        {
                          a: () => c.matMul(s, !1, !0),
                          b: () => o.matMul(c, !0, !1),
                        },
                        l
                      )
                );
              },
              "_FusedMatMul",
              { transposeA: n, transposeB: r, activation: i },
              N,
              [!0]
            )
            .reshape(v);
        },
      }),
      Qo = Object(I.a)({
        fusedConv2d_: function ({
          x: t,
          filter: e,
          strides: n,
          pad: r,
          dataFormat: a = "NHWC",
          dilations: i = [1, 1],
          dimRoundingMode: o,
          bias: s,
          activation: u = "linear",
          preluActivationWeights: c,
        }) {
          if (((u = u || "linear"), !1 === qo(b.a.state.gradientDepth, u))) {
            let l = we(t, e, n, r, a, i, o);
            return null != s && (l = k(l, s)), Yo(l, u, c);
          }
          const l = Object(S.a)(t, "x", "conv2d"),
            h = Object(S.a)(e, "filter", "conv2d");
          let d = l,
            p = !1;
          3 === l.rank &&
            ((p = !0), (d = l.as4D(1, l.shape[0], l.shape[1], l.shape[2]))),
            R.assert(
              4 === d.rank,
              () =>
                "Error in fused conv2d: input must be rank 4, but got rank " +
                d.rank +
                "."
            ),
            R.assert(
              4 === h.rank,
              () =>
                "Error in fused conv2d: filter must be rank 4, but got rank " +
                h.rank +
                "."
            ),
            null != o &&
              R.assert(
                R.isInt(r),
                () =>
                  `Error in fused conv2d: pad must be an integer when using, dimRoundingMode ${o} but got pad ${r}.`
              ),
            R.assert(
              d.shape[3] === h.shape[2],
              () =>
                `Error in conv2d: depth of input (${d.shape[3]}) must match input depth for filter ${h.shape[2]}.`
            ),
            R.assert(
              ie(n, i),
              () =>
                `Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`
            ),
            R.assert(
              "NHWC" === a,
              () =>
                `Error in conv2d: got dataFormat of ${a} but only NHWC is currently supported.`
            );
          const f = Jt(d.shape, h.shape, n, i, r, o);
          let m, g;
          null != s &&
            ((m = Object(S.a)(s, "bias", "fused conv2d")),
            ([m] = Object(E.makeTypesMatch)(m, l)),
            w(f.outShape, m.shape)),
            null != c && (g = Object(S.a)(c, "prelu weights", "fused conv2d"));
          const v = { x: d, filter: h };
          null != s && (v.bias = m),
            null != c && (v.preluActivationWeights = g);
          const y = [h, d],
            x = b.a.runKernelFunc(
              (t, e) => {
                const n = t.fusedConv2d({
                  input: d,
                  filter: h,
                  convInfo: f,
                  bias: m,
                  activation: u,
                  preluActivationWeights: g,
                });
                return e([h, d, n]), n;
              },
              v,
              (t, e) => {
                const [a, o, c] = e,
                  l = Ko(t, c, u);
                R.assert(
                  ae(i),
                  () =>
                    `Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${i}'`
                );
                let h = {};
                return (
                  null != s && (h = { bias: () => Xo(m, l) }),
                  Object.assign(
                    {
                      x: () => ye(o.shape, l, a, n, r),
                      filter: () => ve(o, l, a.shape, n, r),
                    },
                    h
                  )
                );
              },
              "FusedConv2D",
              { convInfo: f, activation: u },
              y,
              [!0]
            );
          return p ? x.as3D(x.shape[1], x.shape[2], x.shape[3]) : x;
        },
      }),
      Zo = Object(I.a)({
        fusedDepthwiseConv2d_: function ({
          x: t,
          filter: e,
          strides: n,
          pad: r,
          dataFormat: a = "NHWC",
          dilations: i = [1, 1],
          dimRoundingMode: o,
          bias: s,
          activation: u = "linear",
          preluActivationWeights: c,
        }) {
          if (!1 === qo(b.a.state.gradientDepth, u)) {
            let l = Aa(t, e, n, r, a, i, o);
            return null != s && (l = k(l, s)), Yo(l, u, c);
          }
          const l = Object(S.a)(t, "x", "depthwiseConv2d"),
            h = Object(S.a)(e, "filter", "depthwiseConv2d");
          let d = l,
            p = !1;
          3 === l.rank &&
            ((p = !0), (d = l.as4D(1, l.shape[0], l.shape[1], l.shape[2]))),
            R.assert(
              4 === d.rank,
              () =>
                `Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`
            ),
            R.assert(
              4 === h.rank,
              () =>
                `Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${h.rank}.`
            ),
            R.assert(
              d.shape[3] === h.shape[2],
              () =>
                `Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${h.shape[2]}.`
            ),
            null == i && (i = [1, 1]),
            R.assert(
              ie(n, i),
              () =>
                `Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`
            ),
            null != o &&
              R.assert(
                R.isInt(r),
                () =>
                  `Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode ${o} but got pad ${r}.`
              );
          const f = Jt(d.shape, h.shape, n, i, r, o, !0);
          let m, g;
          null != s &&
            ((m = Object(S.a)(s, "bias", "fused conv2d")),
            ([m] = Object(E.makeTypesMatch)(m, l)),
            w(f.outShape, m.shape)),
            null != c &&
              (g = Object(S.a)(c, "prelu weights", "fused depthwiseConv2d"));
          const v = { x: d, filter: h };
          null != s && (v.bias = m),
            null != c && (v.preluActivationWeights = g);
          const y = [h, d],
            x = b.a.runKernelFunc(
              (t, e) => {
                const n = t.fusedDepthwiseConv2D({
                  input: d,
                  filter: h,
                  convInfo: f,
                  bias: m,
                  activation: u,
                  preluActivationWeights: g,
                });
                return e([h, d, n]), n;
              },
              v,
              (t, e) => {
                R.assert(
                  ae(i),
                  () =>
                    `Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${i}'`
                );
                const [n, r, a] = e,
                  o = Ko(t, a, u);
                let c = {};
                return (
                  null != s && (c = { bias: () => Xo(m, o) }),
                  Object.assign(
                    {
                      x: () => Ae(r.shape, o, n, f),
                      filter: () => Re(r, o, n.shape, f),
                    },
                    c
                  )
                );
              },
              "FusedDepthwiseConv2D",
              { convInfo: f, activation: u },
              y,
              [!0]
            );
          return p ? x.as3D(x.shape[1], x.shape[2], x.shape[3]) : x;
        },
      });
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class ts extends Xr {
      minimize(t, e = !1, n) {
        const { value: r, grads: a } = this.computeGradients(t, n);
        if (null != n) {
          const t = n.map((t) => ({ name: t.name, tensor: a[t.name] }));
          this.applyGradients(t);
        } else this.applyGradients(a);
        return aa(a), e ? r : (r.dispose(), null);
      }
      get iterations() {
        return (
          null == this.iterations_ && (this.iterations_ = 0), this.iterations_
        );
      }
      incrementIterations() {
        this.iterations_ = this.iterations + 1;
      }
      computeGradients(t, e) {
        return H(t, e);
      }
      dispose() {
        null != this.iterations_ && aa(this.iterations_);
      }
      async saveIterations() {
        return (
          null == this.iterations_ && (this.iterations_ = 0),
          { name: "iter", tensor: Object(_.e)(this.iterations_, "int32") }
        );
      }
      async getWeights() {
        throw new Error(
          "getWeights() is not implemented for this optimizer yet."
        );
      }
      async setWeights(t) {
        throw new Error(
          "setWeights() is not implemented for this optimizer class " +
            this.getClassName()
        );
      }
      async extractIterations(t) {
        return (this.iterations_ = (await t[0].tensor.data())[0]), t.slice(1);
      }
    }
    Object.defineProperty(ts, Symbol.hasInstance, {
      value: (t) =>
        null != t.minimize &&
        null != t.computeGradients &&
        null != t.applyGradients,
    });
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class es extends ts {
      constructor(t, e, n = null) {
        super(),
          (this.learningRate = t),
          (this.rho = e),
          (this.epsilon = n),
          (this.accumulatedGrads = []),
          (this.accumulatedUpdates = []),
          null == n && (this.epsilon = b.a.backend.epsilon());
      }
      applyGradients(t) {
        (Array.isArray(t) ? t.map((t) => t.name) : Object.keys(t)).forEach(
          (e, n) => {
            const r = b.a.registeredVariables[e];
            null == this.accumulatedGrads[n] &&
              (this.accumulatedGrads[n] = {
                originalName: e + "/accum_grad",
                variable: ra(() => Object(_.o)(r).variable(!1)),
              }),
              null == this.accumulatedUpdates[n] &&
                (this.accumulatedUpdates[n] = {
                  originalName: e + "/accum_var",
                  variable: ra(() => Object(_.o)(r).variable(!1)),
                });
            const a = Array.isArray(t) ? t[n].tensor : t[e];
            if (null == a) return;
            const i = this.accumulatedGrads[n].variable,
              o = this.accumulatedUpdates[n].variable;
            ra(() => {
              const t = i.mul(this.rho).add(a.square().mul(1 - this.rho)),
                e = o
                  .add(this.epsilon)
                  .sqrt()
                  .div(i.add(this.epsilon).sqrt())
                  .mul(a),
                n = o.mul(this.rho).add(e.square().mul(1 - this.rho));
              i.assign(t), o.assign(n);
              const s = e.mul(-this.learningRate).add(r);
              r.assign(s);
            });
          }
        ),
          this.incrementIterations();
      }
      dispose() {
        null != this.accumulatedUpdates &&
          (aa(this.accumulatedGrads.map((t) => t.variable)),
          aa(this.accumulatedUpdates.map((t) => t.variable)));
      }
      async getWeights() {
        const t = [...this.accumulatedGrads, ...this.accumulatedUpdates];
        return [await this.saveIterations()].concat(
          t.map((t) => ({ name: t.originalName, tensor: t.variable }))
        );
      }
      async setWeights(t) {
        const e = (t = await this.extractIterations(t)).length / 2;
        (this.accumulatedGrads = t
          .slice(0, e)
          .map((t) => ({
            originalName: t.name,
            variable: t.tensor.variable(!1),
          }))),
          (this.accumulatedUpdates = t
            .slice(e, 2 * e)
            .map((t) => ({
              originalName: t.name,
              variable: t.tensor.variable(!1),
            })));
      }
      getConfig() {
        return {
          learningRate: this.learningRate,
          rho: this.rho,
          epsilon: this.epsilon,
        };
      }
      static fromConfig(t, e) {
        return new t(e.learningRate, e.rho, e.epsilon);
      }
    }
    (es.className = "Adadelta"), Jr(es);
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class ns extends ts {
      constructor(t, e = 0.1) {
        super(),
          (this.learningRate = t),
          (this.initialAccumulatorValue = e),
          (this.accumulatedGrads = []);
      }
      applyGradients(t) {
        (Array.isArray(t) ? t.map((t) => t.name) : Object.keys(t)).forEach(
          (e, n) => {
            const r = b.a.registeredVariables[e];
            if (null == this.accumulatedGrads[n]) {
              const t = !1;
              this.accumulatedGrads[n] = {
                originalName: e + "/accumulator",
                variable: ra(() =>
                  $a(r.shape, this.initialAccumulatorValue).variable(t)
                ),
              };
            }
            const a = Array.isArray(t) ? t[n].tensor : t[e];
            if (null == a) return;
            const i = this.accumulatedGrads[n].variable;
            ra(() => {
              const t = i.add(a.square());
              i.assign(t);
              const e = a
                .div(t.add(b.a.backend.epsilon()).sqrt())
                .mul(-this.learningRate)
                .add(r);
              r.assign(e);
            });
          }
        ),
          this.incrementIterations();
      }
      dispose() {
        null != this.accumulatedGrads &&
          aa(this.accumulatedGrads.map((t) => t.variable));
      }
      async getWeights() {
        return [await this.saveIterations()].concat(
          this.accumulatedGrads.map((t) => ({
            name: t.originalName,
            tensor: t.variable,
          }))
        );
      }
      async setWeights(t) {
        t = await this.extractIterations(t);
        this.accumulatedGrads = t.map((t) => ({
          originalName: t.name,
          variable: t.tensor.variable(!1),
        }));
      }
      getConfig() {
        return {
          learningRate: this.learningRate,
          initialAccumulatorValue: this.initialAccumulatorValue,
        };
      }
      static fromConfig(t, e) {
        return new t(e.learningRate, e.initialAccumulatorValue);
      }
    }
    (ns.className = "Adagrad"), Jr(ns);
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class rs extends ts {
      constructor(t, e, n, r = null) {
        super(),
          (this.learningRate = t),
          (this.beta1 = e),
          (this.beta2 = n),
          (this.epsilon = r),
          (this.accumulatedFirstMoment = []),
          (this.accumulatedSecondMoment = []),
          ra(() => {
            (this.accBeta1 = Object(_.e)(e).variable()),
              (this.accBeta2 = Object(_.e)(n).variable());
          }),
          null == r && (this.epsilon = b.a.backend.epsilon());
      }
      applyGradients(t) {
        const e = Array.isArray(t) ? t.map((t) => t.name) : Object.keys(t);
        ra(() => {
          const n = Me(1, this.accBeta1),
            r = Me(1, this.accBeta2);
          e.forEach((e, a) => {
            const i = b.a.registeredVariables[e];
            null == this.accumulatedFirstMoment[a] &&
              (this.accumulatedFirstMoment[a] = {
                originalName: e + "/m",
                variable: ra(() => Object(_.o)(i).variable(!1)),
              }),
              null == this.accumulatedSecondMoment[a] &&
                (this.accumulatedSecondMoment[a] = {
                  originalName: e + "/v",
                  variable: ra(() => Object(_.o)(i).variable(!1)),
                });
            const o = Array.isArray(t) ? t[a].tensor : t[e];
            if (null == o) return;
            const s = this.accumulatedFirstMoment[a].variable,
              u = this.accumulatedSecondMoment[a].variable,
              c = s.mul(this.beta1).add(o.mul(1 - this.beta1)),
              l = u.mul(this.beta2).add(o.square().mul(1 - this.beta2)),
              h = c.div(n),
              d = l.div(r);
            s.assign(c), u.assign(l);
            const p = h
              .div(d.sqrt().add(this.epsilon))
              .mul(-this.learningRate)
              .add(i);
            i.assign(p);
          }),
            this.accBeta1.assign(this.accBeta1.mul(this.beta1)),
            this.accBeta2.assign(this.accBeta2.mul(this.beta2));
        }),
          this.incrementIterations();
      }
      dispose() {
        this.accBeta1.dispose(),
          this.accBeta2.dispose(),
          null != this.accumulatedFirstMoment &&
            aa(this.accumulatedFirstMoment.map((t) => t.variable)),
          null != this.accumulatedSecondMoment &&
            aa(this.accumulatedSecondMoment.map((t) => t.variable));
      }
      async getWeights() {
        const t = [
          ...this.accumulatedFirstMoment,
          ...this.accumulatedSecondMoment,
        ];
        return [await this.saveIterations()].concat(
          t.map((t) => ({ name: t.originalName, tensor: t.variable }))
        );
      }
      async setWeights(t) {
        (t = await this.extractIterations(t)),
          ra(() => {
            this.accBeta1.assign(hn(this.beta1, this.iterations_ + 1)),
              this.accBeta2.assign(hn(this.beta2, this.iterations_ + 1));
          });
        const e = t.length / 2;
        (this.accumulatedFirstMoment = t
          .slice(0, e)
          .map((t) => ({
            originalName: t.name,
            variable: t.tensor.variable(!1),
          }))),
          (this.accumulatedSecondMoment = t
            .slice(e, 2 * e)
            .map((t) => ({
              originalName: t.name,
              variable: t.tensor.variable(!1),
            })));
      }
      getConfig() {
        return {
          learningRate: this.learningRate,
          beta1: this.beta1,
          beta2: this.beta2,
          epsilon: this.epsilon,
        };
      }
      static fromConfig(t, e) {
        return new t(e.learningRate, e.beta1, e.beta2, e.epsilon);
      }
    }
    (rs.className = "Adam"), Jr(rs);
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class as extends ts {
      constructor(t, e, n, r = null, a = 0) {
        super(),
          (this.learningRate = t),
          (this.beta1 = e),
          (this.beta2 = n),
          (this.epsilon = r),
          (this.decay = a),
          (this.accumulatedFirstMoment = []),
          (this.accumulatedWeightedInfNorm = []),
          ra(() => {
            (this.iteration = Object(_.e)(0).variable()),
              (this.accBeta1 = Object(_.e)(e).variable());
          }),
          null == r && (this.epsilon = b.a.backend.epsilon());
      }
      applyGradients(t) {
        const e = Array.isArray(t) ? t.map((t) => t.name) : Object.keys(t);
        ra(() => {
          const n = Me(1, this.accBeta1),
            r = U(-this.learningRate, this.iteration.mul(this.decay).add(1));
          e.forEach((e, a) => {
            const i = b.a.registeredVariables[e];
            null == this.accumulatedFirstMoment[a] &&
              (this.accumulatedFirstMoment[a] = {
                originalName: e + "/m",
                variable: Object(_.o)(i).variable(!1),
              }),
              null == this.accumulatedWeightedInfNorm[a] &&
                (this.accumulatedWeightedInfNorm[a] = {
                  originalName: e + "/v",
                  variable: Object(_.o)(i).variable(!1),
                });
            const o = Array.isArray(t) ? t[a].tensor : t[e];
            if (null == o) return;
            const s = this.accumulatedFirstMoment[a].variable,
              u = this.accumulatedWeightedInfNorm[a].variable,
              c = s.mul(this.beta1).add(o.mul(1 - this.beta1)),
              l = u.mul(this.beta2),
              h = o.abs(),
              d = l.maximum(h);
            s.assign(c), u.assign(d);
            const p = r
              .div(n)
              .mul(c.div(d.add(this.epsilon)))
              .add(i);
            i.assign(p);
          }),
            this.iteration.assign(this.iteration.add(1)),
            this.accBeta1.assign(this.accBeta1.mul(this.beta1));
        }),
          this.incrementIterations();
      }
      dispose() {
        this.accBeta1.dispose(),
          this.iteration.dispose(),
          null != this.accumulatedFirstMoment &&
            aa(this.accumulatedFirstMoment.map((t) => t.variable)),
          null != this.accumulatedWeightedInfNorm &&
            aa(this.accumulatedWeightedInfNorm.map((t) => t.variable));
      }
      async getWeights() {
        throw new Error("getWeights() is not implemented for Adamax yet.");
      }
      async setWeights(t) {
        throw new Error("setWeights() is not implemented for Adamax yet.");
      }
      getConfig() {
        return {
          learningRate: this.learningRate,
          beta1: this.beta1,
          beta2: this.beta2,
          epsilon: this.epsilon,
          decay: this.decay,
        };
      }
      static fromConfig(t, e) {
        return new t(e.learningRate, e.beta1, e.beta2, e.epsilon, e.decay);
      }
    }
    (as.className = "Adamax"), Jr(as);
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class is extends ts {
      constructor(t) {
        super(), (this.learningRate = t), this.setLearningRate(t);
      }
      applyGradients(t) {
        (Array.isArray(t) ? t.map((t) => t.name) : Object.keys(t)).forEach(
          (e, n) => {
            const r = Array.isArray(t) ? t[n].tensor : t[e];
            if (null == r) return;
            const a = b.a.registeredVariables[e];
            ra(() => {
              const t = this.c.mul(r).add(a);
              a.assign(t);
            });
          }
        ),
          this.incrementIterations();
      }
      setLearningRate(t) {
        (this.learningRate = t),
          null != this.c && this.c.dispose(),
          (this.c = ia(Object(_.e)(-t)));
      }
      dispose() {
        this.c.dispose();
      }
      async getWeights() {
        return [await this.saveIterations()];
      }
      async setWeights(t) {
        if (0 !== (t = await this.extractIterations(t)).length)
          throw new Error("SGD optimizer does not have settable weights.");
      }
      getConfig() {
        return { learningRate: this.learningRate };
      }
      static fromConfig(t, e) {
        return new t(e.learningRate);
      }
    }
    (is.className = "SGD"), Jr(is);
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class os extends is {
      constructor(t, e, n = !1) {
        super(t),
          (this.learningRate = t),
          (this.momentum = e),
          (this.useNesterov = n),
          (this.accumulations = []),
          (this.m = Object(_.e)(this.momentum));
      }
      applyGradients(t) {
        (Array.isArray(t) ? t.map((t) => t.name) : Object.keys(t)).forEach(
          (e, n) => {
            const r = b.a.registeredVariables[e];
            if (null == this.accumulations[n]) {
              const t = !1;
              this.accumulations[n] = {
                originalName: e + "/momentum",
                variable: ra(() => Object(_.o)(r).variable(t)),
              };
            }
            const a = this.accumulations[n].variable,
              i = Array.isArray(t) ? t[n].tensor : t[e];
            null != i &&
              ra(() => {
                let t;
                const e = this.m.mul(a).add(i);
                (t = this.useNesterov
                  ? this.c.mul(i.add(e.mul(this.m))).add(r)
                  : this.c.mul(e).add(r)),
                  a.assign(e),
                  r.assign(t);
              });
          }
        ),
          this.incrementIterations();
      }
      dispose() {
        this.m.dispose(),
          null != this.accumulations &&
            aa(this.accumulations.map((t) => t.variable));
      }
      setMomentum(t) {
        this.momentum = t;
      }
      async getWeights() {
        return [await this.saveIterations()].concat(
          this.accumulations.map((t) => ({
            name: t.originalName,
            tensor: t.variable,
          }))
        );
      }
      async setWeights(t) {
        t = await this.extractIterations(t);
        this.accumulations = t.map((t) => ({
          originalName: t.name,
          variable: t.tensor.variable(!1),
        }));
      }
      getConfig() {
        return {
          learningRate: this.learningRate,
          momentum: this.momentum,
          useNesterov: this.useNesterov,
        };
      }
      static fromConfig(t, e) {
        return new t(e.learningRate, e.momentum, e.useNesterov);
      }
    }
    (os.className = "Momentum"), Jr(os);
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class ss extends ts {
      constructor(t, e = 0.9, n = 0, r = null, a = !1) {
        if (
          (super(),
          (this.learningRate = t),
          (this.decay = e),
          (this.momentum = n),
          (this.epsilon = r),
          (this.accumulatedMeanSquares = []),
          (this.accumulatedMoments = []),
          (this.accumulatedMeanGrads = []),
          (this.centered = a),
          null == r && (this.epsilon = b.a.backend.epsilon()),
          null == t)
        )
          throw new Error("learningRate for RMSPropOptimizer must be defined.");
      }
      applyGradients(t) {
        (Array.isArray(t) ? t.map((t) => t.name) : Object.keys(t)).forEach(
          (e, n) => {
            const r = b.a.registeredVariables[e];
            null == this.accumulatedMeanSquares[n] &&
              (this.accumulatedMeanSquares[n] = {
                originalName: e + "/rms",
                variable: ra(() => Object(_.o)(r).variable(!1)),
              }),
              null == this.accumulatedMoments[n] &&
                (this.accumulatedMoments[n] = {
                  originalName: e + "/momentum",
                  variable: ra(() => Object(_.o)(r).variable(!1)),
                }),
              null == this.accumulatedMeanGrads[n] &&
                this.centered &&
                (this.accumulatedMeanGrads[n] = {
                  originalName: e + "/mg",
                  variable: ra(() => Object(_.o)(r).variable(!1)),
                });
            const a = Array.isArray(t) ? t[n].tensor : t[e];
            if (null == a) return;
            const i = this.accumulatedMeanSquares[n].variable,
              o = this.accumulatedMoments[n].variable;
            ra(() => {
              const t = i.mul(this.decay).add(a.square().mul(1 - this.decay));
              if (this.centered) {
                const e = this.accumulatedMeanGrads[n].variable,
                  s = e.mul(this.decay).add(a.mul(1 - this.decay)),
                  u = o
                    .mul(this.momentum)
                    .add(
                      a
                        .mul(this.learningRate)
                        .div(t.sub(s.square().add(this.epsilon)).sqrt())
                    );
                i.assign(t), e.assign(s), o.assign(u);
                const c = r.sub(u);
                r.assign(c);
              } else {
                const t = i.mul(this.decay).add(a.square().mul(1 - this.decay)),
                  e = o
                    .mul(this.momentum)
                    .add(
                      a.mul(this.learningRate).div(t.add(this.epsilon).sqrt())
                    );
                i.assign(t), o.assign(e);
                const n = r.sub(e);
                r.assign(n);
              }
            });
          }
        ),
          this.incrementIterations();
      }
      dispose() {
        null != this.accumulatedMeanSquares &&
          aa(this.accumulatedMeanSquares.map((t) => t.variable)),
          null != this.accumulatedMeanGrads &&
            this.centered &&
            aa(this.accumulatedMeanGrads.map((t) => t.variable)),
          null != this.accumulatedMoments &&
            aa(this.accumulatedMoments.map((t) => t.variable));
      }
      async getWeights() {
        const t = [...this.accumulatedMeanSquares, ...this.accumulatedMoments];
        return (
          this.centered && t.push(...this.accumulatedMeanGrads),
          [await this.saveIterations()].concat(
            t.map((t) => ({ name: t.originalName, tensor: t.variable }))
          )
        );
      }
      async setWeights(t) {
        t = await this.extractIterations(t);
        const e = this.centered ? t.length / 3 : t.length / 2;
        (this.accumulatedMeanSquares = t
          .slice(0, e)
          .map((t) => ({
            originalName: t.name,
            variable: t.tensor.variable(!1),
          }))),
          (this.accumulatedMoments = t
            .slice(e, 2 * e)
            .map((t) => ({
              originalName: t.name,
              variable: t.tensor.variable(!1),
            }))),
          this.centered &&
            (this.accumulatedMeanGrads = t
              .slice(2 * e, 3 * e)
              .map((t) => ({
                originalName: t.name,
                variable: t.tensor.variable(!1),
              })));
      }
      getConfig() {
        return {
          learningRate: this.learningRate,
          decay: this.decay,
          momentum: this.momentum,
          epsilon: this.epsilon,
          centered: this.centered,
        };
      }
      static fromConfig(t, e) {
        return new t(
          e.learningRate,
          e.decay,
          e.momentum,
          e.epsilon,
          e.centered
        );
      }
    }
    (ss.className = "RMSProp"), Jr(ss);
    var us = n(23);
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class cs {
      static sgd(t) {
        return new is(t);
      }
      static momentum(t, e, n = !1) {
        return new os(t, e, n);
      }
      static rmsprop(t, e = 0.9, n = 0, r = null, a = !1) {
        return new ss(t, e, n, r, a);
      }
      static adam(t = 0.001, e = 0.9, n = 0.999, r = null) {
        return new rs(t, e, n, r);
      }
      static adadelta(t = 0.001, e = 0.95, n = null) {
        return new es(t, e, n);
      }
      static adamax(t = 0.002, e = 0.9, n = 0.999, r = null, a = 0) {
        return new as(t, e, n, r, a);
      }
      static adagrad(t, e = 0.1) {
        return new ns(t, e);
      }
    }
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const ls = {
      sgd: cs.sgd,
      momentum: cs.momentum,
      adadelta: cs.adadelta,
      adagrad: cs.adagrad,
      rmsprop: cs.rmsprop,
      adamax: cs.adamax,
      adam: cs.adam,
    };
    var hs = n(38);
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function ds(t, e, n, r = !0) {
      let a = [];
      if (r)
        (a = a.concat(e.slice(0))),
          a.push(t[0] / n),
          (a = a.concat(t.slice(1)));
      else {
        a = a.concat(t[0]);
        const n = e.length;
        for (let r = 0; r < n; ++r) a = a.concat([t[r + 1] / e[r], e[r]]);
        a = a.concat(t.slice(n + 1));
      }
      return a;
    }
    function ps(t, e, n = !0) {
      const r = [];
      if (n) {
        r.push(e);
        for (let n = e + 1; n < t; ++n)
          n <= 2 * e ? (r.push(n), r.push(n - (e + 1))) : r.push(n);
      } else {
        const n = [],
          a = [];
        for (let r = 1; r < t; ++r)
          r >= 2 * e + 1 || r % 2 == 1 ? a.push(r) : n.push(r);
        r.push(...n), r.push(0), r.push(...a);
      }
      return r;
    }
    function fs(t, e, n, r = !0) {
      const a = [];
      r ? a.push(t[0] / n) : a.push(t[0] * n);
      for (let n = 1; n < t.length; ++n)
        n <= e.length
          ? r
            ? a.push(e[n - 1] * t[n])
            : a.push(t[n] / e[n - 1])
          : a.push(t[n]);
      return a;
    }
    function ms(t, e) {
      const n = [0];
      for (let r = 0; r < e; ++r) n.push(t[r][0]);
      return n;
    }
    function gs(t, e, n) {
      const r = t.slice(0, 1);
      for (let a = 0; a < n; ++a) r.push(t[a + 1] - e[a][0] - e[a][1]);
      return r;
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const bs = 0.3275911,
      vs = 0.254829592,
      ys = -0.284496736,
      xs = 1.421413741,
      ws = -1.453152027,
      Cs = 1.061405429;
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function Os(...t) {
      Object(Hn.b)().getBool("IS_TEST") || console.warn(...t);
    }
    function Es(...t) {
      Object(Hn.b)().getBool("IS_TEST") || console.log(...t);
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Ss(t, e) {
      if (t.length !== e.length)
        throw new Error(
          `Cannot merge real and imag arrays of different lengths. real:${t.length}, imag: ${e.length}.`
        );
      const n = new Float32Array(2 * t.length);
      for (let r = 0; r < n.length; r += 2)
        (n[r] = t[r / 2]), (n[r + 1] = e[r / 2]);
      return n;
    }
    function Is(t) {
      const e = new Float32Array(t.length / 2),
        n = new Float32Array(t.length / 2);
      for (let r = 0; r < t.length; r += 2)
        (e[r / 2] = t[r]), (n[r / 2] = t[r + 1]);
      return { real: e, imag: n };
    }
    function ks(t) {
      const e = Math.ceil(t.length / 4),
        n = new Float32Array(e),
        r = new Float32Array(e);
      for (let e = 0; e < t.length; e += 4)
        (n[Math.floor(e / 4)] = t[e]), (r[Math.floor(e / 4)] = t[e + 1]);
      return { real: n, imag: r };
    }
    function Ns(t) {
      const e = Math.floor(t.length / 4),
        n = new Float32Array(e),
        r = new Float32Array(e);
      for (let e = 2; e < t.length; e += 4)
        (n[Math.floor(e / 4)] = t[e]), (r[Math.floor(e / 4)] = t[e + 1]);
      return { real: n, imag: r };
    }
    function Rs(t, e) {
      return { real: t[2 * e], imag: t[2 * e + 1] };
    }
    function As(t, e, n, r) {
      (t[2 * r] = e), (t[2 * r + 1] = n);
    }
    function Ts(t, e) {
      const n = new Float32Array(t / 2),
        r = new Float32Array(t / 2);
      for (let a = 0; a < Math.ceil(t / 2); a++) {
        const i = (e ? 2 : -2) * Math.PI * (a / t);
        (n[a] = Math.cos(i)), (r[a] = Math.sin(i));
      }
      return { real: n, imag: r };
    }
    function _s(t, e, n) {
      const r = (n ? 2 : -2) * Math.PI * (t / e);
      return { real: Math.cos(r), imag: Math.sin(r) };
    }
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Ds(t, e, n) {
      if ("complex64" === e) {
        if ("complex64" === t.dtype) return t.clone();
        const e = Object(_.n)(t.shape),
          r = t.toFloat(),
          a = n.complex(r, e);
        return e.dispose(), r.dispose(), a;
      }
      if (!Object(R.hasEncodingLoss)(t.dtype, e))
        return b.a.makeTensorFromDataId(t.dataId, t.shape, e);
      if ("complex64" === t.dtype) {
        const r = n.real(t),
          a = r.cast(e);
        return r.dispose(), a;
      }
      if ("int32" === e) return n.int(t);
      if ("bool" === e) {
        const e = Object(_.e)(0, t.dtype),
          r = n.notEqual(t, e);
        return e.dispose(), r;
      }
      throw new Error(`Error in Cast: failed to cast ${t.dtype} to ${e}`);
    }
    function Fs(t, e) {
      return b.a.makeTensorFromDataId(t.dataId, e, t.dtype);
    }
    function Ms(t, e, n) {
      const r = (e - t) / (n - 1),
        a = Object(R.makeZerosTypedArray)(n, "float32");
      a[0] = t;
      for (let t = 1; t < a.length; t++) a[t] = a[t - 1] + r;
      return Object(_.g)(a, "float32");
    }
    var js = n(33);
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function $s(t, e, n) {
      const r = new Array(t.rank).fill(0),
        a = t.shape.slice();
      return e.map((e) => {
        const i = [...a];
        i[n] = e;
        const o = t.slice(r, i);
        return (r[n] += e), o;
      });
    }
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Bs(t, e) {
      const n = new Array(t.rank);
      for (let r = 0; r < n.length; r++) n[r] = t.shape[r] * e[r];
      const r = F(n, t.dtype);
      for (let e = 0; e < r.values.length; ++e) {
        const n = r.indexToLoc(e),
          a = new Array(t.rank);
        for (let e = 0; e < a.length; e++) a[e] = n[e] % t.shape[e];
        const i = t.locToIndex(a);
        r.values[e] = t.values[i];
      }
      return r.toTensor();
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Ps(t, e, n, r, a) {
      const i = e[e.length - 1],
        [o, s] = [t.length / i, i],
        u = Object(R.getTypedArrayFromDType)(n, o * r),
        c = Object(R.getTypedArrayFromDType)("int32", o * r);
      for (let e = 0; e < o; e++) {
        const n = e * s,
          a = t.subarray(n, n + s),
          i = [];
        for (let t = 0; t < a.length; t++) i.push({ value: a[t], index: t });
        i.sort((t, e) => e.value - t.value);
        const o = e * r,
          l = u.subarray(o, o + r),
          h = c.subarray(o, o + r);
        for (let t = 0; t < r; t++) (l[t] = i[t].value), (h[t] = i[t].index);
      }
      const l = e.slice();
      return (
        (l[l.length - 1] = r),
        [Object(_.f)(u, l, n), Object(_.f)(c, l, "int32")]
      );
    }
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class Ls {
      constructor(t, e) {
        (this.backend = t),
          (this.dataMover = e),
          (this.data = new WeakMap()),
          (this.dataIdsCount = 0);
      }
      get(t) {
        return (
          this.data.has(t) || this.dataMover.moveData(this.backend, t),
          this.data.get(t)
        );
      }
      set(t, e) {
        this.dataIdsCount++, this.data.set(t, e);
      }
      has(t) {
        return this.data.has(t);
      }
      delete(t) {
        return this.dataIdsCount--, this.data.delete(t);
      }
      numDataIds() {
        return this.dataIdsCount;
      }
    }
    class zs {
      time(t) {
        return Ws("time");
      }
      read(t) {
        return Ws("read");
      }
      readSync(t) {
        return Ws("readSync");
      }
      numDataIds() {
        return Ws("numDataIds");
      }
      disposeData(t) {
        return Ws("disposeData");
      }
      write(t, e, n) {
        return Ws("write");
      }
      move(t, e, n, r) {
        return Ws("move");
      }
      memory() {
        return Ws("memory");
      }
      floatPrecision() {
        return Ws("floatPrecision");
      }
      epsilon() {
        return 32 === this.floatPrecision() ? 1e-7 : 1e-4;
      }
      batchMatMul(t, e, n, r) {
        return Ws("batchMatMul");
      }
      fusedBatchMatMul({
        a: t,
        b: e,
        transposeA: n,
        transposeB: r,
        bias: a,
        activation: i,
        preluActivationWeights: o,
      }) {
        return Ws("fusedBatchMatMul");
      }
      slice(t, e, n) {
        return Ws("slice");
      }
      stridedSlice(t, e, n, r) {
        return Ws("stridedSlice");
      }
      unstack(t, e) {
        return Ws("unstack");
      }
      reverse(t, e) {
        return Ws("reverse");
      }
      concat(t, e) {
        return Ws("concat");
      }
      neg(t) {
        return Ws("neg");
      }
      add(t, e) {
        return Ws("add");
      }
      addN(t) {
        return Ws("addN");
      }
      subtract(t, e) {
        return Ws("subtract");
      }
      multiply(t, e) {
        return Ws("multiply");
      }
      realDivide(t, e) {
        return Ws("realDivide");
      }
      floorDiv(t, e) {
        return Ws("floorDiv");
      }
      sum(t, e) {
        return Ws("sum");
      }
      prod(t, e) {
        return Ws("prod");
      }
      unsortedSegmentSum(t, e, n) {
        return Ws("unsortedSegmentSum");
      }
      argMin(t, e) {
        return Ws("argMin");
      }
      argMax(t, e) {
        return Ws("argMax");
      }
      equal(t, e) {
        return Ws("equal");
      }
      notEqual(t, e) {
        return Ws("notEqual");
      }
      less(t, e) {
        return Ws("less");
      }
      lessEqual(t, e) {
        return Ws("lessEqual");
      }
      greater(t, e) {
        return Ws("greater");
      }
      greaterEqual(t, e) {
        return Ws("greaterEqual");
      }
      logicalNot(t) {
        return Ws("logicalNot");
      }
      logicalAnd(t, e) {
        return Ws("logicalAnd");
      }
      logicalOr(t, e) {
        return Ws("logicalOr");
      }
      where(t) {
        return Ws("where");
      }
      select(t, e, n) {
        return Ws("select");
      }
      topk(t, e, n) {
        return Ws("topk");
      }
      min(t, e) {
        return Ws("min");
      }
      minimum(t, e) {
        return Ws("minimum");
      }
      mod(t, e) {
        return Ws("mod");
      }
      max(t, e) {
        return Ws("max");
      }
      maximum(t, e) {
        return Ws("maximum");
      }
      all(t, e) {
        return Ws("all");
      }
      any(t, e) {
        return Ws("any");
      }
      squaredDifference(t, e) {
        return Ws("squaredDifference");
      }
      ceil(t) {
        return Ws("ceil");
      }
      floor(t) {
        return Ws("floor");
      }
      round(t) {
        return Ws("round");
      }
      sign(t) {
        return Ws("sign");
      }
      isNaN(t) {
        return Ws("isNaN");
      }
      isInf(t) {
        return Ws("isInf");
      }
      isFinite(t) {
        return Ws("isFinite");
      }
      pow(t, e) {
        return Ws("pow");
      }
      exp(t) {
        return Ws("exp");
      }
      expm1(t) {
        return Ws("expm1");
      }
      softmax(t, e) {
        return Ws("softmax");
      }
      log(t) {
        return Ws("log");
      }
      log1p(t) {
        return Ws("log1p");
      }
      sqrt(t) {
        return Ws("sqrt");
      }
      rsqrt(t) {
        return Ws("rsqrt");
      }
      square(t) {
        return Ws("square");
      }
      reciprocal(t) {
        return Ws("reciprocal");
      }
      relu(t) {
        return Ws("relu");
      }
      relu6(t) {
        return Ws("relu6");
      }
      prelu(t, e) {
        return Ws("prelu");
      }
      elu(t) {
        return Ws("elu");
      }
      eluDer(t, e) {
        return Ws("eluDer");
      }
      selu(t) {
        return Ws("selu");
      }
      int(t) {
        return Ws("int");
      }
      clip(t, e, n) {
        return Ws("clip");
      }
      abs(t) {
        return Ws("abs");
      }
      complexAbs(t) {
        return Ws("complexAbs");
      }
      sigmoid(t) {
        return Ws("sigmoid");
      }
      softplus(t) {
        return Ws("softplus");
      }
      sin(t) {
        return Ws("sin");
      }
      cos(t) {
        return Ws("cos");
      }
      tan(t) {
        return Ws("tan");
      }
      asin(t) {
        return Ws("asin");
      }
      acos(t) {
        return Ws("acos");
      }
      atan(t) {
        return Ws("atan");
      }
      atan2(t, e) {
        return Ws("atan2");
      }
      sinh(t) {
        return Ws("sinh");
      }
      cosh(t) {
        return Ws("cosh");
      }
      tanh(t) {
        return Ws("tanh");
      }
      asinh(t) {
        return Ws("asinh");
      }
      acosh(t) {
        return Ws("acosh");
      }
      atanh(t) {
        return Ws("atanh");
      }
      erf(t) {
        return Ws("erf");
      }
      step(t, e) {
        return Ws("step");
      }
      fusedConv2d({
        input: t,
        filter: e,
        convInfo: n,
        bias: r,
        activation: a,
        preluActivationWeights: i,
      }) {
        return Ws("fusedConv2d");
      }
      conv2d(t, e, n) {
        return Ws("conv2d");
      }
      conv2dDerInput(t, e, n) {
        return Ws("conv2dDerInput");
      }
      conv2dDerFilter(t, e, n) {
        return Ws("conv2dDerFilter");
      }
      fusedDepthwiseConv2D({
        input: t,
        filter: e,
        convInfo: n,
        bias: r,
        activation: a,
        preluActivationWeights: i,
      }) {
        return Ws("fusedDepthwiseConv2D");
      }
      depthwiseConv2D(t, e, n) {
        return Ws("depthwiseConv2D");
      }
      depthwiseConv2DDerInput(t, e, n) {
        return Ws("depthwiseConv2DDerInput");
      }
      depthwiseConv2DDerFilter(t, e, n) {
        return Ws("depthwiseConv2DDerFilter");
      }
      conv3d(t, e, n) {
        return Ws("conv3d");
      }
      conv3dDerInput(t, e, n) {
        return Ws("conv3dDerInput");
      }
      conv3dDerFilter(t, e, n) {
        return Ws("conv3dDerFilter");
      }
      maxPool(t, e) {
        return Ws("maxPool");
      }
      maxPoolBackprop(t, e, n, r) {
        return Ws("maxPoolBackprop");
      }
      avgPool(t, e) {
        return Ws("avgPool");
      }
      avgPoolBackprop(t, e, n) {
        return Ws("avgPoolBackprop");
      }
      avgPool3d(t, e) {
        return Ws("avgPool3d");
      }
      avgPool3dBackprop(t, e, n) {
        return Ws("avgPool3dBackprop");
      }
      maxPool3d(t, e) {
        return Ws("maxPool3d");
      }
      maxPool3dBackprop(t, e, n, r) {
        return Ws("maxPool3dBackprop");
      }
      reshape(t, e) {
        return Ws("reshape");
      }
      cast(t, e) {
        return Ws("cast");
      }
      tile(t, e) {
        return Ws("tile");
      }
      pad(t, e, n) {
        return Ws("pad");
      }
      transpose(t, e) {
        return Ws("transpose");
      }
      gather(t, e, n) {
        return Ws("gather");
      }
      gatherND(t, e) {
        return Ws("gatherND");
      }
      scatterND(t, e, n) {
        return Ws("scatterND");
      }
      batchToSpaceND(t, e, n) {
        return Ws("batchToSpaceND");
      }
      spaceToBatchND(t, e, n) {
        return Ws("spaceToBatchND");
      }
      resizeBilinear(t, e, n, r) {
        return Ws("resizeBilinear");
      }
      resizeBilinearBackprop(t, e, n) {
        return Ws("resizeBilinearBackprop");
      }
      resizeNearestNeighbor(t, e, n, r) {
        return Ws("resizeNearestNeighbor");
      }
      resizeNearestNeighborBackprop(t, e, n) {
        return Ws("resizeNearestNeighborBackprop");
      }
      batchNorm(t, e, n, r, a, i) {
        return Ws("batchNorm");
      }
      localResponseNormalization4D(t, e, n, r, a) {
        return Ws("localResponseNormalization4D");
      }
      LRNGrad(t, e, n, r, a, i, o) {
        return Ws("LRNGrad");
      }
      multinomial(t, e, n, r) {
        return Ws("multinomial");
      }
      oneHot(t, e, n, r) {
        return Ws("oneHot");
      }
      cumsum(t, e, n, r) {
        return Ws("cumsum");
      }
      nonMaxSuppression(t, e, n, r, a) {
        return Ws("nonMaxSuppression");
      }
      fft(t) {
        return Ws("fft");
      }
      ifft(t) {
        return Ws("ifft");
      }
      complex(t, e) {
        return Ws("complex");
      }
      real(t) {
        return Ws("real");
      }
      imag(t) {
        return Ws("imag");
      }
      cropAndResize(t, e, n, r, a, i) {
        return Ws("cropAndResize");
      }
      depthToSpace(t, e, n) {
        return Ws("depthToSpace");
      }
      split(t, e, n) {
        return Ws("split");
      }
      sparseToDense(t, e, n, r) {
        return Ws("sparseToDense");
      }
      diag(t) {
        return Ws("diag");
      }
      fill(t, e, n) {
        return Ws("fill");
      }
      onesLike(t) {
        return Ws("onesLike");
      }
      zerosLike(t) {
        return Ws("zerosLike");
      }
      linspace(t, e, n) {
        return Ws("linspace");
      }
      dispose() {
        return Ws("dispose");
      }
    }
    function Ws(t) {
      throw new Error(
        `'${t}' not yet implemented or not found in the registry. Did you forget to import the kernel?`
      );
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ (N.a.prototype.add = function (t) {
      return this.throwIfDisposed(), k(this, t);
    }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.atan2 = function (t) {
        return this.throwIfDisposed(), la(this, t);
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.avgPool = function (t, e, n, r) {
        return this.throwIfDisposed(), ha(this, t, e, n, r);
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.batchNorm = function (t, e, n, r, a) {
        return this.throwIfDisposed(), fa(this, t, e, n, r, a);
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.broadcastTo = function (t) {
        return this.throwIfDisposed(), ya(this, t);
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.batchToSpaceND = function (t, e) {
        return this.throwIfDisposed(), yn(this, t, e);
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.concat = function (t, e) {
        return (
          this.throwIfDisposed(),
          t instanceof N.a && (t = [t]),
          D([this, ...t], e)
        );
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.conv1d = function (t, e, n, r, a, i) {
        return this.throwIfDisposed(), Sa(this, t, e, n, r, a, i);
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.conv2d = function (t, e, n, r, a, i) {
        return this.throwIfDisposed(), we(this, t, e, n, r, a, i);
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.conv2dTranspose = function (t, e, n, r, a) {
        return this.throwIfDisposed(), Ia(this, t, e, n, r, a);
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.cumsum = function (t, e, n) {
        return this.throwIfDisposed(), ke(this, t, e, n);
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.depthToSpace = function (t, e) {
        return this.throwIfDisposed(), Ra(this, t, e);
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.depthwiseConv2d = function (t, e, n, r, a, i) {
        return this.throwIfDisposed(), Aa(this, t, e, n, r, a, i);
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.depthwiseConv2D = function (t, e, n, r, a, i) {
        return (
          ta("depthwiseConv2D is deprecated, use depthwiseConv2d instead"),
          this.throwIfDisposed(),
          Aa(this, t, e, n, r, a, i)
        );
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.div = function (t) {
        return this.throwIfDisposed(), U(this, t);
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.divNoNan = function (t) {
        return this.throwIfDisposed(), _a(this, t);
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.dot = function (t) {
        return this.throwIfDisposed(), Da(this, t);
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.elu = function () {
        return this.throwIfDisposed(), Fa(this);
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.equal = function (t) {
        return this.throwIfDisposed(), Ma(this, t);
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.floorDiv = function (t) {
        return this.throwIfDisposed(), V(this, t);
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.greater = function (t) {
        return this.throwIfDisposed(), Ye(this, t);
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.greaterEqual = function (t) {
        return this.throwIfDisposed(), Ve(this, t);
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.leakyRelu = function (t) {
        return this.throwIfDisposed(), La(this, t);
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.less = function (t) {
        return this.throwIfDisposed(), Ue(this, t);
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.lessEqual = function (t) {
        return this.throwIfDisposed(), Je(this, t);
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.localResponseNormalization = function (t, e, n, r) {
        return this.throwIfDisposed(), za(this, t, e, n, r);
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.matMul = function (t, e, n) {
        return this.throwIfDisposed(), he(this, t, e, n);
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.max = function (t, e) {
        return this.throwIfDisposed(), Wa(this, t, e);
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.maxPool = function (t, e, n, r) {
        return this.throwIfDisposed(), Va(this, t, e, n, r);
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.maximum = function (t) {
        return this.throwIfDisposed(), Pa(this, t);
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.minimum = function (t) {
        return this.throwIfDisposed(), Ha(this, t);
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.mod = function (t) {
        return this.throwIfDisposed(), qa(this, t);
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.mul = function (t) {
        return this.throwIfDisposed(), G(this, t);
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.notEqual = function (t) {
        return this.throwIfDisposed(), Xa(this, t);
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.oneHot = function (t, e = 1, n = 0) {
        return this.throwIfDisposed(), zr(this, t, e, n);
      }),
      /**
       * @license
       * Copyright 2020 Google Inc. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.pad = function (t, e) {
        return this.throwIfDisposed(), Sn(this, t, e);
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.pool = function (t, e, n, r, a) {
        return this.throwIfDisposed(), ei(this, t, e, n, r, a);
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.pow = function (t) {
        return this.throwIfDisposed(), hn(this, t);
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.prelu = function (t) {
        return this.throwIfDisposed(), ni(this, t);
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.relu = function () {
        return this.throwIfDisposed(), di(this);
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.relu6 = function () {
        return this.throwIfDisposed(), pi(this);
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.selu = function () {
        return this.throwIfDisposed(), fi(this);
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.separableConv2d = function (t, e, n, r, a, i) {
        return this.throwIfDisposed(), mi(this, t, e, n, r, a, i);
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.split = function (t, e) {
        return this.throwIfDisposed(), ge(this, t, e);
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.squaredDifference = function (t) {
        return this.throwIfDisposed(), gi(this, t);
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.spaceToBatchND = function (t, e) {
        return this.throwIfDisposed(), pe(this, t, e);
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.sub = function (t) {
        return this.throwIfDisposed(), Me(this, t);
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.tile = function (t) {
        return this.throwIfDisposed(), je(this, t);
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (N.a.prototype.transpose = function (t) {
        return this.throwIfDisposed(), Ie(this, t);
      }),
      /**
       * @license
       * Copyright 2020 Google Inc. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      /**
       * @license
       * Copyright 2017 Google Inc. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      Object(N.e)(f);
  },
  function (t, e, n) {
    "use strict";
    n.r(e),
      n.d(e, "shuffle", function () {
        return a;
      }),
      n.d(e, "clamp", function () {
        return i;
      }),
      n.d(e, "nearestLargerEven", function () {
        return o;
      }),
      n.d(e, "sum", function () {
        return s;
      }),
      n.d(e, "randUniform", function () {
        return u;
      }),
      n.d(e, "distSquared", function () {
        return c;
      }),
      n.d(e, "assert", function () {
        return l;
      }),
      n.d(e, "assertShapesMatch", function () {
        return h;
      }),
      n.d(e, "assertNonNull", function () {
        return d;
      }),
      n.d(e, "flatten", function () {
        return p;
      }),
      n.d(e, "sizeFromShape", function () {
        return f;
      }),
      n.d(e, "isScalarShape", function () {
        return m;
      }),
      n.d(e, "arraysEqual", function () {
        return g;
      }),
      n.d(e, "isInt", function () {
        return b;
      }),
      n.d(e, "tanh", function () {
        return v;
      }),
      n.d(e, "sizeToSquarishShape", function () {
        return y;
      }),
      n.d(e, "createShuffledIndices", function () {
        return x;
      }),
      n.d(e, "rightPad", function () {
        return w;
      }),
      n.d(e, "repeatedTry", function () {
        return C;
      }),
      n.d(e, "inferFromImplicitShape", function () {
        return O;
      }),
      n.d(e, "parseAxisParam", function () {
        return E;
      }),
      n.d(e, "squeezeShape", function () {
        return S;
      }),
      n.d(e, "getTypedArrayFromDType", function () {
        return I;
      }),
      n.d(e, "getArrayFromDType", function () {
        return k;
      }),
      n.d(e, "checkConversionForErrors", function () {
        return N;
      }),
      n.d(e, "isValidDtype", function () {
        return R;
      }),
      n.d(e, "hasEncodingLoss", function () {
        return A;
      }),
      n.d(e, "isTypedArray", function () {
        return T;
      }),
      n.d(e, "bytesPerElement", function () {
        return _;
      }),
      n.d(e, "bytesFromStringArray", function () {
        return D;
      }),
      n.d(e, "isString", function () {
        return F;
      }),
      n.d(e, "isBoolean", function () {
        return M;
      }),
      n.d(e, "isNumber", function () {
        return j;
      }),
      n.d(e, "inferDtype", function () {
        return $;
      }),
      n.d(e, "isFunction", function () {
        return B;
      }),
      n.d(e, "nearestDivisor", function () {
        return P;
      }),
      n.d(e, "computeStrides", function () {
        return L;
      }),
      n.d(e, "toTypedArray", function () {
        return z;
      }),
      n.d(e, "toNestedArray", function () {
        return W;
      }),
      n.d(e, "makeOnesTypedArray", function () {
        return V;
      }),
      n.d(e, "makeZerosTypedArray", function () {
        return U;
      }),
      n.d(e, "now", function () {
        return G;
      }),
      n.d(e, "assertNonNegativeIntegerDimensions", function () {
        return H;
      }),
      n.d(e, "fetch", function () {
        return q;
      }),
      n.d(e, "encodeString", function () {
        return K;
      }),
      n.d(e, "decodeString", function () {
        return X;
      }),
      n.d(e, "locToIndex", function () {
        return Y;
      }),
      n.d(e, "indexToLoc", function () {
        return J;
      });
    var r = n(11);
    /**
     * @license
     * Copyright 2017 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function a(t) {
      let e = t.length,
        n = 0,
        r = 0;
      for (; e > 0; )
        (r = (Math.random() * e) | 0),
          e--,
          (n = t[e]),
          (t[e] = t[r]),
          (t[r] = n);
    }
    function i(t, e, n) {
      return Math.max(t, Math.min(e, n));
    }
    function o(t) {
      return t % 2 == 0 ? t : t + 1;
    }
    function s(t) {
      let e = 0;
      for (let n = 0; n < t.length; n++) e += t[n];
      return e;
    }
    function u(t, e) {
      const n = Math.random();
      return e * n + (1 - n) * t;
    }
    function c(t, e) {
      let n = 0;
      for (let r = 0; r < t.length; r++) {
        const a = Number(t[r]) - Number(e[r]);
        n += a * a;
      }
      return n;
    }
    function l(t, e) {
      if (!t) throw new Error("string" == typeof e ? e : e());
    }
    function h(t, e, n = "") {
      l(g(t, e), () => n + ` Shapes ${t} and ${e} must match`);
    }
    function d(t) {
      l(
        null != t,
        () => "The input to the tensor constructor must be a non-null value."
      );
    }
    function p(t, e = [], n = !1) {
      if ((null == e && (e = []), Array.isArray(t) || (T(t) && !n)))
        for (let r = 0; r < t.length; ++r) p(t[r], e, n);
      else e.push(t);
      return e;
    }
    function f(t) {
      if (0 === t.length) return 1;
      let e = t[0];
      for (let n = 1; n < t.length; n++) e *= t[n];
      return e;
    }
    function m(t) {
      return 0 === t.length;
    }
    function g(t, e) {
      if (t === e) return !0;
      if (null == t || null == e) return !1;
      if (t.length !== e.length) return !1;
      for (let n = 0; n < t.length; n++) if (t[n] !== e[n]) return !1;
      return !0;
    }
    function b(t) {
      return t % 1 == 0;
    }
    function v(t) {
      if (null != Math.tanh) return Math.tanh(t);
      if (t === 1 / 0) return 1;
      if (t === -1 / 0) return -1;
      {
        const e = Math.exp(2 * t);
        return (e - 1) / (e + 1);
      }
    }
    function y(t) {
      const e = Math.ceil(Math.sqrt(t));
      return [e, Math.ceil(t / e)];
    }
    function x(t) {
      const e = new Uint32Array(t);
      for (let n = 0; n < t; ++n) e[n] = n;
      return a(e), e;
    }
    function w(t, e) {
      return e <= t.length ? t : t + " ".repeat(e - t.length);
    }
    function C(t, e = (t) => 0, n) {
      return new Promise((r, a) => {
        let i = 0;
        const o = () => {
          if (t()) return void r();
          i++;
          const s = e(i);
          null != n && i >= n ? a() : setTimeout(o, s);
        };
        o();
      });
    }
    function O(t, e) {
      let n = 1,
        r = -1;
      for (let e = 0; e < t.length; ++e)
        if (t[e] >= 0) n *= t[e];
        else if (-1 === t[e]) {
          if (-1 !== r)
            throw Error(
              `Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${e}`
            );
          r = e;
        } else if (t[e] < 0)
          throw Error(`Shapes can not be < 0. Found ${t[e]} at dim ${e}`);
      if (-1 === r) {
        if (e > 0 && e !== n)
          throw Error(`Size(${e}) must match the product of shape ${t}`);
        return t;
      }
      if (0 === n)
        throw Error(
          `Cannot infer the missing size in [${t}] when there are 0 elements`
        );
      if (e % n != 0)
        throw Error(
          `The implicit shape can't be a fractional number. Got ${e} / ${n}`
        );
      const a = t.slice();
      return (a[r] = e / n), a;
    }
    function E(t, e) {
      const n = e.length;
      return (
        l(
          (t = null == t ? e.map((t, e) => e) : [].concat(t)).every(
            (t) => t >= -n && t < n
          ),
          () =>
            `All values in axis param must be in range [-${n}, ${n}) but got axis ` +
            t
        ),
        l(
          t.every((t) => b(t)),
          () => "All values in axis param must be integers but got axis " + t
        ),
        t.map((t) => (t < 0 ? n + t : t))
      );
    }
    function S(t, e) {
      const n = [],
        r = [],
        a = null != e && Array.isArray(e) && 0 === e.length,
        i = null == e || a ? null : E(e, t).sort();
      let o = 0;
      for (let e = 0; e < t.length; ++e) {
        if (null != i) {
          if (i[o] === e && 1 !== t[e])
            throw new Error(
              `Can't squeeze axis ${e} since its dim '${t[e]}' is not 1`
            );
          (null == i[o] || i[o] > e) && 1 === t[e] && (n.push(t[e]), r.push(e)),
            i[o] <= e && o++;
        }
        1 !== t[e] && (n.push(t[e]), r.push(e));
      }
      return { newShape: n, keptDims: r };
    }
    function I(t, e) {
      let n = null;
      if (null == t || "float32" === t) n = new Float32Array(e);
      else if ("int32" === t) n = new Int32Array(e);
      else {
        if ("bool" !== t) throw new Error("Unknown data type " + t);
        n = new Uint8Array(e);
      }
      return n;
    }
    function k(t, e) {
      let n = null;
      if (null == t || "float32" === t) n = new Float32Array(e);
      else if ("int32" === t) n = new Int32Array(e);
      else if ("bool" === t) n = new Uint8Array(e);
      else {
        if ("string" !== t) throw new Error("Unknown data type " + t);
        n = new Array(e);
      }
      return n;
    }
    function N(t, e) {
      for (let n = 0; n < t.length; n++) {
        const r = t[n];
        if (isNaN(r) || !isFinite(r))
          throw Error(`A tensor of type ${e} being uploaded contains ${r}.`);
      }
    }
    function R(t) {
      return (
        "bool" === t ||
        "complex64" === t ||
        "float32" === t ||
        "int32" === t ||
        "string" === t
      );
    }
    function A(t, e) {
      return (
        "complex64" !== e &&
        ("float32" !== e || "complex64" === t) &&
        ("int32" !== e || "float32" === t || "complex64" === t) &&
        ("bool" !== e || "bool" !== t)
      );
    }
    function T(t) {
      return (
        t instanceof Float32Array ||
        t instanceof Int32Array ||
        t instanceof Uint8Array
      );
    }
    function _(t) {
      if ("float32" === t || "int32" === t) return 4;
      if ("complex64" === t) return 8;
      if ("bool" === t) return 1;
      throw new Error("Unknown dtype " + t);
    }
    function D(t) {
      if (null == t) return 0;
      let e = 0;
      return t.forEach((t) => (e += t.length)), e;
    }
    function F(t) {
      return "string" == typeof t || t instanceof String;
    }
    function M(t) {
      return "boolean" == typeof t;
    }
    function j(t) {
      return "number" == typeof t;
    }
    function $(t) {
      return Array.isArray(t)
        ? $(t[0])
        : t instanceof Float32Array
        ? "float32"
        : t instanceof Int32Array || t instanceof Uint8Array
        ? "int32"
        : j(t)
        ? "float32"
        : F(t)
        ? "string"
        : M(t)
        ? "bool"
        : "float32";
    }
    function B(t) {
      return !!(t && t.constructor && t.call && t.apply);
    }
    function P(t, e) {
      for (let n = e; n < t; ++n) if (t % n == 0) return n;
      return t;
    }
    function L(t) {
      const e = t.length;
      if (e < 2) return [];
      const n = new Array(e - 1);
      n[e - 2] = t[e - 1];
      for (let r = e - 3; r >= 0; --r) n[r] = n[r + 1] * t[r + 1];
      return n;
    }
    function z(t, e, n) {
      if ("string" === e)
        throw new Error("Cannot convert a string[] to a TypedArray");
      if (
        (Array.isArray(t) && (t = p(t)),
        n && N(t, e),
        (function (t, e) {
          return (
            (t instanceof Float32Array && "float32" === e) ||
            (t instanceof Int32Array && "int32" === e) ||
            (t instanceof Uint8Array && "bool" === e)
          );
        })(t, e))
      )
        return t;
      if (null == e || "float32" === e || "complex64" === e)
        return new Float32Array(t);
      if ("int32" === e) return new Int32Array(t);
      if ("bool" === e) {
        const e = new Uint8Array(t.length);
        for (let n = 0; n < e.length; ++n) 0 !== Math.round(t[n]) && (e[n] = 1);
        return e;
      }
      throw new Error("Unknown data type " + e);
    }
    function W(t, e) {
      if (0 === t.length) return e[0];
      const n = t.reduce((t, e) => t * e);
      if (0 === n) return [];
      if (n !== e.length)
        throw new Error(`[${t}] does not match the input size.`);
      return (function t(e, n, r) {
        const a = new Array();
        if (1 === n.length) {
          const t = n[0];
          for (let n = 0; n < t; n++) a[n] = r[e + n];
        } else {
          const i = n[0],
            o = n.slice(1),
            s = o.reduce((t, e) => t * e);
          for (let n = 0; n < i; n++) a[n] = t(e + n * s, o, r);
        }
        return a;
      })(0, t, e);
    }
    function V(t, e) {
      const n = U(t, e);
      for (let t = 0; t < n.length; t++) n[t] = 1;
      return n;
    }
    function U(t, e) {
      if (null == e || "float32" === e || "complex64" === e)
        return new Float32Array(t);
      if ("int32" === e) return new Int32Array(t);
      if ("bool" === e) return new Uint8Array(t);
      throw new Error("Unknown data type " + e);
    }
    function G() {
      return Object(r.b)().platform.now();
    }
    function H(t) {
      t.forEach((e) => {
        l(
          Number.isInteger(e) && e >= 0,
          () =>
            `Tensor must have a shape comprised of positive integers but got shape [${t}].`
        );
      });
    }
    function q(t, e) {
      return Object(r.b)().platform.fetch(t, e);
    }
    function K(t, e = "utf-8") {
      return (e = e || "utf-8"), Object(r.b)().platform.encode(t, e);
    }
    function X(t, e = "utf-8") {
      return (e = e || "utf-8"), Object(r.b)().platform.decode(t, e);
    }
    function Y(t, e, n) {
      if (0 === e) return 0;
      if (1 === e) return t[0];
      let r = t[t.length - 1];
      for (let e = 0; e < t.length - 1; ++e) r += n[e] * t[e];
      return r;
    }
    function J(t, e, n) {
      if (0 === e) return [];
      if (1 === e) return [t];
      const r = new Array(e);
      for (let e = 0; e < r.length - 1; ++e)
        (r[e] = Math.floor(t / n[e])), (t -= r[e] * n[e]);
      return (r[r.length - 1] = t), r;
    }
  },
  function (t, e, n) {
    "use strict";
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function r(t, e, n, r) {
      const i = e.inputParams[t];
      if (i && void 0 !== i.inputIndexStart) {
        const t = i.inputIndexStart,
          o =
            0 === i.inputIndexEnd
              ? void 0
              : void 0 === i.inputIndexEnd
              ? t + 1
              : i.inputIndexEnd;
        if ("tensor" === i.type)
          return a(e.inputNames[i.inputIndexStart], n, r);
        if ("tensors" === i.type) {
          return e.inputNames.slice(t, o).map((t) => a(t, n, r));
        }
        const s = Array.prototype.slice.call(
          a(e.inputNames.slice(t)[0], n, r).dataSync()
        );
        return "number" === i.type ? s[0] : s;
      }
      const o = e.attrParams[t];
      return o && o.value;
    }
    function a(t, e, n) {
      const [r, a] = u(t),
        i = n.currentContextIds.find((t) => !!e[s(r, t)]);
      return void 0 !== i ? e[s(r, i)][a] : void 0;
    }
    function i(t, e, n) {
      return e[s(t, n.currentContextId)];
    }
    function o(t, e) {
      const [n, r] = u(t);
      return [s(n, e && e.currentContextId), r];
    }
    function s(t, e) {
      return e ? `${t}-${e}` : t;
    }
    function u(t) {
      const e = t.split(":");
      if (1 === e.length) return [t, 0];
      return [e[0], Number(e[e.length - 1])];
    }
    function c(t, e) {
      const n = [];
      for (let r = 0; r < t.length; r += e) n.push(t.slice(r, r + e));
      return n;
    }
    n.d(e, "b", function () {
      return r;
    }),
      n.d(e, "c", function () {
        return a;
      }),
      n.d(e, "d", function () {
        return i;
      }),
      n.d(e, "a", function () {
        return o;
      }),
      n.d(e, "e", function () {
        return u;
      }),
      n.d(e, "f", function () {
        return c;
      });
  },
  function (t, e, n) {
    "use strict";
    n.d(e, "c", function () {
      return s;
    }),
      n.d(e, "a", function () {
        return c;
      }),
      n.d(e, "b", function () {
        return l;
      });
    var r = n(6),
      a = n(11),
      i = n(9),
      o = n(1);
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function s(t, e) {
      let n = t;
      if (Object(o.isTypedArray)(t)) return "string" === e ? [] : [t.length];
      if (!Array.isArray(t)) return [];
      const r = [];
      for (
        ;
        Array.isArray(n) || (Object(o.isTypedArray)(n) && "string" !== e);

      )
        r.push(n.length), (n = n[0]);
      return (
        Array.isArray(t) &&
          Object(a.b)().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY") &&
          (function t(e, n, r) {
            if (
              ((r = r || []), !Array.isArray(e) && !Object(o.isTypedArray)(e))
            )
              return void Object(o.assert)(
                0 === n.length,
                () =>
                  `Element arr[${r.join(
                    "]["
                  )}] is a primitive, but should be an array/TypedArray of ${
                    n[0]
                  } elements`
              );
            Object(o.assert)(
              n.length > 0,
              () =>
                `Element arr[${r.join(
                  "]["
                )}] should be a primitive, but is an array of ${
                  e.length
                } elements`
            ),
              Object(o.assert)(
                e.length === n[0],
                () =>
                  `Element arr[${r.join("][")}] should have ${
                    n[0]
                  } elements, but has ${e.length} elements`
              );
            const a = n.slice(1);
            for (let n = 0; n < e.length; ++n) t(e[n], a, r.concat(n));
          })(t, r, []),
        r
      );
    }
    function u(t, e, n, r) {
      if (
        null != t &&
        (("numeric" !== t && t !== e) || ("numeric" === t && "string" === e))
      )
        throw new Error(
          `Argument '${n}' passed to '${r}' must be ${t} tensor, but got ${e} tensor`
        );
    }
    function c(t, e, n, c = "numeric") {
      if (t instanceof i.a) return u(c, t.dtype, e, n), t;
      let l = Object(o.inferDtype)(t);
      if (
        ("string" !== l &&
          ["bool", "int32", "float32"].indexOf(c) >= 0 &&
          (l = c),
        u(c, l, e, n),
        null == t ||
          (!Object(o.isTypedArray)(t) &&
            !Array.isArray(t) &&
            "number" != typeof t &&
            "boolean" != typeof t &&
            "string" != typeof t))
      ) {
        const r = null == t ? "null" : t.constructor.name;
        throw new Error(
          `Argument '${e}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`
        );
      }
      const h = s(t, l);
      Object(o.isTypedArray)(t) || Array.isArray(t) || (t = [t]);
      const d =
        "string" !== l
          ? Object(o.toTypedArray)(t, l, Object(a.b)().getBool("DEBUG"))
          : Object(o.flatten)(t, [], !0);
      return r.a.makeTensor(d, h, l);
    }
    function l(t, e, n, r = "numeric") {
      if (!Array.isArray(t))
        throw new Error(
          `Argument ${e} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``
        );
      return t.map((t, r) => c(t, `${e}[${r}]`, n), r);
    }
  },
  function (t, e, n) {
    "use strict";
    (function (t, r, a, i) {
      n.d(e, "a", function () {
        return yt;
      }),
        n.d(e, "b", function () {
          return St;
        }),
        n.d(e, "c", function () {
          return Zs;
        }),
        n.d(e, "d", function () {
          return sc;
        }),
        n.d(e, "e", function () {
          return Vs;
        }),
        n.d(e, "f", function () {
          return Gh;
        }),
        n.d(e, "g", function () {
          return ss;
        }),
        n.d(e, "h", function () {
          return Cn;
        }),
        n.d(e, "i", function () {
          return Lu;
        }),
        n.d(e, "j", function () {
          return Uu;
        }),
        n.d(e, "k", function () {
          return ru;
        }),
        n.d(e, "l", function () {
          return hs;
        }),
        n.d(e, "m", function () {
          return qn;
        }),
        n.d(e, "n", function () {
          return vn;
        }),
        n.d(e, "o", function () {
          return Il;
        }),
        n.d(e, "p", function () {
          return Wh;
        }),
        n.d(e, "q", function () {
          return Yu;
        }),
        n.d(e, "r", function () {
          return Cc;
        }),
        n.d(e, "s", function () {
          return oc;
        }),
        n.d(e, "t", function () {
          return pu;
        }),
        n.d(e, "u", function () {
          return bs;
        }),
        n.d(e, "v", function () {
          return Jn;
        }),
        n.d(e, "w", function () {
          return Tc;
        }),
        n.d(e, "x", function () {
          return or;
        }),
        n.d(e, "y", function () {
          return hn;
        }),
        n.d(e, "z", function () {
          return qu;
        }),
        n.d(e, "A", function () {
          return ws;
        }),
        n.d(e, "B", function () {
          return hc;
        }),
        n.d(e, "C", function () {
          return fc;
        }),
        n.d(e, "D", function () {
          return Tr;
        }),
        n.d(e, "E", function () {
          return cr;
        }),
        n.d(e, "F", function () {
          return vu;
        }),
        n.d(e, "G", function () {
          return cn;
        }),
        n.d(e, "H", function () {
          return dn;
        }),
        n.d(e, "I", function () {
          return pn;
        }),
        n.d(e, "J", function () {
          return fn;
        }),
        n.d(e, "K", function () {
          return mn;
        }),
        n.d(e, "L", function () {
          return ze;
        }),
        n.d(e, "M", function () {
          return lr;
        }),
        n.d(e, "N", function () {
          return Fc;
        }),
        n.d(e, "O", function () {
          return dr;
        }),
        n.d(e, "P", function () {
          return bn;
        });
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      var o = function (t, e) {
        return (o =
          Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array &&
            function (t, e) {
              t.__proto__ = e;
            }) ||
          function (t, e) {
            for (var n in e) e.hasOwnProperty(n) && (t[n] = e[n]);
          })(t, e);
      };
      function s(t, e) {
        function n() {
          this.constructor = t;
        }
        o(t, e),
          (t.prototype =
            null === e
              ? Object.create(e)
              : ((n.prototype = e.prototype), new n()));
      }
      function u(t, e, n, r) {
        return new (n || (n = Promise))(function (a, i) {
          function o(t) {
            try {
              u(r.next(t));
            } catch (t) {
              i(t);
            }
          }
          function s(t) {
            try {
              u(r.throw(t));
            } catch (t) {
              i(t);
            }
          }
          function u(t) {
            t.done
              ? a(t.value)
              : new n(function (e) {
                  e(t.value);
                }).then(o, s);
          }
          u((r = r.apply(t, e || [])).next());
        });
      }
      function c(t, e) {
        var n,
          r,
          a,
          i,
          o = {
            label: 0,
            sent: function () {
              if (1 & a[0]) throw a[1];
              return a[1];
            },
            trys: [],
            ops: [],
          };
        return (
          (i = { next: s(0), throw: s(1), return: s(2) }),
          "function" == typeof Symbol &&
            (i[Symbol.iterator] = function () {
              return this;
            }),
          i
        );
        function s(i) {
          return function (s) {
            return (function (i) {
              if (n) throw new TypeError("Generator is already executing.");
              for (; o; )
                try {
                  if (
                    ((n = 1),
                    r &&
                      (a =
                        2 & i[0]
                          ? r.return
                          : i[0]
                          ? r.throw || ((a = r.return) && a.call(r), 0)
                          : r.next) &&
                      !(a = a.call(r, i[1])).done)
                  )
                    return a;
                  switch (((r = 0), a && (i = [2 & i[0], a.value]), i[0])) {
                    case 0:
                    case 1:
                      a = i;
                      break;
                    case 4:
                      return o.label++, { value: i[1], done: !1 };
                    case 5:
                      o.label++, (r = i[1]), (i = [0]);
                      continue;
                    case 7:
                      (i = o.ops.pop()), o.trys.pop();
                      continue;
                    default:
                      if (
                        !(a = (a = o.trys).length > 0 && a[a.length - 1]) &&
                        (6 === i[0] || 2 === i[0])
                      ) {
                        o = 0;
                        continue;
                      }
                      if (3 === i[0] && (!a || (i[1] > a[0] && i[1] < a[3]))) {
                        o.label = i[1];
                        break;
                      }
                      if (6 === i[0] && o.label < a[1]) {
                        (o.label = a[1]), (a = i);
                        break;
                      }
                      if (a && o.label < a[2]) {
                        (o.label = a[2]), o.ops.push(i);
                        break;
                      }
                      a[2] && o.ops.pop(), o.trys.pop();
                      continue;
                  }
                  i = e.call(t, o);
                } catch (t) {
                  (i = [6, t]), (r = 0);
                } finally {
                  n = a = 0;
                }
              if (5 & i[0]) throw i[1];
              return { value: i[0] ? i[1] : void 0, done: !0 };
            })([i, s]);
          };
        }
      }
      var l = (function () {
        function t(t) {
          (this.global = t),
            (this.flags = {}),
            (this.flagRegistry = {}),
            (this.urlFlags = {}),
            this.populateURLFlags();
        }
        return (
          (t.prototype.setPlatform = function (t, e) {
            null != this.platform &&
              console.warn(
                "Platform " +
                  this.platformName +
                  " has already been set. Overwriting the platform with " +
                  e +
                  "."
              ),
              (this.platformName = t),
              (this.platform = e);
          }),
          (t.prototype.registerFlag = function (t, e, n) {
            if (
              ((this.flagRegistry[t] = { evaluationFn: e, setHook: n }),
              null != this.urlFlags[t])
            ) {
              var r = this.urlFlags[t];
              console.warn(
                "Setting feature override from URL " + t + ": " + r + "."
              ),
                this.set(t, r);
            }
          }),
          (t.prototype.get = function (t) {
            return (
              t in this.flags || (this.flags[t] = this.evaluateFlag(t)),
              this.flags[t]
            );
          }),
          (t.prototype.getNumber = function (t) {
            return this.get(t);
          }),
          (t.prototype.getBool = function (t) {
            return this.get(t);
          }),
          (t.prototype.getFlags = function () {
            return this.flags;
          }),
          Object.defineProperty(t.prototype, "features", {
            get: function () {
              return this.flags;
            },
            enumerable: !0,
            configurable: !0,
          }),
          (t.prototype.set = function (t, e) {
            if (null == this.flagRegistry[t])
              throw new Error(
                "Cannot set flag " + t + " as it has not been registered."
              );
            (this.flags[t] = e),
              null != this.flagRegistry[t].setHook &&
                this.flagRegistry[t].setHook(e);
          }),
          (t.prototype.evaluateFlag = function (t) {
            if (null == this.flagRegistry[t])
              throw new Error(
                "Cannot evaluate flag '" +
                  t +
                  "': no evaluation function found."
              );
            return this.flagRegistry[t].evaluationFn();
          }),
          (t.prototype.setFlags = function (t) {
            this.flags = Object.assign({}, t);
          }),
          (t.prototype.reset = function () {
            (this.flags = {}), (this.urlFlags = {}), this.populateURLFlags();
          }),
          (t.prototype.populateURLFlags = function () {
            var t = this;
            if (
              void 0 !== this.global &&
              void 0 !== this.global.location &&
              void 0 !== this.global.location.search
            ) {
              var e,
                n,
                r =
                  ((e = this.global.location.search),
                  (n = {}),
                  e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, function (t) {
                    for (var e = [], r = 1; r < arguments.length; r++)
                      e[r - 1] = arguments[r];
                    return h(n, e[0], e[1]), e.join("=");
                  }),
                  n);
              "tfjsflags" in r &&
                r.tfjsflags.split(",").forEach(function (e) {
                  var n = e.split(":"),
                    r = n[0],
                    a = n[1];
                  t.urlFlags[r] = (function (t, e) {
                    if ("true" === (e = e.toLowerCase()) || "false" === e)
                      return "true" === e;
                    if ("" + +e === e) return +e;
                    throw new Error(
                      "Could not parse value flag value " +
                        e +
                        " for flag " +
                        t +
                        "."
                    );
                  })(r, a);
                });
            }
          }),
          t
        );
      })();
      function h(t, e, n) {
        t[decodeURIComponent(e)] = decodeURIComponent(n || "");
      }
      function d() {
        return p;
      }
      var p = null,
        f = new Map(),
        m = new Map();
      function g(t, e) {
        var n = x(t, e);
        return f.get(n);
      }
      function b(t) {
        for (var e = f.entries(), n = []; ; ) {
          var r = e.next(),
            a = r.done,
            i = r.value;
          if (a) break;
          var o = i[0],
            s = i[1];
          o.split("_")[0] === t && n.push(s);
        }
        return n;
      }
      function v(t) {
        var e = t.kernelName,
          n = t.backendName,
          r = x(e, n);
        if (f.has(r))
          throw new Error(
            "The kernel '" +
              e +
              "' for backend '" +
              n +
              "' is already registered"
          );
        f.set(r, t);
      }
      function y(t) {
        var e = t.kernelName;
        m.has(e) && console.warn("Overriding the gradient for '" + e + "'"),
          m.set(e, t);
      }
      function x(t, e) {
        return e + "_" + t;
      }
      function w(t) {
        for (var e = t.length, n = 0, r = 0; e > 0; )
          (r = (Math.random() * e) | 0),
            (n = t[--e]),
            (t[e] = t[r]),
            (t[r] = n);
      }
      function C(t, e, n) {
        return Math.max(t, Math.min(e, n));
      }
      function O(t) {
        return t % 2 == 0 ? t : t + 1;
      }
      function E(t) {
        for (var e = 0, n = 0; n < t.length; n++) e += t[n];
        return e;
      }
      function S(t, e) {
        if (!t) throw new Error("string" == typeof e ? e : e());
      }
      function I(t, e, n) {
        void 0 === n && (n = ""),
          S(A(t, e), function () {
            return n + " Shapes " + t + " and " + e + " must match";
          });
      }
      function k(t) {
        S(null != t, function () {
          return "The input to the tensor constructor must be a non-null value.";
        });
      }
      function N(t, e, n) {
        if (
          (void 0 === e && (e = []),
          void 0 === n && (n = !1),
          null == e && (e = []),
          Array.isArray(t) || (U(t) && !n))
        )
          for (var r = 0; r < t.length; ++r) N(t[r], e, n);
        else e.push(t);
        return e;
      }
      function R(t) {
        if (0 === t.length) return 1;
        for (var e = t[0], n = 1; n < t.length; n++) e *= t[n];
        return e;
      }
      function A(t, e) {
        if (t === e) return !0;
        if (null == t || null == e) return !1;
        if (t.length !== e.length) return !1;
        for (var n = 0; n < t.length; n++) if (t[n] !== e[n]) return !1;
        return !0;
      }
      function T(t) {
        return t % 1 == 0;
      }
      function _(t) {
        if (null != Math.tanh) return Math.tanh(t);
        if (t === 1 / 0) return 1;
        if (t === -1 / 0) return -1;
        var e = Math.exp(2 * t);
        return (e - 1) / (e + 1);
      }
      function D(t) {
        var e = Math.ceil(Math.sqrt(t));
        return [e, Math.ceil(t / e)];
      }
      function F(t, e) {
        return e <= t.length ? t : t + " ".repeat(e - t.length);
      }
      function M(t, e, n) {
        return (
          void 0 === e &&
            (e = function (t) {
              return 0;
            }),
          new Promise(function (r, a) {
            var i = 0,
              o = function () {
                if (t()) r();
                else {
                  i++;
                  var s = e(i);
                  null != n && i >= n ? a() : setTimeout(o, s);
                }
              };
            o();
          })
        );
      }
      function j(t, e) {
        for (var n = 1, r = -1, a = 0; a < t.length; ++a)
          if (t[a] >= 0) n *= t[a];
          else if (-1 === t[a]) {
            if (-1 !== r)
              throw Error(
                "Shapes can only have 1 implicit size. Found -1 at dim " +
                  r +
                  " and dim " +
                  a
              );
            r = a;
          } else if (t[a] < 0)
            throw Error(
              "Shapes can not be < 0. Found " + t[a] + " at dim " + a
            );
        if (-1 === r) {
          if (e > 0 && e !== n)
            throw Error("Size(" + e + ") must match the product of shape " + t);
          return t;
        }
        if (0 === n)
          throw Error(
            "Cannot infer the missing size in [" +
              t +
              "] when there are 0 elements"
          );
        if (e % n != 0)
          throw Error(
            "The implicit shape can't be a fractional number. Got " +
              e +
              " / " +
              n
          );
        var i = t.slice();
        return (i[r] = e / n), i;
      }
      function $(t, e) {
        var n = e.length;
        return (
          S(
            (t =
              null == t
                ? e.map(function (t, e) {
                    return e;
                  })
                : [].concat(t)).every(function (t) {
              return t >= -n && t < n;
            }),
            function () {
              return (
                "All values in axis param must be in range [-" +
                n +
                ", " +
                n +
                ") but got axis " +
                t
              );
            }
          ),
          S(
            t.every(function (t) {
              return T(t);
            }),
            function () {
              return (
                "All values in axis param must be integers but got axis " + t
              );
            }
          ),
          t.map(function (t) {
            return t < 0 ? n + t : t;
          })
        );
      }
      function B(t, e) {
        for (
          var n = [],
            r = [],
            a = null != e && Array.isArray(e) && 0 === e.length,
            i = null == e || a ? null : $(e, t).sort(),
            o = 0,
            s = 0;
          s < t.length;
          ++s
        ) {
          if (null != i) {
            if (i[o] === s && 1 !== t[s])
              throw new Error(
                "Can't squeeze axis " +
                  s +
                  " since its dim '" +
                  t[s] +
                  "' is not 1"
              );
            (null == i[o] || i[o] > s) &&
              1 === t[s] &&
              (n.push(t[s]), r.push(s)),
              i[o] <= s && o++;
          }
          1 !== t[s] && (n.push(t[s]), r.push(s));
        }
        return { newShape: n, keptDims: r };
      }
      function P(t, e) {
        var n = null;
        if (null == t || "float32" === t) n = new Float32Array(e);
        else if ("int32" === t) n = new Int32Array(e);
        else {
          if ("bool" !== t) throw new Error("Unknown data type " + t);
          n = new Uint8Array(e);
        }
        return n;
      }
      function L(t, e) {
        var n = null;
        if (null == t || "float32" === t) n = new Float32Array(e);
        else if ("int32" === t) n = new Int32Array(e);
        else if ("bool" === t) n = new Uint8Array(e);
        else {
          if ("string" !== t) throw new Error("Unknown data type " + t);
          n = new Array(e);
        }
        return n;
      }
      function z(t, e) {
        for (var n = 0; n < t.length; n++) {
          var r = t[n];
          if (isNaN(r) || !isFinite(r))
            throw Error(
              "A tensor of type " + e + " being uploaded contains " + r + "."
            );
        }
      }
      function W(t) {
        return (
          "bool" === t ||
          "complex64" === t ||
          "float32" === t ||
          "int32" === t ||
          "string" === t
        );
      }
      function V(t, e) {
        return !(
          "complex64" === e ||
          ("float32" === e && "complex64" !== t) ||
          ("int32" === e && "float32" !== t && "complex64" !== t) ||
          ("bool" === e && "bool" === t)
        );
      }
      function U(t) {
        return (
          t instanceof Float32Array ||
          t instanceof Int32Array ||
          t instanceof Uint8Array
        );
      }
      function G(t) {
        if ("float32" === t || "int32" === t) return 4;
        if ("complex64" === t) return 8;
        if ("bool" === t) return 1;
        throw new Error("Unknown dtype " + t);
      }
      function H(t) {
        if (null == t) return 0;
        var e = 0;
        return (
          t.forEach(function (t) {
            return (e += t.length);
          }),
          e
        );
      }
      function q(t) {
        return "string" == typeof t || t instanceof String;
      }
      function K(t) {
        return "boolean" == typeof t;
      }
      function X(t) {
        return "number" == typeof t;
      }
      function Y(t) {
        return Array.isArray(t)
          ? Y(t[0])
          : t instanceof Float32Array
          ? "float32"
          : t instanceof Int32Array || t instanceof Uint8Array
          ? "int32"
          : X(t)
          ? "float32"
          : q(t)
          ? "string"
          : K(t)
          ? "bool"
          : "float32";
      }
      function J(t) {
        return !!(t && t.constructor && t.call && t.apply);
      }
      function Q(t, e) {
        for (var n = e; n < t; ++n) if (t % n == 0) return n;
        return t;
      }
      function Z(t) {
        var e = t.length;
        if (e < 2) return [];
        var n = new Array(e - 1);
        n[e - 2] = t[e - 1];
        for (var r = e - 3; r >= 0; --r) n[r] = n[r + 1] * t[r + 1];
        return n;
      }
      function tt(t, e, n) {
        if ("string" === e)
          throw new Error("Cannot convert a string[] to a TypedArray");
        if (
          (Array.isArray(t) && (t = N(t)),
          n && z(t, e),
          (function (t, e) {
            return (
              (t instanceof Float32Array && "float32" === e) ||
              (t instanceof Int32Array && "int32" === e) ||
              (t instanceof Uint8Array && "bool" === e)
            );
          })(t, e))
        )
          return t;
        if (null == e || "float32" === e || "complex64" === e)
          return new Float32Array(t);
        if ("int32" === e) return new Int32Array(t);
        if ("bool" === e) {
          for (var r = new Uint8Array(t.length), a = 0; a < r.length; ++a)
            0 !== Math.round(t[a]) && (r[a] = 1);
          return r;
        }
        throw new Error("Unknown data type " + e);
      }
      function et(t, e) {
        if (0 === t.length) return e[0];
        var n = t.reduce(function (t, e) {
          return t * e;
        });
        if (0 === n) return [];
        if (n !== e.length)
          throw new Error("[" + t + "] does not match the input size.");
        return (function t(e, n, r) {
          var a = new Array();
          if (1 === n.length)
            for (var i = n[0], o = 0; o < i; o++) a[o] = r[e + o];
          else {
            i = n[0];
            var s = n.slice(1),
              u = s.reduce(function (t, e) {
                return t * e;
              });
            for (o = 0; o < i; o++) a[o] = t(e + o * u, s, r);
          }
          return a;
        })(0, t, e);
      }
      function nt(t, e) {
        for (var n = rt(t, e), r = 0; r < n.length; r++) n[r] = 1;
        return n;
      }
      function rt(t, e) {
        if (null == e || "float32" === e || "complex64" === e)
          return new Float32Array(t);
        if ("int32" === e) return new Int32Array(t);
        if ("bool" === e) return new Uint8Array(t);
        throw new Error("Unknown data type " + e);
      }
      function at() {
        return d().platform.now();
      }
      function it(t) {
        t.forEach(function (e) {
          S(Number.isInteger(e) && e >= 0, function () {
            return (
              "Tensor must have a shape comprised of positive integers but got shape [" +
              t +
              "]."
            );
          });
        });
      }
      function ot(t, e) {
        return (
          void 0 === e && (e = "utf-8"),
          (e = e || "utf-8"),
          d().platform.encode(t, e)
        );
      }
      function st(t, e) {
        return (
          void 0 === e && (e = "utf-8"),
          (e = e || "utf-8"),
          d().platform.decode(t, e)
        );
      }
      function ut(t, e, n) {
        if (0 === e) return 0;
        if (1 === e) return t[0];
        for (var r = t[t.length - 1], a = 0; a < t.length - 1; ++a)
          r += n[a] * t[a];
        return r;
      }
      function ct(t, e, n) {
        if (0 === e) return [];
        if (1 === e) return [t];
        for (var r = new Array(e), a = 0; a < r.length - 1; ++a)
          (r[a] = Math.floor(t / n[a])), (t -= r[a] * n[a]);
        return (r[r.length - 1] = t), r;
      }
      Object.freeze({
        shuffle: w,
        clamp: C,
        nearestLargerEven: O,
        sum: E,
        randUniform: function (t, e) {
          var n = Math.random();
          return e * n + (1 - n) * t;
        },
        distSquared: function (t, e) {
          for (var n = 0, r = 0; r < t.length; r++) {
            var a = Number(t[r]) - Number(e[r]);
            n += a * a;
          }
          return n;
        },
        assert: S,
        assertShapesMatch: I,
        assertNonNull: k,
        flatten: N,
        sizeFromShape: R,
        isScalarShape: function (t) {
          return 0 === t.length;
        },
        arraysEqual: A,
        isInt: T,
        tanh: _,
        sizeToSquarishShape: D,
        createShuffledIndices: function (t) {
          for (var e = new Uint32Array(t), n = 0; n < t; ++n) e[n] = n;
          return w(e), e;
        },
        rightPad: F,
        repeatedTry: M,
        inferFromImplicitShape: j,
        parseAxisParam: $,
        squeezeShape: B,
        getTypedArrayFromDType: P,
        getArrayFromDType: L,
        checkConversionForErrors: z,
        isValidDtype: W,
        hasEncodingLoss: V,
        isTypedArray: U,
        bytesPerElement: G,
        bytesFromStringArray: H,
        isString: q,
        isBoolean: K,
        isNumber: X,
        inferDtype: Y,
        isFunction: J,
        nearestDivisor: Q,
        computeStrides: Z,
        toTypedArray: tt,
        toNestedArray: et,
        makeOnesTypedArray: nt,
        makeZerosTypedArray: rt,
        now: at,
        assertNonNegativeIntegerDimensions: it,
        fetch: function (t, e) {
          return d().platform.fetch(t, e);
        },
        encodeString: ot,
        decodeString: st,
        locToIndex: ut,
        indexToLoc: ct,
      });
      var lt = (function () {
          function t(t, e) {
            (this.backendTimer = t),
              (this.logger = e),
              null == e && (this.logger = new ht());
          }
          return (
            (t.prototype.profileKernel = function (t, e, n) {
              var r,
                a = this,
                i = this.backendTimer.time(function () {
                  r = n();
                });
              return (
                r.forEach(function (n) {
                  n.data().then(function (r) {
                    !(function (t, e, n) {
                      if ("float32" !== e) return !1;
                      for (var r = 0; r < t.length; r++) {
                        var a = t[r];
                        if (isNaN(a) || !isFinite(a))
                          return (
                            console.warn(
                              "Found " + a + " in the result of '" + n + "'"
                            ),
                            !0
                          );
                      }
                    })(r, n.dtype, t),
                      i.then(function (i) {
                        var o = "";
                        null != i.getExtraProfileInfo &&
                          (o = i.getExtraProfileInfo()),
                          a.logger.logKernelProfile(t, n, r, i.kernelMs, e, o);
                      });
                  });
                }),
                r
              );
            }),
            t
          );
        })(),
        ht = (function () {
          function t() {}
          return (
            (t.prototype.logKernelProfile = function (t, e, n, r, a, i) {
              var o = "number" == typeof r ? F(r + "ms", 9) : r.error,
                s = F(t, 25),
                u = e.rank,
                c = e.size,
                l = F(e.shape.toString(), 14),
                h = "";
              for (var d in a) {
                var p = a[d].shape || e.shape,
                  f = p.length;
                h += d + ": " + f + "D " + (f > 0 ? p : "") + " ";
              }
              console.log(
                "%c" +
                  s +
                  "\t%c" +
                  o +
                  "\t%c" +
                  u +
                  "D " +
                  l +
                  "\t%c" +
                  c +
                  "\t%c" +
                  h +
                  "\t%c" +
                  i,
                "font-weight:bold",
                "color:red",
                "color:blue",
                "color: orange",
                "color: green",
                "color: steelblue"
              );
            }),
            t
          );
        })();
      function dt(t, e, n) {
        return F(
          Array.isArray(t)
            ? parseFloat(t[0].toFixed(7)) +
                " + " +
                parseFloat(t[1].toFixed(7)) +
                "j"
            : q(t)
            ? "'" + t + "'"
            : "bool" === n
            ? pt(t)
            : parseFloat(t.toFixed(7)).toString(),
          e
        );
      }
      function pt(t) {
        return 0 === t ? "false" : "true";
      }
      function ft(t) {
        for (var e = [], n = 0; n < t.length; n += 2) e.push([t[n], t[n + 1]]);
        return e;
      }
      var mt = (function () {
          function t(t, e, n) {
            var r = this;
            if (
              ((this.dtype = e),
              (this.shape = t.slice()),
              (this.size = R(t)),
              null != n)
            ) {
              var a = n.length;
              S(a === this.size, function () {
                return (
                  "Length of values '" +
                  a +
                  "' does not match the size inferred by the shape '" +
                  r.size +
                  "'."
                );
              });
            }
            if ("complex64" === e)
              throw new Error(
                "complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag)."
              );
            (this.values = n || L(e, this.size)), (this.strides = Z(t));
          }
          return (
            (t.prototype.set = function (t) {
              for (var e = this, n = [], r = 1; r < arguments.length; r++)
                n[r - 1] = arguments[r];
              0 === n.length && (n = [0]),
                S(n.length === this.rank, function () {
                  return (
                    "The number of provided coordinates (" +
                    n.length +
                    ") must match the rank (" +
                    e.rank +
                    ")"
                  );
                });
              var a = this.locToIndex(n);
              this.values[a] = t;
            }),
            (t.prototype.get = function () {
              for (var t = [], e = 0; e < arguments.length; e++)
                t[e] = arguments[e];
              0 === t.length && (t = [0]);
              for (var n = 0, r = 0, a = t; r < a.length; r++) {
                var i = a[r];
                if (i < 0 || i >= this.shape[n]) {
                  var o =
                    "Requested out of range element at " +
                    t +
                    ".   Buffer shape=" +
                    this.shape;
                  throw new Error(o);
                }
                n++;
              }
              for (var s = t[t.length - 1], u = 0; u < t.length - 1; ++u)
                s += this.strides[u] * t[u];
              return this.values[s];
            }),
            (t.prototype.locToIndex = function (t) {
              if (0 === this.rank) return 0;
              if (1 === this.rank) return t[0];
              for (var e = t[t.length - 1], n = 0; n < t.length - 1; ++n)
                e += this.strides[n] * t[n];
              return e;
            }),
            (t.prototype.indexToLoc = function (t) {
              if (0 === this.rank) return [];
              if (1 === this.rank) return [t];
              for (
                var e = new Array(this.shape.length), n = 0;
                n < e.length - 1;
                ++n
              )
                (e[n] = Math.floor(t / this.strides[n])),
                  (t -= e[n] * this.strides[n]);
              return (e[e.length - 1] = t), e;
            }),
            Object.defineProperty(t.prototype, "rank", {
              get: function () {
                return this.shape.length;
              },
              enumerable: !0,
              configurable: !0,
            }),
            (t.prototype.toTensor = function () {
              return gt().makeTensor(this.values, this.shape, this.dtype);
            }),
            t
          );
        })(),
        gt = null,
        bt = null,
        vt = null,
        yt = (function () {
          function t(t, e, n, r) {
            (this.kept = !1),
              (this.isDisposedInternal = !1),
              (this.shape = t.slice()),
              (this.dtype = e || "float32"),
              (this.size = R(t)),
              (this.strides = Z(t)),
              (this.dataId = n),
              (this.id = r),
              (this.rankType = this.rank < 5 ? this.rank.toString() : "higher");
          }
          return (
            (t.prototype.flatten = function () {
              return this.throwIfDisposed(), this.as1D();
            }),
            (t.prototype.asScalar = function () {
              return (
                this.throwIfDisposed(),
                S(1 === this.size, function () {
                  return "The array must have only 1 element.";
                }),
                this.reshape([])
              );
            }),
            (t.prototype.as1D = function () {
              return this.throwIfDisposed(), this.reshape([this.size]);
            }),
            (t.prototype.as2D = function (t, e) {
              return this.throwIfDisposed(), this.reshape([t, e]);
            }),
            (t.prototype.as3D = function (t, e, n) {
              return this.throwIfDisposed(), this.reshape([t, e, n]);
            }),
            (t.prototype.as4D = function (t, e, n, r) {
              return this.throwIfDisposed(), this.reshape([t, e, n, r]);
            }),
            (t.prototype.as5D = function (t, e, n, r, a) {
              return this.throwIfDisposed(), this.reshape([t, e, n, r, a]);
            }),
            (t.prototype.asType = function (t) {
              return this.throwIfDisposed(), bt.cast(this, t);
            }),
            Object.defineProperty(t.prototype, "rank", {
              get: function () {
                return this.shape.length;
              },
              enumerable: !0,
              configurable: !0,
            }),
            (t.prototype.buffer = function () {
              return u(this, void 0, void 0, function () {
                var t;
                return c(this, function (e) {
                  switch (e.label) {
                    case 0:
                      return [4, this.data()];
                    case 1:
                      return (
                        (t = e.sent()),
                        [2, bt.buffer(this.shape, this.dtype, t)]
                      );
                  }
                });
              });
            }),
            (t.prototype.bufferSync = function () {
              return bt.buffer(this.shape, this.dtype, this.dataSync());
            }),
            (t.prototype.array = function () {
              return u(this, void 0, void 0, function () {
                var t;
                return c(this, function (e) {
                  switch (e.label) {
                    case 0:
                      return [4, this.data()];
                    case 1:
                      return (t = e.sent()), [2, et(this.shape, t)];
                  }
                });
              });
            }),
            (t.prototype.arraySync = function () {
              return et(this.shape, this.dataSync());
            }),
            (t.prototype.data = function () {
              return u(this, void 0, void 0, function () {
                var t, e;
                return c(this, function (n) {
                  switch (n.label) {
                    case 0:
                      return (
                        this.throwIfDisposed(),
                        (t = gt().read(this.dataId)),
                        "string" !== this.dtype ? [3, 2] : [4, t]
                      );
                    case 1:
                      e = n.sent();
                      try {
                        return [
                          2,
                          e.map(function (t) {
                            return st(t);
                          }),
                        ];
                      } catch (t) {
                        throw new Error(
                          "Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes()."
                        );
                      }
                      n.label = 2;
                    case 2:
                      return [2, t];
                  }
                });
              });
            }),
            (t.prototype.dataSync = function () {
              this.throwIfDisposed();
              var t = gt().readSync(this.dataId);
              if ("string" === this.dtype)
                try {
                  return t.map(function (t) {
                    return st(t);
                  });
                } catch (t) {
                  throw new Error(
                    "Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes()."
                  );
                }
              return t;
            }),
            (t.prototype.bytes = function () {
              return u(this, void 0, void 0, function () {
                var t;
                return c(this, function (e) {
                  switch (e.label) {
                    case 0:
                      return (
                        this.throwIfDisposed(), [4, gt().read(this.dataId)]
                      );
                    case 1:
                      return (
                        (t = e.sent()),
                        "string" === this.dtype
                          ? [2, t]
                          : [2, new Uint8Array(t.buffer)]
                      );
                  }
                });
              });
            }),
            (t.prototype.dispose = function () {
              this.isDisposed ||
                (gt().disposeTensor(this), (this.isDisposedInternal = !0));
            }),
            Object.defineProperty(t.prototype, "isDisposed", {
              get: function () {
                return this.isDisposedInternal;
              },
              enumerable: !0,
              configurable: !0,
            }),
            (t.prototype.throwIfDisposed = function () {
              if (this.isDisposed) throw new Error("Tensor is disposed.");
            }),
            (t.prototype.toFloat = function () {
              return this.asType("float32");
            }),
            (t.prototype.toInt = function () {
              return this.asType("int32");
            }),
            (t.prototype.toBool = function () {
              return this.asType("bool");
            }),
            (t.prototype.print = function (t) {
              return void 0 === t && (t = !1), bt.print(this, t);
            }),
            (t.prototype.reshape = function (t) {
              return this.throwIfDisposed(), bt.reshape(this, t);
            }),
            (t.prototype.reshapeAs = function (t) {
              return this.throwIfDisposed(), this.reshape(t.shape);
            }),
            (t.prototype.expandDims = function (t) {
              return void 0 === t && (t = 0), bt.expandDims(this, t);
            }),
            (t.prototype.cumsum = function (t, e, n) {
              return (
                void 0 === t && (t = 0),
                void 0 === e && (e = !1),
                void 0 === n && (n = !1),
                bt.cumsum(this, t, e, n)
              );
            }),
            (t.prototype.squeeze = function (t) {
              return this.throwIfDisposed(), bt.squeeze(this, t);
            }),
            (t.prototype.clone = function () {
              return this.throwIfDisposed(), bt.clone(this);
            }),
            (t.prototype.oneHot = function (t, e, n) {
              return this.throwIfDisposed(), bt.oneHot(this, t, e, n);
            }),
            (t.prototype.toString = function (t) {
              return (
                void 0 === t && (t = !1),
                (function (t, e, n, r) {
                  var a = Z(e),
                    i = (function (t, e, n, r) {
                      var a = R(e),
                        i = r[r.length - 1],
                        o = new Array(i).fill(0),
                        s = e.length,
                        u = "complex64" === n ? ft(t) : t;
                      if (s > 1)
                        for (var c = 0; c < a / i; c++)
                          for (var l = c * i, h = 0; h < i; h++)
                            o[h] = Math.max(o[h], dt(u[l + h], 0, n).length);
                      return o;
                    })(t, e, n, a),
                    o = e.length,
                    s = (function t(e, n, r, a, i, o) {
                      void 0 === o && (o = !0);
                      var s = "complex64" === r ? 2 : 1,
                        u = n[0],
                        c = n.length;
                      if (0 === c)
                        return "complex64" === r
                          ? [dt(ft(e)[0], 0, r)]
                          : "bool" === r
                          ? [pt(e[0])]
                          : [e[0].toString()];
                      if (1 === c) {
                        if (u > 20) {
                          var l = 3 * s,
                            h = Array.from(e.slice(0, l)),
                            d = Array.from(e.slice((u - 3) * s, u * s));
                          return (
                            "complex64" === r && ((h = ft(h)), (d = ft(d))),
                            [
                              "[" +
                                h
                                  .map(function (t, e) {
                                    return dt(t, i[e], r);
                                  })
                                  .join(", ") +
                                ", ..., " +
                                d
                                  .map(function (t, e) {
                                    return dt(t, i[u - 3 + e], r);
                                  })
                                  .join(", ") +
                                "]",
                            ]
                          );
                        }
                        return [
                          "[" +
                            ("complex64" === r ? ft(e) : Array.from(e))
                              .map(function (t, e) {
                                return dt(t, i[e], r);
                              })
                              .join(", ") +
                            "]",
                        ];
                      }
                      var p = n.slice(1),
                        f = a.slice(1),
                        m = a[0] * s,
                        g = [];
                      if (u > 20) {
                        for (var b = 0; b < 3; b++) {
                          var v = (y = b * m) + m;
                          g.push.apply(g, t(e.slice(y, v), p, r, f, i, !1));
                        }
                        for (g.push("..."), b = u - 3; b < u; b++)
                          (v = (y = b * m) + m),
                            g.push.apply(
                              g,
                              t(e.slice(y, v), p, r, f, i, b === u - 1)
                            );
                      } else
                        for (b = 0; b < u; b++) {
                          var y;
                          (v = (y = b * m) + m),
                            g.push.apply(
                              g,
                              t(e.slice(y, v), p, r, f, i, b === u - 1)
                            );
                        }
                      var x = 2 === c ? "," : "";
                      for (g[0] = "[" + g[0] + x, b = 1; b < g.length - 1; b++)
                        g[b] = " " + g[b] + x;
                      var w = ",\n";
                      for (b = 2; b < c; b++) w += "\n";
                      return (
                        (g[g.length - 1] =
                          " " + g[g.length - 1] + "]" + (o ? "" : w)),
                        g
                      );
                    })(t, e, n, a, i),
                    u = ["Tensor"];
                  return (
                    r &&
                      (u.push("  dtype: " + n),
                      u.push("  rank: " + o),
                      u.push("  shape: [" + e + "]"),
                      u.push("  values:")),
                    u.push(
                      s
                        .map(function (t) {
                          return "    " + t;
                        })
                        .join("\n")
                    ),
                    u.join("\n")
                  );
                })(this.dataSync(), this.shape, this.dtype, t)
              );
            }),
            (t.prototype.tile = function (t) {
              return this.throwIfDisposed(), bt.tile(this, t);
            }),
            (t.prototype.gather = function (t, e) {
              return (
                void 0 === e && (e = 0),
                this.throwIfDisposed(),
                bt.gather(this, t, e)
              );
            }),
            (t.prototype.matMul = function (t, e, n) {
              return (
                void 0 === e && (e = !1),
                void 0 === n && (n = !1),
                this.throwIfDisposed(),
                bt.matMul(this, t, e, n)
              );
            }),
            (t.prototype.dot = function (t) {
              return this.throwIfDisposed(), bt.dot(this, t);
            }),
            (t.prototype.norm = function (t, e, n) {
              return (
                void 0 === t && (t = "euclidean"),
                void 0 === e && (e = null),
                void 0 === n && (n = !1),
                this.throwIfDisposed(),
                bt.norm(this, t, e, n)
              );
            }),
            (t.prototype.slice = function (t, e) {
              return this.throwIfDisposed(), bt.slice(this, t, e);
            }),
            (t.prototype.reverse = function (t) {
              return this.throwIfDisposed(), bt.reverse(this, t);
            }),
            (t.prototype.concat = function (e, n) {
              return (
                void 0 === n && (n = 0),
                this.throwIfDisposed(),
                e instanceof t && (e = [e]),
                bt.concat([this].concat(e), n)
              );
            }),
            (t.prototype.split = function (t, e) {
              return (
                void 0 === e && (e = 0),
                this.throwIfDisposed(),
                bt.split(this, t, e)
              );
            }),
            (t.prototype.stack = function (t, e) {
              return void 0 === e && (e = 0), bt.stack([this, t], e);
            }),
            (t.prototype.unstack = function (t) {
              return void 0 === t && (t = 0), bt.unstack(this, t);
            }),
            (t.prototype.pad = function (t, e) {
              return void 0 === e && (e = 0), bt.pad(this, t, e);
            }),
            (t.prototype.batchNormalization = function (t, e, n, r, a) {
              return (
                void 0 === n && (n = 0.001),
                vt(
                  "tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon"
                ),
                this.batchNorm(t, e, a, r, n)
              );
            }),
            (t.prototype.batchNorm = function (t, e, n, r, a) {
              return (
                void 0 === a && (a = 0.001),
                this.throwIfDisposed(),
                bt.batchNorm(this, t, e, n, r, a)
              );
            }),
            (t.prototype.all = function (t, e) {
              return (
                void 0 === t && (t = null),
                void 0 === e && (e = !1),
                this.throwIfDisposed(),
                bt.all(this, t, e)
              );
            }),
            (t.prototype.any = function (t, e) {
              return (
                void 0 === t && (t = null),
                void 0 === e && (e = !1),
                this.throwIfDisposed(),
                bt.any(this, t, e)
              );
            }),
            (t.prototype.logSumExp = function (t, e) {
              return (
                void 0 === t && (t = null),
                void 0 === e && (e = !1),
                this.throwIfDisposed(),
                bt.logSumExp(this, t, e)
              );
            }),
            (t.prototype.sum = function (t, e) {
              return (
                void 0 === t && (t = null),
                void 0 === e && (e = !1),
                this.throwIfDisposed(),
                bt.sum(this, t, e)
              );
            }),
            (t.prototype.prod = function (t, e) {
              return (
                void 0 === t && (t = null),
                void 0 === e && (e = !1),
                this.throwIfDisposed(),
                bt.prod(this, t, e)
              );
            }),
            (t.prototype.mean = function (t, e) {
              return (
                void 0 === t && (t = null),
                void 0 === e && (e = !1),
                this.throwIfDisposed(),
                bt.mean(this, t, e)
              );
            }),
            (t.prototype.min = function (t, e) {
              return (
                void 0 === t && (t = null),
                void 0 === e && (e = !1),
                this.throwIfDisposed(),
                bt.min(this, t, e)
              );
            }),
            (t.prototype.max = function (t, e) {
              return (
                void 0 === t && (t = null),
                void 0 === e && (e = !1),
                this.throwIfDisposed(),
                bt.max(this, t, e)
              );
            }),
            (t.prototype.argMin = function (t) {
              return (
                void 0 === t && (t = null),
                this.throwIfDisposed(),
                bt.argMin(this, t)
              );
            }),
            (t.prototype.argMax = function (t) {
              return (
                void 0 === t && (t = null),
                this.throwIfDisposed(),
                bt.argMax(this, t)
              );
            }),
            (t.prototype.cast = function (t) {
              return this.throwIfDisposed(), bt.cast(this, t);
            }),
            (t.prototype.add = function (t) {
              return this.throwIfDisposed(), bt.add(this, t);
            }),
            (t.prototype.addStrict = function (t) {
              return this.throwIfDisposed(), bt.addStrict(this, t);
            }),
            (t.prototype.atan2 = function (t) {
              return this.throwIfDisposed(), bt.atan2(this, t);
            }),
            (t.prototype.sub = function (t) {
              return this.throwIfDisposed(), bt.sub(this, t);
            }),
            (t.prototype.subStrict = function (t) {
              return this.throwIfDisposed(), bt.subStrict(this, t);
            }),
            (t.prototype.pow = function (t) {
              return this.throwIfDisposed(), bt.pow(this, t);
            }),
            (t.prototype.powStrict = function (t) {
              return this.throwIfDisposed(), bt.powStrict(this, t);
            }),
            (t.prototype.mul = function (t) {
              return this.throwIfDisposed(), bt.mul(this, t);
            }),
            (t.prototype.mulStrict = function (t) {
              return this.throwIfDisposed(), bt.mulStrict(this, t);
            }),
            (t.prototype.div = function (t) {
              return this.throwIfDisposed(), bt.div(this, t);
            }),
            (t.prototype.divNoNan = function (t) {
              return this.throwIfDisposed(), bt.divNoNan(this, t);
            }),
            (t.prototype.floorDiv = function (t) {
              return this.throwIfDisposed(), bt.floorDiv(this, t);
            }),
            (t.prototype.divStrict = function (t) {
              return this.throwIfDisposed(), bt.divStrict(this, t);
            }),
            (t.prototype.minimum = function (t) {
              return this.throwIfDisposed(), bt.minimum(this, t);
            }),
            (t.prototype.minimumStrict = function (t) {
              return this.throwIfDisposed(), bt.minimumStrict(this, t);
            }),
            (t.prototype.maximum = function (t) {
              return this.throwIfDisposed(), bt.maximum(this, t);
            }),
            (t.prototype.maximumStrict = function (t) {
              return this.throwIfDisposed(), bt.maximumStrict(this, t);
            }),
            (t.prototype.mod = function (t) {
              return this.throwIfDisposed(), bt.mod(this, t);
            }),
            (t.prototype.modStrict = function (t) {
              return this.throwIfDisposed(), bt.modStrict(this, t);
            }),
            (t.prototype.squaredDifferenceStrict = function (t) {
              return (
                this.throwIfDisposed(), bt.squaredDifferenceStrict(this, t)
              );
            }),
            (t.prototype.transpose = function (t) {
              return this.throwIfDisposed(), bt.transpose(this, t);
            }),
            (t.prototype.notEqual = function (t) {
              return this.throwIfDisposed(), bt.notEqual(this, t);
            }),
            (t.prototype.notEqualStrict = function (t) {
              return this.throwIfDisposed(), bt.notEqualStrict(this, t);
            }),
            (t.prototype.less = function (t) {
              return this.throwIfDisposed(), bt.less(this, t);
            }),
            (t.prototype.lessStrict = function (t) {
              return this.throwIfDisposed(), bt.lessStrict(this, t);
            }),
            (t.prototype.equal = function (t) {
              return this.throwIfDisposed(), bt.equal(this, t);
            }),
            (t.prototype.equalStrict = function (t) {
              return this.throwIfDisposed(), bt.equalStrict(this, t);
            }),
            (t.prototype.lessEqual = function (t) {
              return this.throwIfDisposed(), bt.lessEqual(this, t);
            }),
            (t.prototype.lessEqualStrict = function (t) {
              return this.throwIfDisposed(), bt.lessEqualStrict(this, t);
            }),
            (t.prototype.greater = function (t) {
              return this.throwIfDisposed(), bt.greater(this, t);
            }),
            (t.prototype.greaterStrict = function (t) {
              return this.throwIfDisposed(), bt.greaterStrict(this, t);
            }),
            (t.prototype.greaterEqual = function (t) {
              return this.throwIfDisposed(), bt.greaterEqual(this, t);
            }),
            (t.prototype.greaterEqualStrict = function (t) {
              return this.throwIfDisposed(), bt.greaterEqualStrict(this, t);
            }),
            (t.prototype.logicalAnd = function (t) {
              return this.throwIfDisposed(), bt.logicalAnd(this, t);
            }),
            (t.prototype.logicalOr = function (t) {
              return this.throwIfDisposed(), bt.logicalOr(this, t);
            }),
            (t.prototype.logicalNot = function () {
              return this.throwIfDisposed(), bt.logicalNot(this);
            }),
            (t.prototype.logicalXor = function (t) {
              return this.throwIfDisposed(), bt.logicalXor(this, t);
            }),
            (t.prototype.where = function (t, e) {
              return this.throwIfDisposed(), bt.where(t, this, e);
            }),
            (t.prototype.neg = function () {
              return this.throwIfDisposed(), bt.neg(this);
            }),
            (t.prototype.ceil = function () {
              return this.throwIfDisposed(), bt.ceil(this);
            }),
            (t.prototype.floor = function () {
              return this.throwIfDisposed(), bt.floor(this);
            }),
            (t.prototype.sign = function () {
              return this.throwIfDisposed(), bt.sign(this);
            }),
            (t.prototype.isNaN = function () {
              return this.throwIfDisposed(), bt.isNaN(this);
            }),
            (t.prototype.isInf = function () {
              return this.throwIfDisposed(), bt.isInf(this);
            }),
            (t.prototype.isFinite = function () {
              return this.throwIfDisposed(), bt.isFinite(this);
            }),
            (t.prototype.exp = function () {
              return this.throwIfDisposed(), bt.exp(this);
            }),
            (t.prototype.expm1 = function () {
              return this.throwIfDisposed(), bt.expm1(this);
            }),
            (t.prototype.log = function () {
              return this.throwIfDisposed(), bt.log(this);
            }),
            (t.prototype.log1p = function () {
              return this.throwIfDisposed(), bt.log1p(this);
            }),
            (t.prototype.sqrt = function () {
              return this.throwIfDisposed(), bt.sqrt(this);
            }),
            (t.prototype.rsqrt = function () {
              return this.throwIfDisposed(), bt.rsqrt(this);
            }),
            (t.prototype.square = function () {
              return this.throwIfDisposed(), bt.square(this);
            }),
            (t.prototype.reciprocal = function () {
              return this.throwIfDisposed(), bt.reciprocal(this);
            }),
            (t.prototype.abs = function () {
              return this.throwIfDisposed(), bt.abs(this);
            }),
            (t.prototype.clipByValue = function (t, e) {
              return this.throwIfDisposed(), bt.clipByValue(this, t, e);
            }),
            (t.prototype.relu = function () {
              return this.throwIfDisposed(), bt.relu(this);
            }),
            (t.prototype.relu6 = function () {
              return this.throwIfDisposed(), bt.relu6(this);
            }),
            (t.prototype.elu = function () {
              return this.throwIfDisposed(), bt.elu(this);
            }),
            (t.prototype.selu = function () {
              return this.throwIfDisposed(), bt.selu(this);
            }),
            (t.prototype.leakyRelu = function (t) {
              return (
                void 0 === t && (t = 0.2),
                this.throwIfDisposed(),
                bt.leakyRelu(this, t)
              );
            }),
            (t.prototype.prelu = function (t) {
              return this.throwIfDisposed(), bt.prelu(this, t);
            }),
            (t.prototype.sigmoid = function () {
              return this.throwIfDisposed(), bt.sigmoid(this);
            }),
            (t.prototype.logSigmoid = function () {
              return this.throwIfDisposed(), bt.logSigmoid(this);
            }),
            (t.prototype.softplus = function () {
              return this.throwIfDisposed(), bt.softplus(this);
            }),
            (t.prototype.zerosLike = function () {
              return this.throwIfDisposed(), bt.zerosLike(this);
            }),
            (t.prototype.onesLike = function () {
              return this.throwIfDisposed(), bt.onesLike(this);
            }),
            (t.prototype.sin = function () {
              return this.throwIfDisposed(), bt.sin(this);
            }),
            (t.prototype.cos = function () {
              return this.throwIfDisposed(), bt.cos(this);
            }),
            (t.prototype.tan = function () {
              return this.throwIfDisposed(), bt.tan(this);
            }),
            (t.prototype.asin = function () {
              return this.throwIfDisposed(), bt.asin(this);
            }),
            (t.prototype.acos = function () {
              return this.throwIfDisposed(), bt.acos(this);
            }),
            (t.prototype.atan = function () {
              return this.throwIfDisposed(), bt.atan(this);
            }),
            (t.prototype.sinh = function () {
              return this.throwIfDisposed(), bt.sinh(this);
            }),
            (t.prototype.cosh = function () {
              return this.throwIfDisposed(), bt.cosh(this);
            }),
            (t.prototype.tanh = function () {
              return this.throwIfDisposed(), bt.tanh(this);
            }),
            (t.prototype.asinh = function () {
              return this.throwIfDisposed(), bt.asinh(this);
            }),
            (t.prototype.acosh = function () {
              return this.throwIfDisposed(), bt.acosh(this);
            }),
            (t.prototype.atanh = function () {
              return this.throwIfDisposed(), bt.atanh(this);
            }),
            (t.prototype.erf = function () {
              return this.throwIfDisposed(), bt.erf(this);
            }),
            (t.prototype.round = function () {
              return this.throwIfDisposed(), bt.round(this);
            }),
            (t.prototype.step = function (t) {
              return (
                void 0 === t && (t = 0),
                this.throwIfDisposed(),
                bt.step(this, t)
              );
            }),
            (t.prototype.softmax = function (t) {
              return (
                void 0 === t && (t = -1),
                this.throwIfDisposed(),
                bt.softmax(this, t)
              );
            }),
            (t.prototype.logSoftmax = function (t) {
              return (
                void 0 === t && (t = -1),
                this.throwIfDisposed(),
                bt.logSoftmax(this, t)
              );
            }),
            (t.prototype.resizeBilinear = function (t, e) {
              return (
                void 0 === e && (e = !1),
                this.throwIfDisposed(),
                bt.image.resizeBilinear(this, t, e)
              );
            }),
            (t.prototype.resizeNearestNeighbor = function (t, e) {
              return (
                void 0 === e && (e = !1),
                this.throwIfDisposed(),
                bt.image.resizeNearestNeighbor(this, t, e)
              );
            }),
            (t.prototype.conv1d = function (t, e, n, r, a, i) {
              return (
                void 0 === r && (r = "NWC"),
                void 0 === a && (a = 1),
                this.throwIfDisposed(),
                bt.conv1d(this, t, e, n, r, a, i)
              );
            }),
            (t.prototype.conv2d = function (t, e, n, r, a, i) {
              return (
                void 0 === r && (r = "NHWC"),
                void 0 === a && (a = [1, 1]),
                this.throwIfDisposed(),
                bt.conv2d(this, t, e, n, r, a, i)
              );
            }),
            (t.prototype.conv2dTranspose = function (t, e, n, r, a) {
              return (
                this.throwIfDisposed(), bt.conv2dTranspose(this, t, e, n, r, a)
              );
            }),
            (t.prototype.depthwiseConv2D = function (t, e, n, r, a, i) {
              return (
                void 0 === r && (r = "NHWC"),
                void 0 === a && (a = [1, 1]),
                this.throwIfDisposed(),
                bt.depthwiseConv2d(this, t, e, n, r, a, i)
              );
            }),
            (t.prototype.separableConv2d = function (t, e, n, r, a, i) {
              return (
                void 0 === a && (a = [1, 1]),
                void 0 === i && (i = "NHWC"),
                this.throwIfDisposed(),
                bt.separableConv2d(this, t, e, n, r, a, i)
              );
            }),
            (t.prototype.avgPool = function (t, e, n, r) {
              return this.throwIfDisposed(), bt.avgPool(this, t, e, n, r);
            }),
            (t.prototype.maxPool = function (t, e, n, r) {
              return this.throwIfDisposed(), bt.maxPool(this, t, e, n, r);
            }),
            (t.prototype.localResponseNormalization = function (t, e, n, r) {
              return (
                void 0 === t && (t = 5),
                void 0 === e && (e = 1),
                void 0 === n && (n = 1),
                void 0 === r && (r = 0.5),
                bt.localResponseNormalization(this, t, e, n, r)
              );
            }),
            (t.prototype.pool = function (t, e, n, r, a) {
              return this.throwIfDisposed(), bt.pool(this, t, e, n, r, a);
            }),
            (t.prototype.variable = function (t, e, n) {
              return (
                void 0 === t && (t = !0),
                this.throwIfDisposed(),
                gt().makeVariable(this, t, e, n)
              );
            }),
            (t.prototype.unsortedSegmentSum = function (t, e) {
              return this.throwIfDisposed(), bt.unsortedSegmentSum(this, t, e);
            }),
            (t.prototype.batchToSpaceND = function (t, e) {
              return this.throwIfDisposed(), bt.batchToSpaceND(this, t, e);
            }),
            (t.prototype.spaceToBatchND = function (t, e) {
              return this.throwIfDisposed(), bt.spaceToBatchND(this, t, e);
            }),
            (t.prototype.topk = function (t, e) {
              return (
                void 0 === t && (t = 1),
                void 0 === e && (e = !0),
                this.throwIfDisposed(),
                bt.topk(this, t, e)
              );
            }),
            (t.prototype.stridedSlice = function (t, e, n, r, a, i, o, s) {
              return (
                void 0 === r && (r = 0),
                void 0 === a && (a = 0),
                void 0 === i && (i = 0),
                void 0 === o && (o = 0),
                void 0 === s && (s = 0),
                this.throwIfDisposed(),
                bt.stridedSlice(this, t, e, n, r, a, i, o, s)
              );
            }),
            (t.prototype.depthToSpace = function (t, e) {
              return this.throwIfDisposed(), bt.depthToSpace(this, t, e);
            }),
            (t.prototype.fft = function () {
              return this.throwIfDisposed(), bt.spectral.fft(this);
            }),
            (t.prototype.ifft = function () {
              return this.throwIfDisposed(), bt.spectral.ifft(this);
            }),
            (t.prototype.rfft = function () {
              return this.throwIfDisposed(), bt.spectral.rfft(this);
            }),
            (t.prototype.irfft = function () {
              return this.throwIfDisposed(), bt.spectral.irfft(this);
            }),
            t
          );
        })();
      Object.defineProperty(yt, Symbol.hasInstance, {
        value: function (t) {
          return !!t && null != t.dataId && null != t.shape && null != t.dtype;
        },
      });
      var xt,
        wt,
        Ct,
        Ot,
        Et,
        St = (function (t) {
          function e(e, n, r, a) {
            var i = t.call(this, e.shape, e.dtype, e.dataId, a) || this;
            return (i.trainable = n), (i.name = r), i;
          }
          return (
            s(e, t),
            (e.prototype.assign = function (t) {
              if (t.dtype !== this.dtype)
                throw new Error(
                  "dtype of the new value (" +
                    t.dtype +
                    ") and previous value (" +
                    this.dtype +
                    ") must match"
                );
              if (!A(t.shape, this.shape))
                throw new Error(
                  "shape of the new value (" +
                    t.shape +
                    ") and previous value (" +
                    this.shape +
                    ") must match"
                );
              gt().disposeTensor(this),
                (this.dataId = t.dataId),
                gt().incRef(this, null);
            }),
            (e.prototype.dispose = function () {
              gt().disposeVariable(this), (this.isDisposedInternal = !0);
            }),
            e
          );
        })(yt);
      Object.defineProperty(St, Symbol.hasInstance, {
        value: function (t) {
          return (
            t instanceof yt && null != t.assign && t.assign instanceof Function
          );
        },
      }),
        (function (t) {
          (t.R0 = "R0"),
            (t.R1 = "R1"),
            (t.R2 = "R2"),
            (t.R3 = "R3"),
            (t.R4 = "R4"),
            (t.R5 = "R5"),
            (t.R6 = "R6");
        })(xt || (xt = {})),
        (function (t) {
          (t.float32 = "float32"),
            (t.int32 = "int32"),
            (t.bool = "int32"),
            (t.complex64 = "complex64");
        })(wt || (wt = {})),
        (function (t) {
          (t.float32 = "float32"),
            (t.int32 = "int32"),
            (t.bool = "bool"),
            (t.complex64 = "complex64");
        })(Ct || (Ct = {})),
        (function (t) {
          (t.float32 = "float32"),
            (t.int32 = "float32"),
            (t.bool = "float32"),
            (t.complex64 = "complex64");
        })(Ot || (Ot = {})),
        (function (t) {
          (t.float32 = "complex64"),
            (t.int32 = "complex64"),
            (t.bool = "complex64"),
            (t.complex64 = "complex64");
        })(Et || (Et = {}));
      var It = { float32: Ot, int32: wt, bool: Ct, complex64: Et };
      function kt(t, e) {
        if ("string" === t || "string" === e) {
          if ("string" === t && "string" === e) return "string";
          throw new Error("Can not upcast " + t + " with " + e);
        }
        return It[t][e];
      }
      function Nt(t) {
        return kt(t, "int32");
      }
      function Rt(t, e) {
        if (t.dtype === e.dtype) return [t, e];
        var n = kt(t.dtype, e.dtype);
        return [t.cast(n), e.cast(n)];
      }
      function At(t, e) {
        S(t.dtype === e.dtype, function () {
          return (
            "The dtypes of the first(" +
            t.dtype +
            ") and second(" +
            e.dtype +
            ") input must match"
          );
        });
      }
      function Tt(t) {
        var e = [];
        return (
          (function t(e, n, r) {
            if (null != e)
              if (e instanceof yt) n.push(e);
              else if (((a = e), Array.isArray(a) || "object" == typeof a)) {
                var a,
                  i = e;
                for (var o in i) {
                  var s = i[o];
                  r.has(s) || (r.add(s), t(s, n, r));
                }
              }
          })(t, e, new Set()),
          e
        );
      }
      Object.freeze({
        makeTypesMatch: Rt,
        assertTypesMatch: At,
        isTensorInList: function (t, e) {
          return e.some(function (e) {
            return e.id === t.id;
          });
        },
        getTensorsInContainer: Tt,
      });
      var _t,
        Dt = (function () {
          function t() {
            (this.registeredVariables = {}),
              (this.nextTapeNodeId = 0),
              (this.numBytes = 0),
              (this.numTensors = 0),
              (this.numStringTensors = 0),
              (this.numDataBuffers = 0),
              (this.gradientDepth = 0),
              (this.kernelDepth = 0),
              (this.scopeStack = []),
              (this.numDataMovesStack = []),
              (this.nextScopeId = 0),
              (this.tensorInfo = new WeakMap()),
              (this.profiling = !1),
              (this.activeProfile = {
                newBytes: 0,
                newTensors: 0,
                peakBytes: 0,
                kernels: [],
                result: null,
              });
          }
          return (
            (t.prototype.dispose = function () {
              for (var t in this.registeredVariables)
                this.registeredVariables[t].dispose();
            }),
            t
          );
        })(),
        Ft = (function () {
          function t(t) {
            (this.ENV = t),
              (this.registry = {}),
              (this.registryFactory = {}),
              (this.pendingBackendInitId = 0),
              (this.state = new Dt());
          }
          return (
            (t.prototype.ready = function () {
              return u(this, void 0, void 0, function () {
                var t, e, n;
                return c(this, function (r) {
                  switch (r.label) {
                    case 0:
                      if (null != this.pendingBackendInit)
                        return [
                          2,
                          this.pendingBackendInit.then(function () {}),
                        ];
                      if (null != this.backendInstance) return [2];
                      (t = this.getSortedBackends()), (e = 0), (r.label = 1);
                    case 1:
                      return e < t.length
                        ? ((n = t[e]), [4, this.initializeBackend(n).success])
                        : [3, 5];
                    case 2:
                      return r.sent() ? [4, this.setBackend(n)] : [3, 4];
                    case 3:
                      return r.sent(), [2];
                    case 4:
                      return e++, [3, 1];
                    case 5:
                      throw new Error(
                        "Could not initialize any backends, all backend initializations failed."
                      );
                  }
                });
              });
            }),
            Object.defineProperty(t.prototype, "backend", {
              get: function () {
                if (null != this.pendingBackendInit)
                  throw new Error(
                    "Backend '" +
                      this.backendName +
                      "' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods"
                  );
                if (null == this.backendInstance) {
                  var t = this.initializeBackendsAndReturnBest(),
                    e = t.name;
                  if (t.asyncInit)
                    throw new Error(
                      "The highest priority backend '" +
                        e +
                        "' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods"
                    );
                  this.setBackend(e);
                }
                return this.backendInstance;
              },
              enumerable: !0,
              configurable: !0,
            }),
            (t.prototype.backendNames = function () {
              return Object.keys(this.registryFactory);
            }),
            (t.prototype.findBackend = function (t) {
              if (!(t in this.registry)) {
                if (!(t in this.registryFactory)) return null;
                if (this.initializeBackend(t).asyncInit) return null;
              }
              return this.registry[t];
            }),
            (t.prototype.findBackendFactory = function (t) {
              return t in this.registryFactory
                ? this.registryFactory[t].factory
                : null;
            }),
            (t.prototype.registerBackend = function (t, e, n) {
              return (
                void 0 === n && (n = 1),
                t in this.registryFactory
                  ? (console.warn(
                      t +
                        " backend was already registered. Reusing existing backend factory."
                    ),
                    !1)
                  : ((this.registryFactory[t] = { factory: e, priority: n }),
                    !0)
              );
            }),
            (t.prototype.setBackend = function (t) {
              return u(this, void 0, void 0, function () {
                var e, n, r;
                return c(this, function (a) {
                  switch (a.label) {
                    case 0:
                      if (null == this.registryFactory[t])
                        throw new Error(
                          "Backend name '" + t + "' not found in registry"
                        );
                      return (
                        (this.backendName = t),
                        null != this.registry[t]
                          ? [3, 4]
                          : ((this.backendInstance = null),
                            (e = this.initializeBackend(t)),
                            (n = e.success),
                            e.asyncInit ? [4, n] : [3, 2])
                      );
                    case 1:
                      return (r = a.sent()), [3, 3];
                    case 2:
                      (r = n), (a.label = 3);
                    case 3:
                      if (!r) return [2, !1];
                      a.label = 4;
                    case 4:
                      return (
                        (this.backendInstance = this.registry[t]),
                        this.setupRegisteredKernels(),
                        (this.profiler = new lt(this.backendInstance)),
                        [2, !0]
                      );
                  }
                });
              });
            }),
            (t.prototype.setupRegisteredKernels = function () {
              var t = this;
              b(this.backendName).forEach(function (e) {
                null != e.setupFunc && e.setupFunc(t.backendInstance);
              });
            }),
            (t.prototype.disposeRegisteredKernels = function (t) {
              var e = this;
              b(t).forEach(function (n) {
                null != n.disposeFunc && n.disposeFunc(e.registry[t]);
              });
            }),
            (t.prototype.initializeBackend = function (t) {
              var e = this,
                n = this.registryFactory[t];
              if (null == n)
                throw new Error(
                  "Cannot initialize backend " + t + ", no registration found."
                );
              try {
                var r = n.factory();
                if (Promise.resolve(r) === r) {
                  var a = ++this.pendingBackendInitId,
                    i = r
                      .then(function (n) {
                        return !(
                          a < e.pendingBackendInitId ||
                          ((e.registry[t] = n),
                          (e.pendingBackendInit = null),
                          0)
                        );
                      })
                      .catch(function (n) {
                        return !(
                          a < e.pendingBackendInitId ||
                          ((e.pendingBackendInit = null),
                          console.warn(
                            "Initialization of backend " + t + " failed"
                          ),
                          console.warn(n.stack || n.message),
                          1)
                        );
                      });
                  return (
                    (this.pendingBackendInit = i), { success: i, asyncInit: !0 }
                  );
                }
                return (this.registry[t] = r), { success: !0, asyncInit: !1 };
              } catch (e) {
                return (
                  console.warn("Initialization of backend " + t + " failed"),
                  console.warn(e.stack || e.message),
                  { success: !1, asyncInit: !1 }
                );
              }
            }),
            (t.prototype.removeBackend = function (t) {
              if (!(t in this.registryFactory))
                throw new Error(t + " backend not found in registry");
              this.backendName === t &&
                null != this.pendingBackendInit &&
                this.pendingBackendInitId++,
                t in this.registry &&
                  (this.disposeRegisteredKernels(t),
                  this.registry[t].dispose(),
                  delete this.registry[t]),
                delete this.registryFactory[t],
                this.backendName === t &&
                  ((this.pendingBackendInit = null),
                  (this.backendName = null),
                  (this.backendInstance = null));
            }),
            (t.prototype.getSortedBackends = function () {
              var t = this;
              if (0 === Object.keys(this.registryFactory).length)
                throw new Error("No backend found in registry.");
              return Object.keys(this.registryFactory).sort(function (e, n) {
                return (
                  t.registryFactory[n].priority - t.registryFactory[e].priority
                );
              });
            }),
            (t.prototype.initializeBackendsAndReturnBest = function () {
              for (var t = this.getSortedBackends(), e = 0; e < t.length; e++) {
                var n = t[e],
                  r = this.initializeBackend(n),
                  a = r.success,
                  i = r.asyncInit;
                if (i || a) return { name: n, asyncInit: i };
              }
              throw new Error(
                "Could not initialize any backends, all backend initializations failed."
              );
            }),
            (t.prototype.moveData = function (t, e) {
              var n = this.state.tensorInfo.get(e),
                r = n.backend,
                a = this.readSync(e);
              r.disposeData(e),
                (n.backend = t),
                t.move(e, a, n.shape, n.dtype),
                this.shouldCheckForMemLeaks() &&
                  this.state.numDataMovesStack[
                    this.state.numDataMovesStack.length - 1
                  ]++;
            }),
            (t.prototype.tidy = function (t, e) {
              var n,
                r = this,
                a = null;
              if (null == e) {
                if ("function" != typeof t)
                  throw new Error("Please provide a function to tidy()");
                e = t;
              } else {
                if ("string" != typeof t && !(t instanceof String))
                  throw new Error(
                    "When calling with two arguments, the first argument to tidy() must be a string"
                  );
                if ("function" != typeof e)
                  throw new Error(
                    "When calling with two arguments, the 2nd argument to tidy() must be a function"
                  );
                a = t;
              }
              return this.scopedRun(
                function () {
                  return r.startScope(a);
                },
                function () {
                  return r.endScope(n);
                },
                function () {
                  return (
                    (n = e()) instanceof Promise &&
                      console.error("Cannot return a Promise inside of tidy."),
                    n
                  );
                }
              );
            }),
            (t.prototype.scopedRun = function (t, e, n) {
              t();
              try {
                var r = n();
                return e(), r;
              } catch (t) {
                throw (e(), t);
              }
            }),
            (t.prototype.nextTensorId = function () {
              return t.nextTensorId++;
            }),
            (t.prototype.nextVariableId = function () {
              return t.nextVariableId++;
            }),
            (t.prototype.clone = function (t) {
              var e = this.makeTensorFromDataId(t.dataId, t.shape, t.dtype),
                n = { x: t };
              return (
                this.addTapeNode(
                  this.state.activeScope.name,
                  n,
                  [e],
                  function (t) {
                    return {
                      x: function () {
                        return t.toFloat();
                      },
                    };
                  },
                  []
                ),
                e
              );
            }),
            (t.prototype.runKernel = function (t, e, n, r, a) {
              return this.runKernelFunc(null, e, null, t, n, r, a);
            }),
            (t.prototype.shouldCheckForMemLeaks = function () {
              return this.ENV.getBool("IS_TEST");
            }),
            (t.prototype.checkKernelForMemLeak = function (t, e, n) {
              var r = this.backend.numDataIds(),
                a = 0;
              n.forEach(function (t) {
                a += "complex64" === t.dtype ? 3 : 1;
              });
              var i = this.state.numDataMovesStack[
                  this.state.numDataMovesStack.length - 1
                ],
                o = r - e - a - i;
              if (o > 0)
                throw new Error(
                  "Backend '" +
                    this.backendName +
                    "' has an internal memory leak (" +
                    o +
                    " data ids) after running '" +
                    t +
                    "'"
                );
            }),
            (t.prototype.runKernelFunc = function (t, e, n, r, a, i, o) {
              var s,
                u = this;
              void 0 === i && (i = []), void 0 === o && (o = []);
              var c = [],
                l = this.isTapeOn();
              null == r &&
                (r =
                  null != this.state.activeScope
                    ? this.state.activeScope.name
                    : "");
              var h,
                d = function (t) {
                  l &&
                    (c = t.map(function (t) {
                      return u.keep(u.clone(t));
                    }));
                },
                p = this.state.numBytes,
                f = this.state.numTensors;
              this.shouldCheckForMemLeaks() &&
                this.state.numDataMovesStack.push(0);
              var m,
                b = g(r, this.backendName);
              return (
                (h =
                  null != b
                    ? function () {
                        var t = u.backend.numDataIds();
                        m = b.kernelFunc({
                          inputs: e,
                          attrs: a,
                          backend: u.backend,
                        });
                        var n = Array.isArray(m) ? m : [m];
                        u.shouldCheckForMemLeaks() &&
                          u.checkKernelForMemLeak(r, t, n);
                        var s = n.map(function (t) {
                            var e = t.dataId,
                              n = t.shape,
                              r = t.dtype;
                            return u.makeTensorFromDataId(e, n, r);
                          }),
                          c = s.filter(function (t, e) {
                            return o[e];
                          });
                        return d((i || []).slice().concat(c)), s;
                      }
                    : function () {
                        var e = u.backend.numDataIds();
                        m = u.tidy(function () {
                          return t(u.backend, d);
                        });
                        var n = Array.isArray(m) ? m : [m];
                        return (
                          u.shouldCheckForMemLeaks() &&
                            u.checkKernelForMemLeak(r, e, n),
                          n
                        );
                      }),
                this.scopedRun(
                  function () {
                    return u.state.kernelDepth++;
                  },
                  function () {
                    return u.state.kernelDepth--;
                  },
                  function () {
                    s = u.ENV.getBool("DEBUG")
                      ? u.profiler.profileKernel(r, e, function () {
                          return h();
                        })
                      : h();
                  }
                ),
                l && this.addTapeNode(r, e, s, n, c),
                this.state.profiling &&
                  this.state.activeProfile.kernels.push({
                    name: r,
                    bytesAdded: this.state.numBytes - p,
                    totalBytesSnapshot: this.state.numBytes,
                    tensorsAdded: this.state.numTensors - f,
                    totalTensorsSnapshot: this.state.numTensors,
                    inputShapes: Object.keys(e).map(function (t) {
                      return e[t].shape;
                    }),
                    outputShapes: s.map(function (t) {
                      return t.shape;
                    }),
                  }),
                Array.isArray(m) ? s : s[0]
              );
            }),
            (t.prototype.makeTensor = function (t, e, n, r) {
              if (null == t)
                throw new Error(
                  "Values passed to engine.makeTensor() are null"
                );
              (n = n || "float32"), (r = r || this.backend);
              var a = t;
              "string" === n &&
                q(t[0]) &&
                (a = t.map(function (t) {
                  return ot(t);
                }));
              var i = r.write(a, e, n),
                o = new yt(e, n, i, this.nextTensorId());
              if ((this.incRef(o, r), "string" === n)) {
                var s = this.state.tensorInfo.get(i),
                  u = H(a);
                (this.state.numBytes += u - s.bytes), (s.bytes = u);
              }
              return o;
            }),
            (t.prototype.makeTensorFromDataId = function (t, e, n, r) {
              var a = new yt(e, (n = n || "float32"), t, this.nextTensorId());
              return this.incRef(a, r), a;
            }),
            (t.prototype.makeVariable = function (t, e, n, r) {
              void 0 === e && (e = !0),
                (n = n || this.nextVariableId().toString()),
                null != r && r !== t.dtype && (t = t.asType(r));
              var a = new St(t, e, n, this.nextTensorId());
              if (null != this.state.registeredVariables[a.name])
                throw new Error(
                  "Variable with name " + a.name + " was already registered"
                );
              return (
                (this.state.registeredVariables[a.name] = a),
                this.incRef(a, this.backend),
                a
              );
            }),
            (t.prototype.incRef = function (t, e) {
              var n = this.state.tensorInfo.has(t.dataId)
                ? this.state.tensorInfo.get(t.dataId).refCount
                : 0;
              if (
                (this.state.numTensors++,
                "string" === t.dtype && this.state.numStringTensors++,
                0 === n)
              ) {
                this.state.numDataBuffers++;
                var r = 0;
                "complex64" !== t.dtype &&
                  "string" !== t.dtype &&
                  (r = t.size * G(t.dtype)),
                  this.state.tensorInfo.set(t.dataId, {
                    backend: e || this.backend,
                    dtype: t.dtype,
                    shape: t.shape,
                    bytes: r,
                    refCount: 0,
                  }),
                  (this.state.numBytes += r);
              }
              this.state.tensorInfo.get(t.dataId).refCount++,
                t instanceof St || this.track(t);
            }),
            (t.prototype.disposeTensor = function (t) {
              if (this.state.tensorInfo.has(t.dataId)) {
                this.state.numTensors--,
                  "string" === t.dtype && this.state.numStringTensors--;
                var e = this.state.tensorInfo.get(t.dataId);
                e.refCount <= 1
                  ? ("complex64" !== t.dtype &&
                      (this.state.numBytes -= e.bytes),
                    this.state.numDataBuffers--,
                    e.backend.disposeData(t.dataId),
                    this.state.tensorInfo.delete(t.dataId))
                  : this.state.tensorInfo.get(t.dataId).refCount--;
              }
            }),
            (t.prototype.disposeVariables = function () {
              for (var t in this.state.registeredVariables) {
                var e = this.state.registeredVariables[t];
                this.disposeVariable(e);
              }
            }),
            (t.prototype.disposeVariable = function (t) {
              this.disposeTensor(t),
                null != this.state.registeredVariables[t.name] &&
                  delete this.state.registeredVariables[t.name];
            }),
            (t.prototype.memory = function () {
              var t = this.backend.memory();
              return (
                (t.numTensors = this.state.numTensors),
                (t.numDataBuffers = this.state.numDataBuffers),
                (t.numBytes = this.state.numBytes),
                this.state.numStringTensors > 0 &&
                  ((t.unreliable = !0),
                  null == t.reasons && (t.reasons = []),
                  t.reasons.push(
                    "Memory usage by string tensors is approximate (2 bytes per character)"
                  )),
                t
              );
            }),
            (t.prototype.profile = function (t) {
              return u(this, void 0, void 0, function () {
                var e, n;
                return c(this, function (r) {
                  return (
                    (this.state.profiling = !0),
                    (e = this.state.numBytes),
                    (n = this.state.numTensors),
                    (this.state.activeProfile.kernels = []),
                    (this.state.activeProfile.result = t()),
                    (this.state.profiling = !1),
                    (this.state.activeProfile.peakBytes = Math.max.apply(
                      Math,
                      this.state.activeProfile.kernels.map(function (t) {
                        return t.totalBytesSnapshot;
                      })
                    )),
                    (this.state.activeProfile.newBytes =
                      this.state.numBytes - e),
                    (this.state.activeProfile.newTensors =
                      this.state.numTensors - n),
                    [2, this.state.activeProfile]
                  );
                });
              });
            }),
            (t.prototype.isTapeOn = function () {
              return (
                this.state.gradientDepth > 0 && 0 === this.state.kernelDepth
              );
            }),
            (t.prototype.addTapeNode = function (t, e, n, r, a) {
              var i = this,
                o = {
                  id: this.state.nextTapeNodeId++,
                  kernelName: t,
                  inputs: e,
                  outputs: n,
                  saved: a,
                },
                s = (function (t) {
                  return m.get(t);
                })(t);
              null != s && (r = s.gradFunc),
                null != r &&
                  (o.gradient = function (t) {
                    return (
                      (t = t.map(function (t, e) {
                        if (null == t) {
                          var r = n[e],
                            a = rt(r.size, r.dtype);
                          return i.makeTensor(a, r.shape, r.dtype);
                        }
                        return t;
                      })),
                      r(t.length > 1 ? t : t[0], a)
                    );
                  }),
                this.state.activeTape.push(o);
            }),
            (t.prototype.keep = function (t) {
              return (t.kept = !0), t;
            }),
            (t.prototype.startTape = function () {
              0 === this.state.gradientDepth && (this.state.activeTape = []),
                this.state.gradientDepth++;
            }),
            (t.prototype.endTape = function () {
              this.state.gradientDepth--;
            }),
            (t.prototype.startScope = function (t) {
              var e = {
                track: [],
                name: "unnamed scope",
                id: this.state.nextScopeId++,
              };
              t && (e.name = t),
                this.state.scopeStack.push(e),
                (this.state.activeScope = e);
            }),
            (t.prototype.endScope = function (t) {
              for (
                var e = this,
                  n = Tt(t),
                  r = new Set(
                    n.map(function (t) {
                      return t.id;
                    })
                  ),
                  a = 0;
                a < this.state.activeScope.track.length;
                a++
              ) {
                var i = this.state.activeScope.track[a];
                i.kept || r.has(i.id) || i.dispose();
              }
              var o = this.state.scopeStack.pop();
              (this.state.activeScope =
                0 === this.state.scopeStack.length
                  ? null
                  : this.state.scopeStack[this.state.scopeStack.length - 1]),
                n.forEach(function (t) {
                  t.kept || t.scopeId !== o.id || e.track(t);
                });
            }),
            (t.prototype.gradients = function (t, e, n, r) {
              var a = this;
              if (
                (void 0 === r && (r = !1),
                S(e.length > 0, function () {
                  return "gradients() received an empty list of xs.";
                }),
                null != n && "float32" !== n.dtype)
              )
                throw new Error(
                  "dy must have 'float32' dtype, but has '" + n.dtype + "'"
                );
              var i = this.scopedRun(
                function () {
                  return a.startTape();
                },
                function () {
                  return a.endTape();
                },
                function () {
                  return a.tidy("forward", t);
                }
              );
              S(i instanceof yt, function () {
                return "The result y returned by f() must be a tensor.";
              });
              var o = (function (t, e, n) {
                for (var r = {}, a = {}, i = 0; i < e.length; i++)
                  r[e[i].id] = !0;
                for (i = 0; i < t.length; i++) {
                  var o = (f = t[i]).inputs;
                  for (var s in o) {
                    for (var u = o[s], c = !1, l = 0; l < e.length; l++)
                      if (r[u.id]) {
                        f.outputs.forEach(function (t) {
                          return (r[t.id] = !0);
                        }),
                          (c = !0),
                          (a[f.id] = !0);
                        break;
                      }
                    if (c) break;
                  }
                }
                var h = {};
                h[n.id] = !0;
                var d = {};
                for (i = t.length - 1; i >= 0; i--)
                  for (o = (f = t[i]).inputs, l = 0; l < f.outputs.length; l++)
                    if (h[f.outputs[l].id]) {
                      for (var s in o) (h[o[s].id] = !0), (d[f.id] = !0);
                      break;
                    }
                var p = [];
                for (i = 0; i < t.length; i++) {
                  var f;
                  if (a[(f = t[i]).id] && d[f.id]) {
                    var m = {};
                    for (var s in f.inputs) {
                      var g = f.inputs[s];
                      r[g.id] && (m[s] = g);
                    }
                    var b = Object.assign({}, f);
                    (b.inputs = m), (b.outputs = f.outputs), p.push(b);
                  }
                }
                return p;
              })(this.state.activeTape, e, i);
              if (!r && 0 === o.length && e.length > 0)
                throw new Error(
                  "Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y."
                );
              return this.tidy("backward", function () {
                var t,
                  r,
                  s = {};
                (s[i.id] =
                  null == n
                    ? ((r = nt(R((t = i.shape)), "float32")),
                      Mt.makeTensor(r, t, "float32"))
                    : n),
                  (function (t, e, n) {
                    for (
                      var r = function (r) {
                          var a = e[r],
                            i = [];
                          if (
                            (a.outputs.forEach(function (e) {
                              var n = t[e.id];
                              null != n ? i.push(n) : i.push(null);
                            }),
                            null == a.gradient)
                          )
                            throw new Error(
                              "Cannot compute gradient: gradient function not found for " +
                                a.kernelName +
                                "."
                            );
                          var o = a.gradient(i),
                            s = function (e) {
                              if (!(e in o))
                                throw new Error(
                                  "Cannot backprop through input " +
                                    e +
                                    ". Available gradients found: " +
                                    Object.keys(o) +
                                    "."
                                );
                              var r = n(function () {
                                return o[e]();
                              });
                              if ("float32" !== r.dtype)
                                throw new Error(
                                  "Error in gradient for op " +
                                    a.kernelName +
                                    ". The gradient of input " +
                                    e +
                                    " must have 'float32' dtype, but has '" +
                                    r.dtype +
                                    "'"
                                );
                              var i = a.inputs[e];
                              if (!A(r.shape, i.shape))
                                throw new Error(
                                  "Error in gradient for op " +
                                    a.kernelName +
                                    ". The gradient of input '" +
                                    e +
                                    "' has shape '" +
                                    r.shape +
                                    "', which does not match the shape of the input '" +
                                    i.shape +
                                    "'"
                                );
                              if (null == t[i.id]) t[i.id] = r;
                              else {
                                var s = t[i.id];
                                (t[i.id] = s.add(r)), s.dispose();
                              }
                            };
                          for (var u in a.inputs) s(u);
                        },
                        a = e.length - 1;
                      a >= 0;
                      a--
                    )
                      r(a);
                  })(s, o, function (t) {
                    return a.tidy(t);
                  });
                var u = e.map(function (t) {
                  return s[t.id];
                });
                return (
                  0 === a.state.gradientDepth &&
                    (a.state.activeTape.forEach(function (t) {
                      for (var e = 0, n = t.saved; e < n.length; e++)
                        n[e].dispose();
                    }),
                    (a.state.activeTape = null)),
                  { value: i, grads: u }
                );
              });
            }),
            (t.prototype.customGrad = function (t) {
              var e = this;
              return (
                S(J(t), function () {
                  return "The f passed in customGrad(f) must be a function.";
                }),
                function () {
                  for (var n, r = [], a = 0; a < arguments.length; a++)
                    r[a] = arguments[a];
                  S(
                    r.every(function (t) {
                      return t instanceof yt;
                    }),
                    function () {
                      return "The args passed in customGrad(f)(x1, x2,...) must all be tensors";
                    }
                  );
                  var i = {};
                  return (
                    r.forEach(function (t, e) {
                      i[e] = t;
                    }),
                    e.runKernelFunc(
                      function (e, a) {
                        return (
                          S(
                            (n = t.apply(void 0, r.concat([a])))
                              .value instanceof yt,
                            function () {
                              return "The function f passed in customGrad(f) must return an object where `obj.value` is a tensor";
                            }
                          ),
                          S(J(n.gradFunc), function () {
                            return "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.";
                          }),
                          n.value
                        );
                      },
                      i,
                      function (t, e) {
                        var a = n.gradFunc(t, e),
                          i = Array.isArray(a) ? a : [a];
                        S(i.length === r.length, function () {
                          return "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).";
                        }),
                          S(
                            i.every(function (t) {
                              return t instanceof yt;
                            }),
                            function () {
                              return "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.";
                            }
                          );
                        var o = {};
                        return (
                          i.forEach(function (t, e) {
                            o[e] = function () {
                              return t;
                            };
                          }),
                          o
                        );
                      }
                    )
                  );
                }
              );
            }),
            (t.prototype.readSync = function (t) {
              return this.state.tensorInfo.get(t).backend.readSync(t);
            }),
            (t.prototype.read = function (t) {
              return this.state.tensorInfo.get(t).backend.read(t);
            }),
            (t.prototype.time = function (t) {
              return u(this, void 0, void 0, function () {
                var e, n;
                return c(this, function (r) {
                  switch (r.label) {
                    case 0:
                      return (e = at()), [4, this.backend.time(t)];
                    case 1:
                      return ((n = r.sent()).wallMs = at() - e), [2, n];
                  }
                });
              });
            }),
            (t.prototype.track = function (t) {
              return (
                null != this.state.activeScope &&
                  ((t.scopeId = this.state.activeScope.id),
                  this.state.activeScope.track.push(t)),
                t
              );
            }),
            Object.defineProperty(t.prototype, "registeredVariables", {
              get: function () {
                return this.state.registeredVariables;
              },
              enumerable: !0,
              configurable: !0,
            }),
            (t.prototype.reset = function () {
              for (var t in (this.pendingBackendInitId++,
              this.state.dispose(),
              this.ENV.reset(),
              (this.state = new Dt()),
              this.registry))
                this.disposeRegisteredKernels(t),
                  this.registry[t].dispose(),
                  delete this.registry[t];
              (this.backendName = null),
                (this.backendInstance = null),
                (this.pendingBackendInit = null);
            }),
            (t.nextTensorId = 0),
            (t.nextVariableId = 0),
            t
          );
        })(),
        Mt = (function () {
          var e = (function () {
            if (null == _t) {
              var e = void 0;
              if ("undefined" != typeof window) e = window;
              else if (void 0 !== t) e = t;
              else if (void 0 !== r) e = r;
              else {
                if ("undefined" == typeof self)
                  throw new Error("Could not find a global object");
                e = self;
              }
              _t = e;
            }
            return _t;
          })();
          if (null == e._tfengine) {
            var n = new l(e);
            e._tfengine = new Ft(n);
          }
          return (
            (function (t) {
              p = t;
            })(e._tfengine.ENV),
            (gt = function () {
              return e._tfengine;
            }),
            e._tfengine
          );
        })();
      function jt() {
        return (
          ("undefined" != typeof window && null != window.document) ||
          "undefined" != typeof WorkerGlobalScope
        );
      }
      var $t = d();
      $t.registerFlag(
        "DEBUG",
        function () {
          return !1;
        },
        function (t) {
          t &&
            console.warn(
              "Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance."
            );
        }
      ),
        $t.registerFlag("IS_BROWSER", function () {
          return jt();
        }),
        $t.registerFlag("IS_NODE", function () {
          return (
            void 0 !== r && void 0 !== r.versions && void 0 !== r.versions.node
          );
        }),
        $t.registerFlag("IS_CHROME", function () {
          return (
            "undefined" != typeof navigator &&
            null != navigator &&
            null != navigator.userAgent &&
            /Chrome/.test(navigator.userAgent) &&
            /Google Inc/.test(navigator.vendor)
          );
        }),
        $t.registerFlag("PROD", function () {
          return !1;
        }),
        $t.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY", function () {
          return $t.getBool("DEBUG");
        }),
        $t.registerFlag("DEPRECATION_WARNINGS_ENABLED", function () {
          return !0;
        }),
        $t.registerFlag("IS_TEST", function () {
          return !1;
        });
      var Bt,
        Pt,
        Lt,
        zt = {},
        Wt = {
          alpha: !1,
          antialias: !1,
          premultipliedAlpha: !1,
          preserveDrawingBuffer: !1,
          depth: !1,
          stencil: !1,
          failIfMajorPerformanceCaveat: !0,
        };
      function Vt(t, e) {
        zt[t] = e;
      }
      function Ut(t) {
        t in zt ||
          (zt[t] = (function (t) {
            if (1 !== t && 2 !== t)
              throw new Error(
                "Cannot get WebGL rendering context, WebGL is disabled."
              );
            var e = (function (t) {
              if ("undefined" != typeof OffscreenCanvas && 2 === t)
                return new OffscreenCanvas(300, 150);
              if ("undefined" != typeof document)
                return document.createElement("canvas");
              throw new Error("Cannot create a canvas in this context");
            })(t);
            return (
              e.addEventListener(
                "webglcontextlost",
                function (e) {
                  e.preventDefault(), delete zt[t];
                },
                !1
              ),
              1 === t
                ? e.getContext("webgl", Wt) ||
                  e.getContext("experimental-webgl", Wt)
                : e.getContext("webgl2", Wt)
            );
          })(t));
        var e = zt[t];
        return e.isContextLost()
          ? (delete zt[t], Ut(t))
          : (e.disable(e.DEPTH_TEST),
            e.disable(e.STENCIL_TEST),
            e.disable(e.BLEND),
            e.disable(e.DITHER),
            e.disable(e.POLYGON_OFFSET_FILL),
            e.disable(e.SAMPLE_COVERAGE),
            e.enable(e.SCISSOR_TEST),
            e.enable(e.CULL_FACE),
            e.cullFace(e.BACK),
            zt[t]);
      }
      function Gt(t, e) {
        return [e, t];
      }
      function Ht(t) {
        var e = R(t);
        return D(Math.ceil(e / 4));
      }
      function qt(t, e) {
        return [Math.max(1, Math.ceil(e / 2)), Math.max(1, Math.ceil(t / 2))];
      }
      function Kt(t, e) {
        var n,
          r,
          a,
          i,
          o,
          s,
          u,
          c,
          l,
          h = t;
        return (
          2 === d().getNumber("WEBGL_VERSION")
            ? ((n = h.R32F),
              (r = h.R16F),
              (a = h.RGBA16F),
              (i = h.RGBA32F),
              (o = h.RED),
              (s = 4),
              (u = 1),
              (c = h.HALF_FLOAT),
              (l = h.FLOAT))
            : ((n = t.RGBA),
              (r = t.RGBA),
              (a = t.RGBA),
              (i = h.RGBA),
              (o = t.RGBA),
              (s = 4),
              (u = 4),
              (c = null != e ? e.HALF_FLOAT_OES : null),
              (l = t.FLOAT)),
          {
            internalFormatFloat: n,
            internalFormatHalfFloat: r,
            internalFormatPackedHalfFloat: a,
            internalFormatPackedFloat: i,
            textureFormatFloat: o,
            downloadTextureFormat: t.RGBA,
            downloadUnpackNumChannels: s,
            defaultNumChannels: u,
            textureTypeHalfFloat: c,
            textureTypeFloat: l,
          }
        );
      }
      function Xt(t, e, n) {
        var r = n();
        return (
          e &&
            (function (t) {
              var e = t.getError();
              if (e !== t.NO_ERROR) throw new Error("WebGL Error: " + Jt(t, e));
            })(t),
          r
        );
      }
      !(function (t) {
        (t[(t.DENSE = 0)] = "DENSE"),
          (t[(t.SHARED_BATCH = 1)] = "SHARED_BATCH");
      })(Bt || (Bt = {})),
        (function (t) {
          (t[(t.RENDER = 0)] = "RENDER"),
            (t[(t.UPLOAD = 1)] = "UPLOAD"),
            (t[(t.PIXELS = 2)] = "PIXELS"),
            (t[(t.DOWNLOAD = 3)] = "DOWNLOAD");
        })(Pt || (Pt = {})),
        (function (t) {
          (t[(t.UNPACKED_FLOAT16 = 0)] = "UNPACKED_FLOAT16"),
            (t[(t.UNPACKED_FLOAT32 = 1)] = "UNPACKED_FLOAT32"),
            (t[(t.PACKED_4X1_UNSIGNED_BYTE = 2)] = "PACKED_4X1_UNSIGNED_BYTE"),
            (t[(t.PACKED_2X2_FLOAT32 = 3)] = "PACKED_2X2_FLOAT32"),
            (t[(t.PACKED_2X2_FLOAT16 = 4)] = "PACKED_2X2_FLOAT16");
        })(Lt || (Lt = {}));
      function Yt(t) {
        return !!(
          d().getBool("WEBGL_RENDER_FLOAT32_ENABLED") ||
          0 === t ||
          (5.96e-8 < Math.abs(t) && Math.abs(t) < 65504)
        );
      }
      function Jt(t, e) {
        switch (e) {
          case t.NO_ERROR:
            return "NO_ERROR";
          case t.INVALID_ENUM:
            return "INVALID_ENUM";
          case t.INVALID_VALUE:
            return "INVALID_VALUE";
          case t.INVALID_OPERATION:
            return "INVALID_OPERATION";
          case t.INVALID_FRAMEBUFFER_OPERATION:
            return "INVALID_FRAMEBUFFER_OPERATION";
          case t.OUT_OF_MEMORY:
            return "OUT_OF_MEMORY";
          case t.CONTEXT_LOST_WEBGL:
            return "CONTEXT_LOST_WEBGL";
          default:
            return "Unknown error code " + e;
        }
      }
      function Qt(t, e, n) {
        return we(
          t,
          e,
          function () {
            return t.getExtension(n);
          },
          'Extension "' + n + '" not supported on this browser.'
        );
      }
      function Zt(t, e, n) {
        var r = we(
          t,
          e,
          function () {
            return t.createShader(t.VERTEX_SHADER);
          },
          "Unable to create vertex WebGLShader."
        );
        if (
          (Xt(t, e, function () {
            return t.shaderSource(r, n);
          }),
          Xt(t, e, function () {
            return t.compileShader(r);
          }),
          !1 === t.getShaderParameter(r, t.COMPILE_STATUS))
        )
          throw (
            (console.log(t.getShaderInfoLog(r)),
            new Error("Failed to compile vertex shader."))
          );
        return r;
      }
      function te(t, e, n) {
        var r = we(
          t,
          e,
          function () {
            return t.createShader(t.FRAGMENT_SHADER);
          },
          "Unable to create fragment WebGLShader."
        );
        if (
          (Xt(t, e, function () {
            return t.shaderSource(r, n);
          }),
          Xt(t, e, function () {
            return t.compileShader(r);
          }),
          !1 === t.getShaderParameter(r, t.COMPILE_STATUS))
        )
          throw (
            ((function (t, e) {
              var n = re.exec(e);
              if (null == n)
                return (
                  console.log("Couldn't parse line number in error: " + e),
                  void console.log(t)
                );
              for (
                var r = +n[1],
                  a = t.split("\n"),
                  i = a.length.toString().length + 2,
                  o = a.map(function (t, e) {
                    return F((e + 1).toString(), i) + t;
                  }),
                  s = 0,
                  u = 0;
                u < o.length;
                u++
              )
                s = Math.max(o[u].length, s);
              var c = o.slice(0, r - 1),
                l = o.slice(r - 1, r),
                h = o.slice(r);
              console.log(c.join("\n")),
                console.log(e.split("\n")[0]),
                console.log(
                  "%c " + F(l[0], s),
                  "border:1px solid red; background-color:#e3d2d2; color:#a61717"
                ),
                console.log(h.join("\n"));
            })(n, t.getShaderInfoLog(r)),
            new Error("Failed to compile fragment shader."))
          );
        return r;
      }
      var ee,
        ne,
        re = /ERROR: [0-9]+:([0-9]+):/g;
      function ae(t, e) {
        return we(
          t,
          e,
          function () {
            return t.createProgram();
          },
          "Unable to create WebGLProgram."
        );
      }
      function ie(t, e, n) {
        if (
          (Xt(t, e, function () {
            return t.linkProgram(n);
          }),
          !1 === t.getProgramParameter(n, t.LINK_STATUS))
        )
          throw (
            (console.log(t.getProgramInfoLog(n)),
            new Error("Failed to link vertex and fragment shaders."))
          );
      }
      function oe(t, e, n) {
        if (
          (Xt(t, e, function () {
            return t.validateProgram(n);
          }),
          !1 === t.getProgramParameter(n, t.VALIDATE_STATUS))
        )
          throw (
            (console.log(t.getProgramInfoLog(n)),
            new Error("Shader program validation failed."))
          );
      }
      function se(t, e, n) {
        var r = we(
          t,
          e,
          function () {
            return t.createBuffer();
          },
          "Unable to create WebGLBuffer"
        );
        return (
          Xt(t, e, function () {
            return t.bindBuffer(t.ARRAY_BUFFER, r);
          }),
          Xt(t, e, function () {
            return t.bufferData(t.ARRAY_BUFFER, n, t.STATIC_DRAW);
          }),
          r
        );
      }
      function ue(t, e, n) {
        var r = we(
          t,
          e,
          function () {
            return t.createBuffer();
          },
          "Unable to create WebGLBuffer"
        );
        return (
          Xt(t, e, function () {
            return t.bindBuffer(t.ELEMENT_ARRAY_BUFFER, r);
          }),
          Xt(t, e, function () {
            return t.bufferData(t.ELEMENT_ARRAY_BUFFER, n, t.STATIC_DRAW);
          }),
          r
        );
      }
      function ce(t, e) {
        return we(
          t,
          e,
          function () {
            return t.createTexture();
          },
          "Unable to create WebGLTexture."
        );
      }
      function le(t, e) {
        var n = d().getNumber("WEBGL_MAX_TEXTURE_SIZE");
        if (t <= 0 || e <= 0) {
          var r = "[" + t + "x" + e + "]";
          throw new Error("Requested texture size " + r + " is invalid.");
        }
        if (t > n || e > n)
          throw (
            ((r = "[" + t + "x" + e + "]"),
            new Error(
              "Requested texture size " +
                r +
                " greater than WebGL maximum on this browser / GPU [" +
                n +
                "x" +
                n +
                "]."
            ))
          );
      }
      function he(t, e) {
        return we(
          t,
          e,
          function () {
            return t.createFramebuffer();
          },
          "Unable to create WebGLFramebuffer."
        );
      }
      function de(t, e, n, r, a, i, o, s) {
        var u = t.getAttribLocation(n, r);
        return (
          -1 !== u &&
          (Xt(t, e, function () {
            return t.bindBuffer(t.ARRAY_BUFFER, a);
          }),
          Xt(t, e, function () {
            return t.vertexAttribPointer(u, i, t.FLOAT, !1, o, s);
          }),
          Xt(t, e, function () {
            return t.enableVertexAttribArray(u);
          }),
          !0)
        );
      }
      function pe(t, e, n, r) {
        Ce(t, r),
          Xt(t, e, function () {
            return t.activeTexture(t.TEXTURE0 + r);
          }),
          Xt(t, e, function () {
            return t.bindTexture(t.TEXTURE_2D, n);
          });
      }
      function fe(t, e, n, r) {
        return we(
          t,
          e,
          function () {
            return t.getUniformLocation(n, r);
          },
          'uniform "' + r + '" not present in program.'
        );
      }
      function me(t, e, n) {
        return t.getUniformLocation(e, n);
      }
      function ge(t, e, n, r, a, i) {
        Xt(t, e, function () {
          return pe(t, e, r, i);
        }),
          Xt(t, e, function () {
            return t.uniform1i(a, i);
          });
      }
      function be(t, e, n, r) {
        Xt(t, e, function () {
          return t.bindFramebuffer(t.FRAMEBUFFER, r);
        }),
          Xt(t, e, function () {
            return t.framebufferTexture2D(
              t.FRAMEBUFFER,
              t.COLOR_ATTACHMENT0,
              t.TEXTURE_2D,
              n,
              0
            );
          });
      }
      function ve(t, e, n) {
        Xt(t, e, function () {
          return t.bindFramebuffer(t.FRAMEBUFFER, n);
        }),
          Xt(t, e, function () {
            return t.framebufferTexture2D(
              t.FRAMEBUFFER,
              t.COLOR_ATTACHMENT0,
              t.TEXTURE_2D,
              null,
              0
            );
          });
      }
      function ye(t) {
        var e = t.checkFramebufferStatus(t.FRAMEBUFFER);
        if (e !== t.FRAMEBUFFER_COMPLETE)
          throw new Error("Error binding framebuffer: " + xe(t, e));
      }
      function xe(t, e) {
        switch (e) {
          case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
            return "FRAMEBUFFER_INCOMPLETE_ATTACHMENT";
          case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
            return "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";
          case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
            return "FRAMEBUFFER_INCOMPLETE_DIMENSIONS";
          case t.FRAMEBUFFER_UNSUPPORTED:
            return "FRAMEBUFFER_UNSUPPORTED";
          default:
            return "unknown error " + e;
        }
      }
      function we(t, e, n, r) {
        var a = Xt(t, e, function () {
          return n();
        });
        if (null == a) throw new Error(r);
        return a;
      }
      function Ce(t, e) {
        var n = t.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1,
          r = e + t.TEXTURE0;
        if (r < t.TEXTURE0 || r > n)
          throw new Error(
            "textureUnit must be in [gl.TEXTURE0, gl.TEXTURE" + n + "]."
          );
      }
      function Oe(t, e) {
        return void 0 === e && (e = 2), R(t.slice(0, t.length - e));
      }
      function Ee(t) {
        if (0 === t.length)
          throw Error("Cannot get rows and columns of an empty shape array.");
        return [t.length > 1 ? t[t.length - 2] : 1, t[t.length - 1]];
      }
      function Se(t) {
        var e = [1, 1, 1];
        return (
          0 === t.length ||
            (1 === t.length && 1 === t[0]) ||
            (e = [Oe(t)].concat(Ee(t))),
          e
        );
      }
      function Ie(t, e) {
        var n;
        void 0 === e && (e = !1);
        var r = d().getNumber("WEBGL_MAX_TEXTURE_SIZE");
        if (
          (e &&
            ((r *= 2),
            1 ===
              (t = t.map(function (e, n) {
                return n >= t.length - 2 ? O(t[n]) : t[n];
              })).length && (t = [2, t[0]])),
          2 !== t.length)
        ) {
          var a = B(t);
          t = a.newShape;
        }
        var i = R(t);
        if (t.length <= 1 && i <= r) return [1, i];
        if (2 === t.length && t[0] <= r && t[1] <= r) return t;
        if (3 === t.length && t[0] * t[1] <= r && t[2] <= r)
          return [t[0] * t[1], t[2]];
        if (3 === t.length && t[0] <= r && t[1] * t[2] <= r)
          return [t[0], t[1] * t[2]];
        if (4 === t.length && t[0] * t[1] * t[2] <= r && t[3] <= r)
          return [t[0] * t[1] * t[2], t[3]];
        if (4 === t.length && t[0] <= r && t[1] * t[2] * t[3] <= r)
          return [t[0], t[1] * t[2] * t[3]];
        if (e) {
          var o = Oe(t),
            s = 2,
            u = 2;
          return (
            t.length && ((s = (n = Ee(t))[0]), (u = n[1])),
            D((i = o * (s / 2) * (u / 2))).map(function (t) {
              return 2 * t;
            })
          );
        }
        return D(i);
      }
      function ke(t) {
        return t % 2 == 0;
      }
      function Ne(t, e) {
        if (A((t = t.slice(-2)), (e = e.slice(-2)))) return !0;
        if (!t.length || !e.length) return !0;
        if (0 === t[0] || 0 === t[1] || 0 === e[0] || 0 === e[1]) return !0;
        if (t.length !== e.length) {
          var n = t.slice(-1)[0],
            r = e.slice(-1)[0];
          if (n === r) return !0;
          if (ke(n) && ke(r) && (1 === t[0] || 1 === e[0])) return !0;
        }
        return t[1] === e[1] && ke(t[0]) && ke(e[0]);
      }
      function Re(t) {
        if (null == ee) {
          var e = Ut(t);
          ee = e.getParameter(e.MAX_TEXTURE_SIZE);
        }
        return ee;
      }
      function Ae(t) {
        if (null == ne) {
          var e = Ut(t);
          ne = e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS);
        }
        return Math.min(16, ne);
      }
      function Te(t) {
        if (0 === t) return 0;
        var e = Ut(t);
        return _e(e, "EXT_disjoint_timer_query_webgl2") && 2 === t
          ? 2
          : _e(e, "EXT_disjoint_timer_query")
          ? 1
          : 0;
      }
      function _e(t, e) {
        return null != t.getExtension(e);
      }
      function De(t) {
        try {
          if (null != Ut(t)) return !0;
        } catch (t) {
          return !1;
        }
        return !1;
      }
      function Fe(t) {
        if (0 === t) return !1;
        var e = Ut(t);
        if (1 === t) {
          if (!_e(e, "OES_texture_float")) return !1;
        } else if (!_e(e, "EXT_color_buffer_float")) return !1;
        return je(e);
      }
      function Me(t) {
        if (0 === t) return !1;
        var e = Ut(t);
        if (1 !== t) {
          if (_e(e, "EXT_color_buffer_float")) return je(e);
          if (_e(e, "EXT_color_buffer_half_float")) {
            var n = e.getExtension("EXT_color_buffer_half_float");
            return (function (t, e) {
              var n = Kt(t, e),
                r = t.createTexture();
              t.bindTexture(t.TEXTURE_2D, r),
                t.texImage2D(
                  t.TEXTURE_2D,
                  0,
                  n.internalFormatHalfFloat,
                  1,
                  1,
                  0,
                  n.textureFormatFloat,
                  n.textureTypeHalfFloat,
                  null
                );
              var a = t.createFramebuffer();
              t.bindFramebuffer(t.FRAMEBUFFER, a),
                t.framebufferTexture2D(
                  t.FRAMEBUFFER,
                  t.COLOR_ATTACHMENT0,
                  t.TEXTURE_2D,
                  r,
                  0
                );
              var i =
                t.checkFramebufferStatus(t.FRAMEBUFFER) ===
                t.FRAMEBUFFER_COMPLETE;
              return (
                t.bindTexture(t.TEXTURE_2D, null),
                t.bindFramebuffer(t.FRAMEBUFFER, null),
                t.deleteTexture(r),
                t.deleteFramebuffer(a),
                i
              );
            })(e, n);
          }
          return !1;
        }
        return (
          !!_e(e, "OES_texture_float") &&
          !!_e(e, "WEBGL_color_buffer_float") &&
          je(e)
        );
      }
      function je(t) {
        var e = Kt(t),
          n = t.createTexture();
        t.bindTexture(t.TEXTURE_2D, n),
          t.texImage2D(
            t.TEXTURE_2D,
            0,
            e.internalFormatFloat,
            1,
            1,
            0,
            e.textureFormatFloat,
            e.textureTypeFloat,
            null
          );
        var r = t.createFramebuffer();
        t.bindFramebuffer(t.FRAMEBUFFER, r),
          t.framebufferTexture2D(
            t.FRAMEBUFFER,
            t.COLOR_ATTACHMENT0,
            t.TEXTURE_2D,
            n,
            0
          );
        var a =
          t.checkFramebufferStatus(t.FRAMEBUFFER) === t.FRAMEBUFFER_COMPLETE;
        return (
          t.bindTexture(t.TEXTURE_2D, null),
          t.bindFramebuffer(t.FRAMEBUFFER, null),
          t.deleteTexture(n),
          t.deleteFramebuffer(r),
          a
        );
      }
      function $e(t) {
        return 2 === t && null != Ut(t).fenceSync;
      }
      var Be = Object.freeze({
          callAndCheck: Xt,
          canBeRepresented: Yt,
          getWebGLErrorMessage: Jt,
          getExtensionOrThrow: Qt,
          createVertexShader: Zt,
          createFragmentShader: te,
          createProgram: ae,
          linkProgram: ie,
          validateProgram: oe,
          createStaticVertexBuffer: se,
          createStaticIndexBuffer: ue,
          getNumChannels: function () {
            return 2 === d().getNumber("WEBGL_VERSION") ? 1 : 4;
          },
          createTexture: ce,
          validateTextureSize: le,
          createFramebuffer: he,
          bindVertexBufferToProgramAttribute: de,
          bindTextureUnit: pe,
          unbindTextureUnit: function (t, e, n) {
            Ce(t, n),
              Xt(t, e, function () {
                return t.activeTexture(t.TEXTURE0 + n);
              }),
              Xt(t, e, function () {
                return t.bindTexture(t.TEXTURE_2D, null);
              });
          },
          getProgramUniformLocationOrThrow: fe,
          getProgramUniformLocation: me,
          bindTextureToProgramUniformSampler: ge,
          bindCanvasToFramebuffer: function (t, e) {
            Xt(t, e, function () {
              return t.bindFramebuffer(t.FRAMEBUFFER, null);
            }),
              Xt(t, e, function () {
                return t.viewport(0, 0, t.canvas.width, t.canvas.height);
              }),
              Xt(t, e, function () {
                return t.scissor(0, 0, t.canvas.width, t.canvas.height);
              });
          },
          bindColorTextureToFramebuffer: be,
          unbindColorTextureFromFramebuffer: ve,
          validateFramebuffer: ye,
          getFramebufferErrorMessage: xe,
          getBatchDim: Oe,
          getRowsCols: Ee,
          getShapeAs3D: Se,
          getTextureShapeFromLogicalShape: Ie,
          isReshapeFree: Ne,
          getWebGLMaxTextureSize: Re,
          resetMaxTextureSize: function () {
            ee = null;
          },
          resetMaxTexturesInShader: function () {
            ne = null;
          },
          getMaxTexturesInShader: Ae,
          getWebGLDisjointQueryTimerVersion: Te,
          hasExtension: _e,
          isWebGLVersionEnabled: De,
          isCapableOfRenderingToFloatTexture: Fe,
          isDownloadFloatTextureEnabled: Me,
          isWebGLFenceEnabled: $e,
        }),
        Pe = d();
      function Le(t) {
        d().getBool("DEPRECATION_WARNINGS_ENABLED") &&
          console.warn(
            t +
              " You can disable deprecation warnings with tf.disableDeprecationWarnings()."
          );
      }
      function ze(t, e) {
        return Mt.tidy(t, e);
      }
      function We(t) {
        Tt(t).forEach(function (t) {
          return t.dispose();
        });
      }
      function Ve() {
        for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
        d().getBool("IS_TEST") || console.warn.apply(console, t);
      }
      function Ue(t, e) {
        var n = t;
        if (U(t)) return "string" === e ? [] : [t.length];
        if (!Array.isArray(t)) return [];
        for (var r = []; Array.isArray(n) || (U(n) && "string" !== e); )
          r.push(n.length), (n = n[0]);
        return (
          Array.isArray(t) &&
            d().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY") &&
            (function t(e, n, r) {
              if (((r = r || []), Array.isArray(e) || U(e))) {
                S(n.length > 0, function () {
                  return (
                    "Element arr[" +
                    r.join("][") +
                    "] should be a primitive, but is an array of " +
                    e.length +
                    " elements"
                  );
                }),
                  S(e.length === n[0], function () {
                    return (
                      "Element arr[" +
                      r.join("][") +
                      "] should have " +
                      n[0] +
                      " elements, but has " +
                      e.length +
                      " elements"
                    );
                  });
                for (var a = n.slice(1), i = 0; i < e.length; ++i)
                  t(e[i], a, r.concat(i));
              } else
                S(0 === n.length, function () {
                  return (
                    "Element arr[" +
                    r.join("][") +
                    "] is a primitive, but should be an array/TypedArray of " +
                    n[0] +
                    " elements"
                  );
                });
            })(t, r, []),
          r
        );
      }
      function Ge(t, e, n, r) {
        if (
          null != t &&
          (("numeric" !== t && t !== e) || ("numeric" === t && "string" === e))
        )
          throw new Error(
            "Argument '" +
              n +
              "' passed to '" +
              r +
              "' must be " +
              t +
              " tensor, but got " +
              e +
              " tensor"
          );
      }
      function He(t, e, n, r) {
        if ((void 0 === r && (r = "numeric"), t instanceof yt))
          return Ge(r, t.dtype, e, n), t;
        var a = Y(t);
        if (
          ("string" !== a &&
            ["bool", "int32", "float32"].indexOf(r) >= 0 &&
            (a = r),
          Ge(r, a, e, n),
          null == t ||
            (!U(t) &&
              !Array.isArray(t) &&
              "number" != typeof t &&
              "boolean" != typeof t &&
              "string" != typeof t))
        ) {
          var i = null == t ? "null" : t.constructor.name;
          throw new Error(
            "Argument '" +
              e +
              "' passed to '" +
              n +
              "' must be a Tensor or TensorLike, but got '" +
              i +
              "'"
          );
        }
        var o = Ue(t, a);
        U(t) || Array.isArray(t) || (t = [t]);
        var s = "string" !== a ? tt(t, a, d().getBool("DEBUG")) : N(t, [], !0);
        return Mt.makeTensor(s, o, a);
      }
      function qe(t, e, n, r) {
        if ((void 0 === r && (r = "numeric"), !Array.isArray(t)))
          throw new Error(
            "Argument " +
              e +
              " passed to " +
              n +
              " must be a `Tensor[]` or `TensorLike[]`"
          );
        return t.map(function (t, r) {
          return He(t, e + "[" + r + "]", n);
        }, r);
      }
      function Ke(t, e) {
        for (var n = 0; n < t.length; ++n)
          if (t[t.length - n - 1] !== e - 1 - n) return !1;
        return !0;
      }
      function Xe(t, e, n) {
        for (
          var r = t.length + e.length, a = [], i = 0, o = 0, s = 0;
          s < r;
          s++
        )
          -1 === n.indexOf(s) ? a.push(t[i++]) : a.push(e[o++]);
        return a;
      }
      function Ye(t, e) {
        for (var n = [], r = t.length, a = 0; a < r; a++)
          -1 === e.indexOf(a) && n.push(t[a]);
        return [
          n,
          e.map(function (e) {
            return t[e];
          }),
        ];
      }
      function Je(t, e) {
        return Xe(
          t,
          e.map(function (t) {
            return 1;
          }),
          e
        );
      }
      function Qe(t, e, n) {
        S(Ke(e, n), function () {
          return (
            t +
            " supports only inner-most axes for now. Got axes " +
            e +
            " and rank-" +
            n +
            " input."
          );
        });
      }
      function Ze(t, e) {
        if (Ke(t, e)) return null;
        for (var n = [], r = 0; r < e; ++r) -1 === t.indexOf(r) && n.push(r);
        return (
          t.forEach(function (t) {
            return n.push(t);
          }),
          n
        );
      }
      function tn(t) {
        return t
          .map(function (t, e) {
            return [e, t];
          })
          .sort(function (t, e) {
            return t[1] - e[1];
          })
          .map(function (t) {
            return t[0];
          });
      }
      function en(t, e) {
        for (var n = [], r = e - t; r < e; ++r) n.push(r);
        return n;
      }
      function nn(t, e) {
        var n = t[0].length;
        t.forEach(function (t, e) {
          S(t.length === n, function () {
            return (
              "Error in concat" +
              n +
              "D: rank of tensors[" +
              e +
              "] must be the same as the rank of the rest (" +
              n +
              ")"
            );
          });
        }),
          S(e >= 0 && e < n, function () {
            return (
              "Error in concat" +
              n +
              "D: axis must be between 0 and " +
              (n - 1) +
              "."
            );
          });
        var r = t[0];
        t.forEach(function (t, a) {
          for (var i = 0; i < n; i++)
            S(i === e || t[i] === r[i], function () {
              return (
                "Error in concat" +
                n +
                "D: Shape of tensors[" +
                a +
                "] (" +
                t +
                ") does not match the shape of the rest (" +
                r +
                ") along the non-concatenated axis " +
                a +
                "."
              );
            });
        });
      }
      function rn(t, e) {
        for (var n = t[0].slice(), r = 1; r < t.length; r++) n[e] += t[r][e];
        return n;
      }
      function an(t) {
        var e = Object.keys(t);
        if (1 !== e.length)
          throw new Error(
            "Please provide an object with a single key (operation name) mapping to a function. Got an object with " +
              e.length +
              " keys."
          );
        var n = e[0],
          r = t[n];
        n.endsWith("_") && (n = n.substring(0, n.length - 1));
        var a = function () {
          for (var t = [], e = 0; e < arguments.length; e++)
            t[e] = arguments[e];
          Mt.startScope(n);
          try {
            var a = r.apply(void 0, t);
            return (
              a instanceof Promise &&
                console.error("Cannot return a Promise inside of tidy."),
              Mt.endScope(a),
              a
            );
          } catch (t) {
            throw (Mt.endScope(null), t);
          }
        };
        return (
          Object.defineProperty(a, "name", { value: n, configurable: !0 }), a
        );
      }
      Pe.registerFlag("HAS_WEBGL", function () {
        return Pe.getNumber("WEBGL_VERSION") > 0;
      }),
        Pe.registerFlag("WEBGL_VERSION", function () {
          return De(2) ? 2 : De(1) ? 1 : 0;
        }),
        Pe.registerFlag("WEBGL_BUFFER_SUPPORTED", function () {
          return 2 === Pe.get("WEBGL_VERSION");
        }),
        Pe.registerFlag("WEBGL_CPU_FORWARD", function () {
          return !0;
        }),
        Pe.registerFlag("WEBGL_FORCE_F16_TEXTURES", function () {
          return !1;
        }),
        Pe.registerFlag("WEBGL_PACK", function () {
          return Pe.getBool("HAS_WEBGL");
        }),
        Pe.registerFlag("WEBGL_PACK_NORMALIZATION", function () {
          return Pe.getBool("WEBGL_PACK");
        }),
        Pe.registerFlag("WEBGL_PACK_CLIP", function () {
          return Pe.getBool("WEBGL_PACK");
        }),
        Pe.registerFlag("WEBGL_PACK_DEPTHWISECONV", function () {
          return !1;
        }),
        Pe.registerFlag("WEBGL_PACK_BINARY_OPERATIONS", function () {
          return Pe.getBool("WEBGL_PACK");
        }),
        Pe.registerFlag("WEBGL_PACK_UNARY_OPERATIONS", function () {
          return Pe.getBool("WEBGL_PACK");
        }),
        Pe.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS", function () {
          return Pe.getBool("WEBGL_PACK");
        }),
        Pe.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS", function () {
          return Pe.getBool("WEBGL_PACK");
        }),
        Pe.registerFlag("WEBGL_PACK_REDUCE", function () {
          return Pe.getBool("WEBGL_PACK");
        }),
        Pe.registerFlag("WEBGL_LAZILY_UNPACK", function () {
          return Pe.getBool("WEBGL_PACK");
        }),
        Pe.registerFlag("WEBGL_CONV_IM2COL", function () {
          return Pe.getBool("WEBGL_PACK");
        }),
        Pe.registerFlag("WEBGL_MAX_TEXTURE_SIZE", function () {
          return Re(Pe.getNumber("WEBGL_VERSION"));
        }),
        Pe.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER", function () {
          return Ae(Pe.getNumber("WEBGL_VERSION"));
        }),
        Pe.registerFlag(
          "WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",
          function () {
            var t = Pe.getNumber("WEBGL_VERSION");
            return 0 === t ? 0 : Te(t);
          }
        ),
        Pe.registerFlag(
          "WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",
          function () {
            return (
              Pe.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") >
                0 &&
              ((t = navigator.userAgent || navigator.vendor || window.opera),
              !(
                /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(
                  t
                ) ||
                /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(
                  t.substr(0, 4)
                )
              ))
            );
            var t;
          }
        ),
        Pe.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE", function () {
          return Fe(Pe.getNumber("WEBGL_VERSION"));
        }),
        Pe.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED", function () {
          return (
            !Pe.getBool("WEBGL_FORCE_F16_TEXTURES") &&
            Pe.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")
          );
        }),
        Pe.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED", function () {
          return Me(Pe.getNumber("WEBGL_VERSION"));
        }),
        Pe.registerFlag("WEBGL_FENCE_API_ENABLED", function () {
          return $e(Pe.getNumber("WEBGL_VERSION"));
        }),
        Pe.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM", function () {
          return Pe.getBool("WEBGL_RENDER_FLOAT32_ENABLED") ? 4 : 0;
        }),
        (vt = Le);
      var on = an({
          complex_: function (t, e) {
            var n = He(t, "real", "complex"),
              r = He(e, "imag", "complex");
            return (
              I(
                n.shape,
                r.shape,
                "real and imag shapes, " +
                  n.shape +
                  " and " +
                  r.shape +
                  ", must match in call to tf.complex()."
              ),
              Mt.runKernelFunc(
                function (t) {
                  return t.complex(n, r);
                },
                { $real: n, $imag: r }
              )
            );
          },
        }),
        sn = an({
          real_: function (t) {
            var e = He(t, "input", "real");
            return Mt.runKernelFunc(
              function (t) {
                return t.real(e);
              },
              { $input: e }
            );
          },
        }),
        un = an({
          imag_: function (t) {
            var e = He(t, "input", "imag");
            return Mt.runKernelFunc(
              function (t) {
                return t.imag(e);
              },
              { $input: e }
            );
          },
        });
      function cn(t, e, n) {
        return ln(t, e, Ue(t, n), n);
      }
      function ln(t, e, n, r) {
        if ((null == r && (r = Y(t)), "complex64" === r))
          throw new Error(
            "Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag)."
          );
        if (
          !U(t) &&
          !Array.isArray(t) &&
          "number" != typeof t &&
          "boolean" != typeof t &&
          "string" != typeof t
        )
          throw new Error(
            "values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray"
          );
        if (null != e) {
          it(e);
          var a = R(e),
            i = R(n);
          S(a === i, function () {
            return (
              "Based on the provided shape, [" +
              e +
              "], the tensor should have " +
              a +
              " values but has " +
              i
            );
          });
          for (var o = 0; o < n.length; ++o) {
            var s = n[o],
              u = o !== n.length - 1 || s !== R(e.slice(o));
            S(n[o] === e[o] || !u, function () {
              return (
                "Error creating a new Tensor. Inferred shape (" +
                n +
                ") does not match the provided shape (" +
                e +
                "). "
              );
            });
          }
        }
        return (
          U(t) || Array.isArray(t) || (t = [t]),
          (e = e || n),
          (t = "string" !== r ? tt(t, r, d().getBool("DEBUG")) : N(t, [], !0)),
          Mt.makeTensor(t, e, r)
        );
      }
      function hn(t, e) {
        if (((U(t) && "string" !== e) || Array.isArray(t)) && "complex64" !== e)
          throw new Error(
            "Error creating a new Scalar: value must be a primitive (number|boolean|string)"
          );
        if ("string" === e && U(t) && !(t instanceof Uint8Array))
          throw new Error(
            "When making a scalar from encoded string, the value must be `Uint8Array`."
          );
        return ln(t, [], [], e);
      }
      function dn(t, e) {
        k(t);
        var n = Ue(t, e);
        if (1 !== n.length)
          throw new Error("tensor1d() requires values to be a flat/TypedArray");
        return ln(t, null, n, e);
      }
      function pn(t, e, n) {
        if ((k(t), null != e && 2 !== e.length))
          throw new Error("tensor2d() requires shape to have two numbers");
        var r = Ue(t, n);
        if (2 !== r.length && 1 !== r.length)
          throw new Error(
            "tensor2d() requires values to be number[][] or flat/TypedArray"
          );
        if (1 === r.length && null == e)
          throw new Error(
            "tensor2d() requires shape to be provided when `values` are a flat/TypedArray"
          );
        return ln(t, e, r, n);
      }
      function fn(t, e, n) {
        if ((k(t), null != e && 3 !== e.length))
          throw new Error("tensor3d() requires shape to have three numbers");
        var r = Ue(t, n);
        if (3 !== r.length && 1 !== r.length)
          throw new Error(
            "tensor3d() requires values to be number[][][] or flat/TypedArray"
          );
        if (1 === r.length && null == e)
          throw new Error(
            "tensor3d() requires shape to be provided when `values` are a flat array"
          );
        return ln(t, e, r, n);
      }
      function mn(t, e, n) {
        if ((k(t), null != e && 4 !== e.length))
          throw new Error("tensor4d() requires shape to have four numbers");
        var r = Ue(t, n);
        if (4 !== r.length && 1 !== r.length)
          throw new Error(
            "tensor4d() requires values to be number[][][][] or flat/TypedArray"
          );
        if (1 === r.length && null == e)
          throw new Error(
            "tensor4d() requires shape to be provided when `values` are a flat array"
          );
        return ln(t, e, r, n);
      }
      function gn(t, e) {
        if ((void 0 === e && (e = "float32"), "complex64" === e)) {
          var n = gn(t, "float32"),
            r = bn(t, "float32");
          return on(n, r);
        }
        var a = nt(R(t), e);
        return Mt.makeTensor(a, t, e);
      }
      function bn(t, e) {
        if ((void 0 === e && (e = "float32"), "complex64" === e)) {
          var n = bn(t, "float32"),
            r = bn(t, "float32");
          return on(n, r);
        }
        var a = rt(R(t), e);
        return Mt.makeTensor(a, t, e);
      }
      function vn(t, e, n) {
        return Mt.runKernelFunc(function (r) {
          return r.fill(t, e, n);
        }, {});
      }
      function yn(t, e, n, r) {
        if ((void 0 === n && (n = 1), void 0 === r && (r = "float32"), 0 === n))
          throw new Error("Cannot have a step of zero");
        if (t === e || (t < e && n < 0) || (e < t && n > 1)) return bn([0], r);
        var a = rt(Math.abs(Math.ceil((e - t) / n)), r);
        e < t && 1 === n && (n = -1), (a[0] = t);
        for (var i = 1; i < a.length; i++) a[i] = a[i - 1] + n;
        return dn(a, r);
      }
      var xn = an({
          onesLike_: function (t) {
            var e = He(t, "x", "onesLike");
            if ("complex64" === e.dtype) {
              var n = xn(sn(e)),
                r = wn(un(e));
              return on(n, r);
            }
            return Mt.runKernelFunc(
              function (t) {
                return t.onesLike(e);
              },
              { $x: e },
              function (t, e) {
                return {
                  $x: function () {
                    return wn(t);
                  },
                };
              }
            );
          },
        }),
        wn = an({
          zerosLike_: function (t) {
            var e = He(t, "x", "zerosLike");
            return Mt.runKernelFunc(
              function (t) {
                return t.zerosLike(e);
              },
              { $x: e },
              function (t, e) {
                return {
                  $x: function () {
                    return wn(t);
                  },
                };
              }
            );
          },
        }),
        Cn = an({
          concat_: function (t, e) {
            void 0 === e && (e = 0),
              S(t.length >= 1, function () {
                return "Pass at least one tensor to concat";
              });
            var n = qe(t, "tensors", "concat");
            "complex64" === n[0].dtype &&
              n.forEach(function (t) {
                if ("complex64" !== t.dtype)
                  throw new Error(
                    "Cannot concatenate complex64 tensors with a tensor\n          with dtype " +
                      t.dtype +
                      ". "
                  );
              }),
              (e = $(e, n[0].shape)[0]);
            var r = rn(
              n.map(function (t) {
                return t.shape;
              }),
              e
            );
            if (0 === R(r)) return cn([], r);
            if (
              1 ===
              (n = n.filter(function (t) {
                return t.size > 0;
              })).length
            )
              return n[0];
            var a = n.map(function (t) {
              return t.shape;
            });
            nn(a, e);
            var i = n,
              o = { axis: e };
            return Mt.runKernelFunc(
              function (t) {
                return t.concat(n, e);
              },
              i,
              function (t) {
                var n = a.map(function (t) {
                  return t[e];
                });
                return kn(t, n, e).map(function (t) {
                  return function () {
                    return t;
                  };
                });
              },
              "Concat",
              o
            );
          },
        }),
        On = an({
          concat1d_: function (t) {
            return Cn(t, 0);
          },
        }),
        En = an({
          concat2d_: function (t, e) {
            return Cn(t, e);
          },
        }),
        Sn = an({
          concat3d_: function (t, e) {
            return Cn(t, e);
          },
        }),
        In = an({
          concat4d_: function (t, e) {
            return Cn(t, e);
          },
        }),
        kn = an({
          split_: function (t, e, n) {
            void 0 === n && (n = 0);
            var r,
              a = He(t, "x", "split");
            return (
              (n = $(n, a.shape)[0]),
              "number" == typeof e
                ? (S(a.shape[n] % e == 0, function () {
                    return "Number of splits must evenly divide the axis.";
                  }),
                  (r = new Array(e).fill(a.shape[n] / e)))
                : (S(
                    a.shape[n] ===
                      e.reduce(function (t, e) {
                        return t + e;
                      }),
                    function () {
                      return "The sum of sizes must match the size of the axis dimension.";
                    }
                  ),
                  (r = e)),
              Mt.runKernelFunc(
                function (t) {
                  return t.split(a, r, n);
                },
                { $x: a },
                function (t) {
                  return {
                    $x: function () {
                      return Cn(t, n);
                    },
                  };
                }
              )
            );
          },
        });
      function Nn(t, e) {
        return t((e = { exports: {} }), e.exports), e.exports;
      }
      "undefined" != typeof globalThis
        ? globalThis
        : "undefined" != typeof window
        ? window
        : void 0 !== t || ("undefined" != typeof self && self);
      var Rn = Nn(function (t) {
          !(function (t, e, n) {
            function r(t) {
              var e,
                n = this,
                r =
                  ((e = 4022871197),
                  function (t) {
                    t = t.toString();
                    for (var n = 0; n < t.length; n++) {
                      var r = 0.02519603282416938 * (e += t.charCodeAt(n));
                      (r -= e = r >>> 0),
                        (e = (r *= e) >>> 0),
                        (e += 4294967296 * (r -= e));
                    }
                    return 2.3283064365386963e-10 * (e >>> 0);
                  });
              (n.next = function () {
                var t = 2091639 * n.s0 + 2.3283064365386963e-10 * n.c;
                return (n.s0 = n.s1), (n.s1 = n.s2), (n.s2 = t - (n.c = 0 | t));
              }),
                (n.c = 1),
                (n.s0 = r(" ")),
                (n.s1 = r(" ")),
                (n.s2 = r(" ")),
                (n.s0 -= r(t)),
                n.s0 < 0 && (n.s0 += 1),
                (n.s1 -= r(t)),
                n.s1 < 0 && (n.s1 += 1),
                (n.s2 -= r(t)),
                n.s2 < 0 && (n.s2 += 1),
                (r = null);
            }
            function a(t, e) {
              return (
                (e.c = t.c), (e.s0 = t.s0), (e.s1 = t.s1), (e.s2 = t.s2), e
              );
            }
            function i(t, e) {
              var n = new r(t),
                i = e && e.state,
                o = n.next;
              return (
                (o.int32 = function () {
                  return (4294967296 * n.next()) | 0;
                }),
                (o.double = function () {
                  return o() + 11102230246251565e-32 * ((2097152 * o()) | 0);
                }),
                (o.quick = o),
                i &&
                  ("object" == typeof i && a(i, n),
                  (o.state = function () {
                    return a(n, {});
                  })),
                o
              );
            }
            e && e.exports ? (e.exports = i) : (this.alea = i);
          })(0, t);
        }),
        An = Nn(function (t) {
          !(function (t, e, n) {
            function r(t) {
              var e = this,
                n = "";
              (e.x = 0),
                (e.y = 0),
                (e.z = 0),
                (e.w = 0),
                (e.next = function () {
                  var t = e.x ^ (e.x << 11);
                  return (
                    (e.x = e.y),
                    (e.y = e.z),
                    (e.z = e.w),
                    (e.w ^= (e.w >>> 19) ^ t ^ (t >>> 8))
                  );
                }),
                t === (0 | t) ? (e.x = t) : (n += t);
              for (var r = 0; r < n.length + 64; r++)
                (e.x ^= 0 | n.charCodeAt(r)), e.next();
            }
            function a(t, e) {
              return (e.x = t.x), (e.y = t.y), (e.z = t.z), (e.w = t.w), e;
            }
            function i(t, e) {
              var n = new r(t),
                i = e && e.state,
                o = function () {
                  return (n.next() >>> 0) / 4294967296;
                };
              return (
                (o.double = function () {
                  do {
                    var t =
                      ((n.next() >>> 11) + (n.next() >>> 0) / 4294967296) /
                      (1 << 21);
                  } while (0 === t);
                  return t;
                }),
                (o.int32 = n.next),
                (o.quick = o),
                i &&
                  ("object" == typeof i && a(i, n),
                  (o.state = function () {
                    return a(n, {});
                  })),
                o
              );
            }
            e && e.exports ? (e.exports = i) : (this.xor128 = i);
          })(0, t);
        }),
        Tn = Nn(function (t) {
          !(function (t, e, n) {
            function r(t) {
              var e = this,
                n = "";
              (e.next = function () {
                var t = e.x ^ (e.x >>> 2);
                return (
                  (e.x = e.y),
                  (e.y = e.z),
                  (e.z = e.w),
                  (e.w = e.v),
                  ((e.d = (e.d + 362437) | 0) +
                    (e.v = e.v ^ (e.v << 4) ^ t ^ (t << 1))) |
                    0
                );
              }),
                (e.x = 0),
                (e.y = 0),
                (e.z = 0),
                (e.w = 0),
                (e.v = 0),
                t === (0 | t) ? (e.x = t) : (n += t);
              for (var r = 0; r < n.length + 64; r++)
                (e.x ^= 0 | n.charCodeAt(r)),
                  r == n.length && (e.d = (e.x << 10) ^ (e.x >>> 4)),
                  e.next();
            }
            function a(t, e) {
              return (
                (e.x = t.x),
                (e.y = t.y),
                (e.z = t.z),
                (e.w = t.w),
                (e.v = t.v),
                (e.d = t.d),
                e
              );
            }
            function i(t, e) {
              var n = new r(t),
                i = e && e.state,
                o = function () {
                  return (n.next() >>> 0) / 4294967296;
                };
              return (
                (o.double = function () {
                  do {
                    var t =
                      ((n.next() >>> 11) + (n.next() >>> 0) / 4294967296) /
                      (1 << 21);
                  } while (0 === t);
                  return t;
                }),
                (o.int32 = n.next),
                (o.quick = o),
                i &&
                  ("object" == typeof i && a(i, n),
                  (o.state = function () {
                    return a(n, {});
                  })),
                o
              );
            }
            e && e.exports ? (e.exports = i) : (this.xorwow = i);
          })(0, t);
        }),
        _n = Nn(function (t) {
          !(function (t, e, n) {
            function r(t) {
              var e = this;
              (e.next = function () {
                var t,
                  n,
                  r = e.x,
                  a = e.i;
                return (
                  (t = r[a]),
                  (n = (t ^= t >>> 7) ^ (t << 24)),
                  (n ^= (t = r[(a + 1) & 7]) ^ (t >>> 10)),
                  (n ^= (t = r[(a + 3) & 7]) ^ (t >>> 3)),
                  (n ^= (t = r[(a + 4) & 7]) ^ (t << 7)),
                  (t = r[(a + 7) & 7]),
                  (n ^= (t ^= t << 13) ^ (t << 9)),
                  (r[a] = n),
                  (e.i = (a + 1) & 7),
                  n
                );
              }),
                (function (t, e) {
                  var n,
                    r = [];
                  if (e === (0 | e)) r[0] = e;
                  else
                    for (e = "" + e, n = 0; n < e.length; ++n)
                      r[7 & n] =
                        (r[7 & n] << 15) ^
                        ((e.charCodeAt(n) + r[(n + 1) & 7]) << 13);
                  for (; r.length < 8; ) r.push(0);
                  for (n = 0; n < 8 && 0 === r[n]; ++n);
                  for (
                    8 == n ? (r[7] = -1) : r[n], t.x = r, t.i = 0, n = 256;
                    n > 0;
                    --n
                  )
                    t.next();
                })(e, t);
            }
            function a(t, e) {
              return (e.x = t.x.slice()), (e.i = t.i), e;
            }
            function i(t, e) {
              null == t && (t = +new Date());
              var n = new r(t),
                i = e && e.state,
                o = function () {
                  return (n.next() >>> 0) / 4294967296;
                };
              return (
                (o.double = function () {
                  do {
                    var t =
                      ((n.next() >>> 11) + (n.next() >>> 0) / 4294967296) /
                      (1 << 21);
                  } while (0 === t);
                  return t;
                }),
                (o.int32 = n.next),
                (o.quick = o),
                i &&
                  (i.x && a(i, n),
                  (o.state = function () {
                    return a(n, {});
                  })),
                o
              );
            }
            e && e.exports ? (e.exports = i) : (this.xorshift7 = i);
          })(0, t);
        }),
        Dn = Nn(function (t) {
          !(function (t, e, n) {
            function r(t) {
              var e = this;
              (e.next = function () {
                var t,
                  n,
                  r = e.w,
                  a = e.X,
                  i = e.i;
                return (
                  (e.w = r = (r + 1640531527) | 0),
                  (n = a[(i + 34) & 127]),
                  (t = a[(i = (i + 1) & 127)]),
                  (n ^= n << 13),
                  (t ^= t << 17),
                  (n ^= n >>> 15),
                  (t ^= t >>> 12),
                  (n = a[i] = n ^ t),
                  (e.i = i),
                  (n + (r ^ (r >>> 16))) | 0
                );
              }),
                (function (t, e) {
                  var n,
                    r,
                    a,
                    i,
                    o,
                    s = [],
                    u = 128;
                  for (
                    e === (0 | e)
                      ? ((r = e), (e = null))
                      : ((e += "\0"), (r = 0), (u = Math.max(u, e.length))),
                      a = 0,
                      i = -32;
                    i < u;
                    ++i
                  )
                    e && (r ^= e.charCodeAt((i + 32) % e.length)),
                      0 === i && (o = r),
                      (r ^= r << 10),
                      (r ^= r >>> 15),
                      (r ^= r << 4),
                      (r ^= r >>> 13),
                      i >= 0 &&
                        ((o = (o + 1640531527) | 0),
                        (a = 0 == (n = s[127 & i] ^= r + o) ? a + 1 : 0));
                  for (
                    a >= 128 && (s[127 & ((e && e.length) || 0)] = -1),
                      a = 127,
                      i = 512;
                    i > 0;
                    --i
                  )
                    (r = s[(a + 34) & 127]),
                      (n = s[(a = (a + 1) & 127)]),
                      (r ^= r << 13),
                      (n ^= n << 17),
                      (r ^= r >>> 15),
                      (n ^= n >>> 12),
                      (s[a] = r ^ n);
                  (t.w = o), (t.X = s), (t.i = a);
                })(e, t);
            }
            function a(t, e) {
              return (e.i = t.i), (e.w = t.w), (e.X = t.X.slice()), e;
            }
            function i(t, e) {
              null == t && (t = +new Date());
              var n = new r(t),
                i = e && e.state,
                o = function () {
                  return (n.next() >>> 0) / 4294967296;
                };
              return (
                (o.double = function () {
                  do {
                    var t =
                      ((n.next() >>> 11) + (n.next() >>> 0) / 4294967296) /
                      (1 << 21);
                  } while (0 === t);
                  return t;
                }),
                (o.int32 = n.next),
                (o.quick = o),
                i &&
                  (i.X && a(i, n),
                  (o.state = function () {
                    return a(n, {});
                  })),
                o
              );
            }
            e && e.exports ? (e.exports = i) : (this.xor4096 = i);
          })(0, t);
        }),
        Fn = Nn(function (t) {
          !(function (t, e, n) {
            function r(t) {
              var e = this,
                n = "";
              (e.next = function () {
                var t = e.b,
                  n = e.c,
                  r = e.d,
                  a = e.a;
                return (
                  (t = (t << 25) ^ (t >>> 7) ^ n),
                  (n = (n - r) | 0),
                  (r = (r << 24) ^ (r >>> 8) ^ a),
                  (a = (a - t) | 0),
                  (e.b = t = (t << 20) ^ (t >>> 12) ^ n),
                  (e.c = n = (n - r) | 0),
                  (e.d = (r << 16) ^ (n >>> 16) ^ a),
                  (e.a = (a - t) | 0)
                );
              }),
                (e.a = 0),
                (e.b = 0),
                (e.c = -1640531527),
                (e.d = 1367130551),
                t === Math.floor(t)
                  ? ((e.a = (t / 4294967296) | 0), (e.b = 0 | t))
                  : (n += t);
              for (var r = 0; r < n.length + 20; r++)
                (e.b ^= 0 | n.charCodeAt(r)), e.next();
            }
            function a(t, e) {
              return (e.a = t.a), (e.b = t.b), (e.c = t.c), (e.d = t.d), e;
            }
            function i(t, e) {
              var n = new r(t),
                i = e && e.state,
                o = function () {
                  return (n.next() >>> 0) / 4294967296;
                };
              return (
                (o.double = function () {
                  do {
                    var t =
                      ((n.next() >>> 11) + (n.next() >>> 0) / 4294967296) /
                      (1 << 21);
                  } while (0 === t);
                  return t;
                }),
                (o.int32 = n.next),
                (o.quick = o),
                i &&
                  ("object" == typeof i && a(i, n),
                  (o.state = function () {
                    return a(n, {});
                  })),
                o
              );
            }
            e && e.exports ? (e.exports = i) : (this.tychei = i);
          })(0, t);
        }),
        Mn = Nn(function (t) {
          !(function (e, r) {
            var a,
              i = this,
              o = 256,
              s = "random",
              u = r.pow(o, 6),
              c = r.pow(2, 52),
              l = 2 * c,
              h = 255;
            function d(t, n, h) {
              var d = [],
                b = m(
                  (function t(e, n) {
                    var r,
                      a = [],
                      i = typeof e;
                    if (n && "object" == i)
                      for (r in e)
                        try {
                          a.push(t(e[r], n - 1));
                        } catch (t) {}
                    return a.length ? a : "string" == i ? e : e + "\0";
                  })(
                    (n = 1 == n ? { entropy: !0 } : n || {}).entropy
                      ? [t, g(e)]
                      : null == t
                      ? (function () {
                          try {
                            var t;
                            return (
                              a && (t = a.randomBytes)
                                ? (t = t(o))
                                : ((t = new Uint8Array(o)),
                                  (i.crypto || i.msCrypto).getRandomValues(t)),
                              g(t)
                            );
                          } catch (t) {
                            var n = i.navigator,
                              r = n && n.plugins;
                            return [+new Date(), i, r, i.screen, g(e)];
                          }
                        })()
                      : t,
                    3
                  ),
                  d
                ),
                v = new p(d),
                y = function () {
                  for (var t = v.g(6), e = u, n = 0; t < c; )
                    (t = (t + n) * o), (e *= o), (n = v.g(1));
                  for (; t >= l; ) (t /= 2), (e /= 2), (n >>>= 1);
                  return (t + n) / e;
                };
              return (
                (y.int32 = function () {
                  return 0 | v.g(4);
                }),
                (y.quick = function () {
                  return v.g(4) / 4294967296;
                }),
                (y.double = y),
                m(g(v.S), e),
                (
                  n.pass ||
                  h ||
                  function (t, e, n, a) {
                    return (
                      a &&
                        (a.S && f(a, v),
                        (t.state = function () {
                          return f(v, {});
                        })),
                      n ? ((r[s] = t), e) : t
                    );
                  }
                )(y, b, "global" in n ? n.global : this == r, n.state)
              );
            }
            function p(t) {
              var e,
                n = t.length,
                r = this,
                a = 0,
                i = (r.i = r.j = 0),
                s = (r.S = []);
              for (n || (t = [n++]); a < o; ) s[a] = a++;
              for (a = 0; a < o; a++)
                (s[a] = s[(i = h & (i + t[a % n] + (e = s[a])))]), (s[i] = e);
              (r.g = function (t) {
                for (var e, n = 0, a = r.i, i = r.j, s = r.S; t--; )
                  (e = s[(a = h & (a + 1))]),
                    (n =
                      n * o +
                      s[h & ((s[a] = s[(i = h & (i + e))]) + (s[i] = e))]);
                return (r.i = a), (r.j = i), n;
              })(o);
            }
            function f(t, e) {
              return (e.i = t.i), (e.j = t.j), (e.S = t.S.slice()), e;
            }
            function m(t, e) {
              for (var n, r = t + "", a = 0; a < r.length; )
                e[h & a] = h & ((n ^= 19 * e[h & a]) + r.charCodeAt(a++));
              return g(e);
            }
            function g(t) {
              return String.fromCharCode.apply(0, t);
            }
            if (((r.seedrandom = d), m(r.random(), e), t.exports)) {
              t.exports = d;
              try {
                a = n(63);
              } catch (t) {}
            }
          })([], Math);
        });
      (Mn.alea = Rn),
        (Mn.xor128 = An),
        (Mn.xorwow = Tn),
        (Mn.xorshift7 = _n),
        (Mn.xor4096 = Dn),
        (Mn.tychei = Fn);
      var jn = Mn.alea,
        $n = (function () {
          function t(t, e, n, r, a) {
            (this.mean = t),
              (this.stdDev = e),
              (this.dtype = n),
              (this.nextVal = NaN),
              (this.truncated = r),
              this.truncated &&
                ((this.upper = this.mean + 2 * this.stdDev),
                (this.lower = this.mean - 2 * this.stdDev));
            var i = a || Math.random();
            this.random = jn(i.toString());
          }
          return (
            (t.prototype.nextValue = function () {
              if (!isNaN(this.nextVal)) {
                var t = this.nextVal;
                return (this.nextVal = NaN), t;
              }
              for (var e, n, r = !1; !r; ) {
                var a = void 0,
                  i = void 0,
                  o = void 0;
                do {
                  o =
                    (a = 2 * this.random() - 1) * a +
                    (i = 2 * this.random() - 1) * i;
                } while (o >= 1 || 0 === o);
                var s = Math.sqrt((-2 * Math.log(o)) / o);
                (e = this.mean + this.stdDev * a * s),
                  (n = this.mean + this.stdDev * i * s),
                  (this.truncated && !this.isValidTruncated(e)) || (r = !0);
              }
              return (
                (this.truncated && !this.isValidTruncated(n)) ||
                  (this.nextVal = this.convertValue(n)),
                this.convertValue(e)
              );
            }),
            (t.prototype.convertValue = function (t) {
              return null == this.dtype || "float32" === this.dtype
                ? t
                : Math.round(t);
            }),
            (t.prototype.isValidTruncated = function (t) {
              return t <= this.upper && t >= this.lower;
            }),
            t
          );
        })(),
        Bn = (function () {
          function t(t, e, n, r) {
            (this.alpha = t), (this.beta = 1 / e), (this.dtype = n);
            var a = r || Math.random();
            (this.randu = jn(a.toString())),
              (this.randn = new $n(0, 1, n, !1, this.randu())),
              (this.d = t < 1 ? t + 2 / 3 : t - 1 / 3),
              (this.c = 1 / Math.sqrt(9 * this.d));
          }
          return (
            (t.prototype.nextValue = function () {
              for (var t, e, n, r, a, i; ; ) {
                do {
                  (r = this.randn.nextValue()), (i = 1 + this.c * r);
                } while (i <= 0);
                if (
                  ((i *= i * i),
                  (e = 1 - 0.331 * (t = r * r) * t),
                  (n = 0.5 * t + this.d * (1 - i + Math.log(i))),
                  (a = this.randu()) < e || Math.log(a) < n)
                )
                  break;
              }
              return (
                (i = (1 / this.beta) * this.d * i),
                this.alpha < 1 && (i *= Math.pow(this.randu(), 1 / this.alpha)),
                this.convertValue(i)
              );
            }),
            (t.prototype.convertValue = function (t) {
              return "float32" === this.dtype ? t : Math.round(t);
            }),
            t
          );
        })(),
        Pn = (function () {
          function t(t, e, n, r) {
            var a = this;
            if (
              (void 0 === t && (t = 0),
              void 0 === e && (e = 1),
              (this.canReturnFloat = function () {
                return null == a.dtype || "float32" === a.dtype;
              }),
              (this.min = t),
              (this.range = e - t),
              (this.dtype = n),
              null == r && (r = Math.random()),
              "number" == typeof r && (r = r.toString()),
              !this.canReturnFloat() && this.range <= 1)
            )
              throw new Error(
                "The difference between " +
                  t +
                  " - " +
                  e +
                  " <= 1 and dtype is not float"
              );
            this.random = jn(r);
          }
          return (
            (t.prototype.convertValue = function (t) {
              return this.canReturnFloat() ? t : Math.round(t);
            }),
            (t.prototype.nextValue = function () {
              return this.convertValue(this.min + this.range * this.random());
            }),
            t
          );
        })();
      function Ln(t, e, n) {
        return (
          void 0 === e && (e = "float32"),
          (e = e || "float32"),
          it(t),
          new mt(t, e, n)
        );
      }
      var zn = an({
          batchToSpaceND_: function (t, e, n) {
            var r = He(t, "x", "batchToSpaceND"),
              a = e.reduce(function (t, e) {
                return t * e;
              });
            return (
              S(r.rank >= 1 + e.length, function () {
                return (
                  "input rank is " +
                  r.rank +
                  " but should be > than blockShape.length " +
                  e.length
                );
              }),
              S(n.length === e.length, function () {
                return (
                  "crops.length is " +
                  n.length +
                  " but should be equal to blockShape.length  " +
                  e.length
                );
              }),
              S(r.shape[0] % a == 0, function () {
                return (
                  "input tensor batch is " +
                  r.shape[0] +
                  " but is not divisible by the product of the elements of blockShape " +
                  e.join(" * ") +
                  " === " +
                  a
                );
              }),
              Mt.runKernelFunc(
                function (t) {
                  return t.batchToSpaceND(r, e, n);
                },
                { $x: r },
                function (t) {
                  return {
                    $x: function () {
                      return t.spaceToBatchND(e, n);
                    },
                  };
                }
              )
            );
          },
        }),
        Wn = an({
          broadcastTo_: function (t, e) {
            var n = He(t, "broadcastTo", "x"),
              r = n.shape;
            if (
              e.some(function (t) {
                return !(t > 0) || t % 1 != 0;
              })
            )
              throw new Error(
                "broadcastTo(): Invalid broadcast shape [" + e + "]."
              );
            if (e.length < n.rank)
              throw new Error(
                "broadcastTo(): shape.length=" +
                  e.length +
                  " < input.rank=" +
                  n.rank +
                  "."
              );
            if (e.length > n.rank) {
              for (var a = n.shape.slice(); a.length < e.length; ) a.unshift(1);
              n = n.reshape(a);
            }
            for (var i = Array.from(e), o = e.length - 1; o >= 0; o--)
              if (n.shape[o] === e[o]) i[o] = 1;
              else if (1 !== n.shape[o])
                throw new Error(
                  "broadcastTo(): [" +
                    r +
                    "] cannot be broadcast to [" +
                    e +
                    "]."
                );
            var s = i
              .map(function (t, e) {
                return t > 1 ? e : -1;
              })
              .filter(function (t) {
                return t >= 0;
              });
            return 0 === s.length
              ? n.clone()
              : Mt.runKernelFunc(
                  function (t) {
                    return t.tile(n, i);
                  },
                  { input: n },
                  function (t) {
                    return {
                      input: function () {
                        return t.sum(s, !0);
                      },
                    };
                  }
                );
          },
        }),
        Vn = an({
          cast_: function (t, e) {
            var n = He(t, "x", "cast");
            if (!W(e)) throw new Error("Failed to cast to unknown dtype " + e);
            if (
              ("string" === e && "string" !== n.dtype) ||
              ("string" !== e && "string" === n.dtype)
            )
              throw new Error("Only strings can be casted to strings");
            var r = { dtype: e };
            return Mt.runKernelFunc(
              function (t) {
                return t.cast(n, e);
              },
              { x: n },
              function (t) {
                return {
                  x: function () {
                    return t.clone();
                  },
                };
              },
              "Cast",
              r
            );
          },
        }),
        Un = an({
          clone_: function (t) {
            var e = He(t, "x", "clone", null);
            return Mt.runKernelFunc(
              function () {
                return Mt.makeTensorFromDataId(e.dataId, e.shape, e.dtype);
              },
              { $x: e },
              function (t) {
                return {
                  $x: function () {
                    return t.toFloat();
                  },
                };
              }
            );
          },
        }),
        Gn = an({
          cumsum_: function (t, e, n, r) {
            void 0 === e && (e = 0),
              void 0 === n && (n = !1),
              void 0 === r && (r = !1);
            var a = He(t, "x", "cumsum"),
              i = Ze([(e |= 0)], a.rank),
              o = a;
            null != i && (o = a.transpose(i));
            var s = en(1, a.rank)[0],
              u = Mt.runKernelFunc(
                function (t) {
                  return t.cumsum(o, s, n, r);
                },
                { permutedX: o },
                function (t) {
                  return {
                    permutedX: function () {
                      return t.cumsum(e, n, !r);
                    },
                  };
                }
              );
            return null != i && (u = u.transpose(i)), u;
          },
        }),
        Hn = an({
          depthToSpace_: function (t, e, n) {
            void 0 === n && (n = "NHWC");
            var r = He(t, "x", "depthToSpace"),
              a = "NHWC" === n ? r.shape[1] : r.shape[2],
              i = "NHWC" === n ? r.shape[2] : r.shape[3],
              o = "NHWC" === n ? r.shape[3] : r.shape[1];
            return (
              S(a * e >= 0, function () {
                return (
                  "Negative dimension size caused by overflow when multiplying\n      " +
                  a +
                  " and " +
                  e +
                  "  for depthToSpace with input shape\n      " +
                  r.shape
                );
              }),
              S(i * e >= 0, function () {
                return (
                  "Negative dimension size caused by overflow when multiplying\n      " +
                  i +
                  " and " +
                  e +
                  " for depthToSpace with input shape\n          " +
                  r.shape
                );
              }),
              S(o % (e * e) == 0, function () {
                return (
                  "Dimension size must be evenly divisible by " +
                  e * e +
                  " but is " +
                  o +
                  " for depthToSpace with input shape " +
                  r.shape
                );
              }),
              Mt.runKernelFunc(
                function (t) {
                  return t.depthToSpace(r, e, n);
                },
                { $x: r }
              )
            );
          },
        }),
        qn = an({
          expandDims_: function (t, e) {
            void 0 === e && (e = 0);
            var n = He(t, "x", "expandDims", null);
            S(e <= n.rank, function () {
              return "Axis must be <= rank of the tensor";
            });
            var r = n.shape.slice();
            return (
              e < 0 &&
                (S(-(n.rank + 1) <= e, function () {
                  return (
                    "Axis must be in the interval [" +
                    -(n.rank + 1) +
                    ", " +
                    n.rank +
                    "]"
                  );
                }),
                (e = n.rank + e + 1)),
              r.splice(e, 0, 1),
              or(n, r)
            );
          },
        }),
        Kn = an({
          eye_: function (t, e, n, r) {
            void 0 === r && (r = "float32"), null == e && (e = t);
            for (var a = Ln([t, e], r), i = t <= e ? t : e, o = 0; o < i; ++o)
              a.set(1, o, o);
            var s = a.toTensor().as2D(t, e);
            if (null == n) return s;
            if (1 === n.length) return lr(qn(s, 0), [n[0], 1, 1]);
            if (2 === n.length) return lr(qn(qn(s, 0), 0), [n[0], n[1], 1, 1]);
            if (3 === n.length)
              return lr(qn(qn(qn(s, 0), 0), 0), [n[0], n[1], n[2], 1, 1]);
            throw new Error(
              "eye() currently supports only 1D and 2D batchShapes, but received " +
                n.length +
                "D."
            );
          },
        }),
        Xn = an({
          multinomial_: function (t, e, n, r) {
            void 0 === r && (r = !1);
            var a = He(t, "logits", "multinomial"),
              i = a.size,
              o = a.rank;
            if (i < 2)
              throw new Error(
                "Error in multinomial: you need at least 2 outcomes, but got " +
                  i +
                  "."
              );
            if (o > 2)
              throw new Error(
                "Rank of probabilities must be 1 or 2, but is " + o
              );
            n = n || Math.random();
            var s = 1 === o ? a.as2D(1, -1) : a,
              u = Mt.runKernelFunc(
                function (t) {
                  return t.multinomial(s, r, e, n);
                },
                { logits2D: s }
              );
            return 1 === o ? u.as1D() : u;
          },
        }),
        Yn = an({
          oneHot_: function (t, e, n, r) {
            if ((void 0 === n && (n = 1), void 0 === r && (r = 0), e < 2))
              throw new Error(
                "Error in oneHot: depth must be >=2, but it is " + e
              );
            var a = He(t, "indices", "oneHot", "int32"),
              i = a.shape.concat([e]);
            return (
              (a = a.flatten()),
              Mt.runKernelFunc(
                function (t) {
                  return t.oneHot(a, e, n, r);
                },
                { $indices: a },
                function (t) {
                  return {
                    $indices: function () {
                      return bn(a.shape, "float32");
                    },
                  };
                }
              ).reshape(i)
            );
          },
        }),
        Jn = an({
          pad_: function (t, e, n) {
            void 0 === n && (n = 0);
            var r = He(t, "x", "pad");
            if (0 === r.rank)
              throw new Error(
                "pad(scalar) is not defined. Pass non-scalar to pad"
              );
            var a = { paddings: e, constantValue: n };
            return Mt.runKernelFunc(
              function (t) {
                return t.pad(r, e, n);
              },
              { x: r },
              function (t) {
                var n = e.map(function (t) {
                  return t[0];
                });
                return {
                  x: function () {
                    return t.slice(n, r.shape);
                  },
                };
              },
              "PadV2",
              a
            );
          },
        }),
        Qn = an({
          pad1d_: function (t, e, n) {
            return (
              void 0 === n && (n = 0),
              S(2 === e.length, function () {
                return "Invalid number of paddings. Must be length of 2.";
              }),
              Jn(t, [e], n)
            );
          },
        }),
        Zn = an({
          pad2d_: function (t, e, n) {
            return (
              void 0 === n && (n = 0),
              S(
                2 === e.length && 2 === e[0].length && 2 === e[1].length,
                function () {
                  return "Invalid number of paddings. Must be length of 2 each.";
                }
              ),
              Jn(t, e, n)
            );
          },
        }),
        tr = an({
          pad3d_: function (t, e, n) {
            return (
              void 0 === n && (n = 0),
              S(
                3 === e.length &&
                  2 === e[0].length &&
                  2 === e[1].length &&
                  2 === e[2].length,
                function () {
                  return "Invalid number of paddings. Must be length of 2 each.";
                }
              ),
              Jn(t, e, n)
            );
          },
        }),
        er = an({
          pad4d_: function (t, e, n) {
            return (
              void 0 === n && (n = 0),
              S(
                4 === e.length &&
                  2 === e[0].length &&
                  2 === e[1].length &&
                  2 === e[2].length &&
                  2 === e[3].length,
                function () {
                  return "Invalid number of paddings. Must be length of 2 each.";
                }
              ),
              Jn(t, e, n)
            );
          },
        }),
        nr = an({
          rand_: function (t, e, n) {
            var r = R(t),
              a = null;
            if (null == n || "float32" === n) a = new Float32Array(r);
            else if ("int32" === n) a = new Int32Array(r);
            else {
              if ("bool" !== n) throw new Error("Unknown data type " + n);
              a = new Uint8Array(r);
            }
            for (var i = 0; i < r; i++) a[i] = e();
            return Mt.makeTensor(a, t, n);
          },
        }),
        rr = an({
          randomNormal_: function (t, e, n, r, a) {
            if (
              (void 0 === e && (e = 0),
              void 0 === n && (n = 1),
              null != r && "bool" === r)
            )
              throw new Error("Unsupported data type " + r);
            for (
              var i = new $n(e, n, r, !1, a), o = Ln(t, r), s = 0;
              s < o.values.length;
              s++
            )
              o.values[s] = i.nextValue();
            return o.toTensor();
          },
        }),
        ar = an({
          randomGamma_: function (t, e, n, r, a) {
            if (
              (void 0 === n && (n = 1),
              void 0 === r && (r = "float32"),
              null == n && (n = 1),
              null == r && (r = "float32"),
              "float32" !== r && "int32" !== r)
            )
              throw new Error("Unsupported data type " + r);
            for (
              var i = new Bn(e, n, r, a), o = Ln(t, r), s = 0;
              s < o.values.length;
              s++
            )
              o.values[s] = i.nextValue();
            return o.toTensor();
          },
        }),
        ir = an({
          randomUniform_: function (t, e, n, r, a) {
            void 0 === e && (e = 0),
              void 0 === n && (n = 1),
              void 0 === r && (r = "float32");
            for (
              var i = Ln(t, r), o = new Pn(e, n, null, a), s = 0;
              s < i.values.length;
              s++
            )
              i.values[s] = o.nextValue();
            return i.toTensor();
          },
        }),
        or = an({
          reshape_: function (t, e) {
            var n = He(t, "x", "reshape", null);
            (e = j(e, n.size)),
              S(n.size === R(e), function () {
                return "new shape and old shape must have the same number of elements.";
              });
            var r = { shape: e };
            return Mt.runKernelFunc(
              function (t) {
                return t.reshape(n, e);
              },
              { x: n },
              function (t) {
                return {
                  x: function () {
                    return t.reshape(n.shape);
                  },
                };
              },
              "Reshape",
              r
            );
          },
        }),
        sr = an({
          spaceToBatchND_: function (t, e, n) {
            var r = He(t, "x", "spaceToBatchND");
            return (
              S(r.rank >= 1 + e.length, function () {
                return (
                  "input rank " +
                  r.rank +
                  " should be > than [blockShape] " +
                  e.length
                );
              }),
              S(n.length === e.length, function () {
                return (
                  "paddings.shape[0] " +
                  n.length +
                  " must be equal to [blockShape] " +
                  e.length
                );
              }),
              S(
                r.shape.reduce(function (t, r, a) {
                  return a > 0 && a <= e.length
                    ? t && (r + n[a - 1][0] + n[a - 1][1]) % e[a - 1] == 0
                    : t;
                }, !0),
                function () {
                  return (
                    "input spatial dimensions " +
                    r.shape.slice(1) +
                    " with paddings " +
                    n.toString() +
                    " must be divisible by blockShapes " +
                    e.toString()
                  );
                }
              ),
              Mt.runKernelFunc(
                function (t) {
                  return t.spaceToBatchND(r, e, n);
                },
                { $x: r },
                function (t) {
                  return {
                    $x: function () {
                      return t.batchToSpaceND(e, n);
                    },
                  };
                }
              )
            );
          },
        }),
        ur = an({
          squeeze_: function (t, e) {
            var n = He(t, "x", "squeeze");
            return or(n, B(n.shape, e).newShape);
          },
        }),
        cr = an({
          stack_: function (t, e) {
            void 0 === e && (e = 0);
            var n = qe(t, "tensors", "stack");
            if (
              (S(n.length >= 1, function () {
                return "Pass at least one tensor to tf.stack";
              }),
              1 === n.length)
            )
              return n[0].expandDims(e);
            var r = n[0].rank,
              a = n[0].shape,
              i = n[0].dtype;
            S(e <= r, function () {
              return "Axis must be <= rank of the tensor";
            }),
              n.forEach(function (t) {
                I(
                  a,
                  t.shape,
                  "All tensors passed to stack must have matching shapes"
                );
              }),
              n.forEach(function (t) {
                S(i === t.dtype, function () {
                  return "All tensors passed to stack must have matching dtypes";
                });
              });
            var o = n.map(function (t) {
              return t.expandDims(e);
            });
            return Cn(o, e);
          },
        }),
        lr = an({
          tile_: function (t, e) {
            var n = He(t, "x", "tile", null);
            S(n.rank === e.length, function () {
              return (
                "Error in transpose: rank of input " +
                n.rank +
                " must match length of reps " +
                e +
                "."
              );
            });
            var r = [n],
              a = { reps: e };
            return Mt.runKernelFunc(
              function (t, r) {
                var a = t.tile(n, e);
                return r([n]), a;
              },
              { x: n },
              function (t, n) {
                var r = n[0];
                return {
                  x: function () {
                    var n = wn(r);
                    if (1 === r.rank)
                      for (var a = 0; a < e[0]; ++a)
                        n = n.add(t.slice([a * r.shape[0]], [r.shape[0]]));
                    else if (2 === r.rank)
                      for (a = 0; a < e[0]; ++a)
                        for (var i = 0; i < e[1]; ++i)
                          n = n.add(
                            t.slice(
                              [a * r.shape[0], i * r.shape[1]],
                              [r.shape[0], r.shape[1]]
                            )
                          );
                    else if (3 === r.rank)
                      for (a = 0; a < e[0]; ++a)
                        for (i = 0; i < e[1]; ++i)
                          for (var o = 0; o < e[2]; ++o)
                            n = n.add(
                              t.slice(
                                [
                                  a * r.shape[0],
                                  i * r.shape[1],
                                  o * r.shape[2],
                                ],
                                [r.shape[0], r.shape[1], r.shape[2]]
                              )
                            );
                    else {
                      if (4 !== r.rank)
                        throw new Error(
                          "Gradient for tile operation is not implemented for rank-" +
                            r.rank +
                            " tensors yet."
                        );
                      for (a = 0; a < e[0]; ++a)
                        for (i = 0; i < e[1]; ++i)
                          for (o = 0; o < e[2]; ++o)
                            for (var s = 0; s < e[3]; ++s)
                              n = n.add(
                                t.slice(
                                  [
                                    a * r.shape[0],
                                    i * r.shape[1],
                                    o * r.shape[2],
                                    s * r.shape[3],
                                  ],
                                  [
                                    r.shape[0],
                                    r.shape[1],
                                    r.shape[2],
                                    r.shape[3],
                                  ]
                                )
                              );
                    }
                    return n;
                  },
                };
              },
              "Tile",
              a,
              r
            );
          },
        }),
        hr = an({
          truncatedNormal_: function (t, e, n, r, a) {
            if (
              (void 0 === e && (e = 0),
              void 0 === n && (n = 1),
              null != r && "bool" === r)
            )
              throw new Error("Unsupported data type " + r);
            for (
              var i = new $n(e, n, r, !0, a), o = Ln(t, r), s = 0;
              s < o.values.length;
              s++
            )
              o.values[s] = i.nextValue();
            return o.toTensor();
          },
        }),
        dr = an({
          unstack_: function (t, e) {
            void 0 === e && (e = 0), (e = e || 0);
            var n = He(t, "x", "unstack");
            S(e >= -n.shape.length && e < n.shape.length, function () {
              return (
                "Axis = " +
                e +
                " is not in [-" +
                n.shape.length +
                ", " +
                n.shape.length +
                ")"
              );
            }),
              e < 0 && (e += n.shape.length);
            var r = { axis: e };
            return Mt.runKernelFunc(
              function (t) {
                return t.unstack(n, e);
              },
              { x: n },
              function (t) {
                return {
                  x: function () {
                    return cr(t, e);
                  },
                };
              },
              "Unpack",
              r
            );
          },
        });
      function pr(t, e, n, r) {
        void 0 === r && (r = !0);
        var a = [];
        if (r)
          (a = a.concat(e.slice(0))).push(t[0] / n), (a = a.concat(t.slice(1)));
        else {
          a = a.concat(t[0]);
          for (var i = e.length, o = 0; o < i; ++o)
            a = a.concat([t[o + 1] / e[o], e[o]]);
          a = a.concat(t.slice(i + 1));
        }
        return a;
      }
      function fr(t, e, n) {
        void 0 === n && (n = !0);
        var r = [];
        if (n) {
          r.push(e);
          for (var a = e + 1; a < t; ++a)
            a <= 2 * e ? (r.push(a), r.push(a - (e + 1))) : r.push(a);
        } else {
          var i = [],
            o = [];
          for (a = 1; a < t; ++a)
            a >= 2 * e + 1 || a % 2 == 1 ? o.push(a) : i.push(a);
          r.push.apply(r, i), r.push(0), r.push.apply(r, o);
        }
        return r;
      }
      function mr(t, e, n, r) {
        void 0 === r && (r = !0);
        var a = [];
        r ? a.push(t[0] / n) : a.push(t[0] * n);
        for (var i = 1; i < t.length; ++i)
          i <= e.length
            ? r
              ? a.push(e[i - 1] * t[i])
              : a.push(t[i] / e[i - 1])
            : a.push(t[i]);
        return a;
      }
      function gr(t, e) {
        for (var n = [0], r = 0; r < e; ++r) n.push(t[r][0]);
        return n;
      }
      function br(t, e, n) {
        for (var r = t.slice(0, 1), a = 0; a < n; ++a)
          r.push(t[a + 1] - e[a][0] - e[a][1]);
        return r;
      }
      function vr(t, e) {
        if (t.rank < 1)
          throw new Error(
            "tf.gatherND() expects the input to be rank 1 or higher, but the rank was " +
              t.rank +
              "."
          );
        if (e.rank < 1)
          throw new Error(
            "tf.gatherND() expects the indices to be rank 1 or higher, but the rank was " +
              e.rank +
              "."
          );
        if ("int32" !== e.dtype)
          throw new Error(
            "tf.gatherND() expects the indices to be int32 type, but the dtype was " +
              e.dtype +
              "."
          );
        if (e.shape[e.rank - 1] > t.rank)
          throw new Error(
            "index innermost dimension length must be <= tensor rank; saw: " +
              e.shape[e.rank - 1] +
              " vs. " +
              t.rank
          );
        if (0 === t.size)
          throw new Error(
            "Requested more than 0 entries, but input is empty. Input shape: " +
              t.shape +
              "."
          );
        for (
          var n = e.shape, r = n[n.length - 1], a = 1, i = 0;
          i < n.length - 1;
          ++i
        )
          a *= n[i];
        var o = t.shape,
          s = n.slice();
        s.pop();
        var u = 1;
        for (i = r; i < t.rank; ++i) (u *= o[i]), s.push(o[i]);
        var c = Z(t.shape)
          .map(function (t) {
            return t / u;
          })
          .concat([1])
          .slice(0, r);
        return [s, a, u, c];
      }
      Object.freeze({ prepareAndValidate: vr });
      function yr(t) {
        return t <= 30 ? t : Q(t, Math.floor(Math.sqrt(t)));
      }
      function xr(t, e, n) {
        var r = e.rank > 1 ? e.shape[e.rank - 1] : 1,
          a = e.rank > 1 ? e.rank - 1 : 1,
          i =
            "Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: " +
            n.shape +
            ", indices.shape: " +
            e.shape +
            ", shape: " +
            t +
            ", sliceDim: " +
            r +
            ", and batchDim: " +
            a +
            ".";
        if (n.rank < a) throw new Error(i + " update.rank < " + a + ". ");
        if (t.length < r + (n.rank - a))
          throw new Error(i + " Output shape length < " + (r + (n.rank - a)));
        if (n.rank !== a + t.length - r)
          throw new Error(i + " update.rank != " + (a + t.length - r));
        for (var o = 0; o < a; ++o)
          if (n.shape[o] !== e.shape[o])
            throw new Error(
              i +
                " updates.shape[" +
                o +
                "] (" +
                n.shape[o] +
                ") != indices.shape[" +
                o +
                "] (" +
                e.shape[o] +
                ")."
            );
        for (o = 0; o < n.rank - a; ++o)
          if (n.shape[o + a] !== t[o + r])
            throw new Error(
              i +
                " updates.shape[" +
                (o + a) +
                "] (" +
                n.shape[o + a] +
                ") != shape[" +
                (o + a) +
                "] (" +
                t[o + a] +
                ")"
            );
      }
      function wr(t, e, n) {
        if (e.rank < 1)
          throw new Error(
            "tf.scatterND() expects the indices to be rank 1 or higher, but the rank was " +
              e.rank +
              "."
          );
        if (t.rank < 1)
          throw new Error(
            "tf.scatterND() expects the updates to be rank 1 or higher, but the rank was " +
              t.rank +
              "."
          );
        if ("int32" !== e.dtype)
          throw new Error(
            "The dtype of 'indices' should be int32, but got dtype: " + e.dtype
          );
        if (n.length < 1)
          throw new Error(
            "Output rank must be greater or equal to 1, but got shape: " + n
          );
        if (0 === n.length) {
          if (0 === e.size)
            throw new Error(
              "Indices specified for empty output. indices shape: " + e.shape
            );
          if (0 === t.size)
            throw new Error(
              "Updates specified for empty output. updates shape: " + t.shape
            );
        }
        xr(n, e, t);
      }
      function Cr(t, e, n) {
        for (
          var r = e.shape.length,
            a = r > 1 ? e.shape[r - 1] : 1,
            i = n.length,
            o = 1,
            s = a;
          s < i;
          ++s
        )
          o *= n[s];
        var u = a < 1 ? 1 : a;
        return {
          sliceRank: a,
          numUpdates: R(e.shape) / u,
          sliceSize: o,
          strides: Z(n.slice(0, a)).concat([1]),
          outputSize: R(n),
        };
      }
      Object.freeze({
        validateUpdateShape: xr,
        validateInput: wr,
        calculateShapes: Cr,
      });
      function Or(t, e, n) {
        S(t.rank === e.length, function () {
          return (
            "Error in slice" +
            t.rank +
            "D: Length of begin " +
            e +
            " must match the rank of the array (" +
            t.rank +
            ")."
          );
        }),
          S(t.rank === n.length, function () {
            return (
              "Error in slice" +
              t.rank +
              "D: Length of size " +
              n +
              " must match the rank of the array (" +
              t.rank +
              ")."
            );
          });
        for (
          var r = function (r) {
              S(e[r] + n[r] <= t.shape[r], function () {
                return (
                  "Error in slice" +
                  t.rank +
                  "D: begin[" +
                  r +
                  "] + size[" +
                  r +
                  "] (" +
                  (e[r] + n[r]) +
                  ") would overflow input.shape[" +
                  r +
                  "] (" +
                  t.shape[r] +
                  ")"
                );
              });
            },
            a = 0;
          a < t.rank;
          ++a
        )
          r(a);
      }
      function Er(t) {
        for (var e = [], n = 0; t > 0; ) 1 & t && e.push(n), (t /= 2), n++;
        return e;
      }
      function Sr(t, e, n) {
        for (var r = [], a = 0; a < t.length; a++)
          r[a] = Math.ceil((e[a] - t[a]) / n[a]);
        return r;
      }
      function Ir(t, e, n, r, a) {
        var i = e[a],
          o = n[a] || 1;
        (t & (1 << a) || null == i) &&
          (i = o > 0 ? Number.MIN_SAFE_INTEGER : Number.MAX_SAFE_INTEGER);
        var s = r[a];
        return i < 0 && (i += s), C(0, i, s - 1);
      }
      function kr(t, e, n, r, a) {
        var i = e[a],
          o = n[a] || 1;
        (t & (1 << a) || null == i) &&
          (i = o > 0 ? Number.MAX_SAFE_INTEGER : Number.MIN_SAFE_INTEGER);
        var s = r[a];
        return i < 0 && (i += s), o > 0 ? C(0, i, s) : C(-1, i, s - 1);
      }
      function Nr(t, e, n) {
        for (var r = n.length, a = 0; a < n.length; a++)
          if (n[a] > 1) {
            r = a;
            break;
          }
        for (a = r + 1; a < n.length; a++)
          if (e[a] > 0 || n[a] !== t[a]) return !1;
        return !0;
      }
      function Rr(t, e) {
        for (
          var n = t.length > 0 ? t[t.length - 1] : 1, r = 0;
          r < t.length - 1;
          r++
        )
          n += t[r] * e[r];
        return n;
      }
      Object.freeze({
        assertParamsValid: Or,
        maskToAxes: Er,
        computeOutShape: Sr,
        startForAxis: Ir,
        stopForAxis: kr,
        isSliceContinous: Nr,
        computeFlatOffset: Rr,
      });
      function Ar(t) {
        return Mt.customGrad(t);
      }
      var Tr = an({
          softmax_: function (t, e) {
            void 0 === e && (e = -1);
            var n = He(t, "logits", "softmax", "float32");
            if ((-1 === e && (e = n.rank - 1), e !== n.rank - 1))
              throw Error(
                "Softmax along a non-last dimension is not yet supported. Logits was rank " +
                  n.rank +
                  " and dim was " +
                  e
              );
            return Mt.runKernelFunc(
              function (t, r) {
                var a = t.softmax(n, e);
                return r([a]), a;
              },
              { logits: n },
              function (t, n) {
                var r = n[0],
                  a = t.mul(r);
                return {
                  logits: function () {
                    return a.sub(a.sum([e], !0).mul(r));
                  },
                };
              },
              "Softmax",
              { dim: e },
              [],
              [!0]
            );
          },
        }),
        _r = an({
          logSoftmax_: function (t, e) {
            void 0 === e && (e = -1);
            var n = He(t, "logits", "logSoftmax");
            if ((-1 === e && (e = n.rank - 1), e !== n.rank - 1))
              throw Error(
                "Log Softmax along a non-last dimension is not yet supported. Logits was rank " +
                  n.rank +
                  " and axis was " +
                  e
              );
            return Ar(function (t, n) {
              var r = t.max(e, !0),
                a = t.sub(r),
                i = a.toFloat().sub(a.exp().sum(e, !0).log());
              return (
                n([i]),
                {
                  value: i,
                  gradFunc: function (t, n) {
                    var r = n[0].exp();
                    return t.sub(t.sum(e, !0).mul(r));
                  },
                }
              );
            })(n);
          },
        }),
        Dr = (function () {
          function t(t, e) {
            (this.backend = t),
              (this.dataMover = e),
              (this.data = new WeakMap()),
              (this.dataIdsCount = 0);
          }
          return (
            (t.prototype.get = function (t) {
              return (
                this.data.has(t) || this.dataMover.moveData(this.backend, t),
                this.data.get(t)
              );
            }),
            (t.prototype.set = function (t, e) {
              this.dataIdsCount++, this.data.set(t, e);
            }),
            (t.prototype.has = function (t) {
              return this.data.has(t);
            }),
            (t.prototype.delete = function (t) {
              return this.dataIdsCount--, this.data.delete(t);
            }),
            (t.prototype.numDataIds = function () {
              return this.dataIdsCount;
            }),
            t
          );
        })(),
        Fr = (function () {
          function t() {}
          return (
            (t.prototype.time = function (t) {
              return Mr("time");
            }),
            (t.prototype.read = function (t) {
              return Mr("read");
            }),
            (t.prototype.readSync = function (t) {
              return Mr("readSync");
            }),
            (t.prototype.numDataIds = function () {
              return Mr("numDataIds");
            }),
            (t.prototype.disposeData = function (t) {
              return Mr("disposeData");
            }),
            (t.prototype.write = function (t, e, n) {
              return Mr("write");
            }),
            (t.prototype.move = function (t, e, n, r) {
              return Mr("move");
            }),
            (t.prototype.memory = function () {
              return Mr("memory");
            }),
            (t.prototype.floatPrecision = function () {
              return Mr("floatPrecision");
            }),
            (t.prototype.epsilon = function () {
              return 32 === this.floatPrecision() ? 1e-7 : 1e-4;
            }),
            (t.prototype.batchMatMul = function (t, e, n, r) {
              return Mr("batchMatMul");
            }),
            (t.prototype.fusedBatchMatMul = function (t) {
              return (
                t.a,
                t.b,
                t.transposeA,
                t.transposeB,
                t.bias,
                t.activation,
                t.preluActivationWeights,
                Mr("fusedBatchMatMul")
              );
            }),
            (t.prototype.slice = function (t, e, n) {
              return Mr("slice");
            }),
            (t.prototype.stridedSlice = function (t, e, n, r) {
              return Mr("stridedSlice");
            }),
            (t.prototype.unstack = function (t, e) {
              return Mr("unstack");
            }),
            (t.prototype.reverse = function (t, e) {
              return Mr("reverse");
            }),
            (t.prototype.concat = function (t, e) {
              return Mr("concat");
            }),
            (t.prototype.neg = function (t) {
              return Mr("neg");
            }),
            (t.prototype.add = function (t, e) {
              return Mr("add");
            }),
            (t.prototype.addN = function (t) {
              return Mr("addN");
            }),
            (t.prototype.subtract = function (t, e) {
              return Mr("subtract");
            }),
            (t.prototype.multiply = function (t, e) {
              return Mr("multiply");
            }),
            (t.prototype.realDivide = function (t, e) {
              return Mr("realDivide");
            }),
            (t.prototype.floorDiv = function (t, e) {
              return Mr("floorDiv");
            }),
            (t.prototype.sum = function (t, e) {
              return Mr("sum");
            }),
            (t.prototype.prod = function (t, e) {
              return Mr("prod");
            }),
            (t.prototype.unsortedSegmentSum = function (t, e, n) {
              return Mr("unsortedSegmentSum");
            }),
            (t.prototype.argMin = function (t, e) {
              return Mr("argMin");
            }),
            (t.prototype.argMax = function (t, e) {
              return Mr("argMax");
            }),
            (t.prototype.equal = function (t, e) {
              return Mr("equal");
            }),
            (t.prototype.notEqual = function (t, e) {
              return Mr("notEqual");
            }),
            (t.prototype.less = function (t, e) {
              return Mr("less");
            }),
            (t.prototype.lessEqual = function (t, e) {
              return Mr("lessEqual");
            }),
            (t.prototype.greater = function (t, e) {
              return Mr("greater");
            }),
            (t.prototype.greaterEqual = function (t, e) {
              return Mr("greaterEqual");
            }),
            (t.prototype.logicalNot = function (t) {
              return Mr("logicalNot");
            }),
            (t.prototype.logicalAnd = function (t, e) {
              return Mr("logicalAnd");
            }),
            (t.prototype.logicalOr = function (t, e) {
              return Mr("logicalOr");
            }),
            (t.prototype.where = function (t) {
              return Mr("where");
            }),
            (t.prototype.select = function (t, e, n) {
              return Mr("select");
            }),
            (t.prototype.topk = function (t, e, n) {
              return Mr("topk");
            }),
            (t.prototype.min = function (t, e) {
              return Mr("min");
            }),
            (t.prototype.minimum = function (t, e) {
              return Mr("minimum");
            }),
            (t.prototype.mod = function (t, e) {
              return Mr("mod");
            }),
            (t.prototype.max = function (t, e) {
              return Mr("max");
            }),
            (t.prototype.maximum = function (t, e) {
              return Mr("maximum");
            }),
            (t.prototype.all = function (t, e) {
              return Mr("all");
            }),
            (t.prototype.any = function (t, e) {
              return Mr("any");
            }),
            (t.prototype.squaredDifference = function (t, e) {
              return Mr("squaredDifference");
            }),
            (t.prototype.ceil = function (t) {
              return Mr("ceil");
            }),
            (t.prototype.floor = function (t) {
              return Mr("floor");
            }),
            (t.prototype.round = function (t) {
              return Mr("round");
            }),
            (t.prototype.sign = function (t) {
              return Mr("sign");
            }),
            (t.prototype.isNaN = function (t) {
              return Mr("isNaN");
            }),
            (t.prototype.isInf = function (t) {
              return Mr("isInf");
            }),
            (t.prototype.isFinite = function (t) {
              return Mr("isFinite");
            }),
            (t.prototype.pow = function (t, e) {
              return Mr("pow");
            }),
            (t.prototype.exp = function (t) {
              return Mr("exp");
            }),
            (t.prototype.expm1 = function (t) {
              return Mr("expm1");
            }),
            (t.prototype.softmax = function (t, e) {
              return Mr("softmax");
            }),
            (t.prototype.log = function (t) {
              return Mr("log");
            }),
            (t.prototype.log1p = function (t) {
              return Mr("log1p");
            }),
            (t.prototype.sqrt = function (t) {
              return Mr("sqrt");
            }),
            (t.prototype.rsqrt = function (t) {
              return Mr("rsqrt");
            }),
            (t.prototype.square = function (t) {
              return Mr("square");
            }),
            (t.prototype.reciprocal = function (t) {
              return Mr("reciprocal");
            }),
            (t.prototype.relu = function (t) {
              return Mr("relu");
            }),
            (t.prototype.relu6 = function (t) {
              return Mr("relu6");
            }),
            (t.prototype.prelu = function (t, e) {
              return Mr("prelu");
            }),
            (t.prototype.elu = function (t) {
              return Mr("elu");
            }),
            (t.prototype.eluDer = function (t, e) {
              return Mr("eluDer");
            }),
            (t.prototype.selu = function (t) {
              return Mr("selu");
            }),
            (t.prototype.int = function (t) {
              return Mr("int");
            }),
            (t.prototype.clip = function (t, e, n) {
              return Mr("clip");
            }),
            (t.prototype.abs = function (t) {
              return Mr("abs");
            }),
            (t.prototype.complexAbs = function (t) {
              return Mr("complexAbs");
            }),
            (t.prototype.sigmoid = function (t) {
              return Mr("sigmoid");
            }),
            (t.prototype.softplus = function (t) {
              return Mr("softplus");
            }),
            (t.prototype.sin = function (t) {
              return Mr("sin");
            }),
            (t.prototype.cos = function (t) {
              return Mr("cos");
            }),
            (t.prototype.tan = function (t) {
              return Mr("tan");
            }),
            (t.prototype.asin = function (t) {
              return Mr("asin");
            }),
            (t.prototype.acos = function (t) {
              return Mr("acos");
            }),
            (t.prototype.atan = function (t) {
              return Mr("atan");
            }),
            (t.prototype.atan2 = function (t, e) {
              return Mr("atan2");
            }),
            (t.prototype.sinh = function (t) {
              return Mr("sinh");
            }),
            (t.prototype.cosh = function (t) {
              return Mr("cosh");
            }),
            (t.prototype.tanh = function (t) {
              return Mr("tanh");
            }),
            (t.prototype.asinh = function (t) {
              return Mr("asinh");
            }),
            (t.prototype.acosh = function (t) {
              return Mr("acosh");
            }),
            (t.prototype.atanh = function (t) {
              return Mr("atanh");
            }),
            (t.prototype.erf = function (t) {
              return Mr("erf");
            }),
            (t.prototype.step = function (t, e) {
              return Mr("step");
            }),
            (t.prototype.fusedConv2d = function (t) {
              return (
                t.input,
                t.filter,
                t.convInfo,
                t.bias,
                t.activation,
                t.preluActivationWeights,
                Mr("fusedConv2d")
              );
            }),
            (t.prototype.conv2d = function (t, e, n) {
              return Mr("conv2d");
            }),
            (t.prototype.conv2dDerInput = function (t, e, n) {
              return Mr("conv2dDerInput");
            }),
            (t.prototype.conv2dDerFilter = function (t, e, n) {
              return Mr("conv2dDerFilter");
            }),
            (t.prototype.fusedDepthwiseConv2D = function (t) {
              return (
                t.input,
                t.filter,
                t.convInfo,
                t.bias,
                t.activation,
                t.preluActivationWeights,
                Mr("fusedDepthwiseConv2D")
              );
            }),
            (t.prototype.depthwiseConv2D = function (t, e, n) {
              return Mr("depthwiseConv2D");
            }),
            (t.prototype.depthwiseConv2DDerInput = function (t, e, n) {
              return Mr("depthwiseConv2DDerInput");
            }),
            (t.prototype.depthwiseConv2DDerFilter = function (t, e, n) {
              return Mr("depthwiseConv2DDerFilter");
            }),
            (t.prototype.conv3d = function (t, e, n) {
              return Mr("conv3d");
            }),
            (t.prototype.conv3dDerInput = function (t, e, n) {
              return Mr("conv3dDerInput");
            }),
            (t.prototype.conv3dDerFilter = function (t, e, n) {
              return Mr("conv3dDerFilter");
            }),
            (t.prototype.maxPool = function (t, e) {
              return Mr("maxPool");
            }),
            (t.prototype.maxPoolBackprop = function (t, e, n, r) {
              return Mr("maxPoolBackprop");
            }),
            (t.prototype.avgPool = function (t, e) {
              return Mr("avgPool");
            }),
            (t.prototype.avgPoolBackprop = function (t, e, n) {
              return Mr("avgPoolBackprop");
            }),
            (t.prototype.avgPool3d = function (t, e) {
              return Mr("avgPool3d");
            }),
            (t.prototype.avgPool3dBackprop = function (t, e, n) {
              return Mr("avgPool3dBackprop");
            }),
            (t.prototype.maxPool3d = function (t, e) {
              return Mr("maxPool3d");
            }),
            (t.prototype.maxPool3dBackprop = function (t, e, n, r) {
              return Mr("maxPool3dBackprop");
            }),
            (t.prototype.reshape = function (t, e) {
              return Mr("reshape");
            }),
            (t.prototype.cast = function (t, e) {
              return Mr("cast");
            }),
            (t.prototype.tile = function (t, e) {
              return Mr("tile");
            }),
            (t.prototype.pad = function (t, e, n) {
              return Mr("pad");
            }),
            (t.prototype.transpose = function (t, e) {
              return Mr("transpose");
            }),
            (t.prototype.gather = function (t, e, n) {
              return Mr("gather");
            }),
            (t.prototype.gatherND = function (t, e) {
              return Mr("gatherND");
            }),
            (t.prototype.scatterND = function (t, e, n) {
              return Mr("scatterND");
            }),
            (t.prototype.batchToSpaceND = function (t, e, n) {
              return Mr("batchToSpaceND");
            }),
            (t.prototype.spaceToBatchND = function (t, e, n) {
              return Mr("spaceToBatchND");
            }),
            (t.prototype.resizeBilinear = function (t, e, n, r) {
              return Mr("resizeBilinear");
            }),
            (t.prototype.resizeBilinearBackprop = function (t, e, n) {
              return Mr("resizeBilinearBackprop");
            }),
            (t.prototype.resizeNearestNeighbor = function (t, e, n, r) {
              return Mr("resizeNearestNeighbor");
            }),
            (t.prototype.resizeNearestNeighborBackprop = function (t, e, n) {
              return Mr("resizeNearestNeighborBackprop");
            }),
            (t.prototype.batchNormalization = function (t, e, n, r, a, i) {
              return Mr("batchNormalization");
            }),
            (t.prototype.localResponseNormalization4D = function (
              t,
              e,
              n,
              r,
              a
            ) {
              return Mr("localResponseNormalization4D");
            }),
            (t.prototype.LRNGrad = function (t, e, n, r, a, i, o) {
              return Mr("LRNGrad");
            }),
            (t.prototype.multinomial = function (t, e, n, r) {
              return Mr("multinomial");
            }),
            (t.prototype.oneHot = function (t, e, n, r) {
              return Mr("oneHot");
            }),
            (t.prototype.cumsum = function (t, e, n, r) {
              return Mr("cumsum");
            }),
            (t.prototype.nonMaxSuppression = function (t, e, n, r, a) {
              return Mr("nonMaxSuppression");
            }),
            (t.prototype.fft = function (t) {
              return Mr("fft");
            }),
            (t.prototype.ifft = function (t) {
              return Mr("ifft");
            }),
            (t.prototype.complex = function (t, e) {
              return Mr("complex");
            }),
            (t.prototype.real = function (t) {
              return Mr("real");
            }),
            (t.prototype.imag = function (t) {
              return Mr("imag");
            }),
            (t.prototype.cropAndResize = function (t, e, n, r, a, i) {
              return Mr("cropAndResize");
            }),
            (t.prototype.depthToSpace = function (t, e, n) {
              return Mr("depthToSpace");
            }),
            (t.prototype.split = function (t, e, n) {
              return Mr("split");
            }),
            (t.prototype.sparseToDense = function (t, e, n, r) {
              return Mr("sparseToDense");
            }),
            (t.prototype.diag = function (t) {
              return Mr("diag");
            }),
            (t.prototype.fill = function (t, e, n) {
              return Mr("fill");
            }),
            (t.prototype.onesLike = function (t) {
              return Mr("onesLike");
            }),
            (t.prototype.zerosLike = function (t) {
              return Mr("zerosLike");
            }),
            (t.prototype.linspace = function (t, e, n) {
              return Mr("linspace");
            }),
            (t.prototype.dispose = function () {
              return Mr("dispose");
            }),
            t
          );
        })();
      function Mr(t) {
        throw new Error(
          "'" +
            t +
            "' not yet implemented or not found in the registry. Did you forget to import the kernel?"
        );
      }
      function jr(t, e) {
        for (var n = t.length, r = [], a = 0; a < n; a++) {
          var i = n - 1 - a,
            o = t[i] || 1;
          (e[e.length - 1 - a] || 1) > 1 && 1 === o && r.unshift(i);
        }
        return r;
      }
      function $r(t, e) {
        for (var n = [], r = 0; r < e.length; r++) {
          var a = t[t.length - r - 1],
            i = e.length - r - 1,
            o = e[i];
          (null == a || (1 === a && o > 1)) && n.unshift(i);
        }
        return n;
      }
      function Br(t, e) {
        for (var n = [], r = Math.max(t.length, e.length), a = 0; a < r; a++) {
          var i = t[t.length - a - 1];
          null == i && (i = 1);
          var o = e[e.length - a - 1];
          if ((null == o && (o = 1), 1 === i)) n.unshift(o);
          else if (1 === o) n.unshift(i);
          else {
            if (i !== o)
              throw Error(
                "Operands could not be broadcast together with shapes " +
                  t +
                  " and " +
                  e +
                  "."
              );
            n.unshift(i);
          }
        }
        return n;
      }
      function Pr(t, e, n, r, a, i, o) {
        void 0 === o && (o = "channelsLast");
        var s,
          u = Ur(e),
          c = u[0],
          l = u[1];
        if ("channelsLast" === o) s = [c, l, t[3], t[3]];
        else {
          if ("channelsFirst" !== o) throw new Error("Unknown dataFormat " + o);
          s = [c, l, t[1], t[1]];
        }
        return zr(t, s, n, r, a, i, !1, o);
      }
      function Lr(t, e, n, r, a, i, o) {
        void 0 === o && (o = "NDHWC");
        var s,
          u,
          c = Gr(e),
          l = c[0],
          h = c[1],
          d = c[2];
        if ("NDHWC" === o) (u = "channelsLast"), (s = [l, h, d, t[4], t[4]]);
        else {
          if ("NCDHW" !== o) throw new Error("Unknown dataFormat " + o);
          (u = "channelsFirst"), (s = [l, h, d, t[1], t[1]]);
        }
        return Wr(t, s, n, r, a, !1, u, i);
      }
      function zr(t, e, n, r, a, i, o, s) {
        void 0 === o && (o = !1), void 0 === s && (s = "channelsLast");
        var u = [-1, -1, -1, -1],
          c = u[0],
          l = u[1],
          h = u[2],
          d = u[3];
        if ("channelsLast" === s)
          (c = t[0]), (l = t[1]), (h = t[2]), (d = t[3]);
        else {
          if ("channelsFirst" !== s) throw new Error("Unknown dataFormat " + s);
          (c = t[0]), (d = t[1]), (l = t[2]), (h = t[3]);
        }
        var p,
          f = e[0],
          m = e[1],
          g = e[3],
          b = Ur(n),
          v = b[0],
          y = b[1],
          x = Ur(r),
          w = x[0],
          C = x[1],
          O = Hr(f, w),
          E = Hr(m, C),
          I = (function (t, e, n, r, a, i, o, s) {
            var u, c, l;
            if ("number" == typeof t) {
              u = {
                top: t,
                bottom: t,
                left: t,
                right: t,
                type: 0 === t ? "VALID" : "NUMBER",
              };
              var h = (function (t, e, n, r, a) {
                null == r && (r = Vr(t, e, n));
                var i = t[1],
                  o = qr((t[0] - e + 2 * r) / n + 1, a);
                S(T(o), function () {
                  return (
                    "The output # of rows (" +
                    o +
                    ") must be an integer. Change the stride and/or zero pad parameters"
                  );
                });
                var s = qr((i - e + 2 * r) / n + 1, a);
                return (
                  S(T(s), function () {
                    return (
                      "The output # of columns (" +
                      s +
                      ") must be an integer. Change the stride and/or zero pad parameters"
                    );
                  }),
                  [o, s]
                );
              })([e, n], i, r, t, s);
              (c = h[0]), (l = h[1]);
            } else if ("same" === t) {
              (c = Math.ceil(e / r)), (l = Math.ceil(n / a));
              var d = Math.max(0, (c - 1) * r + i - e),
                p = Math.max(0, (l - 1) * a + o - n),
                f = Math.floor(d / 2),
                m = d - f,
                g = Math.floor(p / 2);
              u = { top: f, bottom: m, left: g, right: p - g, type: "SAME" };
            } else {
              if ("valid" !== t) throw Error("Unknown padding parameter: " + t);
              (u = { top: 0, bottom: 0, left: 0, right: 0, type: "VALID" }),
                (c = Math.ceil((e - i + 1) / r)),
                (l = Math.ceil((n - o + 1) / a));
            }
            return { padInfo: u, outHeight: c, outWidth: l };
          })(a, l, h, v, y, O, E, i),
          k = I.padInfo,
          N = I.outHeight,
          R = I.outWidth,
          A = o ? g * d : g;
        return (
          "channelsFirst" === s
            ? (p = [c, A, N, R])
            : "channelsLast" === s && (p = [c, N, R, A]),
          {
            batchSize: c,
            dataFormat: s,
            inHeight: l,
            inWidth: h,
            inChannels: d,
            outHeight: N,
            outWidth: R,
            outChannels: A,
            padInfo: k,
            strideHeight: v,
            strideWidth: y,
            filterHeight: f,
            filterWidth: m,
            effectiveFilterHeight: O,
            effectiveFilterWidth: E,
            dilationHeight: w,
            dilationWidth: C,
            inShape: t,
            outShape: p,
            filterShape: e,
          }
        );
      }
      function Wr(t, e, n, r, a, i, o, s) {
        void 0 === i && (i = !1), void 0 === o && (o = "channelsLast");
        var u = [-1, -1, -1, -1, -1],
          c = u[0],
          l = u[1],
          h = u[2],
          d = u[3],
          p = u[4];
        if ("channelsLast" === o)
          (c = t[0]), (l = t[1]), (h = t[2]), (d = t[3]), (p = t[4]);
        else {
          if ("channelsFirst" !== o) throw new Error("Unknown dataFormat " + o);
          (c = t[0]), (p = t[1]), (l = t[2]), (h = t[3]), (d = t[4]);
        }
        var f,
          m = e[0],
          g = e[1],
          b = e[2],
          v = e[4],
          y = Gr(n),
          x = y[0],
          w = y[1],
          C = y[2],
          O = Gr(r),
          E = O[0],
          I = O[1],
          k = O[2],
          N = Hr(m, E),
          R = Hr(g, I),
          A = Hr(b, k),
          _ = (function (t, e, n, r, a, i, o, s, u, c, l) {
            var h, d, p, f;
            if ("number" == typeof t) {
              h = {
                top: t,
                bottom: t,
                left: t,
                right: t,
                front: t,
                back: t,
                type: 0 === t ? "VALID" : "NUMBER",
              };
              var m = (function (t, e, n, r, a, i) {
                null == a && (a = Vr(t, e, r));
                var o = t[1],
                  s = t[2],
                  u = qr((t[0] - e + 2 * a) / r + 1, i);
                S(T(u), function () {
                  return (
                    "The output # of depths (" +
                    u +
                    ") must be an integer. Change the stride and/or zero pad parameters"
                  );
                });
                var c = qr((o - e + 2 * a) / r + 1, i);
                S(T(c), function () {
                  return (
                    "The output # of rows (" +
                    c +
                    ") must be an integer. Change the stride and/or zero pad parameters"
                  );
                });
                var l = qr((s - e + 2 * a) / r + 1, i);
                return (
                  S(T(l), function () {
                    return (
                      "The output # of columns (" +
                      l +
                      ") must be an integer. Change the stride and/or zero pad parameters"
                    );
                  }),
                  [u, c, l, 1]
                );
              })([e, n, r, 1], s, 0, a, t, l);
              (d = m[0]), (p = m[1]), (f = m[2]);
            } else if ("same" === t) {
              var g = ((d = Math.ceil(e / a)) - 1) * a + s - e,
                b = ((p = Math.ceil(n / i)) - 1) * i + u - n,
                v = ((f = Math.ceil(r / o)) - 1) * o + c - r,
                y = Math.floor(g / 2),
                x = g - y,
                w = Math.floor(b / 2),
                C = b - w,
                O = Math.floor(v / 2);
              h = {
                top: w,
                bottom: C,
                left: O,
                right: v - O,
                front: y,
                back: x,
                type: "SAME",
              };
            } else {
              if ("valid" !== t) throw Error("Unknown padding parameter: " + t);
              (h = {
                top: 0,
                bottom: 0,
                left: 0,
                right: 0,
                front: 0,
                back: 0,
                type: "VALID",
              }),
                (d = Math.ceil((e - s + 1) / a)),
                (p = Math.ceil((n - u + 1) / i)),
                (f = Math.ceil((r - c + 1) / o));
            }
            return { padInfo: h, outDepth: d, outHeight: p, outWidth: f };
          })(a, l, h, d, x, w, C, N, R, A, s),
          D = _.padInfo,
          F = _.outDepth,
          M = _.outHeight,
          j = _.outWidth,
          $ = i ? v * p : v;
        return (
          "channelsFirst" === o
            ? (f = [c, $, F, M, j])
            : "channelsLast" === o && (f = [c, F, M, j, $]),
          {
            batchSize: c,
            dataFormat: o,
            inDepth: l,
            inHeight: h,
            inWidth: d,
            inChannels: p,
            outDepth: F,
            outHeight: M,
            outWidth: j,
            outChannels: $,
            padInfo: D,
            strideDepth: x,
            strideHeight: w,
            strideWidth: C,
            filterDepth: m,
            filterHeight: g,
            filterWidth: b,
            effectiveFilterDepth: N,
            effectiveFilterHeight: R,
            effectiveFilterWidth: A,
            dilationDepth: E,
            dilationHeight: I,
            dilationWidth: k,
            inShape: t,
            outShape: f,
            filterShape: e,
          }
        );
      }
      function Vr(t, e, n, r) {
        void 0 === r && (r = 1);
        var a = Hr(e, r);
        return Math.floor((t[0] * (n - 1) - n + a) / 2);
      }
      function Ur(t) {
        return "number" == typeof t
          ? [t, t, t]
          : 2 === t.length
          ? [t[0], t[1], 1]
          : t;
      }
      function Gr(t) {
        return "number" == typeof t ? [t, t, t] : t;
      }
      function Hr(t, e) {
        return e <= 1 ? t : t + (t - 1) * (e - 1);
      }
      function qr(t, e) {
        if (!e) return t;
        switch (e) {
          case "round":
            return Math.round(t);
          case "ceil":
            return Math.ceil(t);
          case "floor":
            return Math.floor(t);
          default:
            throw new Error("Unknown roundingMode " + e);
        }
      }
      function Kr(t) {
        var e = Ur(t),
          n = e[0],
          r = e[1],
          a = e[2];
        return 1 === n && 1 === r && 1 === a;
      }
      function Xr(t, e) {
        return Kr(t) || Kr(e);
      }
      function Yr(t) {
        if ("NHWC" === t) return "channelsLast";
        if ("NCHW" === t) return "channelsFirst";
        throw new Error("Unknown dataFormat " + t);
      }
      function Jr(t, e, n) {
        if ("complex64" === e) {
          if ("complex64" === t.dtype) return t.clone();
          var r = bn(t.shape),
            a = t.toFloat(),
            i = n.complex(a, r);
          return r.dispose(), a.dispose(), i;
        }
        if (!V(t.dtype, e))
          return Mt.makeTensorFromDataId(t.dataId, t.shape, e);
        if ("complex64" === t.dtype) {
          var o = n.real(t);
          return (i = o.cast(e)), o.dispose(), i;
        }
        if ("int32" === e) return n.int(t);
        if ("bool" === e) {
          var s = hn(0, t.dtype);
          return (i = n.notEqual(t, s)), s.dispose(), i;
        }
        throw new Error(
          "Error in Cast: failed to cast " + t.dtype + " to " + e
        );
      }
      function Qr(t, e) {
        return Mt.makeTensorFromDataId(t.dataId, e, t.dtype);
      }
      function Zr(t, e, n) {
        var r = (e - t) / (n - 1),
          a = rt(n, "float32");
        a[0] = t;
        for (var i = 1; i < a.length; i++) a[i] = a[i - 1] + r;
        return dn(a, "float32");
      }
      Object.freeze({
        castTensor: Jr,
        reshapeTensor: Qr,
        linspaceImpl: Zr,
        upcastType: kt,
        axesAreInnerMostDims: Ke,
        combineLocations: Xe,
        computeOutAndReduceShapes: Ye,
        expandShapeToKeepDim: Je,
        assertAxesAreInnerMostDims: Qe,
        getAxesPermutation: Ze,
        getUndoAxesPermutation: tn,
        getInnerMostAxes: en,
        getBroadcastDims: jr,
        getReductionAxes: $r,
        assertAndGetBroadcastShape: Br,
        assertParamsConsistent: nn,
        computeOutShape: rn,
        computePool2DInfo: Pr,
        computePool3DInfo: Lr,
        computeConv2DInfo: zr,
        computeConv3DInfo: Wr,
        computeDefaultPad: Vr,
        tupleValuesAreOne: Kr,
        eitherStridesOrDilationsAreOne: Xr,
        convertConv2DDataFormat: Yr,
        PARALLELIZE_THRESHOLD: 30,
        computeOptimalWindowSize: yr,
      });
      function ta(t, e) {
        if (t.length !== e.length)
          throw new Error(
            "Cannot merge real and imag arrays of different lengths. real:" +
              t.length +
              ", imag: " +
              e.length +
              "."
          );
        for (
          var n = new Float32Array(2 * t.length), r = 0;
          r < n.length;
          r += 2
        )
          (n[r] = t[r / 2]), (n[r + 1] = e[r / 2]);
        return n;
      }
      function ea(t, e) {
        return { real: t[2 * e], imag: t[2 * e + 1] };
      }
      function na(t, e, n, r) {
        (t[2 * r] = e), (t[2 * r + 1] = n);
      }
      function ra(t, e, n) {
        var r = (n ? 2 : -2) * Math.PI * (t / e);
        return { real: Math.cos(r), imag: Math.sin(r) };
      }
      function aa(t, e, n) {
        var r = (function (t, e, n) {
            return (function (t, e, n) {
              for (var r = 0, a = t.length, i = 0, o = !1; r < a; ) {
                var s = n(e, t[(i = r + ((a - r) >>> 1))]);
                s > 0 ? (r = i + 1) : ((a = i), (o = !s));
              }
              return o ? r : -r - 1;
            })(t, e, n || ia);
          })(t, e, n),
          a = r < 0 ? -(r + 1) : r;
        t.splice(a, 0, e);
      }
      function ia(t, e) {
        return t > e ? 1 : t < e ? -1 : 0;
      }
      function oa(t, e, n, r, a) {
        return ua(t, e, n, r, a, 0).selectedIndices;
      }
      function sa(t, e, n, r, a, i) {
        var o = ua(t, e, n, r, a, i, !0);
        return (
          o.numValidOutputs.dispose(),
          {
            selectedIndices: o.selectedIndices,
            selectedScores: o.selectedScores,
          }
        );
      }
      function ua(t, e, n, r, a, i, o, s) {
        void 0 === o && (o = !1), void 0 === s && (s = !1);
        for (
          var u = Array.from(e)
              .map(function (t, e) {
                return { score: t, boxIndex: e, suppressBeginIndex: 0 };
              })
              .filter(function (t) {
                return t.score > a;
              })
              .sort(ha),
            c = i > 0 ? -0.5 / i : 0,
            l = [],
            h = [];
          l.length < n && u.length > 0;

        ) {
          var d = u.pop(),
            p = d.score,
            f = d.boxIndex,
            m = d.suppressBeginIndex;
          if (p < a) break;
          for (var g = !1, b = l.length - 1; b >= m; --b) {
            var v = ca(t, f, l[b]);
            if (v >= r) {
              g = !0;
              break;
            }
            if (((d.score = d.score * la(r, c, v)), d.score <= a)) break;
          }
          (d.suppressBeginIndex = l.length),
            g ||
              (d.score === p
                ? (l.push(f), h.push(d.score))
                : d.score > a && aa(u, d, ha));
        }
        var y = l.length;
        return (
          s && (l.fill(0, y), h.fill(0, y)),
          {
            selectedIndices: dn(l, "int32"),
            selectedScores: dn(h, "float32"),
            numValidOutputs: hn(y, "int32"),
          }
        );
      }
      function ca(t, e, n) {
        var r = t.subarray(4 * e, 4 * e + 4),
          a = t.subarray(4 * n, 4 * n + 4),
          i = Math.min(r[0], r[2]),
          o = Math.min(r[1], r[3]),
          s = Math.max(r[0], r[2]),
          u = Math.max(r[1], r[3]),
          c = Math.min(a[0], a[2]),
          l = Math.min(a[1], a[3]),
          h = Math.max(a[0], a[2]),
          d = Math.max(a[1], a[3]),
          p = (s - i) * (u - o),
          f = (h - c) * (d - l);
        if (p <= 0 || f <= 0) return 0;
        var m = Math.max(i, c),
          g = Math.max(o, l),
          b = Math.min(s, h),
          v = Math.min(u, d),
          y = Math.max(b - m, 0) * Math.max(v - g, 0);
        return y / (p + f - y);
      }
      function la(t, e, n) {
        var r = Math.exp(e * n * n);
        return n <= t ? r : 0;
      }
      function ha(t, e) {
        return (
          t.score - e.score || (t.score === e.score && e.boxIndex - t.boxIndex)
        );
      }
      function da(t, e, n) {
        var r = new Array(t.rank).fill(0),
          a = t.shape.slice();
        return e.map(function (e) {
          a[n] = e;
          var i = t.slice(r, a);
          return (r[n] += e), i;
        });
      }
      function pa(t, e) {
        for (var n = new Array(t.rank), r = 0; r < n.length; r++)
          n[r] = t.shape[r] * e[r];
        var a = Ln(n, t.dtype);
        for (r = 0; r < a.values.length; ++r) {
          for (
            var i = a.indexToLoc(r), o = new Array(t.rank), s = 0;
            s < o.length;
            s++
          )
            o[s] = i[s] % t.shape[s];
          var u = t.locToIndex(o);
          a.values[r] = t.values[u];
        }
        return a.toTensor();
      }
      function fa(t, e, n, r, a) {
        for (
          var i = e[e.length - 1],
            o = [t.length / i, i],
            s = o[0],
            u = o[1],
            c = P(n, s * r),
            l = P("int32", s * r),
            h = 0;
          h < s;
          h++
        ) {
          for (
            var d = h * u, p = t.subarray(d, d + u), f = [], m = 0;
            m < p.length;
            m++
          )
            f.push({ value: p[m], index: m });
          f.sort(function (t, e) {
            return e.value - t.value;
          });
          var g = h * r,
            b = c.subarray(g, g + r),
            v = l.subarray(g, g + r);
          for (m = 0; m < r; m++) (b[m] = f[m].value), (v[m] = f[m].index);
        }
        var y = e.slice();
        return (y[y.length - 1] = r), [cn(c, y, n), cn(l, y, "int32")];
      }
      function ma(t, e) {
        for (var n = [], r = 0; r < e.length; r++) e[r] && n.push(r);
        var a = Ln(t, "int32"),
          i = Ln([n.length, t.length], "int32");
        for (r = 0; r < n.length; r++) {
          var o = a.indexToLoc(n[r]),
            s = r * t.length;
          i.values.set(o, s);
        }
        return i.toTensor();
      }
      var ga = function (t, e) {
          (this.outputShape = []),
            (this.outputShape = t),
            (this.variableNames = e.map(function (t, e) {
              return "T" + e;
            }));
          var n = [];
          this.variableNames.forEach(function (t) {
            n.push("float v" + t + " = get" + t + "AtOutCoords();");
          });
          var r = this.variableNames
            .map(function (t) {
              return "v" + t;
            })
            .join(" + ");
          this.userCode =
            "\n      void main() {\n        " +
            n.join("\n        ") +
            "\n\n        float result = " +
            r +
            ";\n        setOutput(result);\n      }\n    ";
        },
        ba = function (t, e) {
          (this.outputShape = []),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.outputShape = t),
            (this.variableNames = e.map(function (t, e) {
              return "T" + e;
            }));
          var n = [];
          this.variableNames.forEach(function (t) {
            n.push("vec4 v" + t + " = get" + t + "AtOutCoords();");
          });
          var r = this.variableNames
            .map(function (t) {
              return "v" + t;
            })
            .join(" + ");
          this.userCode =
            "\n      void main() {\n        " +
            n.join("\n        ") +
            "\n\n        vec4 result = " +
            r +
            ";\n        setOutput(result);\n      }\n    ";
        },
        va = function (t, e, n) {
          this.variableNames = ["A"];
          var r = t.windowSize,
            a = t.batchSize,
            i = t.inSize,
            o = Math.ceil(i / r);
          n || this.variableNames.push("bestIndicesA"),
            (this.outputShape = [a, o]);
          var s = "max" === e ? ">" : "<",
            u = n
              ? "inOffset + i;"
              : "round(getBestIndicesA(batch, inOffset + i));";
          this.userCode =
            "\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * " +
            r +
            ";\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < " +
            r +
            "; i++) {\n          int inIdx = " +
            u +
            ";\n          float candidate = getA(batch, inIdx);\n          if (candidate " +
            s +
            " bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    ";
        };
      function ya(t, e) {
        return ["x", "y", "z", "w", "u", "v"].slice(0, e).map(function (e) {
          return t + "." + e;
        });
      }
      function xa(t, e) {
        return 1 === e ? [t] : ya(t, e);
      }
      function wa() {
        var t, e, n, r, a, i, o, s, u, c;
        return (
          2 === d().getNumber("WEBGL_VERSION")
            ? ((t = "#version 300 es"),
              (e = "in"),
              (n = "out"),
              (r = "in"),
              (a = "texture"),
              (i = "outputColor"),
              (o = "out vec4 outputColor;"),
              (s =
                "\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    "),
              (u = ""),
              (c =
                "\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "))
            : ((t = ""),
              (e = "attribute"),
              (n = "varying"),
              (r = "varying"),
              (a = "texture2D"),
              (i = "gl_FragColor"),
              (o = ""),
              (s =
                "\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    "),
              (u =
                "\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    "),
              (c =
                "\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    ")),
          {
            version: t,
            attribute: e,
            varyingVs: n,
            varyingFs: r,
            texture2D: a,
            output: i,
            defineOutput: o,
            defineSpecialNaN: s,
            defineSpecialInf: u,
            defineRound: c,
          }
        );
      }
      function Ca(t, e, n) {
        void 0 === n && (n = "index");
        var r = Z(e);
        return r
          .map(function (e, a) {
            return (
              "int " +
              t[a] +
              " = " +
              n +
              " / " +
              e +
              "; " +
              (a === r.length - 1
                ? "int " + t[a + 1] + " = " + n + " - " + t[a] + " * " + e
                : "index -= " + t[a] + " * " + e) +
              ";"
            );
          })
          .join("");
      }
      function Oa(t) {
        var e = Z(t).map(function (t) {
          return t.toString();
        });
        return (
          "\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * " +
          e[0] +
          " + coords.y * " +
          e[1] +
          " + coords.z;\n  }\n"
        );
      }
      var Ea =
        "\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n";
      function Sa(t, e, n, r) {
        var a = [];
        t.forEach(function (t) {
          var e = R(t.shapeInfo.logicalShape);
          t.shapeInfo.isUniform
            ? a.push(
                "uniform float " + t.name + (e > 1 ? "[" + e + "]" : "") + ";"
              )
            : (a.push("uniform sampler2D " + t.name + ";"),
              a.push("uniform int offset" + t.name + ";"));
        });
        var i,
          o,
          s = a.join("\n"),
          u = t
            .map(function (t) {
              return (function (t, e, n) {
                void 0 === n && (n = !1);
                var r = "";
                r += n
                  ? (function t(e) {
                      var n, r, a;
                      switch (e.shapeInfo.logicalShape.length) {
                        case 0:
                          return (
                            (n = e.name),
                            (r =
                              "get" + n.charAt(0).toUpperCase() + n.slice(1)),
                            (a = wa()),
                            "\n    vec4 " +
                              r +
                              "() {\n      return " +
                              a.texture2D +
                              "(" +
                              n +
                              ", halfCR);\n    }\n  "
                          );
                        case 1:
                          return (function (t) {
                            var e = t.name,
                              n =
                                "get" + e.charAt(0).toUpperCase() + e.slice(1),
                              r = t.shapeInfo.texShape,
                              a = [Math.ceil(r[0] / 2), Math.ceil(r[1] / 2)],
                              i = wa();
                            return (
                              "\n    vec4 " +
                              n +
                              "(int index) {\n      vec2 uv = packedUVfrom1D(\n        " +
                              a[0] +
                              ", " +
                              a[1] +
                              ", index);\n      return " +
                              i.texture2D +
                              "(" +
                              e +
                              ", uv);\n    }\n  "
                            );
                          })(e);
                        case 2:
                          return (function (t) {
                            var e = t.shapeInfo.logicalShape,
                              n = t.name,
                              r =
                                "get" + n.charAt(0).toUpperCase() + n.slice(1),
                              a = t.shapeInfo.texShape,
                              i = a[0],
                              o = a[1],
                              s = wa();
                            if (null != a && A(e, a))
                              return (
                                "\n      vec4 " +
                                r +
                                "(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(" +
                                o +
                                ".0, " +
                                i +
                                ".0);\n\n        return " +
                                s.texture2D +
                                "(" +
                                n +
                                ", uv);\n      }\n    "
                              );
                            var u = [Math.ceil(a[0] / 2), Math.ceil(a[1] / 2)];
                            return (
                              "\n    vec4 " +
                              r +
                              "(int row, int col) {\n      vec2 uv = packedUVfrom2D(" +
                              Math.ceil(e[1] / 2) +
                              ", " +
                              u[0] +
                              ", " +
                              u[1] +
                              ", row, col);\n      return " +
                              s.texture2D +
                              "(" +
                              n +
                              ", uv);\n    }\n  "
                            );
                          })(e);
                        case 3:
                          return (function (e) {
                            var n = e.shapeInfo.logicalShape,
                              r = e.name,
                              a =
                                "get" + r.charAt(0).toUpperCase() + r.slice(1),
                              i = e.shapeInfo.texShape,
                              o = [Math.ceil(i[0] / 2), Math.ceil(i[1] / 2)];
                            if (1 === n[0]) {
                              var s = Da(e, n.slice(1));
                              return (
                                "\n        " +
                                t(s) +
                                "\n        vec4 " +
                                a +
                                "(int b, int row, int col) {\n          return " +
                                a +
                                "(" +
                                Fa(["b", "row", "col"], [1, 2]) +
                                ");\n        }\n      "
                              );
                            }
                            var u = o[0],
                              c = o[1],
                              l = Math.ceil(n[2] / 2);
                            return (
                              "\n    vec4 " +
                              a +
                              "(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        " +
                              u +
                              ", " +
                              c +
                              ", " +
                              l * Math.ceil(n[1] / 2) +
                              ", " +
                              l +
                              ", b, row, col);\n      return " +
                              wa().texture2D +
                              "(" +
                              r +
                              ", uv);\n    }\n  "
                            );
                          })(e);
                        default:
                          return (function (t) {
                            for (
                              var e = t.shapeInfo.logicalShape,
                                n = e.length,
                                r = t.name,
                                a =
                                  "get" +
                                  r.charAt(0).toUpperCase() +
                                  r.slice(1),
                                i = t.shapeInfo.texShape,
                                o = [Math.ceil(i[0] / 2), Math.ceil(i[1] / 2)],
                                s = o[0],
                                u = o[1],
                                c = Math.ceil(e[n - 1] / 2),
                                l = c * Math.ceil(e[n - 2] / 2),
                                h = "int b, int row, int col",
                                d =
                                  "b * " +
                                  l +
                                  " + (row / 2) * " +
                                  c +
                                  " + (col / 2)",
                                p = 2;
                              p < n - 1;
                              p++
                            )
                              (h = "int b" + p + ", " + h),
                                (d =
                                  "b" +
                                  p +
                                  " * " +
                                  (l *= e[n - p - 1]) +
                                  " + " +
                                  d);
                            return (
                              "\n    vec4 " +
                              a +
                              "(" +
                              h +
                              ") {\n      int index = " +
                              d +
                              ";\n      int texR = index / " +
                              u +
                              ";\n      int texC = index - texR * " +
                              u +
                              ";\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(" +
                              u +
                              ", " +
                              s +
                              ");\n      return " +
                              wa().texture2D +
                              "(" +
                              r +
                              ", uv);\n    }\n  "
                            );
                          })(e);
                      }
                    })(t)
                  : (function t(e) {
                      var n = e.shapeInfo.logicalShape;
                      switch (n.length) {
                        case 0:
                          return (function (t) {
                            var e = t.name,
                              n =
                                "get" + e.charAt(0).toUpperCase() + e.slice(1);
                            if (t.shapeInfo.isUniform)
                              return "float " + n + "() {return " + e + ";}";
                            var r = t.shapeInfo.texShape,
                              a = r[0],
                              i = r[1];
                            if (1 === a && 1 === i)
                              return (
                                "\n      float " +
                                n +
                                "() {\n        return sampleTexture(" +
                                e +
                                ", halfCR);\n      }\n    "
                              );
                            var o = t.shapeInfo.texShape;
                            return (
                              "\n    float " +
                              n +
                              "() {\n      vec2 uv = uvFromFlat(" +
                              o[0] +
                              ", " +
                              o[1] +
                              ", " +
                              Aa(e) +
                              ");\n      return sampleTexture(" +
                              e +
                              ", uv);\n    }\n  "
                            );
                          })(e);
                        case 1:
                          return (function (t) {
                            var e = t.name,
                              n =
                                "get" + e.charAt(0).toUpperCase() + e.slice(1);
                            if (t.shapeInfo.isUniform)
                              return (
                                "\n      float " +
                                n +
                                "(int index) {\n        " +
                                Ta(t) +
                                "\n      }\n    "
                              );
                            var r = t.shapeInfo.texShape,
                              a = r[0],
                              i = r[1];
                            if (1 === i && 1 === a)
                              return (
                                "\n      float " +
                                n +
                                "(int index) {\n        return sampleTexture(" +
                                e +
                                ", halfCR);\n      }\n    "
                              );
                            var o = Aa(e);
                            return 1 === i
                              ? "\n      float " +
                                  n +
                                  "(int index) {\n        vec2 uv = vec2(0.5, (float(index + " +
                                  o +
                                  ") + 0.5) / " +
                                  a +
                                  ".0);\n        return sampleTexture(" +
                                  e +
                                  ", uv);\n      }\n    "
                              : 1 === a
                              ? "\n      float " +
                                n +
                                "(int index) {\n        vec2 uv = vec2((float(index + " +
                                o +
                                ") + 0.5) / " +
                                i +
                                ".0, 0.5);\n        return sampleTexture(" +
                                e +
                                ", uv);\n      }\n    "
                              : "\n    float " +
                                n +
                                "(int index) {\n      vec2 uv = uvFromFlat(" +
                                a +
                                ", " +
                                i +
                                ", index + " +
                                o +
                                ");\n      return sampleTexture(" +
                                e +
                                ", uv);\n    }\n  ";
                          })(e);
                        case 2:
                          return (function (e) {
                            var n = e.shapeInfo.logicalShape,
                              r = e.name,
                              a =
                                "get" + r.charAt(0).toUpperCase() + r.slice(1),
                              i = e.shapeInfo.texShape;
                            if (null != i && A(n, i)) {
                              var o = i[0];
                              return (
                                "\n    float " +
                                a +
                                "(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(" +
                                i[1] +
                                ".0, " +
                                o +
                                ".0);\n      return sampleTexture(" +
                                r +
                                ", uv);\n    }\n  "
                              );
                            }
                            var s = B(n),
                              u = s.newShape,
                              c = s.keptDims,
                              l = u;
                            if (l.length < n.length) {
                              var h = Da(e, l);
                              return (
                                "\n      " +
                                t(h) +
                                "\n      float " +
                                a +
                                "(int row, int col) {\n        return " +
                                a +
                                "(" +
                                Fa(["row", "col"], c) +
                                ");\n      }\n    "
                              );
                            }
                            if (e.shapeInfo.isUniform)
                              return (
                                "\n      float " +
                                a +
                                "(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(" +
                                n[1] +
                                ", 1)));\n        " +
                                Ta(e) +
                                "\n      }\n    "
                              );
                            var d = i[0],
                              p = i[1],
                              f = Aa(r);
                            return 1 === p
                              ? "\n    float " +
                                  a +
                                  "(int row, int col) {\n      float index = dot(vec3(row, col, " +
                                  f +
                                  "), vec3(" +
                                  n[1] +
                                  ", 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / " +
                                  d +
                                  ".0);\n      return sampleTexture(" +
                                  r +
                                  ", uv);\n    }\n  "
                              : 1 === d
                              ? "\n    float " +
                                a +
                                "(int row, int col) {\n      float index = dot(vec3(row, col, " +
                                f +
                                "), vec3(" +
                                n[1] +
                                ", 1, 1));\n      vec2 uv = vec2((index + 0.5) / " +
                                p +
                                ".0, 0.5);\n      return sampleTexture(" +
                                r +
                                ", uv);\n    }\n  "
                              : "\n  float " +
                                a +
                                "(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * " +
                                n[1] +
                                " + col + " +
                                f +
                                ";\n    vec2 uv = uvFromFlat(" +
                                d +
                                ", " +
                                p +
                                ", index);\n    return sampleTexture(" +
                                r +
                                ", uv);\n  }\n";
                          })(e);
                        case 3:
                          return (function (e) {
                            var n = e.shapeInfo.logicalShape,
                              r = e.name,
                              a =
                                "get" + r.charAt(0).toUpperCase() + r.slice(1),
                              i = n[1] * n[2],
                              o = n[2],
                              s = B(n),
                              u = s.newShape,
                              c = s.keptDims,
                              l = u;
                            if (l.length < n.length) {
                              var h = Da(e, l);
                              return (
                                "\n        " +
                                t(h) +
                                "\n        float " +
                                a +
                                "(int row, int col, int depth) {\n          return " +
                                a +
                                "(" +
                                Fa(["row", "col", "depth"], c) +
                                ");\n        }\n      "
                              );
                            }
                            if (e.shapeInfo.isUniform)
                              return (
                                "\n      float " +
                                a +
                                "(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(" +
                                i +
                                ", " +
                                o +
                                ", 1)));\n        " +
                                Ta(e) +
                                "\n      }\n    "
                              );
                            var d = e.shapeInfo.texShape,
                              p = d[0],
                              f = d[1],
                              m = e.shapeInfo.flatOffset;
                            return f === i && null == m
                              ? "\n        float " +
                                  a +
                                  "(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(" +
                                  o +
                                  ", 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(" +
                                  f +
                                  ".0, " +
                                  p +
                                  ".0);\n          return sampleTexture(" +
                                  r +
                                  ", uv);\n        }\n      "
                              : f === o && null == m
                              ? "\n    float " +
                                a +
                                "(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(" +
                                n[1] +
                                ", 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(" +
                                f +
                                ".0, " +
                                p +
                                ".0);\n      return sampleTexture(" +
                                r +
                                ", uv);\n    }\n  "
                              : "\n      float " +
                                a +
                                "(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * " +
                                i +
                                " + col * " +
                                o +
                                " + depth + " +
                                Aa(r) +
                                ";\n        vec2 uv = uvFromFlat(" +
                                p +
                                ", " +
                                f +
                                ", index);\n        return sampleTexture(" +
                                r +
                                ", uv);\n      }\n  ";
                          })(e);
                        case 4:
                          return (function (e) {
                            var n = e.shapeInfo.logicalShape,
                              r = e.name,
                              a =
                                "get" + r.charAt(0).toUpperCase() + r.slice(1),
                              i = n[3],
                              o = n[2] * i,
                              s = n[1] * o,
                              u = B(n),
                              c = u.newShape,
                              l = u.keptDims;
                            if (c.length < n.length) {
                              var h = Da(e, c);
                              return (
                                "\n      " +
                                t(h) +
                                "\n      float " +
                                a +
                                "(int row, int col, int depth, int depth2) {\n        return " +
                                a +
                                "(" +
                                Fa(["row", "col", "depth", "depth2"], l) +
                                ");\n      }\n    "
                              );
                            }
                            if (e.shapeInfo.isUniform)
                              return (
                                "\n      float " +
                                a +
                                "(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(" +
                                s +
                                ", " +
                                o +
                                ", " +
                                i +
                                ", 1)));\n        " +
                                Ta(e) +
                                "\n      }\n    "
                              );
                            var d = e.shapeInfo.flatOffset,
                              p = e.shapeInfo.texShape,
                              f = p[0],
                              m = p[1];
                            return m === s && null == d
                              ? "\n      float " +
                                  a +
                                  "(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(" +
                                  o +
                                  ", " +
                                  i +
                                  ", 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(" +
                                  m +
                                  ".0, " +
                                  f +
                                  ".0);\n        return sampleTexture(" +
                                  r +
                                  ", uv);\n      }\n    "
                              : m === i && null == d
                              ? "\n      float " +
                                a +
                                "(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(" +
                                n[1] * n[2] +
                                ", " +
                                n[2] +
                                ", 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(" +
                                m +
                                ".0, " +
                                f +
                                ".0);\n        return sampleTexture(" +
                                r +
                                ", uv);\n      }\n    "
                              : "\n    float " +
                                a +
                                "(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * " +
                                s +
                                " + col * " +
                                o +
                                " +\n          depth * " +
                                i +
                                " + depth2;\n      vec2 uv = uvFromFlat(" +
                                f +
                                ", " +
                                m +
                                ", index + " +
                                Aa(r) +
                                ");\n      return sampleTexture(" +
                                r +
                                ", uv);\n    }\n  ";
                          })(e);
                        case 5:
                          return (function (e) {
                            var n = e.shapeInfo.logicalShape,
                              r = e.name,
                              a =
                                "get" + r.charAt(0).toUpperCase() + r.slice(1),
                              i = n[4],
                              o = n[3] * i,
                              s = n[2] * o,
                              u = n[1] * s,
                              c = B(n),
                              l = c.newShape,
                              h = c.keptDims;
                            if (l.length < n.length) {
                              var d = Da(e, l);
                              return (
                                "\n      " +
                                t(d) +
                                "\n      float " +
                                a +
                                "(int row, int col, int depth, int depth2, int depth3) {\n        return " +
                                a +
                                "(" +
                                Fa(
                                  ["row", "col", "depth", "depth2", "depth3"],
                                  h
                                ) +
                                ");\n      }\n    "
                              );
                            }
                            if (e.shapeInfo.isUniform)
                              return (
                                "\n      float " +
                                a +
                                "(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(" +
                                u +
                                ", " +
                                s +
                                ", " +
                                o +
                                ", " +
                                i +
                                ")) +\n          depth3;\n        " +
                                Ta(e) +
                                "\n      }\n    "
                              );
                            var p = e.shapeInfo.flatOffset,
                              f = e.shapeInfo.texShape,
                              m = f[0],
                              g = f[1];
                            return g === u && null == p
                              ? "\n      float " +
                                  a +
                                  "(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(" +
                                  s +
                                  ", " +
                                  o +
                                  ", " +
                                  i +
                                  ", 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(" +
                                  g +
                                  ".0, " +
                                  m +
                                  ".0);\n        return sampleTexture(" +
                                  r +
                                  ", uv);\n      }\n    "
                              : g === i && null == p
                              ? "\n      float " +
                                a +
                                "(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(" +
                                n[1] * n[2] * n[3] +
                                ",\n               " +
                                n[2] * n[3] +
                                ", " +
                                n[3] +
                                ", 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(" +
                                g +
                                ".0, " +
                                m +
                                ".0);\n        return sampleTexture(" +
                                r +
                                ", uv);\n      }\n    "
                              : "\n    float " +
                                a +
                                "(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * " +
                                u +
                                " + col * " +
                                s +
                                " + depth * " +
                                o +
                                " +\n          depth2 * " +
                                i +
                                " + depth3 + " +
                                Aa(r) +
                                ";\n      vec2 uv = uvFromFlat(" +
                                m +
                                ", " +
                                g +
                                ", index);\n      return sampleTexture(" +
                                r +
                                ", uv);\n    }\n  ";
                          })(e);
                        case 6:
                          return (function (e) {
                            var n = e.shapeInfo.logicalShape,
                              r = e.name,
                              a =
                                "get" + r.charAt(0).toUpperCase() + r.slice(1),
                              i = B(n),
                              o = i.newShape,
                              s = i.keptDims;
                            if (o.length < n.length) {
                              var u = Da(e, o);
                              return (
                                "\n      " +
                                t(u) +
                                "\n      float " +
                                a +
                                "(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return " +
                                a +
                                "(" +
                                Fa(
                                  [
                                    "row",
                                    "col",
                                    "depth",
                                    "depth2",
                                    "depth3",
                                    "depth4",
                                  ],
                                  s
                                ) +
                                ");\n      }\n    "
                              );
                            }
                            var c = n[5],
                              l = n[4] * c,
                              h = n[3] * l,
                              d = n[2] * h,
                              p = n[1] * d;
                            if (e.shapeInfo.isUniform)
                              return (
                                "\n      float " +
                                a +
                                "(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(" +
                                p +
                                ", " +
                                d +
                                ", " +
                                h +
                                ", " +
                                l +
                                ")) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(" +
                                c +
                                ", 1)));\n        " +
                                Ta(e) +
                                "\n      }\n    "
                              );
                            var f = e.shapeInfo.flatOffset,
                              m = e.shapeInfo.texShape,
                              g = m[0],
                              b = m[1];
                            return b === p && null == f
                              ? "\n      float " +
                                  a +
                                  "(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(" +
                                  d +
                                  ", " +
                                  h +
                                  ", " +
                                  l +
                                  ", " +
                                  c +
                                  ")) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(" +
                                  b +
                                  ".0, " +
                                  g +
                                  ".0);\n        return sampleTexture(" +
                                  r +
                                  ", uv);\n      }\n    "
                              : b === c && null == f
                              ? "\n      float " +
                                a +
                                "(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(" +
                                n[1] * n[2] * n[3] * n[4] +
                                ",\n               " +
                                n[2] * n[3] * n[4] +
                                ",\n               " +
                                n[3] * n[4] +
                                ",\n               " +
                                n[4] +
                                ")) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(" +
                                b +
                                ".0, " +
                                g +
                                ".0);\n        return sampleTexture(" +
                                r +
                                ", uv);\n      }\n    "
                              : "\n    float " +
                                a +
                                "(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * " +
                                p +
                                " + col * " +
                                d +
                                " + depth * " +
                                h +
                                " +\n          depth2 * " +
                                l +
                                " + depth3 * " +
                                c +
                                " + depth4 + " +
                                Aa(r) +
                                ";\n      vec2 uv = uvFromFlat(" +
                                g +
                                ", " +
                                b +
                                ", index);\n      return sampleTexture(" +
                                r +
                                ", uv);\n    }\n  ";
                          })(e);
                        default:
                          throw new Error(
                            n.length + "-D input sampling is not yet supported"
                          );
                      }
                    })(t);
                var a = t.shapeInfo.logicalShape,
                  i = e.logicalShape;
                return (
                  a.length <= i.length &&
                    (r += n
                      ? (function (t, e) {
                          var n,
                            r = t.name,
                            a = r.charAt(0).toUpperCase() + r.slice(1),
                            i = "get" + a + "AtOutCoords",
                            o = t.shapeInfo.logicalShape.length,
                            s = e.logicalShape.length,
                            u = jr(t.shapeInfo.logicalShape, e.logicalShape),
                            c = _a(s),
                            l = s - o,
                            h = ["x", "y", "z", "w", "u", "v"];
                          n =
                            0 === o
                              ? ""
                              : s < 2 && u.length >= 1
                              ? "coords = 0;"
                              : u
                                  .map(function (t) {
                                    return "coords." + h[t + l] + " = 0;";
                                  })
                                  .join("\n");
                          var d;
                          d =
                            s < 2 && o > 0
                              ? "coords"
                              : t.shapeInfo.logicalShape
                                  .map(function (t, e) {
                                    return "coords." + h[e + l];
                                  })
                                  .join(", ");
                          var p = "return outputValue;",
                            f = 1 === R(t.shapeInfo.logicalShape),
                            m = 1 === R(e.logicalShape);
                          if (1 !== o || f || m) {
                            if (f && !m)
                              p =
                                1 === s
                                  ? "\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      "
                                  : "\n        return vec4(outputValue.x);\n      ";
                            else if (u.length) {
                              var g = o - 2,
                                b = o - 1;
                              u.indexOf(g) > -1 && u.indexOf(b) > -1
                                ? (p = "return vec4(outputValue.x);")
                                : u.indexOf(g) > -1
                                ? (p =
                                    "return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);")
                                : u.indexOf(b) > -1 &&
                                  (p =
                                    "return vec4(outputValue.xx, outputValue.zz);");
                            }
                          } else
                            p =
                              "\n      return vec4(outputValue.xy, outputValue.xy);\n    ";
                          return (
                            "\n    vec4 " +
                            i +
                            "() {\n      " +
                            c +
                            " coords = getOutputCoords();\n      " +
                            n +
                            "\n      vec4 outputValue = get" +
                            a +
                            "(" +
                            d +
                            ");\n      " +
                            p +
                            "\n    }\n  "
                          );
                        })(t, e)
                      : (function (t, e) {
                          var n = t.name,
                            r = n.charAt(0).toUpperCase() + n.slice(1),
                            a = "get" + r + "AtOutCoords",
                            i = e.texShape,
                            o = t.shapeInfo.texShape,
                            s = t.shapeInfo.logicalShape.length,
                            u = e.logicalShape.length;
                          if (
                            !t.shapeInfo.isUniform &&
                            s === u &&
                            null == t.shapeInfo.flatOffset &&
                            A(o, i)
                          )
                            return (
                              "\n      float " +
                              a +
                              "() {\n        return sampleTexture(" +
                              n +
                              ", resultUV);\n      }\n    "
                            );
                          var c = _a(u),
                            l = jr(t.shapeInfo.logicalShape, e.logicalShape),
                            h = u - s,
                            d = ["x", "y", "z", "w", "u", "v"];
                          return (
                            "\n    float " +
                            a +
                            "() {\n      " +
                            c +
                            " coords = getOutputCoords();\n      " +
                            (0 === s
                              ? ""
                              : u < 2 && l.length >= 1
                              ? "coords = 0;"
                              : l
                                  .map(function (t) {
                                    return "coords." + d[t + h] + " = 0;";
                                  })
                                  .join("\n")) +
                            "\n      return get" +
                            r +
                            "(" +
                            (u < 2 && s > 0
                              ? "coords"
                              : t.shapeInfo.logicalShape
                                  .map(function (t, e) {
                                    return "coords." + d[e + h];
                                  })
                                  .join(", ")) +
                            ");\n    }\n  "
                          );
                        })(t, e)),
                  r
                );
              })(t, e, r);
            })
            .join("\n"),
          c = e.texShape,
          l = wa(),
          h = (function (t) {
            return (
              "\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return " +
              t.texture2D +
              "(textureSampler, uv).r;\n    }\n  "
            );
          })(l),
          d = (function (t) {
            return (
              t.version +
              "\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    " +
              t.varyingFs +
              " vec2 resultUV;\n    " +
              t.defineOutput +
              "\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    " +
              t.defineSpecialNaN +
              "\n    " +
              t.defineSpecialInf +
              "\n    " +
              t.defineRound +
              "\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    " +
              Ia +
              "\n    " +
              ka +
              "\n    " +
              Na +
              "\n  "
            );
          })(l);
        return (
          e.isPacked
            ? ((i = (function (t, e) {
                switch (t.length) {
                  case 0:
                    return "\n    int getOutputCoords() {\n      return 0;\n    }\n  ";
                  case 1:
                    return (function (t, e) {
                      var n = [Math.ceil(e[0] / 2), Math.ceil(e[1] / 2)];
                      return 1 === n[0]
                        ? "\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * " +
                            n[1] +
                            ".0);\n      }\n    "
                        : 1 === n[1]
                        ? "\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * " +
                          n[0] +
                          ".0);\n      }\n    "
                        : "\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" +
                          n[0] +
                          ", " +
                          n[1] +
                          "));\n      return 2 * (resTexRC.x * " +
                          n[1] +
                          " + resTexRC.y);\n    }\n  ";
                    })(0, e);
                  case 2:
                    return (function (t, e) {
                      var n = [Math.ceil(e[0] / 2), Math.ceil(e[1] / 2)];
                      if (A(t, e))
                        return (
                          "\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(" +
                          n[0] +
                          ", " +
                          n[1] +
                          "));\n      }\n    "
                        );
                      var r = Math.ceil(t[1] / 2);
                      return (
                        "\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" +
                        n[0] +
                        ", " +
                        n[1] +
                        "));\n\n      int index = resTexRC.x * " +
                        n[1] +
                        " + resTexRC.y;\n      int r = 2 * (index / " +
                        r +
                        ");\n      int c = imod(index, " +
                        r +
                        ") * 2;\n\n      return ivec2(r, c);\n    }\n  "
                      );
                    })(t, e);
                  case 3:
                    return (
                      (n = t),
                      (r = e),
                      (a = [Math.ceil(r[0] / 2), Math.ceil(r[1] / 2)]),
                      (o = (i = Math.ceil(n[2] / 2)) * Math.ceil(n[1] / 2)),
                      "\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" +
                        a[0] +
                        ", " +
                        a[1] +
                        "));\n      int index = resTexRC.x * " +
                        a[1] +
                        " + resTexRC.y;\n\n      int b = index / " +
                        o +
                        ";\n      index -= b * " +
                        o +
                        ";\n\n      int r = 2 * (index / " +
                        i +
                        ");\n      int c = imod(index, " +
                        i +
                        ") * 2;\n\n      return ivec3(b, r, c);\n    }\n  "
                    );
                  default:
                    return (function (t, e) {
                      for (
                        var n = [Math.ceil(e[0] / 2), Math.ceil(e[1] / 2)],
                          r = Math.ceil(t[t.length - 1] / 2),
                          a = r * Math.ceil(t[t.length - 2] / 2),
                          i = a,
                          o = "",
                          s = "b, r, c",
                          u = 2;
                        u < t.length - 1;
                        u++
                      )
                        (o =
                          "\n      int b" +
                          u +
                          " = index / " +
                          (i *= t[t.length - u - 1]) +
                          ";\n      index -= b" +
                          u +
                          " * " +
                          i +
                          ";\n    " +
                          o),
                          (s = "b" + u + ", " + s);
                      return (
                        "\n    ivec" +
                        t.length +
                        " getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" +
                        n[0] +
                        ", " +
                        n[1] +
                        "));\n      int index = resTexRC.x * " +
                        n[1] +
                        " + resTexRC.y;\n\n      " +
                        o +
                        "\n\n      int b = index / " +
                        a +
                        ";\n      index -= b * " +
                        a +
                        ";\n\n      int r = 2 * (index / " +
                        r +
                        ");\n      int c = imod(index, " +
                        r +
                        ") * 2;\n\n      return ivec" +
                        t.length +
                        "(" +
                        s +
                        ");\n    }\n  "
                      );
                    })(t, e);
                }
                var n, r, a, i, o;
              })(e.logicalShape, c)),
              (o = (function (t) {
                return (
                  "\n    void setOutput(vec4 val) {\n      " +
                  t.output +
                  " = val;\n    }\n  "
                );
              })(l)))
            : ((i = (function (t, e) {
                switch (t.length) {
                  case 0:
                    return "\n    int getOutputCoords() {\n      return 0;\n    }\n  ";
                  case 1:
                    return (function (t, e) {
                      return 1 === e[0]
                        ? "\n      int getOutputCoords() {\n        return int(resultUV.x * " +
                            e[1] +
                            ".0);\n      }\n    "
                        : 1 === e[1]
                        ? "\n      int getOutputCoords() {\n        return int(resultUV.y * " +
                          e[0] +
                          ".0);\n      }\n    "
                        : "\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" +
                          e[0] +
                          ", " +
                          e[1] +
                          "));\n      return resTexRC.x * " +
                          e[1] +
                          " + resTexRC.y;\n    }\n  ";
                    })(0, e);
                  case 2:
                    return (function (t, e) {
                      return A(t, e)
                        ? "\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(" +
                            e[0] +
                            ", " +
                            e[1] +
                            "));\n      }\n    "
                        : 1 === t[1]
                        ? "\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(" +
                          e[0] +
                          ", " +
                          e[1] +
                          "));\n        int index = resTexRC.x * " +
                          e[1] +
                          " + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    "
                        : 1 === t[0]
                        ? "\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(" +
                          e[0] +
                          ", " +
                          e[1] +
                          "));\n        int index = resTexRC.x * " +
                          e[1] +
                          " + resTexRC.y;\n        return ivec2(0, index);\n      }\n    "
                        : "\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" +
                          e[0] +
                          ", " +
                          e[1] +
                          "));\n      int index = resTexRC.x * " +
                          e[1] +
                          " + resTexRC.y;\n      int r = index / " +
                          t[1] +
                          ";\n      int c = index - r * " +
                          t[1] +
                          ";\n      return ivec2(r, c);\n    }\n  ";
                    })(t, e);
                  case 3:
                    return (
                      (n = e),
                      (r = Ca(["r", "c", "d"], t)),
                      "\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" +
                        n[0] +
                        ", " +
                        n[1] +
                        "));\n      int index = resTexRC.x * " +
                        n[1] +
                        " + resTexRC.y;\n      " +
                        r +
                        "\n      return ivec3(r, c, d);\n    }\n  "
                    );
                  case 4:
                    return (function (t, e) {
                      var n = Ca(["r", "c", "d", "d2"], t);
                      return (
                        "\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(" +
                        e[0] +
                        ", " +
                        e[1] +
                        "));\n      int index = resTexRC.x * " +
                        e[1] +
                        " + resTexRC.y;\n      " +
                        n +
                        "\n      return ivec4(r, c, d, d2);\n    }\n  "
                      );
                    })(t, e);
                  case 5:
                    return (function (t, e) {
                      var n = Ca(["r", "c", "d", "d2", "d3"], t);
                      return (
                        "\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(" +
                        e[0] +
                        ",\n                             " +
                        e[1] +
                        "));\n\n      int index = resTexRC.x * " +
                        e[1] +
                        " + resTexRC.y;\n\n      " +
                        n +
                        "\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  "
                      );
                    })(t, e);
                  case 6:
                    return (function (t, e) {
                      var n = Ca(["r", "c", "d", "d2", "d3", "d4"], t);
                      return (
                        "\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(" +
                        e[0] +
                        ", " +
                        e[1] +
                        "));\n      int index = resTexRC.x * " +
                        e[1] +
                        " + resTexRC.y;\n\n      " +
                        n +
                        "\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  "
                      );
                    })(t, e);
                  default:
                    throw new Error(
                      t.length + "-D output sampling is not yet supported"
                    );
                }
                var n, r;
              })(e.logicalShape, c)),
              (o = (function (t) {
                return (
                  "\n    void setOutput(float val) {\n      " +
                  t.output +
                  " = vec4(val, 0, 0, 0);\n    }\n  "
                );
              })(l))),
          r && (d += Ra),
          [d, h, o, s, i, u, n].join("\n")
        );
      }
      var Ia =
          "\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",
        ka =
          "\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",
        Na =
          "\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",
        Ra =
          "\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";
      function Aa(t) {
        return "offset" + t;
      }
      function Ta(t) {
        var e = t.name,
          n = R(t.shapeInfo.logicalShape);
        return n < 2
          ? "return " + e + ";"
          : "\n    for (int i = 0; i < " +
              n +
              "; i++) {\n      if (i == index) {\n        return " +
              e +
              "[i];\n      }\n    }\n  ";
      }
      function _a(t) {
        if (t <= 1) return "int";
        if (2 === t) return "ivec2";
        if (3 === t) return "ivec3";
        if (4 === t) return "ivec4";
        if (5 === t) return "ivec5";
        if (6 === t) return "ivec6";
        throw Error("GPU for rank " + t + " is not yet supported");
      }
      function Da(t, e) {
        var n = JSON.parse(JSON.stringify(t));
        return (n.shapeInfo.logicalShape = e), n;
      }
      function Fa(t, e) {
        return e
          .map(function (e) {
            return t[e];
          })
          .join(", ");
      }
      var Ma = function (t, e, n, r) {
          (this.variableNames = ["A"]),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            S(t.length > 2, function () {
              return (
                "Packed arg" +
                (n.charAt(0).toUpperCase() + n.slice(1)) +
                " supports only inputs with rank above 2."
              );
            });
          var a = t[t.length - 1],
            i = Math.ceil(a / e);
          (this.outputShape = t.slice(0, -1)),
            i > 1 && this.outputShape.push(i),
            r || this.variableNames.push("bestIndicesA");
          var o,
            s,
            u = this.outputShape,
            c = u.length,
            l = _a(c),
            h = xa("coords", c);
          if (1 === i) {
            var d = _a((s = c + 1));
            o =
              "\n        " +
              d +
              " sourceLocR = " +
              d +
              "(" +
              h.join() +
              ", 0);\n        ++" +
              h[c - 1] +
              ";\n        " +
              d +
              " sourceLocG = " +
              d +
              "(" +
              h.join() +
              ", 0);\n        ++" +
              h[c - 2] +
              ";\n        " +
              d +
              " sourceLocA = " +
              d +
              "(" +
              h.join() +
              ", 0);\n        --" +
              h[c - 1] +
              ";\n        " +
              d +
              " sourceLocB = " +
              d +
              "(" +
              h.join() +
              ", 0);\n        --" +
              h[c - 2] +
              ";";
          } else
            (s = c),
              (o =
                "\n        " +
                l +
                " sourceLocR = coords;\n        ++" +
                h[c - 1] +
                ";\n        " +
                l +
                " sourceLocG = coords;\n        ++" +
                h[c - 2] +
                ";\n        " +
                l +
                " sourceLocA = coords;\n        --" +
                h[c - 1] +
                ";\n        " +
                l +
                " sourceLocB = coords;\n        --" +
                h[c - 2] +
                ";");
          var p = ["x", "y", "z", "w", "u", "v"].slice(0, s),
            f = "." + p[s - 1],
            m = p.map(function (t) {
              return "int " + t;
            }),
            g = xa("sourceLocR", s - 1).concat("inIdx.r"),
            b = xa("sourceLocG", s - 1).concat("inIdx.g"),
            v = xa("sourceLocB", s - 1).concat("inIdx.b"),
            y = xa("sourceLocA", s - 1).concat("inIdx.a"),
            x = "max" === n ? "greaterThan" : "lessThan",
            w = r
              ? ""
              : "\n          inIdx = round(vec4(getBestIndicesAChannel(" +
                g.join() +
                "),\n                             getBestIndicesAChannel(" +
                b.join() +
                "),\n                             getBestIndicesAChannel(" +
                v.join() +
                "),\n                             getBestIndicesAChannel(" +
                y.join() +
                ")));",
            C =
              "vec4(\n            getAChannel(" +
              g.join() +
              "),\n            hasNextCol ? getAChannel(" +
              b.join() +
              ") : 0.,\n            hasNextRow ? getAChannel(" +
              v.join() +
              ") : 0.,\n            hasNextRow && hasNextCol ? getAChannel(" +
              y.join() +
              ") : 0.)",
            O = r
              ? ""
              : "\n      float getBestIndicesAChannel(" +
                m.join() +
                ") {\n        return getChannel(getBestIndicesA(" +
                p.join() +
                "),\n                                          vec2(" +
                p.slice(-2).join() +
                "));\n      }";
          this.userCode =
            "\n      float getAChannel(" +
            m.join() +
            ") {\n        return getChannel(getA(" +
            p.join() +
            "),\n                               vec2(" +
            p.slice(-2).join() +
            "));\n      }\n      " +
            O +
            "\n      void main() {\n        " +
            l +
            " coords = getOutputCoords();\n        bool hasNextCol = " +
            h[c - 1] +
            " < " +
            (u[c - 1] - 1) +
            ";\n        bool hasNextRow = " +
            h[c - 2] +
            " < " +
            (u[c - 2] - 1) +
            ";\n        " +
            o +
            "\n        ivec4 srcIdx = ivec4(sourceLocR" +
            f +
            ", sourceLocG" +
            f +
            ",\n          sourceLocB" +
            f +
            ", sourceLocA" +
            f +
            ") * " +
            e +
            ";\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = " +
            C +
            ";\n\n        for (int i = 0; i < " +
            e +
            "; i++) {\n          inIdx = srcIdx;\n          " +
            w +
            "\n          vec4 candidate = " +
            C +
            ";\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(" +
            x +
            "(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    ";
        },
        ja = function (t) {
          (this.variableNames = ["dy"]), (this.outputShape = t.inShape);
          var e = t.filterHeight,
            n = t.filterWidth,
            r = t.strideHeight,
            a = t.strideWidth,
            i = t.dilationHeight,
            o = t.dilationWidth,
            s = t.effectiveFilterHeight,
            u = t.effectiveFilterWidth,
            c = s - 1 - t.padInfo.top,
            l = u - 1 - t.padInfo.left,
            h = 1 / (e * n);
          this.userCode =
            "\n      const ivec2 pads = ivec2(" +
            c +
            ", " +
            l +
            ");\n      const float avgMultiplier = float(" +
            h +
            ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " +
            s +
            ";\n            wR += " +
            i +
            ") {\n          float dyR = float(dyRCorner + wR) / " +
            r +
            ".0;\n\n          if (dyR < 0.0 || dyR >= " +
            t.outHeight +
            ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < " +
            u +
            ";\n            wC+= " +
            o +
            ") {\n            float dyC = float(dyCCorner + wC) / " +
            a +
            ".0;\n\n            if (dyC < 0.0 || dyC >= " +
            t.outWidth +
            ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
        },
        $a = function (t) {
          (this.variableNames = ["dy"]), (this.outputShape = t.inShape);
          var e = t.filterDepth,
            n = t.filterHeight,
            r = t.filterWidth,
            a = t.strideDepth,
            i = t.strideHeight,
            o = t.strideWidth,
            s = t.dilationDepth,
            u = t.dilationHeight,
            c = t.dilationWidth,
            l = t.effectiveFilterDepth,
            h = t.effectiveFilterHeight,
            d = t.effectiveFilterWidth,
            p = l - 1 - t.padInfo.front,
            f = h - 1 - t.padInfo.top,
            m = d - 1 - t.padInfo.left,
            g = 1 / (e * n * r);
          this.userCode =
            "\n      const ivec3 pads = ivec3(" +
            p +
            ", " +
            f +
            ", " +
            m +
            ");\n      const float avgMultiplier = float(" +
            g +
            ");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < " +
            l +
            ";\n            wD += " +
            s +
            ") {\n          float dyD = float(dyDCorner + wD) / " +
            a +
            ".0;\n\n          if (dyD < 0.0 || dyD >= " +
            t.outDepth +
            ".0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < " +
            h +
            ";\n              wR += " +
            u +
            ") {\n            float dyR = float(dyRCorner + wR) / " +
            i +
            ".0;\n\n            if (dyR < 0.0 || dyR >= " +
            t.outHeight +
            ".0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < " +
            d +
            ";\n                wC += " +
            c +
            ") {\n              float dyC = float(dyCCorner + wC) / " +
            o +
            ".0;\n\n              if (dyC < 0.0 || dyC >= " +
            t.outWidth +
            ".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
        },
        Ba = function (t, e, n, r, a, i) {
          (this.outputShape = []),
            (this.variableNames = ["x", "mean", "variance"]),
            Br(t, e),
            Br(t, n);
          var o = "0.0";
          null != r &&
            (Br(t, r),
            this.variableNames.push("offset"),
            (o = "getOffsetAtOutCoords()"));
          var s = "1.0";
          null != a &&
            (Br(t, a),
            this.variableNames.push("scale"),
            (s = "getScaleAtOutCoords()")),
            (this.outputShape = t),
            (this.userCode =
              "\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = " +
              o +
              ";\n        float scale = " +
              s +
              ";\n        float inv = scale * inversesqrt(variance + float(" +
              i +
              "));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    ");
        },
        Pa = function (t, e, n, r, a, i) {
          (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.variableNames = ["x", "mean", "variance"]),
            Br(t, e),
            Br(t, n);
          var o = "vec4(0.0)";
          null != r &&
            (Br(t, r),
            this.variableNames.push("offset"),
            (o = "getOffsetAtOutCoords()"));
          var s = "vec4(1.0)";
          null != a &&
            (Br(t, a),
            this.variableNames.push("scale"),
            (s = "getScaleAtOutCoords()")),
            (this.outputShape = t),
            (this.userCode =
              "\n      void main() {\n        vec4 offset = " +
              o +
              ";\n        vec4 scale = " +
              s +
              ";\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(" +
              i +
              "));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    ");
        },
        La = function (t, e, n) {
          (this.variableNames = ["AReal", "AImag", "BReal", "BImag"]),
            (this.outputShape = Br(e, n)),
            (this.userCode =
              "\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        " +
              t +
              "\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    ");
        },
        za = "return a + b;",
        Wa = "return a - b;",
        Va = "return a * b;",
        Ua = "return (a < 0.) ? b * a : a;",
        Ga = function (t, e, n) {
          (this.variableNames = ["A", "B"]),
            (this.outputShape = Br(e, n)),
            (this.userCode =
              "\n      float binaryOperation(float a, float b) {\n        " +
              t +
              "\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    ");
        },
        Ha =
          "\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",
        qa = function (t, e, n, r) {
          void 0 === r && (r = !1),
            (this.variableNames = ["A", "B"]),
            (this.supportsBroadcasting = !0),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.outputShape = Br(e, n));
          var a = this.outputShape.length,
            i = "";
          if (r)
            if (0 === a || 1 === R(this.outputShape))
              i =
                "\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";
            else if (
              ((i =
                "\n          " +
                _a(a) +
                " coords = getOutputCoords();\n        "),
              1 === a)
            )
              i +=
                "\n            result.y = (coords + 1) >= " +
                this.outputShape[0] +
                " ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ";
            else {
              var o = xa("coords", a);
              i +=
                "\n            bool nextRowOutOfBounds =\n              (" +
                o[a - 2] +
                " + 1) >= " +
                this.outputShape[a - 2] +
                ";\n            bool nextColOutOfBounds =\n              (" +
                o[a - 1] +
                " + 1) >= " +
                this.outputShape[a - 1] +
                ";\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          ";
            }
          this.userCode =
            "\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        " +
            t +
            "\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        " +
            i +
            "\n\n        setOutput(result);\n      }\n    ";
        },
        Ka = (function () {
          function t(t) {
            (this.variableNames = ["A"]),
              (this.outputShape = t),
              (this.userCode =
                "\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    ");
          }
          return (
            (t.prototype.getCustomSetupFunc = function (t, e) {
              var n = this;
              return function (r, a) {
                null == n.minLoc &&
                  ((n.minLoc = r.getUniformLocationNoThrow(a, "minVal")),
                  (n.maxLoc = r.getUniformLocationNoThrow(a, "maxVal"))),
                  r.gl.uniform1f(n.minLoc, t),
                  r.gl.uniform1f(n.maxLoc, e);
              };
            }),
            t
          );
        })(),
        Xa = (function () {
          function t(t) {
            (this.variableNames = ["A"]),
              (this.packedInputs = !0),
              (this.packedOutput = !0),
              (this.outputShape = t),
              (this.userCode =
                "\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    ");
          }
          return (
            (t.prototype.getCustomSetupFunc = function (t, e) {
              var n = this;
              return function (r, a) {
                null == n.minLoc &&
                  ((n.minLoc = r.getUniformLocationNoThrow(a, "minVal")),
                  (n.maxLoc = r.getUniformLocationNoThrow(a, "maxVal"))),
                  r.gl.uniform1f(n.minLoc, t),
                  r.gl.uniform1f(n.maxLoc, e);
              };
            }),
            t
          );
        })(),
        Ya = function (t) {
          (this.variableNames = ["real", "imag"]),
            (this.outputShape = t),
            (this.userCode =
              "\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    ");
        },
        Ja = function (t) {
          (this.outputShape = []),
            (this.outputShape = rn(t, 1)),
            (this.variableNames = t.map(function (t, e) {
              return "T" + e;
            }));
          var e = new Array(t.length - 1);
          e[0] = t[0][1];
          for (var n = 1; n < e.length; n++) e[n] = e[n - 1] + t[n][1];
          var r = ["if (yC < " + e[0] + ") setOutput(getT0(yR, yC));"];
          for (n = 1; n < e.length; n++) {
            var a = e[n - 1];
            r.push(
              "else if (yC < " +
                e[n] +
                ") setOutput(getT" +
                n +
                "(yR, yC-" +
                a +
                "));"
            );
          }
          var i = e.length,
            o = e[e.length - 1];
          r.push("else setOutput(getT" + i + "(yR, yC-" + o + "));"),
            (this.userCode =
              "\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        " +
              r.join("\n        ") +
              "\n      }\n    ");
        },
        Qa = function (t, e) {
          (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.outputShape = []),
            (this.outputShape = rn(t, e));
          var n = this.outputShape,
            r = n.length,
            a = _a(r),
            i = xa("coords", r),
            o = ["x", "y", "z", "w", "u", "v"].slice(0, r);
          this.variableNames = t.map(function (t, e) {
            return "T" + e;
          });
          var s = new Array(t.length - 1);
          s[0] = t[0][e];
          for (var u = 1; u < s.length; u++) s[u] = s[u - 1] + t[u][e];
          var c = o[e],
            l = o.slice(-2),
            h = o.join(),
            d =
              "if (" +
              c +
              " < " +
              s[0] +
              ") {\n        return getChannel(\n            getT0(" +
              h +
              "), vec2(" +
              l.join() +
              "));\n        }";
          for (u = 1; u < s.length; u++) {
            var p = s[u - 1];
            d +=
              "\n        if (" +
              c +
              " < " +
              s[u] +
              "  && " +
              c +
              " >= " +
              s[u - 1] +
              ") {\n          return getChannel(\n            getT" +
              u +
              "(" +
              Za(o, c, p) +
              "),\n            vec2(" +
              Za(l, c, p) +
              "));\n        }";
          }
          var f = s.length,
            m = s[s.length - 1];
          (d +=
            "\n        return getChannel(\n          getT" +
            f +
            "(" +
            Za(o, c, m) +
            "),\n          vec2(" +
            Za(l, c, m) +
            "));"),
            (this.userCode =
              "\n      float getValue(" +
              o.map(function (t) {
                return "int " + t;
              }) +
              ") {\n        " +
              d +
              "\n      }\n\n      void main() {\n        " +
              a +
              " coords = getOutputCoords();\n        vec4 result = vec4(getValue(" +
              i +
              "), 0., 0., 0.);\n\n        " +
              i[r - 1] +
              " = " +
              i[r - 1] +
              " + 1;\n        if (" +
              i[r - 1] +
              " < " +
              n[r - 1] +
              ") {\n          result.g = getValue(" +
              i +
              ");\n        }\n\n        " +
              i[r - 2] +
              " = " +
              i[r - 2] +
              " + 1;\n        if (" +
              i[r - 2] +
              " < " +
              n[r - 2] +
              ") {\n          result.a = getValue(" +
              i +
              ");\n        }\n\n        " +
              i[r - 1] +
              " = " +
              i[r - 1] +
              " - 1;\n        if (" +
              i[r - 2] +
              " < " +
              n[r - 2] +
              " &&\n            " +
              i[r - 1] +
              " < " +
              n[r - 1] +
              ") {\n          result.b = getValue(" +
              i +
              ");\n        }\n        setOutput(result);\n      }\n    ");
        };
      function Za(t, e, n) {
        var r = t.indexOf(e);
        return t
          .map(function (t, e) {
            return e === r ? t + " - " + n : t;
          })
          .join();
      }
      var ti = function (t) {
          (this.variableNames = ["x", "dy"]),
            (this.outputShape = t.filterShape);
          var e = t.strideHeight,
            n = t.strideWidth,
            r = t.padInfo.top,
            a = t.padInfo.left,
            i = "channelsLast" === t.dataFormat;
          this.userCode =
            "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < " +
            t.batchSize +
            "; b++) {\n          for (int yR = 0; yR < " +
            t.outHeight +
            "; yR++) {\n            int xR = wR + yR * " +
            e +
            " - " +
            r +
            ";\n\n            if (xR < 0 || xR >= " +
            t.inHeight +
            ") {\n              continue;\n            }\n\n            for (int yC = 0; yC < " +
            t.outWidth +
            "; yC++) {\n              int xC = wC + yC * " +
            n +
            " - " +
            a +
            ";\n\n              if (xC < 0 || xC >= " +
            t.inWidth +
            ") {\n                continue;\n              }\n\n              if (" +
            i +
            ") {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
        },
        ei = function (t) {
          (this.variableNames = ["dy", "W"]), (this.outputShape = t.inShape);
          var e = t.filterHeight,
            n = t.filterWidth,
            r = t.strideHeight,
            a = t.strideWidth,
            i = "channelsLast" === t.dataFormat,
            o = e - 1 - t.padInfo.top,
            s = n - 1 - t.padInfo.left,
            u = i ? 1 : 2,
            c = i ? 2 : 3,
            l = i ? 3 : 1;
          this.userCode =
            "\n      const ivec2 pads = ivec2(" +
            o +
            ", " +
            s +
            ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[" +
            l +
            "];\n\n        ivec2 dyCorner = ivec2(coords[" +
            u +
            "], coords[" +
            c +
            "]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " +
            e +
            "; wR++) {\n          float dyR = float(dyRCorner + wR) / " +
            r +
            ".0;\n\n          if (dyR < 0.0 || dyR >= " +
            t.outHeight +
            ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = " +
            e +
            " - 1 - wR;\n\n          for (int wC = 0; wC < " +
            n +
            "; wC++) {\n            float dyC = float(dyCCorner + wC) / " +
            a +
            ".0;\n\n            if (dyC < 0.0 || dyC >= " +
            t.outWidth +
            ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = " +
            n +
            " - 1 - wC;\n\n            for (int d2 = 0; d2 < " +
            t.outChannels +
            "; d2++) {\n\n              if (" +
            i +
            ") {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
        },
        ni = function (t) {
          (this.variableNames = ["x", "dy"]),
            (this.outputShape = t.filterShape);
          var e = t.strideDepth,
            n = t.strideHeight,
            r = t.strideWidth,
            a = t.padInfo.front,
            i = t.padInfo.top,
            o = t.padInfo.left;
          this.userCode =
            "\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < " +
            t.batchSize +
            "; b++) {\n          for (int yF = 0; yF < " +
            t.outDepth +
            "; yF++) {\n            int xF = wF + yF * " +
            e +
            " - " +
            a +
            ";\n\n            if (xF < 0 || xF >= " +
            t.inDepth +
            ") {\n              continue;\n            }\n\n            for (int yR = 0; yR < " +
            t.outHeight +
            "; yR++) {\n              int xR = wR + yR * " +
            n +
            " - " +
            i +
            ";\n\n              if (xR < 0 || xR >= " +
            t.inHeight +
            ") {\n                continue;\n              }\n\n              for (int yC = 0; yC < " +
            t.outWidth +
            "; yC++) {\n                int xC = wC + yC * " +
            r +
            " - " +
            o +
            ";\n\n                if (xC < 0 || xC >= " +
            t.inWidth +
            ") {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
        },
        ri = function (t) {
          (this.variableNames = ["dy", "W"]), (this.outputShape = t.inShape);
          var e = t.filterDepth,
            n = t.filterHeight,
            r = t.filterWidth,
            a = t.strideDepth,
            i = t.strideHeight,
            o = t.strideWidth,
            s = e - 1 - t.padInfo.front,
            u = n - 1 - t.padInfo.top,
            c = r - 1 - t.padInfo.left;
          this.userCode =
            "\n      const ivec3 pads = ivec3(" +
            s +
            ", " +
            u +
            ", " +
            c +
            ");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < " +
            e +
            "; wF++) {\n          float dyF = float(dyFCorner + wF) / " +
            a +
            ".0;\n\n          if (dyF < 0.0 || dyF >= " +
            t.outDepth +
            ".0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = " +
            e +
            " - 1 - wF;\n\n          for (int wR = 0; wR < " +
            n +
            "; wR++) {\n            float dyR = float(dyRCorner + wR) / " +
            i +
            ".0;\n\n            if (dyR < 0.0 || dyR >= " +
            t.outHeight +
            ".0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = " +
            n +
            " - 1 - wR;\n\n            for (int wC = 0; wC < " +
            r +
            "; wC++) {\n              float dyC = float(dyCCorner + wC) / " +
            o +
            ".0;\n\n              if (dyC < 0.0 || dyC >= " +
            t.outWidth +
            ".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = " +
            r +
            " - 1 - wC;\n\n              for (int d2 = 0; d2 < " +
            t.outChannels +
            "; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
        },
        ai = function (t) {
          (this.variableNames = ["x", "dy"]),
            (this.outputShape = t.filterShape);
          var e = t.strideHeight,
            n = t.strideWidth,
            r = t.padInfo.top,
            a = t.padInfo.left,
            i = t.outChannels / t.inChannels;
          this.userCode =
            "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * " +
            i +
            " + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < " +
            t.batchSize +
            "; b++) {\n          for (int yR = 0; yR < " +
            t.outHeight +
            "; yR++) {\n            int xR = wR + yR * " +
            e +
            " - " +
            r +
            ";\n\n            if (xR < 0 || xR >= " +
            t.inHeight +
            ") {\n              continue;\n            }\n\n            for (int yC = 0; yC < " +
            t.outWidth +
            "; yC++) {\n              int xC = wC + yC * " +
            n +
            " - " +
            a +
            ";\n\n              if (xC < 0 || xC >= " +
            t.inWidth +
            ") {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
        },
        ii = function (t) {
          (this.variableNames = ["dy", "W"]), (this.outputShape = t.inShape);
          var e = t.filterHeight,
            n = t.filterWidth,
            r = t.strideHeight,
            a = t.strideWidth,
            i = e - 1 - t.padInfo.top,
            o = n - 1 - t.padInfo.left,
            s = t.outChannels / t.inChannels;
          this.userCode =
            "\n      const ivec2 pads = ivec2(" +
            i +
            ", " +
            o +
            ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < " +
            e +
            "; wR++) {\n          float dyR = float(dyRCorner + wR) / " +
            r +
            ".0;\n\n          if (dyR < 0.0 || dyR >= " +
            t.outHeight +
            ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = " +
            e +
            " - 1 - wR;\n\n          for (int wC = 0; wC < " +
            n +
            "; wC++) {\n            float dyC = float(dyCCorner + wC) / " +
            a +
            ".0;\n\n            if (dyC < 0.0 || dyC >= " +
            t.outWidth +
            ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = " +
            n +
            " - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < " +
            s +
            "; dm++) {\n              int d2 = d1 * " +
            s +
            " + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
        },
        oi = function (t, e, n, r) {
          void 0 === e && (e = !1),
            void 0 === n && (n = null),
            void 0 === r && (r = !1),
            (this.variableNames = ["x", "W"]),
            (this.outputShape = t.outShape);
          var a = t.padInfo.top,
            i = t.padInfo.left,
            o = t.strideHeight,
            s = t.strideWidth,
            u = t.dilationHeight,
            c = t.dilationWidth,
            l = t.filterHeight,
            h = t.filterWidth,
            d = 4 * Math.floor(t.inChannels / 4),
            p = t.inChannels % 4,
            f = "channelsLast" === t.dataFormat,
            m = f ? 1 : 2,
            g = f ? 2 : 3,
            b = f ? 3 : 1,
            v = "",
            y = "";
          n &&
            ((v = r
              ? "float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          " +
                n +
                "\n        }"
              : "\n          float activation(float x) {\n            " +
                n +
                "\n          }\n        "),
            (y = "result = activation(result);"));
          var x = e ? "result += getBiasAtOutCoords();" : "";
          e && this.variableNames.push("bias"),
            r && this.variableNames.push("preluActivationWeights"),
            (this.userCode =
              "\n      " +
              v +
              "\n\n      const ivec2 strides = ivec2(" +
              o +
              ", " +
              s +
              ");\n      const ivec2 pads = ivec2(" +
              a +
              ", " +
              i +
              ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[" +
              b +
              "];\n\n        ivec2 xRCCorner =\n            ivec2(coords[" +
              m +
              "], coords[" +
              g +
              "]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " +
              l +
              "; wR++) {\n          int xR = xRCorner + wR * " +
              u +
              ";\n\n          if (xR < 0 || xR >= " +
              t.inHeight +
              ") {\n            continue;\n          }\n\n          for (int wC = 0; wC < " +
              h +
              "; wC++) {\n            int xC = xCCorner + wC * " +
              c +
              ";\n\n            if (xC < 0 || xC >= " +
              t.inWidth +
              ") {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < " +
              d +
              "; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (" +
              f +
              ") {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (" +
              (1 === p) +
              ") {\n\n              if (" +
              f +
              ") {\n                dotProd +=\n                    getX(batch, xR, xC, " +
              d +
              ") *\n                    getW(wR, wC, " +
              d +
              ", d2);\n              } else {\n                dotProd +=\n                    getX(batch, " +
              d +
              ", xR, xC) *\n                    getW(wR, wC, " +
              d +
              ", d2);\n              }\n\n            } else if (" +
              (2 === p) +
              ") {\n              vec2 wValues = vec2(\n                getW(wR, wC, " +
              d +
              ", d2),\n                getW(wR, wC, " +
              d +
              " + 1, d2)\n              );\n\n              if (" +
              f +
              ") {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, " +
              d +
              "),\n                  getX(batch, xR, xC, " +
              d +
              " + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, " +
              d +
              ", xR, xC),\n                  getX(batch, " +
              d +
              " + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (" +
              (3 === p) +
              ") {\n              vec3 wValues = vec3(\n                getW(wR, wC, " +
              d +
              ", d2),\n                getW(wR, wC, " +
              d +
              " + 1, d2),\n                getW(wR, wC, " +
              d +
              " + 2, d2)\n              );\n\n              if (" +
              f +
              ") {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, " +
              d +
              "),\n                  getX(batch, xR, xC, " +
              d +
              " + 1),\n                  getX(batch, xR, xC, " +
              d +
              " + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, " +
              d +
              ", xR, xC),\n                  getX(batch, " +
              d +
              " + 1, xR, xC),\n                  getX(batch, " +
              d +
              " + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        " +
              x +
              "\n        " +
              y +
              "\n        setOutput(result);\n      }\n    ");
        },
        si = function (t) {
          (this.variableNames = ["x", "W"]), (this.outputShape = t.outShape);
          var e = t.padInfo.front,
            n = t.padInfo.top,
            r = t.padInfo.left,
            a = t.strideDepth,
            i = t.strideHeight,
            o = t.strideWidth,
            s = t.dilationDepth,
            u = t.dilationHeight,
            c = t.dilationWidth,
            l = t.filterDepth,
            h = t.filterHeight,
            d = t.filterWidth,
            p = 4 * Math.floor(t.inChannels / 4),
            f = t.inChannels % 4;
          this.userCode =
            "\n      const ivec3 strides = ivec3(" +
            a +
            ", " +
            i +
            ", " +
            o +
            ");\n      const ivec3 pads = ivec3(" +
            e +
            ", " +
            n +
            ", " +
            r +
            ");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < " +
            l +
            "; wF++) {\n          int xF = xFCorner + wF * " +
            s +
            ";\n\n          if (xF < 0 || xF >= " +
            t.inDepth +
            ") {\n            continue;\n          }\n\n          for (int wR = 0; wR < " +
            h +
            "; wR++) {\n            int xR = xRCorner + wR * " +
            u +
            ";\n\n            if (xR < 0 || xR >= " +
            t.inHeight +
            ") {\n              continue;\n            }\n\n            for (int wC = 0; wC < " +
            d +
            "; wC++) {\n              int xC = xCCorner + wC * " +
            c +
            ";\n\n              if (xC < 0 || xC >= " +
            t.inWidth +
            ") {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < " +
            p +
            "; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (" +
            (1 === f) +
            ") {\n                dotProd +=\n                  getX(batch, xF, xR, xC, " +
            p +
            ") *\n                  getW(wF, wR, wC, " +
            p +
            ", d2);\n              } else if (" +
            (2 === f) +
            ") {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, " +
            p +
            "),\n                  getX(batch, xF, xR, xC, " +
            p +
            " + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, " +
            p +
            ", d2),\n                  getW(wF, wR, wC, " +
            p +
            " + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (" +
            (3 === f) +
            ") {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, " +
            p +
            "),\n                  getX(batch, xF, xR, xC, " +
            p +
            " + 1),\n                  getX(batch, xF, xR, xC, " +
            p +
            " + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, " +
            p +
            ", d2),\n                  getW(wF, wR, wC, " +
            p +
            " + 1, d2),\n                  getW(wF, wR, wC, " +
            p +
            " + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
        },
        ui = function (t, e, n, r) {
          void 0 === e && (e = !1),
            void 0 === n && (n = null),
            void 0 === r && (r = !1),
            (this.variableNames = ["x", "W"]),
            (this.outputShape = t.outShape);
          var a = t.inHeight,
            i = t.inWidth,
            o = t.padInfo.top,
            s = t.padInfo.left,
            u = t.strideHeight,
            c = t.strideWidth,
            l = t.dilationHeight,
            h = t.dilationWidth,
            d = t.filterHeight,
            p = t.filterWidth,
            f = t.outChannels / t.inChannels,
            m = "",
            g = "";
          n &&
            ((m = r
              ? "float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          " +
                n +
                "\n        }"
              : "\n          float activation(float x) {\n            " +
                n +
                "\n          }\n        "),
            (g = "result = activation(result);"));
          var b = e ? "result += getBiasAtOutCoords();" : "";
          e && this.variableNames.push("bias"),
            r && this.variableNames.push("preluActivationWeights"),
            (this.userCode =
              "\n      " +
              m +
              "\n\n      const ivec2 strides = ivec2(" +
              u +
              ", " +
              c +
              ");\n      const ivec2 pads = ivec2(" +
              o +
              ", " +
              s +
              ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / " +
              f +
              ";\n        int q = d2 - d1 * " +
              f +
              ";\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < " +
              d +
              "; wR++) {\n          int xR = xRCorner + wR * " +
              l +
              ";\n\n          if (xR < 0 || xR >= " +
              a +
              ") {\n            continue;\n          }\n\n          for (int wC = 0; wC < " +
              p +
              "; wC++) {\n            int xC = xCCorner + wC * " +
              h +
              ";\n\n            if (xC < 0 || xC >= " +
              i +
              ") {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        " +
              b +
              "\n        " +
              g +
              "\n        setOutput(result);\n      }\n    ");
        },
        ci = function (t, e, n, r) {
          void 0 === e && (e = !1),
            void 0 === n && (n = null),
            void 0 === r && (r = !1),
            (this.variableNames = ["x", "W"]),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.outputShape = t.outShape);
          for (
            var a = t.inHeight,
              i = t.inWidth,
              o = t.padInfo.top,
              s = t.padInfo.left,
              u = t.strideHeight,
              c = t.strideWidth,
              l = t.dilationHeight,
              h = t.dilationWidth,
              d = t.filterHeight,
              p = t.filterWidth,
              f = p,
              m = "int xR; int xC; int xCOffset;",
              g = 0;
            g < d;
            g++
          )
            for (var b = 0; b < p; b++)
              m +=
                "\n          vec4 xTexelR" +
                g +
                "C" +
                2 * b +
                " = vec4(0.);\n          vec4 wR" +
                g +
                "C" +
                b +
                " = vec4(0.);\n          vec4 xR" +
                g +
                "C" +
                b +
                " = vec4(0.);";
          for (g = 0; g < d; g++)
            for (var v = 0; v < f; v++) {
              if (
                ((m +=
                  "\n          xR = xRCorner + " +
                  g * l +
                  ";\n          xC = xCCorner + " +
                  (b = 2 * v) * h +
                  ";\n        "),
                1 === c)
              ) {
                if (
                  b < p &&
                  ((m +=
                    s % 2 == 1
                      ? "\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < " +
                        a +
                        " && xCOffset >= 0 && xCOffset < " +
                        i +
                        ") {\n                  xTexelR" +
                        g +
                        "C" +
                        b +
                        " = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= " +
                        i +
                        ") {\n                    xTexelR" +
                        g +
                        "C" +
                        b +
                        ".zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR" +
                        g +
                        "C" +
                        b +
                        " = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < " +
                        a +
                        " && xCOffset >= 0 && xCOffset < " +
                        i +
                        ") {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= " +
                        i +
                        ") {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR" +
                        g +
                        "C" +
                        b +
                        " = vec4(previous.zw, xTexelR" +
                        g +
                        "C" +
                        b +
                        ".xy);\n                } else {\n                  xR" +
                        g +
                        "C" +
                        b +
                        " = vec4(0, 0, xTexelR" +
                        g +
                        "C" +
                        b +
                        ".xy);\n                }\n              "
                      : "\n                if(xR >= 0 && xR < " +
                        a +
                        " && xC >= 0 && xC < " +
                        i +
                        ") {\n                  xTexelR" +
                        g +
                        "C" +
                        b +
                        " = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR" +
                        g +
                        "C" +
                        b +
                        " = vec4(0.);\n                }\n\n                xR" +
                        g +
                        "C" +
                        b +
                        " = xTexelR" +
                        g +
                        "C" +
                        b +
                        ";\n              "),
                  b + 1 < p)
                ) {
                  var y = s % 2 == 0 ? O(h) : h;
                  (h % 2 == 0 && s % 2 == 1) || (h % 2 != 0 && s % 2 != 1)
                    ? ((m +=
                        "\n                  xCOffset = xC + " +
                        (s % 2) +
                        " + " +
                        y +
                        ";\n\n                  if(xR >= 0 && xR < " +
                        a +
                        " &&\n                    xCOffset >= 0 && xCOffset < " +
                        i +
                        ") {\n                    xTexelR" +
                        g +
                        "C" +
                        (b + 2) +
                        " = getX(batch, xR, xCOffset, d1);\n                  }\n                "),
                      h > 1 &&
                        (m +=
                          "\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < " +
                          a +
                          " &&\n                      xCOffset >= 0 && xCOffset < " +
                          i +
                          ") {\n                      xTexelR" +
                          g +
                          "C" +
                          b +
                          " = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR" +
                          g +
                          "C" +
                          b +
                          " = vec4(0.);\n                    }\n                  "),
                      (m +=
                        "\n                  xR" +
                        g +
                        "C" +
                        (b + 1) +
                        " = vec4(\n                    xTexelR" +
                        g +
                        "C" +
                        b +
                        ".zw, xTexelR" +
                        g +
                        "C" +
                        (b + 2) +
                        ".xy);\n                "))
                    : (m +=
                        "\n                  xCOffset = xC + " +
                        y +
                        ";\n\n                  if(xR >= 0 && xR < " +
                        a +
                        " &&\n                    xCOffset >= 0 && xCOffset < " +
                        i +
                        ") {\n                    xTexelR" +
                        g +
                        "C" +
                        (b + 2) +
                        " = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR" +
                        g +
                        "C" +
                        (b + 1) +
                        " = xTexelR" +
                        g +
                        "C" +
                        (b + 2) +
                        ";\n                ");
                }
              } else
                b < p &&
                  ((m +=
                    "\n              if(xR >= 0 && xR < " +
                    a +
                    ") {\n            "),
                  s % 2 == 1
                    ? ((m +=
                        "\n                xCOffset = xC + 1 - " +
                        c +
                        ";\n                if(xCOffset >= 0 && xCOffset < " +
                        i +
                        ") {\n                  xTexelR" +
                        g +
                        "C" +
                        b +
                        " = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR" +
                        g +
                        "C" +
                        b +
                        " = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < " +
                        i +
                        ") {\n                  xTexelR" +
                        g +
                        "C" +
                        (b + 2) +
                        " = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR" +
                        g +
                        "C" +
                        (b + 2) +
                        " = vec4(0.);\n                }\n\n                xR" +
                        g +
                        "C" +
                        b +
                        " = vec4(\n                  xTexelR" +
                        g +
                        "C" +
                        b +
                        ".zw, xTexelR" +
                        g +
                        "C" +
                        (b + 2) +
                        ".zw);\n              "),
                      b + 1 < p &&
                        (m +=
                          "\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + " +
                          c +
                          ";\n                  if(xCOffset >= 0 && xCOffset < " +
                          i +
                          ") {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR" +
                          g +
                          "C" +
                          (b + 1) +
                          " = vec4(xTexelR" +
                          g +
                          "C" +
                          (b + 2) +
                          ".xy, final.xy);\n                "))
                    : ((m +=
                        "\n                if(xC >= 0 && xC < " +
                        i +
                        ") {\n                  xTexelR" +
                        g +
                        "C" +
                        b +
                        " = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR" +
                        g +
                        "C" +
                        b +
                        " = vec4(0.);\n                }\n\n                xCOffset = xC + " +
                        c +
                        ";\n                if(xCOffset >= 0 && xCOffset < " +
                        i +
                        ") {\n                  xTexelR" +
                        g +
                        "C" +
                        (b + 2) +
                        " = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR" +
                        g +
                        "C" +
                        (b + 2) +
                        " = vec4(0.);\n                }\n\n                xR" +
                        g +
                        "C" +
                        b +
                        " = vec4(\n                  xTexelR" +
                        g +
                        "C" +
                        b +
                        ".xy, xTexelR" +
                        g +
                        "C" +
                        (b + 2) +
                        ".xy);\n              "),
                      b + 1 < p &&
                        (m +=
                          "\n                  xR" +
                          g +
                          "C" +
                          (b + 1) +
                          " = vec4(\n                    xTexelR" +
                          g +
                          "C" +
                          b +
                          ".zw, xTexelR" +
                          g +
                          "C" +
                          (b + 2) +
                          ".zw);\n                ")),
                  (m += "}"));
              b < p &&
                ((m +=
                  "\n            vec4 wTexelR" +
                  g +
                  "C" +
                  b +
                  " = getW(" +
                  g +
                  ", " +
                  b +
                  ", d1, q);\n            wR" +
                  g +
                  "C" +
                  b +
                  " = vec4(wTexelR" +
                  g +
                  "C" +
                  b +
                  ".xz, wTexelR" +
                  g +
                  "C" +
                  b +
                  ".xz);\n          "),
                b + 1 < p &&
                  (m +=
                    "\n              vec4 wTexelR" +
                    g +
                    "C" +
                    (b + 1) +
                    " = getW(" +
                    g +
                    ", " +
                    (b + 1) +
                    ", d1, q);\n              wR" +
                    g +
                    "C" +
                    (b + 1) +
                    " =\n                vec4(wTexelR" +
                    g +
                    "C" +
                    (b + 1) +
                    ".xz, wTexelR" +
                    g +
                    "C" +
                    (b + 1) +
                    ".xz);"));
            }
          for (g = 0; g < d; g++)
            for (b = 0; b < p; b++)
              m += "dotProd += xR" + g + "C" + b + " * wR" + g + "C" + b + ";";
          var x = "",
            w = "";
          n &&
            ((x = r
              ? "vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          " +
                n +
                "\n        }"
              : "vec4 activation(vec4 x) {\n          " + n + "\n        }"),
            (w = "result = activation(result);"));
          var C = e ? "result += getBiasAtOutCoords();" : "";
          e && this.variableNames.push("bias"),
            r && this.variableNames.push("preluActivationWeights"),
            (this.userCode =
              "\n      " +
              x +
              "\n\n      const ivec2 strides = ivec2(" +
              u +
              ", " +
              c +
              ");\n      const ivec2 pads = ivec2(" +
              o +
              ", " +
              s +
              ");\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        " +
              m +
              "\n\n        vec4 result = dotProd;\n        " +
              C +
              "\n        " +
              w +
              "\n        setOutput(result);\n      }\n    ");
        },
        li = function (t, e, n, r, a) {
          (this.variableNames = ["Image", "Boxes", "BoxInd"]),
            (this.outputShape = []);
          var i = t[0],
            o = t[1],
            s = t[2],
            u = t[3],
            c = e[0],
            l = n[0],
            h = n[1];
          this.outputShape = [c, l, h, u];
          var d = "bilinear" === r ? 1 : 0,
            p = [o - 1 + ".0", s - 1 + ".0"],
            f = p[0],
            m = p[1],
            g =
              l > 1
                ? [
                    "" + (o - 1) / (l - 1),
                    "(y2-y1) * height_ratio",
                    "y1*" + f + " + float(y)*(height_scale)",
                  ]
                : ["0.0", "0.0", "0.5 * (y1+y2) * " + f],
            b = g[0],
            v = g[1],
            y = g[2],
            x =
              h > 1
                ? [
                    "" + (s - 1) / (h - 1),
                    "(x2-x1) * width_ratio",
                    "x1*" + m + " + float(x)*(width_scale)",
                  ]
                : ["0.0", "0.0", "0.5 * (x1+x2) * " + m],
            w = x[0],
            C = x[1],
            O = x[2];
          this.userCode =
            "\n      const float height_ratio = float(" +
            b +
            ");\n      const float width_ratio = float(" +
            w +
            ");\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= " +
            i +
            ") {\n          return;\n        }\n\n        float height_scale = " +
            v +
            ";\n        float width_scale = " +
            C +
            ";\n\n        float in_y = " +
            y +
            ";\n        if( in_y < 0.0 || in_y > " +
            f +
            " ) {\n          setOutput(float(" +
            a +
            "));\n          return;\n        }\n        float in_x = " +
            O +
            ";\n        if( in_x < 0.0 || in_x > " +
            m +
            " ) {\n          setOutput(float(" +
            a +
            "));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(" +
            d +
            " == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    ";
        },
        hi = function (t, e, n) {
          (this.variableNames = ["x"]), (this.outputShape = t);
          var r = t.length,
            a = t[t.length - 1],
            i = n ? "<" : ">";
          this.userCode =
            "\n      int getIndex(int i) {\n        " +
            (n ? "return " + a + " -i - 1;" : "return i;") +
            "\n      }\n\n      void main() {\n        " +
            _a(r) +
            " coords = getOutputCoords();\n        int end = " +
            di(r, "coords") +
            ";\n        float val = 0.0;\n        for (int i = " +
            a +
            " - 1; i >= 0; i -= 1) {\n          int idx = getIndex(i);\n          if (idx " +
            i +
            " end) {\n            continue;\n          }\n          if (idx == end && " +
            e +
            ") {\n            continue;\n          }\n          " +
            di(r, "coords") +
            " = idx;\n          val += getX(" +
            (function (t, e) {
              if (1 === t) return "" + e;
              if (2 === t) return e + ".x, " + e + ".y";
              if (3 === t) return e + ".x, " + e + ".y, " + e + ".z";
              if (4 === t)
                return e + ".x, " + e + ".y, " + e + ".z, " + e + ".w";
              throw Error(
                "Cumulative sum for rank " + t + " is not yet supported"
              );
            })(r, "coords") +
            ");\n        }\n        setOutput(val);\n      }\n    ";
        };
      function di(t, e) {
        if (1 === t) return "" + e;
        if (2 === t) return e + ".y";
        if (3 === t) return e + ".z";
        if (4 === t) return e + ".w";
        throw Error("Cumulative sum for rank " + t + " is not yet supported");
      }
      var pi = function (t) {
          (this.variableNames = ["A"]),
            (this.packedInputs = !1),
            (this.packedOutput = !0),
            (this.outPackingScheme = Bt.DENSE);
          var e = Ht(t),
            n = wa();
          (this.outputShape = t),
            (this.userCode =
              "\n      ivec3 outCoordsFromFlatIndex(int index) {\n        " +
              Ca(["r", "c", "d"], t) +
              "\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(" +
              e[0] +
              ", " +
              e[1] +
              "));\n        int index = 4 * (resTexRC.x * " +
              e[1] +
              " + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        " +
              n.output +
              " = result;\n      }\n    ");
        },
        fi = function (t) {
          (this.variableNames = ["A"]),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.outPackingScheme = Bt.DENSE);
          var e = Ht(t),
            n = wa();
          (this.outputShape = t),
            (this.userCode =
              "\n      ivec3 outCoordsFromFlatIndex(int index) {\n        " +
              Ca(["r", "c", "d"], t) +
              "\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(" +
              e[0] +
              ", " +
              e[1] +
              "));\n        int index = 4 * (resTexRC.x * " +
              e[1] +
              " + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        " +
              n.output +
              " = result;\n      }\n    ");
        },
        mi = (function () {
          function t(t, e, n) {
            (this.variableNames = ["x"]),
              (this.outputShape = []),
              (this.outputShape = t),
              (this.blockSize = e),
              (this.dataFormat = n),
              (this.userCode =
                "\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = " +
                this.getHeightCoordString() +
                ";\n      int w = " +
                this.getWidthCoordString() +
                ";\n      int d = " +
                this.getDepthCoordString() +
                ";\n\n      int in_h = h / " +
                e +
                ";\n      int offset_h = imod(h, " +
                e +
                ");\n      int in_w = w / " +
                e +
                ";\n      int offset_w = imod(w, " +
                e +
                ");\n      int offset_d = (offset_h * " +
                e +
                " + offset_w) *\n        " +
                this.getOutputDepthSize() +
                ";\n      int in_d = d + offset_d;\n\n      float result = " +
                this.getInputSamplingString() +
                ";\n      setOutput(result);\n    }\n  ");
          }
          return (
            (t.prototype.getHeightCoordString = function () {
              return "NHWC" === this.dataFormat ? "coords[1]" : "coords[2]";
            }),
            (t.prototype.getWidthCoordString = function () {
              return "NHWC" === this.dataFormat ? "coords[2]" : "coords[3]";
            }),
            (t.prototype.getDepthCoordString = function () {
              return "NHWC" === this.dataFormat ? "coords[3]" : "coords[1]";
            }),
            (t.prototype.getOutputDepthSize = function () {
              return "NHWC" === this.dataFormat
                ? this.outputShape[3]
                : this.outputShape[1];
            }),
            (t.prototype.getInputSamplingString = function () {
              return "NHWC" === this.dataFormat
                ? "getX(b, in_h, in_w, in_d)"
                : "getX(b, in_d, in_h, in_w)";
            }),
            t
          );
        })(),
        gi = function (t) {
          (this.variableNames = ["X"]),
            (this.outputShape = [t, t]),
            (this.userCode =
              "\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    ");
        },
        bi = function (t) {
          (this.variableNames = ["A"]), (this.outTexUsage = Pt.DOWNLOAD);
          var e = wa();
          (this.outputShape = t),
            (this.userCode =
              "\n      " +
              Ea +
              "\n\n      void main() {\n        float x = getAAtOutCoords();\n        " +
              e.output +
              " = encode_float(x);\n      }\n    ");
        },
        vi = function (t) {
          (this.variableNames = ["A"]),
            (this.packedInputs = !0),
            (this.packedOutput = !1),
            (this.outTexUsage = Pt.DOWNLOAD);
          var e = wa();
          (this.outputShape = t),
            (this.userCode =
              "\n      " +
              Ea +
              "\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        " +
              e.output +
              " = encode_float(x);\n      }\n    ");
        },
        yi = function (t, e, n) {
          void 0 === n && (n = !1), (this.variableNames = ["A"]);
          var r = wa(),
            a = e[0],
            i = e[1];
          this.outputShape = t;
          var o = "result";
          n && (o = "floor(result * 255. + 0.5)"),
            (this.userCode =
              "\n      " +
              Oa(t) +
              "\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n        \n        int r = flatIndex / " +
              i +
              ";\n        int c = imod(flatIndex, " +
              i +
              ");\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(" +
              i +
              ".0, " +
              a +
              ".0);\n        vec4 values = " +
              r.texture2D +
              "(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        " +
              r.output +
              " = vec4(" +
              o +
              ", 0., 0., 0.);\n      }\n    ");
        },
        xi = function (t, e, n) {
          void 0 === n && (n = !1),
            (this.variableNames = ["A"]),
            (this.packedInputs = !1),
            (this.packedOutput = !0);
          var r = wa(),
            a = e[0],
            i = e[1];
          this.outputShape = t;
          var o = "",
            s = "result";
          n && (s = "floor(result * 255. + 0.5)");
          for (var u = 0; u <= 1; u++)
            for (var c = 0; c <= 1; c++) {
              var l = 2 * u + c;
              o +=
                "\n          localCoords = coords;\n          if(localCoords[2] + " +
                c +
                " < " +
                t[2] +
                ") {\n            localCoords[2] += " +
                c +
                ";\n            if(localCoords[1] + " +
                u +
                " < " +
                t[1] +
                ") {\n              localCoords[1] += " +
                u +
                ";\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / " +
                i +
                ";\n              c = imod(flatIndex, " +
                i +
                ");\n              uv = (vec2(c, r) + halfCR) / vec2(" +
                i +
                ".0, " +
                a +
                ".0);\n              values = " +
                r.texture2D +
                "(A, uv);\n\n              if(offset == 0) {\n                result[" +
                l +
                "] = values[0];\n              } else if(offset == 1) {\n                result[" +
                l +
                "] = values[1];\n              } else if(offset == 2) {\n                result[" +
                l +
                "] = values[2];\n              } else {\n                result[" +
                l +
                "] = values[3];\n              }\n            }\n          }\n        ";
            }
          this.userCode =
            "\n      " +
            Oa(t) +
            "\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        " +
            o +
            "\n\n        " +
            r.output +
            " = " +
            s +
            ";\n      }\n    ";
        },
        wi = function (t, e, n) {
          this.variableNames = ["real", "imag"];
          var r = e[1];
          this.outputShape = e;
          var a = n ? "2.0 * " + Math.PI : "-2.0 * " + Math.PI,
            i = n ? r + ".0" : "1.0";
          this.userCode =
            "\n      const float exponentMultiplier = " +
            a +
            ";\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        " +
            t +
            "\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(" +
            r +
            ");\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < " +
            r +
            "; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / " +
            i +
            ";\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    ";
        },
        Ci = (function () {
          function t(t, e) {
            (this.outputShape = []),
              (this.variableNames = ["x"]),
              (this.outputShape = t),
              (this.userCode =
                "\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    ");
          }
          return (
            (t.prototype.getCustomSetupFunc = function (t) {
              var e = this;
              return function (n, r) {
                null == e.valueLoc &&
                  (e.valueLoc = n.getUniformLocationNoThrow(r, "value")),
                  n.gl.uniform1f(e.valueLoc, t);
              };
            }),
            t
          );
        })(),
        Oi = function (t, e, n) {
          this.variableNames = ["A", "indices"];
          var r = t.slice();
          (r[n] = e), (this.outputShape = r), (this.rank = r.length);
          var a = _a(this.rank),
            i = (function (t, e) {
              var n = t.length;
              if (n > 4)
                throw Error("Gather for rank " + n + " is not yet supported");
              if (1 === n) return "int(getIndices(resRC))";
              for (
                var r = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"],
                  a = [],
                  i = 0;
                i < t.length;
                i++
              )
                i === e
                  ? a.push("int(getIndices(" + r[i] + "))")
                  : a.push("" + r[i]);
              return a.join();
            })(t, n);
          this.userCode =
            "\n      void main() {\n        " +
            a +
            " resRC = getOutputCoords();\n        setOutput(getA(" +
            i +
            "));\n      }\n    ";
        },
        Ei = function (t, e, n) {
          (this.sliceDim = t),
            (this.strides = e),
            (this.variableNames = ["x", "indices"]),
            (this.outputShape = n);
          var r = _a(e.length),
            a = _a(n.length),
            i = this.sliceDim > 1 ? "strides[j]" : "strides";
          this.userCode =
            "\n        " +
            r +
            " strides = " +
            r +
            "(" +
            this.strides +
            ");\n         void main() {\n          " +
            a +
            " coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < " +
            this.sliceDim +
            "; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * " +
            i +
            ";\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      ";
        };
      function Si(t, e) {
        var n = wa();
        return Zt(
          t,
          e,
          n.version +
            "\n    precision highp float;\n    " +
            n.attribute +
            " vec3 clipSpacePos;\n    " +
            n.attribute +
            " vec2 uv;\n    " +
            n.varyingVs +
            " vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }"
        );
      }
      function Ii(t, e) {
        return se(
          t,
          e,
          new Float32Array([
            -1,
            1,
            0,
            0,
            1,
            -1,
            -1,
            0,
            0,
            0,
            1,
            1,
            0,
            1,
            1,
            1,
            -1,
            0,
            1,
            0,
          ])
        );
      }
      function ki(t, e) {
        return ue(t, e, new Uint16Array([0, 1, 2, 2, 1, 3]));
      }
      function Ni(t, e, n, r, a, i, o) {
        le(n, r);
        var s = ce(t, e),
          u = t.TEXTURE_2D;
        return (
          Xt(t, e, function () {
            return t.bindTexture(u, s);
          }),
          Xt(t, e, function () {
            return t.texParameteri(u, t.TEXTURE_WRAP_S, t.CLAMP_TO_EDGE);
          }),
          Xt(t, e, function () {
            return t.texParameteri(u, t.TEXTURE_WRAP_T, t.CLAMP_TO_EDGE);
          }),
          Xt(t, e, function () {
            return t.texParameteri(u, t.TEXTURE_MIN_FILTER, t.NEAREST);
          }),
          Xt(t, e, function () {
            return t.texParameteri(u, t.TEXTURE_MAG_FILTER, t.NEAREST);
          }),
          Xt(t, e, function () {
            return t.texImage2D(u, 0, a, n, r, 0, i, o, null);
          }),
          Xt(t, e, function () {
            return t.bindTexture(t.TEXTURE_2D, null);
          }),
          s
        );
      }
      function Ri(t, e, n, r, a) {
        var i = Gt(n, r);
        return Ni(
          t,
          e,
          i[0],
          i[1],
          a.internalFormatFloat,
          a.textureFormatFloat,
          t.FLOAT
        );
      }
      function Ai(t, e, n, r, a) {
        var i = Gt(n, r);
        return Ni(
          t,
          e,
          i[0],
          i[1],
          a.internalFormatHalfFloat,
          a.textureFormatFloat,
          a.textureTypeHalfFloat
        );
      }
      function Ti(t, e, n, r, a) {
        var i = Gt(n, r);
        return Ni(t, e, i[0], i[1], t.RGBA, t.RGBA, t.UNSIGNED_BYTE);
      }
      function _i(t, e, n, r, a) {
        var i = qt(n, r);
        return Ni(
          t,
          e,
          i[0],
          i[1],
          a.internalFormatPackedFloat,
          t.RGBA,
          t.FLOAT
        );
      }
      function Di(t, e, n, r, a) {
        var i = qt(n, r);
        return Ni(
          t,
          e,
          i[0],
          i[1],
          a.internalFormatPackedHalfFloat,
          t.RGBA,
          a.textureTypeHalfFloat
        );
      }
      function Fi(t, e, n, r) {
        return (
          Xt(t, e, function () {
            return t.bindBuffer(t.ARRAY_BUFFER, r);
          }),
          de(t, e, n, "clipSpacePos", r, 3, 20, 0) &&
            de(t, e, n, "uv", r, 2, 20, 12)
        );
      }
      function Mi(t, e, n, r, a, i, o) {
        var s, u, c;
        Xt(t, e, function () {
          return t.bindTexture(t.TEXTURE_2D, n);
        }),
          i instanceof Uint8Array
            ? ((s = new Uint8Array(r * a * 4)),
              (u = t.UNSIGNED_BYTE),
              (c = t.RGBA))
            : ((s = new Float32Array(r * a * 4)),
              (u = t.FLOAT),
              (c = o.internalFormatPackedFloat)),
          s.set(i),
          Xt(t, e, function () {
            return t.texImage2D(t.TEXTURE_2D, 0, c, r, a, 0, t.RGBA, u, s);
          }),
          Xt(t, e, function () {
            return t.bindTexture(t.TEXTURE_2D, null);
          });
      }
      function ji(t, e, n, r) {
        Xt(t, e, function () {
          return t.bindTexture(t.TEXTURE_2D, n);
        }),
          r.data instanceof Uint8Array
            ? Xt(t, e, function () {
                return t.texImage2D(
                  t.TEXTURE_2D,
                  0,
                  t.RGBA,
                  r.width,
                  r.height,
                  0,
                  t.RGBA,
                  t.UNSIGNED_BYTE,
                  r.data
                );
              })
            : Xt(t, e, function () {
                return t.texImage2D(
                  t.TEXTURE_2D,
                  0,
                  t.RGBA,
                  t.RGBA,
                  t.UNSIGNED_BYTE,
                  r
                );
              }),
          Xt(t, e, function () {
            return t.bindTexture(t.TEXTURE_2D, null);
          });
      }
      function $i(t, e, n, r, a) {
        var i = t.createBuffer();
        Xt(t, e, function () {
          return t.bindBuffer(t.PIXEL_PACK_BUFFER, i);
        });
        var o = 16 * n * r;
        return (
          Xt(t, e, function () {
            return t.bufferData(t.PIXEL_PACK_BUFFER, o, t.STREAM_READ);
          }),
          Xt(t, e, function () {
            return t.readPixels(0, 0, r, n, t.RGBA, t.FLOAT, 0);
          }),
          Xt(t, e, function () {
            return t.bindBuffer(t.PIXEL_PACK_BUFFER, null);
          }),
          i
        );
      }
      function Bi(t, e, n) {
        var r = t,
          a = new Float32Array(n);
        return (
          r.bindBuffer(r.PIXEL_PACK_BUFFER, e),
          r.getBufferSubData(r.PIXEL_PACK_BUFFER, 0, a),
          r.bindBuffer(r.PIXEL_PACK_BUFFER, null),
          a
        );
      }
      function Pi(t, e, n, r, a) {
        var i = Gt(n, r),
          o = i[0],
          s = i[1],
          u = new Uint8Array(n * r * 4);
        return (
          Xt(t, e, function () {
            return t.readPixels(
              0,
              0,
              o,
              s,
              a.downloadTextureFormat,
              t.UNSIGNED_BYTE,
              u
            );
          }),
          new Float32Array(u.buffer)
        );
      }
      function Li(t, e, n, r, a, i, o, s) {
        var u = t,
          c = new Float32Array(
            (function (t, e) {
              var n = qt(t, e);
              return n[0] * n[1] * 4;
            })(i, o)
          );
        return (
          u.bindBuffer(u.PIXEL_PACK_BUFFER, e),
          u.getBufferSubData(u.PIXEL_PACK_BUFFER, 0, c),
          u.bindBuffer(u.PIXEL_PACK_BUFFER, null),
          c
        );
      }
      function zi(t, e, n, r) {
        var a = new Float32Array(n * r * 4);
        return (
          Xt(t, e, function () {
            return t.readPixels(0, 0, r, n, t.RGBA, t.FLOAT, a);
          }),
          a
        );
      }
      var Wi = Object.freeze({
          createVertexShader: Si,
          createVertexBuffer: Ii,
          createIndexBuffer: ki,
          createFloat32MatrixTexture: Ri,
          createFloat16MatrixTexture: Ai,
          createUnsignedBytesMatrixTexture: Ti,
          createPackedMatrixTexture: _i,
          createFloat16PackedMatrixTexture: Di,
          bindVertexProgramAttributeStreams: Fi,
          uploadDenseMatrixToTexture: Mi,
          uploadPixelDataToTexture: ji,
          createBufferFromOutputTexture: $i,
          downloadFloat32MatrixFromBuffer: Bi,
          downloadByteEncodedFloatMatrixFromOutputTexture: Pi,
          downloadPackedMatrixFromBuffer: Li,
          downloadMatrixFromPackedOutputTexture: zi,
        }),
        Vi = (function () {
          function t(t) {
            (this.outputTexture = null),
              (this.program = null),
              (this.disposed = !1),
              (this.vertexAttrsAreBound = !1),
              (this.itemsToPoll = []);
            var e = d().getNumber("WEBGL_VERSION");
            null != t ? ((this.gl = t), Vt(e, t)) : (this.gl = Ut(e));
            var n = "WEBGL_color_buffer_float";
            if (1 === d().getNumber("WEBGL_VERSION")) {
              if (
                ((this.textureFloatExtension = Qt(
                  this.gl,
                  this.debug,
                  "OES_texture_float"
                )),
                _e(this.gl, "OES_texture_half_float"))
              )
                this.textureHalfFloatExtension = Qt(
                  this.gl,
                  this.debug,
                  "OES_texture_half_float"
                );
              else if (d().get("WEBGL_FORCE_F16_TEXTURES"))
                throw new Error(
                  "GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true."
                );
              if (
                ((this.colorBufferFloatExtension = this.gl.getExtension(n)),
                _e(this.gl, "EXT_color_buffer_half_float"))
              )
                this.colorBufferHalfFloatExtension = Qt(
                  this.gl,
                  this.debug,
                  "EXT_color_buffer_half_float"
                );
              else if (d().get("WEBGL_FORCE_F16_TEXTURES"))
                throw new Error(
                  "GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true."
                );
            } else if (((n = "EXT_color_buffer_float"), _e(this.gl, n)))
              this.colorBufferFloatExtension = this.gl.getExtension(n);
            else {
              if (!_e(this.gl, "EXT_color_buffer_half_float"))
                throw new Error(
                  "GL context does not support color renderable floats"
                );
              this.colorBufferHalfFloatExtension = this.gl.getExtension(
                "EXT_color_buffer_half_float"
              );
            }
            (this.vertexBuffer = Ii(this.gl, this.debug)),
              (this.indexBuffer = ki(this.gl, this.debug)),
              (this.framebuffer = he(this.gl, this.debug)),
              (this.textureConfig = Kt(
                this.gl,
                this.textureHalfFloatExtension
              ));
          }
          return (
            Object.defineProperty(t.prototype, "debug", {
              get: function () {
                return d().getBool("DEBUG");
              },
              enumerable: !0,
              configurable: !0,
            }),
            (t.prototype.dispose = function () {
              var t = this;
              if (!this.disposed) {
                null != this.program &&
                  console.warn(
                    "Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."
                  ),
                  null != this.outputTexture &&
                    console.warn(
                      "Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing."
                    );
                var e = this.gl;
                Xt(e, this.debug, function () {
                  return e.finish();
                }),
                  Xt(e, this.debug, function () {
                    return e.bindFramebuffer(e.FRAMEBUFFER, null);
                  }),
                  Xt(e, this.debug, function () {
                    return e.deleteFramebuffer(t.framebuffer);
                  }),
                  Xt(e, this.debug, function () {
                    return e.bindBuffer(e.ARRAY_BUFFER, null);
                  }),
                  Xt(e, this.debug, function () {
                    return e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, null);
                  }),
                  Xt(e, this.debug, function () {
                    return e.deleteBuffer(t.indexBuffer);
                  }),
                  (this.disposed = !0);
              }
            }),
            (t.prototype.createFloat32MatrixTexture = function (t, e) {
              return (
                this.throwIfDisposed(),
                Ri(this.gl, this.debug, t, e, this.textureConfig)
              );
            }),
            (t.prototype.createFloat16MatrixTexture = function (t, e) {
              return (
                this.throwIfDisposed(),
                Ai(this.gl, this.debug, t, e, this.textureConfig)
              );
            }),
            (t.prototype.createUnsignedBytesMatrixTexture = function (t, e) {
              return (
                this.throwIfDisposed(),
                Ti(this.gl, this.debug, t, e, this.textureConfig)
              );
            }),
            (t.prototype.uploadPixelDataToTexture = function (t, e) {
              this.throwIfDisposed(), ji(this.gl, this.debug, t, e);
            }),
            (t.prototype.uploadDenseMatrixToTexture = function (t, e, n, r) {
              this.throwIfDisposed(),
                Mi(this.gl, this.debug, t, e, n, r, this.textureConfig);
            }),
            (t.prototype.createFloat16PackedMatrixTexture = function (t, e) {
              return (
                this.throwIfDisposed(),
                Di(this.gl, this.debug, t, e, this.textureConfig)
              );
            }),
            (t.prototype.createPackedMatrixTexture = function (t, e) {
              return (
                this.throwIfDisposed(),
                _i(this.gl, this.debug, t, e, this.textureConfig)
              );
            }),
            (t.prototype.deleteMatrixTexture = function (t) {
              var e = this;
              this.throwIfDisposed(),
                this.outputTexture === t &&
                  (ve(this.gl, this.debug, this.framebuffer),
                  (this.outputTexture = null)),
                Xt(this.gl, this.debug, function () {
                  return e.gl.deleteTexture(t);
                });
            }),
            (t.prototype.downloadByteEncodedFloatMatrixFromOutputTexture = function (
              t,
              e,
              n
            ) {
              var r = this;
              return this.downloadMatrixDriver(t, function () {
                return Pi(r.gl, r.debug, e, n, r.textureConfig);
              });
            }),
            (t.prototype.downloadPackedMatrixFromBuffer = function (
              t,
              e,
              n,
              r,
              a,
              i
            ) {
              return Li(this.gl, t, 0, 0, 0, a, i, this.textureConfig);
            }),
            (t.prototype.downloadFloat32MatrixFromBuffer = function (t, e) {
              return Bi(this.gl, t, e);
            }),
            (t.prototype.createBufferFromTexture = function (t, e, n) {
              this.bindTextureToFrameBuffer(t);
              var r = $i(this.gl, this.debug, e, n, this.textureConfig);
              return this.unbindTextureToFrameBuffer(), r;
            }),
            (t.prototype.createAndWaitForFence = function () {
              var t = this.createFence(this.gl);
              return this.pollFence(t);
            }),
            (t.prototype.createFence = function (t) {
              var e,
                n,
                r = this;
              if (d().getBool("WEBGL_FENCE_API_ENABLED")) {
                var a = t,
                  i = a.fenceSync(a.SYNC_GPU_COMMANDS_COMPLETE, 0);
                t.flush(),
                  (n = function () {
                    var t = a.clientWaitSync(i, 0, 0);
                    return (
                      t === a.ALREADY_SIGNALED || t === a.CONDITION_SATISFIED
                    );
                  }),
                  (e = i);
              } else
                d().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") >
                0
                  ? ((e = this.beginQuery()),
                    this.endQuery(),
                    (n = function () {
                      return r.isQueryAvailable(
                        e,
                        d().getNumber(
                          "WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"
                        )
                      );
                    }))
                  : (n = function () {
                      return !0;
                    });
              return { query: e, isFencePassed: n };
            }),
            (t.prototype.downloadMatrixFromPackedTexture = function (t, e, n) {
              var r = this;
              return this.downloadMatrixDriver(t, function () {
                return zi(r.gl, r.debug, e, n);
              });
            }),
            (t.prototype.createProgram = function (t) {
              this.throwIfDisposed();
              var e = this.gl,
                n = te(e, this.debug, t),
                r = Si(e, this.debug),
                a = ae(e, this.debug);
              return (
                Xt(e, this.debug, function () {
                  return e.attachShader(a, r);
                }),
                Xt(e, this.debug, function () {
                  return e.attachShader(a, n);
                }),
                ie(e, this.debug, a),
                this.debug && oe(e, this.debug, a),
                this.vertexAttrsAreBound ||
                  (this.setProgram(a),
                  (this.vertexAttrsAreBound = Fi(
                    e,
                    this.debug,
                    this.program,
                    this.vertexBuffer
                  ))),
                a
              );
            }),
            (t.prototype.deleteProgram = function (t) {
              var e = this;
              this.throwIfDisposed(),
                t === this.program && (this.program = null),
                null != t &&
                  Xt(this.gl, this.debug, function () {
                    return e.gl.deleteProgram(t);
                  });
            }),
            (t.prototype.setProgram = function (t) {
              var e = this;
              this.throwIfDisposed(),
                (this.program = t),
                null != this.program &&
                  this.debug &&
                  oe(this.gl, this.debug, this.program),
                Xt(this.gl, this.debug, function () {
                  return e.gl.useProgram(t);
                });
            }),
            (t.prototype.getUniformLocation = function (t, e, n) {
              return (
                void 0 === n && (n = !0),
                this.throwIfDisposed(),
                n ? fe(this.gl, this.debug, t, e) : me(this.gl, t, e)
              );
            }),
            (t.prototype.getAttributeLocation = function (t, e) {
              var n = this;
              return (
                this.throwIfDisposed(),
                Xt(this.gl, this.debug, function () {
                  return n.gl.getAttribLocation(t, e);
                })
              );
            }),
            (t.prototype.getUniformLocationNoThrow = function (t, e) {
              return this.throwIfDisposed(), this.gl.getUniformLocation(t, e);
            }),
            (t.prototype.setInputMatrixTexture = function (t, e, n) {
              this.throwIfDisposed(),
                this.throwIfNoProgram(),
                ge(this.gl, this.debug, this.program, t, e, n);
            }),
            (t.prototype.setOutputMatrixTexture = function (t, e, n) {
              this.setOutputMatrixTextureDriver(t, n, e);
            }),
            (t.prototype.setOutputPackedMatrixTexture = function (t, e, n) {
              this.throwIfDisposed();
              var r = qt(e, n),
                a = r[0],
                i = r[1];
              this.setOutputMatrixTextureDriver(t, a, i);
            }),
            (t.prototype.setOutputMatrixWriteRegion = function (t, e, n, r) {
              this.setOutputMatrixWriteRegionDriver(n, t, r, e);
            }),
            (t.prototype.setOutputPackedMatrixWriteRegion = function (
              t,
              e,
              n,
              r
            ) {
              throw new Error(
                "setOutputPackedMatrixWriteRegion not implemented."
              );
            }),
            (t.prototype.debugValidate = function () {
              null != this.program && oe(this.gl, this.debug, this.program),
                ye(this.gl);
            }),
            (t.prototype.executeProgram = function () {
              this.throwIfDisposed(), this.throwIfNoProgram();
              var t = this.gl;
              this.debug && this.debugValidate(),
                Xt(t, this.debug, function () {
                  return t.drawElements(t.TRIANGLES, 6, t.UNSIGNED_SHORT, 0);
                });
            }),
            (t.prototype.blockUntilAllProgramsCompleted = function () {
              var t = this;
              this.throwIfDisposed(),
                Xt(this.gl, this.debug, function () {
                  return t.gl.finish();
                });
            }),
            (t.prototype.getQueryTimerExtension = function () {
              return (
                null == this.disjointQueryTimerExtension &&
                  (this.disjointQueryTimerExtension = Qt(
                    this.gl,
                    this.debug,
                    2 ===
                      d().getNumber(
                        "WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"
                      )
                      ? "EXT_disjoint_timer_query_webgl2"
                      : "EXT_disjoint_timer_query"
                  )),
                this.disjointQueryTimerExtension
              );
            }),
            (t.prototype.getQueryTimerExtensionWebGL2 = function () {
              return this.getQueryTimerExtension();
            }),
            (t.prototype.getQueryTimerExtensionWebGL1 = function () {
              return this.getQueryTimerExtension();
            }),
            (t.prototype.beginQuery = function () {
              if (
                2 ===
                d().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")
              ) {
                var t = this.gl,
                  e = this.getQueryTimerExtensionWebGL2(),
                  n = t.createQuery();
                return t.beginQuery(e.TIME_ELAPSED_EXT, n), n;
              }
              var r = this.getQueryTimerExtensionWebGL1(),
                a = r.createQueryEXT();
              return r.beginQueryEXT(r.TIME_ELAPSED_EXT, a), a;
            }),
            (t.prototype.endQuery = function () {
              if (
                2 !==
                d().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")
              ) {
                var t = this.getQueryTimerExtensionWebGL1();
                t.endQueryEXT(t.TIME_ELAPSED_EXT);
              } else {
                var e = this.gl,
                  n = this.getQueryTimerExtensionWebGL2();
                e.endQuery(n.TIME_ELAPSED_EXT);
              }
            }),
            (t.prototype.waitForQueryAndGetTime = function (t) {
              return u(this, void 0, void 0, function () {
                var e = this;
                return c(this, function (n) {
                  switch (n.label) {
                    case 0:
                      return [
                        4,
                        M(function () {
                          return (
                            e.disposed ||
                            e.isQueryAvailable(
                              t,
                              d().getNumber(
                                "WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"
                              )
                            )
                          );
                        }),
                      ];
                    case 1:
                      return (
                        n.sent(),
                        [
                          2,
                          this.getQueryTime(
                            t,
                            d().getNumber(
                              "WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"
                            )
                          ),
                        ]
                      );
                  }
                });
              });
            }),
            (t.prototype.getQueryTime = function (t, e) {
              if (0 === e) return null;
              if (2 === e) {
                var n = this.gl;
                return n.getQueryParameter(t, n.QUERY_RESULT) / 1e6;
              }
              var r = this.getQueryTimerExtensionWebGL1();
              return r.getQueryObjectEXT(t, r.QUERY_RESULT_EXT) / 1e6;
            }),
            (t.prototype.isQueryAvailable = function (t, e) {
              if (0 === e) return !0;
              if (2 === e) {
                var n = this.gl,
                  r = this.getQueryTimerExtensionWebGL2(),
                  a = n.getQueryParameter(t, n.QUERY_RESULT_AVAILABLE);
                return (
                  null == this.disjoint &&
                    (this.disjoint = this.gl.getParameter(r.GPU_DISJOINT_EXT)),
                  a && !this.disjoint
                );
              }
              return (
                (a = (r = this.getQueryTimerExtensionWebGL1()).getQueryObjectEXT(
                  t,
                  r.QUERY_RESULT_AVAILABLE_EXT
                )),
                null == this.disjoint &&
                  (this.disjoint = this.gl.getParameter(r.GPU_DISJOINT_EXT)),
                a && !this.disjoint
              );
            }),
            (t.prototype.pollFence = function (t) {
              var e = this;
              return new Promise(function (n) {
                e.addItemToPoll(
                  function () {
                    return t.isFencePassed();
                  },
                  function () {
                    return n();
                  }
                );
              });
            }),
            (t.prototype.pollItems = function () {
              for (
                var t = (function (t) {
                    for (var e = 0; e < t.length && t[e](); ++e);
                    return e - 1;
                  })(
                    this.itemsToPoll.map(function (t) {
                      return t.isDoneFn;
                    })
                  ),
                  e = 0;
                e <= t;
                ++e
              )
                (0, this.itemsToPoll[e].resolveFn)();
              this.itemsToPoll = this.itemsToPoll.slice(t + 1);
            }),
            (t.prototype.addItemToPoll = function (t, e) {
              var n = this;
              this.itemsToPoll.push({ isDoneFn: t, resolveFn: e }),
                this.itemsToPoll.length > 1 ||
                  M(function () {
                    return n.pollItems(), 0 === n.itemsToPoll.length;
                  });
            }),
            (t.prototype.bindTextureToFrameBuffer = function (t) {
              this.throwIfDisposed(),
                be(this.gl, this.debug, t, this.framebuffer),
                this.debug && ye(this.gl);
            }),
            (t.prototype.unbindTextureToFrameBuffer = function () {
              null != this.outputTexture
                ? (be(
                    this.gl,
                    this.debug,
                    this.outputTexture,
                    this.framebuffer
                  ),
                  this.debug && ye(this.gl))
                : ve(this.gl, this.debug, this.framebuffer);
            }),
            (t.prototype.downloadMatrixDriver = function (t, e) {
              this.bindTextureToFrameBuffer(t);
              var n = e();
              return this.unbindTextureToFrameBuffer(), n;
            }),
            (t.prototype.setOutputMatrixTextureDriver = function (t, e, n) {
              this.throwIfDisposed();
              var r = this.gl;
              be(r, this.debug, t, this.framebuffer),
                this.debug && ye(r),
                (this.outputTexture = t),
                Xt(r, this.debug, function () {
                  return r.viewport(0, 0, e, n);
                }),
                Xt(r, this.debug, function () {
                  return r.scissor(0, 0, e, n);
                });
            }),
            (t.prototype.setOutputMatrixWriteRegionDriver = function (
              t,
              e,
              n,
              r
            ) {
              var a = this;
              this.throwIfDisposed(),
                Xt(this.gl, this.debug, function () {
                  return a.gl.scissor(t, e, n, r);
                });
            }),
            (t.prototype.throwIfDisposed = function () {
              if (this.disposed)
                throw new Error("Attempted to use disposed GPGPUContext.");
            }),
            (t.prototype.throwIfNoProgram = function () {
              if (null == this.program)
                throw new Error("No GPU program is currently set.");
            }),
            t
          );
        })();
      function Ui(t, e) {
        if (t.length !== e.length)
          throw Error(
            "Binary was compiled with " +
              t.length +
              " inputs, but was executed with " +
              e.length +
              " inputs"
          );
        t.forEach(function (t, n) {
          var r = t.logicalShape,
            a = e[n],
            i = a.shape;
          if (!A(r, i))
            throw Error(
              "Binary was compiled with different shapes than the current args. Shapes " +
                r +
                " and " +
                i +
                " must match"
            );
          if (!t.isUniform || !a.isUniform) {
            var o = t.texShape,
              s = a.isUniform ? null : a.texData.texShape;
            if (!A(o, s))
              throw Error(
                "Binary was compiled with different texture shapes than the current args. Shape " +
                  o +
                  " and " +
                  s +
                  " must match"
              );
          }
        });
      }
      var Gi = function (t, e, n) {
          (this.variableNames = ["A"]),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.outputShape = t);
          for (
            var r = n.filterWidth,
              a = n.inChannels,
              i = n.strideWidth,
              o = n.strideHeight,
              s = n.padInfo,
              u = n.outWidth,
              c = n.dilationWidth,
              l = n.dilationHeight,
              h = n.dataFormat,
              d = s.left,
              p = s.top,
              f = a * r,
              m = wa(),
              g = "channelsLast" === h,
              b = g ? 0 : 1,
              v = g ? 1 : 2,
              y = "",
              x = 0;
            x <= 1;
            x++
          )
            for (var w = 0; w <= 1; w++)
              y +=
                "\n          blockIndex = rc.y + " +
                w +
                ";\n          pos = rc.x + " +
                x +
                ";\n\n          if(blockIndex < " +
                t[1] +
                " && pos < " +
                t[0] +
                ") {\n            offsetY = int(blockIndex / (" +
                u +
                ")) * " +
                o +
                " - " +
                p +
                ";\n            d0 = offsetY + " +
                l +
                " * (pos / " +
                f +
                ");\n\n            if(d0 < " +
                e[b] +
                " && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), " +
                u +
                ".) * " +
                i +
                ". - " +
                d +
                ".);\n              d1 = offsetX + " +
                c +
                " * (int(mod(float(pos), " +
                f +
                ".) / " +
                a +
                ".));\n\n              if(d1 < " +
                e[v] +
                " && d1 >= 0) {\n\n                ch = int(mod(float(pos), " +
                a +
                ".));\n\n                if (" +
                g +
                ") {\n                  innerDims = vec2(d1, ch);\n                  result[" +
                (2 * x + w) +
                "] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[" +
                (2 * x + w) +
                "] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        ";
          this.userCode =
            "\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        " +
            y +
            "\n\n        " +
            m.output +
            " = result;\n      }\n    ";
        },
        Hi = function (t, e, n, r, a) {
          (this.variableNames = ["x"]), (this.outputShape = []);
          var i,
            o = e,
            s = t[3] - 1;
          this.outputShape = t;
          var u = "float(" + n + ") + float(" + r + ") * sum";
          (i =
            0.5 === a
              ? "inversesqrt(" + u + ")"
              : 1 === a
              ? "1.0/(" + u + ")"
              : "exp(log(" + u + ") * float(-" + a + "));"),
            (this.userCode =
              "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -" +
              o +
              "; j <= " +
              o +
              "; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  " +
              s +
              ") {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * " +
              i +
              ";\n        setOutput(val);\n      }\n    ");
        },
        qi = function (t, e, n, r, a) {
          (this.variableNames = ["inputImage", "outputImage", "dy"]),
            (this.outputShape = []),
            (this.outputShape = t),
            (this.depth = t[3]),
            (this.depthRadius = e),
            (this.bias = n),
            (this.alpha = r),
            (this.beta = a),
            (this.userCode =
              "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < " +
              this.depth +
              "; ++d) {\n          int depthBegin = int(max(0.0, float(d - " +
              e +
              ")));\n          int depthEnd = int(min(float(" +
              this.depth +
              "),\n              float(d + " +
              e +
              " + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = " +
              this.depth +
              ";\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(" +
              r +
              ") * norm + float(" +
              n +
              ");\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(" +
              r +
              ")\n                * float(" +
              a +
              ")\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * " +
              a +
              ");\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    ");
        },
        Ki = function (t, e, n, r, a) {
          (this.variableNames = ["x"]),
            (this.outputShape = []),
            (this.packedInputs = !0),
            (this.packedOutput = !0);
          var i,
            o = e,
            s = t[3] - 1;
          this.outputShape = t;
          var u = "float(" + n + ") + float(" + r + ") * sum";
          (i =
            0.5 === a
              ? "inversesqrt(" + u + ")"
              : 1 === a
              ? "1.0/(" + u + ")"
              : "exp(log(" + u + ") * float(-" + a + "));"),
            (this.userCode =
              "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < " +
              this.outputShape[3] +
              ";\n        bool hasNextRow = c < " +
              this.outputShape[2] +
              ";\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - " +
              o +
              ";\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - " +
              o +
              "; j <= " +
              o +
              "; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(" +
              s +
              "));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * " +
              i +
              ";\n        setOutput(result);\n      }\n    ");
        },
        Xi = function (t) {
          (this.variableNames = ["dy", "maxPos"]),
            (this.outputShape = t.inShape);
          var e = t.strideHeight,
            n = t.strideWidth,
            r = t.dilationHeight,
            a = t.effectiveFilterHeight,
            i = t.effectiveFilterWidth,
            o = a - 1 - t.padInfo.top,
            s = i - 1 - t.padInfo.left,
            u = a * i - 1;
          this.userCode =
            "\n      const ivec2 pads = ivec2(" +
            o +
            ", " +
            s +
            ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " +
            a +
            ";\n          wR += " +
            r +
            ") {\n          float dyR = float(dyRCorner + wR) / " +
            e +
            ".0;\n\n          if (dyR < 0.0 || dyR >= " +
            t.outHeight +
            ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < " +
            i +
            "; wC++) {\n            float dyC = float(dyCCorner + wC) / " +
            n +
            ".0;\n\n            if (dyC < 0.0 || dyC >= " +
            t.outWidth +
            ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = " +
            u +
            " - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * " +
            i +
            " + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
        },
        Yi = function (t) {
          (this.variableNames = ["dy", "maxPos"]),
            (this.outputShape = t.inShape);
          var e = t.strideDepth,
            n = t.strideHeight,
            r = t.strideWidth,
            a = t.dilationDepth,
            i = t.dilationHeight,
            o = t.dilationWidth,
            s = t.effectiveFilterDepth,
            u = t.effectiveFilterHeight,
            c = t.effectiveFilterWidth,
            l = s - 1 - t.padInfo.front,
            h = u - 1 - t.padInfo.top,
            d = c - 1 - t.padInfo.left,
            p = s * u * c - 1;
          this.userCode =
            "\n      const ivec3 pads = ivec3(" +
            l +
            ", " +
            h +
            ", " +
            d +
            ");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < " +
            s +
            ";\n           wD += " +
            a +
            ") {\n          float dyD = float(dyDCorner + wD) / " +
            e +
            ".0;\n\n          if (dyD < 0.0 || dyD >= " +
            t.outDepth +
            ".0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < " +
            u +
            ";\n              wR += " +
            i +
            ") {\n            float dyR = float(dyRCorner + wR) / " +
            n +
            ".0;\n\n            if (dyR < 0.0 || dyR >= " +
            t.outHeight +
            ".0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < " +
            c +
            ";\n                wC += " +
            o +
            ") {\n              float dyC = float(dyCCorner + wC) / " +
            r +
            ".0;\n\n              if (dyC < 0.0 || dyC >= " +
            t.outWidth +
            ".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = " +
            p +
            " -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * " +
            u +
            " * " +
            c +
            " +\n                  wR * " +
            c +
            " + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
        },
        Ji = function (t, e, n, r, a, i, o) {
          void 0 === n && (n = !1),
            void 0 === r && (r = !1),
            void 0 === a && (a = !1),
            void 0 === i && (i = null),
            void 0 === o && (o = !1),
            (this.variableNames = ["matrixA", "matrixB"]),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.outputShape = e);
          var s = n ? t[1] : t[2],
            u = Math.ceil(s / 2),
            c = n ? "i * 2, rc.y" : "rc.y, i * 2",
            l = r ? "rc.z, i * 2" : "i * 2, rc.z",
            h = n ? ["a.xxyy", "a.zzww"] : ["a.xxzz", "a.yyww"],
            d = r ? ["b.xzxz", "b.ywyw"] : ["b.xyxy", "b.zwzw"],
            p = "",
            f = "";
          i &&
            ((p = o
              ? "vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          " +
                i +
                "\n        }"
              : "vec4 activation(vec4 x) {\n          " + i + "\n        }"),
            (f = "result = activation(result);"));
          var m = a ? "result += getBiasAtOutCoords();" : "";
          a && this.variableNames.push("bias"),
            o && this.variableNames.push("preluActivationWeights"),
            (this.userCode =
              "\n      " +
              p +
              "\n\n      const float sharedDimension = " +
              u +
              ".0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < " +
              u +
              "; i++) {\n          vec4 a = getMatrixA(rc.x, " +
              c +
              ");\n          vec4 b = getMatrixB(rc.x, " +
              l +
              ");\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (" +
              h[0] +
              " * " +
              d[0] +
              ");\n          result += (" +
              h[1] +
              " * " +
              d[1] +
              ");\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        " +
              m +
              "\n\n        " +
              f +
              "\n\n        setOutput(result);\n      }\n    ");
        },
        Qi = (function () {
          function t(t, e, n) {
            (this.variableNames = ["probs"]),
              (this.outputShape = [t, n]),
              (this.userCode =
                "\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < " +
                (e - 1) +
                "; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(" +
                (e - 1) +
                "));\n      }\n    ");
          }
          return (
            (t.prototype.getCustomSetupFunc = function (t) {
              var e = this;
              return function (n, r) {
                null == e.seedLoc &&
                  (e.seedLoc = n.getUniformLocation(r, "seed")),
                  n.gl.uniform1f(e.seedLoc, t);
              };
            }),
            t
          );
        })(),
        Zi = function (t, e, n, r) {
          (this.variableNames = ["indices"]),
            (this.outputShape = [t, e]),
            (this.userCode =
              "\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(" +
              r +
              "), float(" +
              n +
              "),\n                      float(index == coords.y)));\n      }\n    ");
        },
        to = function (t) {
          (this.variableNames = ["A"]),
            (this.packedInputs = !1),
            (this.packedOutput = !0),
            (this.outputShape = t);
          var e = t.length;
          if (0 === e)
            this.userCode =
              "\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";
          else {
            var n = xa("rc", e),
              r = _a(e),
              a = (function (t, e, n) {
                if (1 === t) return "rc > " + e[0];
                for (var r = "", a = t - 2; a < t; a++)
                  (r += n[a] + " >= " + e[a]), a < t - 1 && (r += "||");
                return r;
              })(e, t, n),
              i = (function (t, e, n, r) {
                if (1 === t) return "";
                var a = r.slice(-2);
                return (
                  "\n    int r = " +
                  a[0] +
                  ";\n    int c = " +
                  a[1] +
                  ";\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= " +
                  e +
                  ";\n    bool rEdge = rp1 >= " +
                  n +
                  ";\n  "
                );
              })(e, t[t.length - 1], t[t.length - 2], n),
              o = (function (t, e) {
                var n = t.length,
                  r = (function (t, e) {
                    for (var n = [], r = 0; r <= 1; r++)
                      for (var a = 0; a <= 1; a++) {
                        for (
                          var i =
                              (0 === r ? "r" : "rp1") +
                              ", " +
                              (0 === a ? "c" : "cp1"),
                            o = 2;
                          o < t;
                          o++
                        )
                          i = e[e.length - 1 - o] + "," + i;
                        n.push(i);
                      }
                    return n;
                  })(n, e);
                return 1 === n
                  ? "getA(rc),\n            rc + 1 >= " +
                      t[0] +
                      " ? 0. : getA(rc + 1),\n            0, 0"
                  : "getA(" +
                      r[0] +
                      "),\n          cEdge ? 0. : getA(" +
                      r[1] +
                      "),\n          rEdge ? 0. : getA(" +
                      r[2] +
                      "),\n          rEdge || cEdge ? 0. : getA(" +
                      r[3] +
                      ")";
              })(t, n);
            this.userCode =
              "\n        void main() {\n          " +
              r +
              " rc = getOutputCoords();\n\n          if(" +
              a +
              ") {\n            setOutput(vec4(0));\n          } else {\n            " +
              i +
              "\n\n            setOutput(vec4(" +
              o +
              "));\n          }\n        }\n      ";
          }
        },
        eo = function (t, e, n) {
          (this.variableNames = ["x"]),
            (this.outputShape = e.map(function (e, n) {
              return e[0] + t[n] + e[1];
            }));
          var r = t.length,
            a = _a(r),
            i = e
              .map(function (t) {
                return t[0];
              })
              .join(","),
            o = e
              .map(function (e, n) {
                return e[0] + t[n];
              })
              .join(","),
            s = ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(
              0,
              r
            );
          this.userCode =
            1 !== r
              ? "\n      " +
                a +
                " start = " +
                a +
                "(" +
                i +
                ");\n      " +
                a +
                " end = " +
                a +
                "(" +
                o +
                ");\n\n      void main() {\n        " +
                a +
                " outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(" +
                n +
                "));\n        } else {\n          " +
                a +
                " coords = outC - start;\n          setOutput(getX(" +
                s +
                "));\n        }\n      }\n    "
              : "\n        int start = " +
                i +
                ";\n        int end = " +
                o +
                ";\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(" +
                n +
                "));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      ";
        },
        no = function (t, e, n) {
          (this.variableNames = ["x"]),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.outputShape = e.map(function (e, n) {
              return e[0] + t[n] + e[1];
            }));
          for (
            var r = t.length,
              a = _a(r),
              i = e
                .map(function (t) {
                  return t[0];
                })
                .join(","),
              o = e
                .map(function (e, n) {
                  return e[0] + t[n];
                })
                .join(","),
              s = xa("rc", r),
              u = xa("source", r),
              c = s[r - 1] + " < " + this.outputShape[r - 1],
              l = 1 === r ? "source" : "vec2(" + u.slice(-2).join() + ")",
              h = [
                a + " rc = outputLoc;",
                s[r - 1] + " += 1;\n       if(" + c + ") {\n      ",
                1 === r
                  ? ""
                  : "}\n       rc = outputLoc;\n       " +
                    s[r - 2] +
                    " += 1;\n       if(" +
                    s[r - 2] +
                    " < " +
                    this.outputShape[r - 2] +
                    ") {",
                1 === r
                  ? ""
                  : "  " + s[r - 1] + " += 1;\n         if(" + c + ") {",
              ],
              d =
                1 === r
                  ? "rc < start || rc >= end"
                  : "any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))",
              p = "",
              f = 0,
              m = 1 === r ? 2 : 4;
            f < m;
            f++
          )
            p +=
              "\n        " +
              h[f] +
              "\n        if (" +
              d +
              ") {\n          result[" +
              f +
              "] = float(" +
              n +
              ");\n        } else {\n          " +
              a +
              " source = rc - start;\n          result[" +
              f +
              "] = getChannel(getX(" +
              u.join() +
              "), " +
              l +
              ");\n        }\n      ";
          (p += 1 === r ? "} " : "}}"),
            (this.userCode =
              "\n      const " +
              a +
              " start = " +
              a +
              "(" +
              i +
              ");\n      const " +
              a +
              " end = " +
              a +
              "(" +
              o +
              ");\n\n      void main() {\n        " +
              a +
              " outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        " +
              p +
              "\n        setOutput(result);\n      }\n    ");
        },
        ro = function (t, e, n) {
          if (((this.variableNames = ["x"]), "avg" === e && n))
            throw new Error("Cannot compute positions for average pool.");
          var r = t.filterWidth,
            a = t.strideHeight,
            i = t.strideWidth,
            o = t.dilationHeight,
            s = t.dilationWidth,
            u = t.effectiveFilterHeight,
            c = t.effectiveFilterWidth,
            l = t.padInfo.top,
            h = t.padInfo.left;
          this.outputShape = t.outShape;
          var d = "avg" === e,
            p = "0.0";
          if ((d || (p = "-1.0 / 1e-20"), n))
            this.userCode =
              "\n        const ivec2 strides = ivec2(" +
              a +
              ", " +
              i +
              ");\n        const ivec2 pads = ivec2(" +
              l +
              ", " +
              h +
              ");\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < " +
              u +
              ";\n              wR += " +
              o +
              ") {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= " +
              t.inHeight +
              ") {\n              continue;\n            }\n\n            for (int wC = 0; wC < " +
              c +
              ";\n                wC += " +
              s +
              ") {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= " +
              t.inWidth +
              ") {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value >= currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = wR * " +
              c +
              " + wC;\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      ";
          else {
            var f =
              e +
              "(" +
              e +
              "(" +
              e +
              "(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";
            "avg" === e && (f = "avgValue / count");
            var m = 4 * Math.floor(r / 4),
              g = r % 4,
              b =
                "\n      if (" +
                d +
                ") {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    ";
            this.userCode =
              "\n      const ivec2 strides = ivec2(" +
              a +
              ", " +
              i +
              ");\n      const ivec2 pads = ivec2(" +
              l +
              ", " +
              h +
              ");\n      const float initializationValue = " +
              p +
              ";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= " +
              t.inWidth +
              ") {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(" +
              p +
              ");\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < " +
              u +
              ";\n            wR += " +
              o +
              ") {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= " +
              t.inHeight +
              ") {\n            continue;\n          }\n\n          for (int wC = 0; wC < " +
              m +
              "; wC += 4) {\n            int xC = xCCorner + wC * " +
              s +
              ";\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + " +
              s +
              ", d),\n              getValue(batch, xR, xC + 2 * " +
              s +
              ", d),\n              getValue(batch, xR, xC + 3 * " +
              s +
              ", d)\n            );\n\n            " +
              b +
              "\n          }\n\n          int xC = xCCorner + " +
              m +
              ";\n          if (" +
              (1 === g) +
              ") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            " +
              b +
              "\n          } else if (" +
              (2 === g) +
              ") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + " +
              s +
              ", d),\n              initializationValue,\n              initializationValue\n            );\n\n            " +
              b +
              "\n          } else if (" +
              (3 === g) +
              ") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + " +
              s +
              ", d),\n              getValue(batch, xR, xC + 2 * " +
              s +
              ", d),\n              initializationValue\n            );\n\n            " +
              b +
              "\n          }\n        }\n        setOutput(" +
              f +
              ");\n      }\n    ";
          }
        },
        ao = function (t, e, n) {
          if (((this.variableNames = ["x"]), "avg" === e && n))
            throw new Error("Cannot compute positions for average pool.");
          var r = t.filterWidth,
            a = t.strideDepth,
            i = t.strideHeight,
            o = t.strideWidth,
            s = t.dilationDepth,
            u = t.dilationHeight,
            c = t.dilationWidth,
            l = t.effectiveFilterDepth,
            h = t.effectiveFilterHeight,
            d = t.effectiveFilterWidth,
            p = t.padInfo.front,
            f = t.padInfo.top,
            m = t.padInfo.left;
          this.outputShape = t.outShape;
          var g = "avg" === e,
            b = "0.0";
          if ((g || (b = "-1.0 / 1e-20"), n))
            this.userCode =
              "\n        const ivec3 strides =\n            ivec3(" +
              a +
              ", " +
              i +
              ", " +
              o +
              ");\n        const ivec3 pads = ivec3(" +
              p +
              ", " +
              f +
              ", " +
              m +
              ");\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < " +
              l +
              ";\n              wD += " +
              s +
              ") {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= " +
              t.inDepth +
              ") {\n              continue;\n            }\n\n            for (int wR = 0; wR < " +
              h +
              ";\n                wR += " +
              u +
              ") {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= " +
              t.inHeight +
              ") {\n                continue;\n              }\n\n              for (int wC = 0; wC < " +
              d +
              ";\n                  wC += " +
              c +
              ") {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= " +
              t.inWidth +
              ") {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value >= currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition =\n                      wD * " +
              h +
              " * " +
              d +
              " +\n                      wR * " +
              d +
              " + wC;;\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      ";
          else {
            var v =
              e +
              "(" +
              e +
              "(" +
              e +
              "(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";
            "avg" === e && (v = "avgValue / count");
            var y = 4 * Math.floor(r / 4),
              x = r % 4,
              w =
                "\n      if (" +
                g +
                ") {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    ";
            this.userCode =
              "\n      const ivec3 strides =\n        ivec3(" +
              a +
              ", " +
              i +
              ", " +
              o +
              ");\n      const ivec3 pads = ivec3(" +
              p +
              ", " +
              f +
              ", " +
              m +
              ");\n      const float initializationValue = " +
              b +
              ";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= " +
              t.inWidth +
              ") {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(" +
              b +
              ");\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < " +
              l +
              ";\n            wD += " +
              s +
              ") {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= " +
              t.inDepth +
              ") {\n            continue;\n          }\n\n          for (int wR = 0; wR < " +
              h +
              ";\n            wR += " +
              u +
              ") {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= " +
              t.inHeight +
              ") {\n              continue;\n            }\n\n            for (int wC = 0; wC < " +
              y +
              "; wC += 4) {\n              int xC = xCCorner + wC * " +
              c +
              ";\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + " +
              c +
              ", ch),\n                getValue(batch, xD, xR, xC + 2 * " +
              c +
              ", ch),\n                getValue(batch, xD, xR, xC + 3 * " +
              c +
              ", ch)\n              );\n\n              " +
              w +
              "\n            }\n\n            int xC = xCCorner + " +
              y +
              ";\n            if (" +
              (1 === x) +
              ") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              " +
              w +
              "\n            } else if (" +
              (2 === x) +
              ") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + " +
              c +
              ", ch),\n                initializationValue,\n                initializationValue\n              );\n\n              " +
              w +
              "\n            } else if (" +
              (3 === x) +
              ") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + " +
              c +
              ", ch),\n                getValue(batch, xD, xR, xC + 2 * " +
              c +
              ", ch),\n                initializationValue\n              );\n\n              " +
              w +
              "\n            }\n          }\n          setOutput(" +
              v +
              ");\n        }\n      }\n    ";
          }
        },
        io = function (t, e) {
          this.variableNames = ["x"];
          var n = t.windowSize,
            r = t.batchSize,
            a = t.inSize,
            i = Math.ceil(a / n);
          this.outputShape = [r, i];
          var o = "0.0",
            s = "";
          "prod" === e
            ? (o = "1.0")
            : "min" === e
            ? ((o = "1.0 / 1e-20"), (s = "min"))
            : "max" === e && ((o = "-1.0 / 1e-20"), (s = "max"));
          var u =
            e +
            "(" +
            e +
            "(" +
            e +
            "(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";
          "sum" === e
            ? (u = "sumValue")
            : "prod" === e
            ? (u = "prodValue")
            : "all" === e
            ? (u = "allValue")
            : "any" === e && (u = "anyValue");
          var c = 4 * Math.floor(n / 4),
            l = n % 4,
            h =
              "\n      if (" +
              ("sum" === e) +
              ") {\n        sumValue += dot(values, ones);\n      } else if (" +
              ("prod" === e) +
              ") {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = " +
              s +
              "(values, minMaxValue);\n      }\n    ",
            d = "vec4";
          "all" === e
            ? ((o = "1.0"),
              (h =
                "\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      "),
              (d = "bvec4"))
            : "any" === e &&
              ((o = "0.0"),
              (h =
                "\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      "),
              (d = "bvec4"));
          var p = "";
          a % n > 0 &&
            (p =
              "\n        if (inIdx < 0 || inIdx >= " +
              a +
              ") {\n          return initializationValue;\n        }\n      "),
            (this.userCode =
              "\n      const float initializationValue = " +
              o +
              ";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        " +
              p +
              "\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * " +
              n +
              ";\n\n        vec4 minMaxValue = vec4(" +
              o +
              ");\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < " +
              c +
              "; i += 4) {\n          int inIdx = inOffset + i;\n          " +
              d +
              " values = " +
              d +
              "(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          " +
              h +
              "\n        }\n\n        int inIdx = inOffset + " +
              c +
              ";\n        if (" +
              (1 === l) +
              ") {\n          " +
              d +
              " values = " +
              d +
              "(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          " +
              h +
              "\n        } else if (" +
              (2 === l) +
              ") {\n          " +
              d +
              " values = " +
              d +
              "(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          " +
              h +
              "\n        } else if (" +
              (3 === l) +
              ") {\n          " +
              d +
              " values = " +
              d +
              "(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          " +
              h +
              "\n        }\n        setOutput(" +
              u +
              ");\n      }\n    ");
        },
        oo = function (t, e) {
          (this.variableNames = ["A"]),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.outputShape = t);
          for (var n = "", r = 0; r < 4; r++) {
            var a = "thisRC = rc;";
            r % 2 == 1 && (a += "thisRC.z += 1;"),
              r > 1 && (a += "thisRC.y += 1;"),
              (n +=
                "\n        " +
                a +
                "\n        " +
                (r > 0 ? "if(thisRC.y < rows && thisRC.z < cols){" : "") +
                "\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[" +
                r +
                "] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        " +
                (r > 0 ? "}" : "") +
                "\n      ");
          }
          this.userCode =
            "\n      \n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      " +
            Ca(["r", "c", "d"], e) +
            "\n      return ivec3(r, c, d);\n    }\n  \n      " +
            Oa(t) +
            "\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = " +
            t[1] +
            ";\n        int cols = " +
            t[2] +
            ";\n\n        " +
            n +
            "\n\n        setOutput(result);\n      }\n    ";
        },
        so = function (t, e, n) {
          (this.variableNames = ["dy"]),
            (this.outputShape = []),
            (this.outputShape = e.shape);
          var r = e.shape,
            a = r[1],
            i = r[2],
            o = t.shape,
            s = o[1],
            u = o[2],
            c = [n && s > 1 ? a - 1 : a, n && u > 1 ? i - 1 : i],
            l = [n && s > 1 ? s - 1 : s, n && u > 1 ? u - 1 : u],
            h = c[0] / l[0],
            d = c[1] / l[1],
            p = 1 / h,
            f = 1 / d,
            m = 2 * Math.ceil(p) + 2,
            g = 2 * Math.ceil(f) + 2;
          this.userCode =
            "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(" +
            h +
            ");\n        const float widthScale = float(" +
            d +
            ");\n\n        const float invHeightScale = float(" +
            p +
            ");\n        const float invWidthScale = float(" +
            f +
            ");\n\n        const int winHeight = int(" +
            m +
            ");\n        const int winWidth = int(" +
            g +
            ");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= " +
            s +
            ") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= " +
            u +
            ") {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), " +
            (a - 1) +
            ".0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), " +
            (i - 1) +
            ".0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    ";
        },
        uo = function (t, e, n, r) {
          (this.variableNames = ["A"]), (this.outputShape = []);
          var a = t[0],
            i = t[1],
            o = t[2],
            s = t[3];
          this.outputShape = [a, e, n, s];
          var u = [r && e > 1 ? i - 1 : i, r && n > 1 ? o - 1 : o],
            c = [r && e > 1 ? e - 1 : e, r && n > 1 ? n - 1 : n];
          this.userCode =
            "\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          " +
            u[0] / c[0] +
            ",\n          " +
            u[1] / c[1] +
            ");\n      const vec2 inputShapeRC = vec2(" +
            i +
            ".0, " +
            o +
            ".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    ";
        },
        co = function (t, e, n, r) {
          (this.variableNames = ["A"]),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.outputShape = []);
          var a = t[0],
            i = t[1],
            o = t[2],
            s = t[3];
          this.outputShape = [a, e, n, s];
          var u = [r && e > 1 ? i - 1 : i, r && n > 1 ? o - 1 : o],
            c = [r && e > 1 ? e - 1 : e, r && n > 1 ? n - 1 : n];
          this.userCode =
            "\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          " +
            u[0] / c[0] +
            ",\n          " +
            u[1] / c[1] +
            ",\n          " +
            u[1] / c[1] +
            ");\n      const vec3 inputShapeRC = vec3(" +
            i +
            ".0, " +
            o +
            ".0,\n                                     " +
            o +
            ".0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < " +
            (s - 1) +
            ";\n        bool hasNextRow = coords.z < " +
            (n - 1) +
            ";\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    ";
        },
        lo = function (t, e, n) {
          (this.variableNames = ["dy"]),
            (this.outputShape = []),
            (this.outputShape = e.shape);
          var r = e.shape,
            a = r[1],
            i = r[2],
            o = t.shape,
            s = o[1],
            u = o[2],
            c = [n && s > 1 ? a - 1 : a, n && u > 1 ? i - 1 : i],
            l = [n && s > 1 ? s - 1 : s, n && u > 1 ? u - 1 : u],
            h = c[0] / l[0],
            d = c[1] / l[1],
            p = 1 / h,
            f = 1 / d,
            m = 2 * Math.ceil(p) + 2,
            g = 2 * Math.ceil(f) + 2;
          this.userCode =
            "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(" +
            h +
            ");\n        const float widthScale = float(" +
            d +
            ");\n\n        const float invHeightScale = float(" +
            p +
            ");\n        const float invWidthScale = float(" +
            f +
            ");\n\n        const int winHeight = int(" +
            m +
            ");\n        const int winWidth = int(" +
            g +
            ");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= " +
            s +
            ") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= " +
            u +
            ") {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(" +
            c[0] +
            ") *\n                (float(dyR) / float(" +
            l[0] +
            "));\n\n            float sourceFracCol =\n                float(" +
            c[1] +
            ") *\n                  (float(dyC) / float(" +
            l[1] +
            "));\n\n            int sourceNearestRow = int(min(\n                float(int(" +
            a +
            ") - 1),\n                " +
            n +
            " ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(" +
            i +
            ") - 1),\n                " +
            n +
            " ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    ";
        },
        ho = function (t, e, n, r) {
          (this.variableNames = ["A"]), (this.outputShape = []);
          var a = t[0],
            i = t[1],
            o = t[2],
            s = t[3];
          this.outputShape = [a, e, n, s];
          var u = [r && e > 1 ? i - 1 : i, r && n > 1 ? o - 1 : o],
            c = [r && e > 1 ? e - 1 : e, r && n > 1 ? n - 1 : n],
            l = r ? "0.5" : "0.0";
          this.userCode =
            "\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          " +
            u[0] / c[0] +
            ",\n          " +
            u[1] / c[1] +
            ");\n      const vec2 inputShapeRC = vec2(" +
            i +
            ".0, " +
            o +
            ".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + " +
            l +
            ")));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    ";
        },
        po = function (t, e) {
          this.variableNames = ["x"];
          var n = t.length;
          if (n > 4)
            throw new Error(
              "WebGL backend: Reverse of rank-" +
                n +
                " tensor is not yet supported"
            );
          if (((this.outputShape = t), 1 !== n)) {
            var r = t
                .map(function (n, r) {
                  return (function (n) {
                    return -1 !== e.indexOf(n) && 1 !== t[n]
                      ? t[n] + " - coords[" + n + "] - 1"
                      : "coords[" + n + "]";
                  })(r);
                })
                .join(","),
              a = _a(n);
            this.userCode =
              "\n      void main() {\n        " +
              a +
              " coords = getOutputCoords();\n        setOutput(getX(" +
              r +
              "));\n      }\n    ";
          } else
            this.userCode =
              "\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(" +
              t[0] +
              " - coord - 1));\n        }\n      ";
        },
        fo = function (t, e) {
          (this.variableNames = ["x"]),
            (this.packedInputs = !0),
            (this.packedOutput = !0);
          var n = t.length;
          if (n > 4)
            throw new Error(
              "WebGL backend: Reverse of rank-" +
                n +
                " tensor is not yet supported"
            );
          this.outputShape = t;
          var r = xa("rc", n),
            a = r[n - 1] + " + 1 < " + this.outputShape[n - 1],
            i = r[n - 2] + " + 1 < " + this.outputShape[n - 2],
            o = _a(n);
          function s(n) {
            var r = t.map(function (r, a) {
              return (function (n, r) {
                return -1 !== e.indexOf(n) && 1 !== t[n]
                  ? t[n] + " - " + r[n] + " - 1"
                  : "" + r[n];
              })(a, n);
            });
            return (
              "getChannel(getX(" +
              r.join(",") +
              "), vec2(" +
              r.slice(-2).join(",") +
              "))"
            );
          }
          this.userCode =
            1 === n
              ? "\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(" +
                t[0] +
                " - rc - 1),\n            " +
                t[0] +
                " - rc - 1);\n          if(" +
                a +
                "){\n              result.g = getChannel(getX(" +
                t[0] +
                " - (rc  + 1) - 1),\n                " +
                t[0] +
                " - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      "
              : "\n        void main() {\n          " +
                o +
                " rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = " +
                (function (t) {
                  return s(t);
                })(r.slice()) +
                ";\n          if(" +
                a +
                "){\n            result.g = " +
                (function (t) {
                  return (t[n - 1] = "(" + t[n - 1] + " + 1)"), s(t);
                })(r.slice()) +
                ";\n          }\n          if(" +
                i +
                ") {\n            result.b = " +
                (function (t) {
                  return (t[n - 2] = "(" + t[n - 2] + " + 1)"), s(t);
                })(r.slice()) +
                ";\n            if(" +
                a +
                ") {\n              result.a = " +
                (function (t) {
                  return (
                    (t[n - 1] = "(" + t[n - 1] + " + 1)"),
                    (t[n - 2] = "(" + t[n - 2] + " + 1)"),
                    s(t)
                  );
                })(r.slice()) +
                ";\n            }\n          }\n          setOutput(result);\n        }\n    ";
        },
        mo = function (t, e, n, r, a, i, o) {
          void 0 === o && (o = !0),
            (this.variableNames = ["updates", "indices", "defaultValue"]),
            (this.outputShape = i);
          var s = _a(a.length),
            u = _a(i.length),
            c = "";
          1 === n ? (c = "i") : 2 === n && (c = "i, j");
          var l = "getIndices(" + c + ")",
            h = "";
          1 === r ? (h = "i") : 2 === r && (h = "i, coords[1]");
          var d = "getUpdates(" + h + ")",
            p = e > 1 ? "strides[j]" : "strides";
          this.userCode =
            "\n        " +
            s +
            " strides = " +
            s +
            "(" +
            a +
            ");\n\n        void main() {\n          " +
            u +
            " coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < " +
            t +
            "; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < " +
            e +
            "; j++) {\n              int index = round(" +
            l +
            ");\n              flattenedIndex += index * " +
            p +
            ";\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += " +
            d +
            ";\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      ";
        },
        go = function (t, e) {
          this.variableNames = ["x", "segmentIds"];
          var n = t.windowSize,
            r = t.batchSize,
            a = t.inSize,
            i = t.numSegments,
            o = i * Math.ceil(a / n);
          this.outputShape = [r, o];
          var s = 4 * Math.floor(n / 4),
            u = n % 4,
            c = "\n        sumValue += dot(values, segFilter);\n    ",
            l = "";
          a % n > 0 &&
            (l =
              "\n        if (inIdx < 0 || inIdx >= " +
              a +
              ") {\n          return initializationValue;\n        }\n      ");
          var h = "";
          a % n > 0 &&
            (h =
              "\n        if (inIdx < 0 || inIdx >= " +
              a +
              ") {\n          return -1.0;\n        }\n      "),
            (this.userCode =
              "\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        " +
              l +
              "\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        " +
              h +
              "\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          " +
              i +
              ")) * float(" +
              n +
              "));\n        int currentSeg = int(mod(float(outIdx), float(" +
              i +
              ")));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < " +
              s +
              "; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          " +
              c +
              "\n        }\n\n        int inIdx = inOffset + " +
              s +
              ";\n        if (" +
              (1 === u) +
              ") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          " +
              c +
              "\n        } else if (" +
              (2 === u) +
              ") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          " +
              c +
              "\n        } else if (" +
              (3 === u) +
              ") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          " +
              c +
              "\n        }\n        setOutput(sumValue);\n      }\n    ");
        },
        bo = function (t, e, n) {
          var r, a;
          if (
            ((this.variableNames = ["c", "a", "b"]),
            (this.outputShape = e),
            n > 4)
          )
            throw Error("Where for rank " + n + " is not yet supported");
          if (1 === n) (a = "resRC"), (r = "resRC");
          else {
            for (
              var i = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"],
                o = [],
                s = [],
                u = 0;
              u < e.length;
              u++
            )
              s.push("" + i[u]), u < t && o.push("" + i[u]);
            (r = o.join()), (a = s.join());
          }
          var c = _a(n);
          this.userCode =
            "\n      void main() {\n        " +
            c +
            " resRC = getOutputCoords();\n        float cVal = getC(" +
            r +
            ");\n        if (cVal >= 1.0) {\n          setOutput(getA(" +
            a +
            "));\n        } else {\n          setOutput(getB(" +
            a +
            "));\n        }\n      }\n    ";
        },
        vo = (function () {
          function t(t) {
            (this.variableNames = ["source"]),
              (this.outputShape = t),
              (this.rank = t.length);
            var e,
              n = _a(this.rank),
              r = "uniform int start[" + this.rank + "];",
              a = (function (t) {
                if (1 === t) return "sourceLoc";
                if (t <= 6)
                  return yo
                    .slice(0, t)
                    .map(function (t) {
                      return "sourceLoc." + t;
                    })
                    .join(",");
                throw Error("Slicing for rank " + t + " is not yet supported");
              })(this.rank);
            (e =
              "\n        " +
              n +
              " sourceLoc;\n        " +
              n +
              " coords = getOutputCoords();\n        " +
              t
                .map(function (t, e) {
                  return (
                    "sourceLoc." +
                    yo[e] +
                    " = start[" +
                    e +
                    "] + coords." +
                    yo[e] +
                    ";"
                  );
                })
                .join("\n") +
              "\n      "),
              (this.userCode =
                "\n      " +
                r +
                "\n      void main() {\n        " +
                e +
                "\n        setOutput(getSource(" +
                a +
                "));\n      }\n    ");
          }
          return (
            (t.prototype.getCustomSetupFunc = function (t) {
              var e = this;
              if (t.length !== this.rank)
                throw Error(
                  "The rank (" +
                    this.rank +
                    ") of the program must match the length of start (" +
                    t.length +
                    ")"
                );
              return function (n, r) {
                (null == e.startLoc &&
                  ((e.startLoc = n.getUniformLocationNoThrow(r, "start")),
                  null == e.startLoc)) ||
                  n.gl.uniform1iv(e.startLoc, t);
              };
            }),
            t
          );
        })(),
        yo = ["x", "y", "z", "w", "u", "v"],
        xo = (function () {
          function t(t) {
            (this.variableNames = ["source"]),
              (this.packedInputs = !0),
              (this.packedOutput = !0),
              (this.outputShape = t),
              (this.rank = t.length);
            var e = _a(this.rank),
              n = xa("coords", this.rank),
              r = xa("sourceLoc", this.rank),
              a =
                1 === this.rank
                  ? "sourceLoc"
                  : "vec2(" + r.slice(-2).join() + ")",
              i = "getChannel(getSource(" + r.join() + "), " + a + ")",
              o =
                "\n      result.x = " +
                i +
                ";\n      if (++" +
                n[this.rank - 1] +
                " < " +
                t[this.rank - 1] +
                ") {\n        ++" +
                r[this.rank - 1] +
                ";\n        result.y = " +
                i +
                ";\n        --" +
                r[this.rank - 1] +
                ";\n      }\n    ",
              s =
                1 === this.rank
                  ? ""
                  : "\n      --" +
                    n[this.rank - 1] +
                    ";\n      if (++" +
                    n[this.rank - 2] +
                    " < " +
                    t[this.rank - 2] +
                    ") {\n        ++" +
                    r[this.rank - 2] +
                    ";\n        result.z = " +
                    i +
                    ";\n        if (++" +
                    n[this.rank - 1] +
                    " < " +
                    t[this.rank - 1] +
                    ") {\n          ++" +
                    r[this.rank - 1] +
                    ";\n          result.w = " +
                    i +
                    ";\n        }\n      }\n    ",
              u =
                this.rank <= 4
                  ? "sourceLoc = coords +\n            " +
                    e +
                    "(" +
                    t
                      .map(function (t, e) {
                        return "start[" + e + "]";
                      })
                      .join() +
                    ");"
                  : t
                      .map(function (t, e) {
                        return r[e] + " = " + n[e] + " + start[" + e + "];";
                      })
                      .join("\n");
            this.userCode =
              "\n      uniform int start[" +
              this.rank +
              "];\n      void main() {\n        " +
              e +
              " coords = getOutputCoords();\n        " +
              e +
              " sourceLoc;\n        " +
              u +
              "\n        vec4 result = vec4(0.);\n        " +
              o +
              "\n        " +
              s +
              "\n        setOutput(result);\n      }\n    ";
          }
          return (
            (t.prototype.getCustomSetupFunc = function (t) {
              var e = this;
              if (t.length !== this.rank)
                throw Error(
                  "The rank (" +
                    this.rank +
                    ") of the program must match the length of start (" +
                    t.length +
                    ")"
                );
              return function (n, r) {
                (null == e.startLoc &&
                  ((e.startLoc = n.getUniformLocationNoThrow(r, "start")),
                  null == e.startLoc)) ||
                  n.gl.uniform1iv(e.startLoc, t);
              };
            }),
            t
          );
        })(),
        wo = function (t, e, n) {
          (this.variableNames = ["x"]), (this.outputShape = n);
          var r = n.length,
            a = _a(n.length),
            i = _a(n.length),
            o = "";
          if (1 === r) o = "coords * strides + begin";
          else {
            var s = 0;
            o = n
              .map(function (t, e) {
                return (
                  s++,
                  1 === n.length
                    ? "coords * strides[" + e + "] + begin[" + e + "]"
                    : "coords[" +
                      (s - 1) +
                      "] * strides[" +
                      e +
                      "] + begin[" +
                      e +
                      "]"
                );
              })
              .join(",");
          }
          this.userCode =
            "\n      " +
            a +
            " begin = " +
            a +
            "(" +
            t +
            ");\n      " +
            a +
            " strides = " +
            a +
            "(" +
            e +
            ");\n\n      void main() {\n        " +
            i +
            " coords = getOutputCoords();\n        setOutput(getX(" +
            o +
            "));\n      }\n    ";
        },
        Co = (function () {
          function t(t) {
            (this.gpgpu = t),
              (this.numUsedTextures = 0),
              (this.numFreeTextures = 0),
              (this.freeTextures = {}),
              (this.logEnabled = !1),
              (this.usedTextures = {});
          }
          return (
            (t.prototype.acquireTexture = function (t, e, n) {
              var r,
                a = Oo(e, n),
                i = Eo(t, a, n);
              if (
                (i in this.freeTextures || (this.freeTextures[i] = []),
                i in this.usedTextures || (this.usedTextures[i] = []),
                this.freeTextures[i].length > 0)
              ) {
                this.numFreeTextures--, this.numUsedTextures++, this.log();
                var o = this.freeTextures[i].shift();
                return this.usedTextures[i].push(o), o;
              }
              return (
                this.numUsedTextures++,
                this.log(),
                a === Lt.PACKED_2X2_FLOAT32
                  ? (r = this.gpgpu.createPackedMatrixTexture(t[0], t[1]))
                  : a === Lt.PACKED_2X2_FLOAT16
                  ? (r = this.gpgpu.createFloat16PackedMatrixTexture(
                      t[0],
                      t[1]
                    ))
                  : a === Lt.UNPACKED_FLOAT32
                  ? (r = this.gpgpu.createFloat32MatrixTexture(t[0], t[1]))
                  : a === Lt.UNPACKED_FLOAT16
                  ? (r = this.gpgpu.createFloat16MatrixTexture(t[0], t[1]))
                  : a === Lt.PACKED_4X1_UNSIGNED_BYTE &&
                    (r = this.gpgpu.createUnsignedBytesMatrixTexture(
                      t[0],
                      t[1]
                    )),
                this.usedTextures[i].push(r),
                r
              );
            }),
            (t.prototype.releaseTexture = function (t, e, n, r) {
              if (null != this.freeTextures) {
                var a = Eo(e, Oo(n, r), r);
                a in this.freeTextures || (this.freeTextures[a] = []),
                  this.freeTextures[a].push(t),
                  this.numFreeTextures++,
                  this.numUsedTextures--;
                var i = this.usedTextures[a],
                  o = i.indexOf(t);
                if (o < 0)
                  throw new Error(
                    "Cannot release a texture that was never provided by this texture manager"
                  );
                i.splice(o, 1), this.log();
              }
            }),
            (t.prototype.log = function () {
              if (this.logEnabled) {
                var t = this.numFreeTextures + this.numUsedTextures;
                console.log(
                  "Free/Used",
                  this.numFreeTextures + " / " + this.numUsedTextures,
                  "(" + t + ")"
                );
              }
            }),
            (t.prototype.getNumUsedTextures = function () {
              return this.numUsedTextures;
            }),
            (t.prototype.getNumFreeTextures = function () {
              return this.numFreeTextures;
            }),
            (t.prototype.dispose = function () {
              var t = this;
              if (null != this.freeTextures) {
                for (var e in this.freeTextures)
                  this.freeTextures[e].forEach(function (e) {
                    t.gpgpu.deleteMatrixTexture(e);
                  });
                for (var e in this.usedTextures)
                  this.usedTextures[e].forEach(function (e) {
                    t.gpgpu.deleteMatrixTexture(e);
                  });
                (this.freeTextures = null),
                  (this.usedTextures = null),
                  (this.numUsedTextures = 0),
                  (this.numFreeTextures = 0);
              }
            }),
            t
          );
        })();
      function Oo(t, e) {
        if (t === Pt.UPLOAD) return Lt.PACKED_2X2_FLOAT32;
        if (t === Pt.RENDER || null == t)
          return (function (t) {
            return d().getBool("WEBGL_RENDER_FLOAT32_ENABLED")
              ? t
                ? Lt.PACKED_2X2_FLOAT32
                : Lt.UNPACKED_FLOAT32
              : t
              ? Lt.PACKED_2X2_FLOAT16
              : Lt.UNPACKED_FLOAT16;
          })(e);
        if (t === Pt.DOWNLOAD || t === Pt.PIXELS)
          return Lt.PACKED_4X1_UNSIGNED_BYTE;
        throw new Error("Unknown logical texture type " + t);
      }
      function Eo(t, e, n) {
        return t[0] + "_" + t[1] + "_" + e + "_" + n;
      }
      var So = function (t, e) {
          this.variableNames = ["A"];
          for (var n = new Array(t.length), r = 0; r < n.length; r++)
            n[r] = t[r] * e[r];
          (this.outputShape = n), (this.rank = n.length);
          var a = _a(this.rank),
            i = (function (t) {
              var e = t.length;
              if (e > 5)
                throw Error("Tile for rank " + e + " is not yet supported");
              if (1 === e) return "imod(resRC, " + t[0] + ")";
              for (
                var n = ["resRC.x", "resRC.y", "resRC.z", "resRC.w", "resRC.u"],
                  r = [],
                  a = 0;
                a < t.length;
                a++
              )
                r.push("imod(" + n[a] + ", " + t[a] + ")");
              return r.join();
            })(t);
          this.userCode =
            "\n      void main() {\n        " +
            a +
            " resRC = getOutputCoords();\n        setOutput(getA(" +
            i +
            "));\n      }\n    ";
        },
        Io = function (t, e) {
          this.variableNames = ["A"];
          for (var n = new Array(t.length), r = 0; r < n.length; r++)
            n[r] = t[e[r]];
          (this.outputShape = n), (this.rank = n.length);
          var a = _a(this.rank),
            i = (function (t) {
              var e = t.length;
              if (e > 6)
                throw Error(
                  "Transpose for rank " + e + " is not yet supported"
                );
              for (
                var n = [
                    "resRC.x",
                    "resRC.y",
                    "resRC.z",
                    "resRC.w",
                    "resRC.u",
                    "resRC.v",
                  ],
                  r = new Array(e),
                  a = 0;
                a < t.length;
                a++
              )
                r[t[a]] = n[a];
              return r.join();
            })(e);
          this.userCode =
            "\n    void main() {\n      " +
            a +
            " resRC = getOutputCoords();\n      setOutput(getA(" +
            i +
            "));\n    }\n    ";
        },
        ko = function (t, e) {
          (this.variableNames = ["A"]),
            (this.packedInputs = !0),
            (this.packedOutput = !0);
          for (var n = new Array(t.length), r = 0; r < n.length; r++)
            n[r] = t[e[r]];
          if (((this.outputShape = n), (this.rank = n.length), this.rank > 6))
            throw Error(
              "Packed transpose for rank " +
                this.rank +
                " is not yet supported."
            );
          var a = _a(this.rank),
            i = ya("rc", this.rank),
            o = new Array(this.rank);
          for (r = 0; r < e.length; r++) o[e[r]] = i[r];
          var s = "vec2(" + o.slice(-2).join() + ")",
            u = "++" + i[this.rank - 1] + " < " + n[this.rank - 1],
            c = "getChannel(getA(" + o.join() + "), " + s + ")";
          this.userCode =
            "\n    void main() {\n      " +
            a +
            " rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = " +
            c +
            ";\n      if(" +
            u +
            ") {\n        result[1] = " +
            c +
            ";\n      }\n      --" +
            i[this.rank - 1] +
            ";\n      if(++" +
            i[this.rank - 2] +
            " < " +
            n[this.rank - 2] +
            ") {\n        result[2] = " +
            c +
            ";\n        if(" +
            u +
            ") {\n          result[3] = " +
            c +
            ";\n        }\n      }\n      setOutput(result);\n    }\n    ";
        },
        No = 1.7580993408473768,
        Ro = 1.0507009873554805,
        Ao = function (t, e) {
          (this.variableNames = ["A"]),
            (this.outputShape = t),
            (this.userCode =
              "\n      float unaryOperation(float x) {\n        " +
              e +
              "\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    ");
        },
        To = "if (isnan(x)) return x;",
        _o = "return abs(x);",
        Do = To + "\n  return (x < 0.0) ? 0.0 : x;\n",
        Fo = To + "\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",
        Mo = "return (x >= 0.0) ? x : (exp(x) - 1.0);",
        jo = "return -x;",
        $o = "return ceil(x);",
        Bo = "return floor(x);",
        Po = "return exp(x);",
        Lo = "return exp(x) - 1.0;",
        zo = "return x;",
        Wo =
          "\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",
        Vo =
          "\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",
        Uo =
          "\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n",
        Go = function (t, e) {
          (this.variableNames = ["A"]),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.outputShape = t),
            (this.userCode =
              "\n      vec4 unaryOperation(vec4 x) {\n        " +
              e +
              "\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    ");
        },
        Ho = function (t) {
          (this.variableNames = ["A"]),
            (this.packedInputs = !0),
            (this.packedOutput = !1),
            (this.outputShape = t);
          var e = t.length,
            n = xa("rc", e),
            r = _a(e),
            a = (function (t, e) {
              if (1 === t) return "rc";
              for (var n = "", r = 0; r < t; r++)
                (n += e[r]), r < t - 1 && (n += ",");
              return n;
            })(e, n),
            i = n.slice(-2),
            o = e <= 1 ? "rc" : "vec2(" + i.join(",") + ")";
          this.userCode =
            "\n      void main() {\n        " +
            r +
            " rc = getOutputCoords();\n        vec4 packedInput = getA(" +
            a +
            ");\n\n        setOutput(getChannel(packedInput, " +
            o +
            "));\n      }\n    ";
        },
        qo = {};
      function Ko(t, e) {
        if ((void 0 === e && (e = !1), "linear" === t)) return "return x;";
        if ("relu" === t) return e ? Wo : Do;
        if ("elu" === t) return e ? Uo : Mo;
        if ("relu6" === t) return e ? Vo : Fo;
        if ("prelu" === t) return e ? Ha : Ua;
        throw new Error(
          "Activation " + t + " has not been implemented for the WebGL backend."
        );
      }
      var Xo = (function (t) {
        function e(e) {
          var n,
            r = t.call(this) || this;
          if (
            ((r.pendingRead = new WeakMap()),
            (r.pendingDisposal = new WeakSet()),
            (r.dataRefCount = new WeakMap()),
            (r.numBytesInGPU = 0),
            (r.uploadWaitMs = 0),
            (r.downloadWaitMs = 0),
            (r.warnedAboutMemory = !1),
            (r.pendingDeletes = 0),
            (r.disposed = !1),
            !d().getBool("HAS_WEBGL"))
          )
            throw new Error("WebGL is not supported on this device");
          if (null == e) {
            var a = Ut(d().getNumber("WEBGL_VERSION"));
            (r.binaryCache =
              ((n = d().getNumber("WEBGL_VERSION")) in qo || (qo[n] = {}),
              qo[n])),
              (r.gpgpu = new Vi(a)),
              (r.canvas = a.canvas),
              (r.gpgpuCreatedLocally = !0);
          } else
            (r.gpgpu = e),
              (r.binaryCache = {}),
              (r.gpgpuCreatedLocally = !1),
              (r.canvas = e.gl.canvas);
          return (
            (r.textureManager = new Co(r.gpgpu)),
            (r.numMBBeforeWarning =
              null == d().global.screen
                ? 1024
                : (d().global.screen.height *
                    d().global.screen.width *
                    window.devicePixelRatio *
                    600) /
                  1024 /
                  1024),
            (r.texData = new Dr(r, Mt)),
            r
          );
        }
        return (
          s(e, t),
          (e.prototype.numDataIds = function () {
            return (
              this.texData.numDataIds() +
              (this.cpuBackend ? this.cpuBackend.numDataIds() : 0) -
              this.pendingDeletes
            );
          }),
          (e.prototype.write = function (t, e, n) {
            if (
              (d().getBool("DEBUG") && this.checkNumericalProblems(t),
              "complex64" === n && null != t)
            )
              throw new Error(
                "Cannot write to a complex64 dtype. Please use tf.complex(real, imag)."
              );
            var r = {};
            return (
              this.texData.set(r, {
                shape: e,
                dtype: n,
                values: t,
                usage: Pt.UPLOAD,
              }),
              r
            );
          }),
          (e.prototype.move = function (t, e, n, r) {
            if (
              (d().getBool("DEBUG") && this.checkNumericalProblems(e),
              "complex64" === r)
            )
              throw new Error(
                "Cannot write to a complex64 dtype. Please use tf.complex(real, imag)."
              );
            this.texData.set(t, {
              shape: n,
              dtype: r,
              values: e,
              usage: Pt.UPLOAD,
            });
          }),
          (e.prototype.readSync = function (t) {
            var e = this.texData.get(t),
              n = e.values,
              r = e.dtype,
              a = e.complexTensors,
              i = e.slice,
              o = e.shape,
              s = e.isPacked;
            if (null != i) {
              var u;
              u = s ? new Go(o, zo) : new Ao(o, zo);
              var c = this.runWebGLProgram(
                  u,
                  [{ dataId: t, shape: o, dtype: r }],
                  r
                ),
                l = this.readSync(c.dataId);
              return this.disposeData(c.dataId), l;
            }
            if (null != n) return this.convertAndCacheOnCPU(t);
            if ("string" === r) return n;
            var h,
              d,
              p = null != this.activeTimers;
            return (
              p && (h = at()),
              (d =
                "complex64" === r
                  ? ta(a.real.dataSync(), a.imag.dataSync())
                  : this.getValuesFromTexture(t)),
              p && (this.downloadWaitMs += at() - h),
              this.convertAndCacheOnCPU(t, d)
            );
          }),
          (e.prototype.read = function (t) {
            return u(this, void 0, void 0, function () {
              var e,
                n,
                r,
                a,
                i,
                o,
                s,
                u,
                l,
                h,
                p,
                f,
                m,
                g,
                b,
                v,
                y,
                x,
                w,
                C,
                O,
                E;
              return c(this, function (c) {
                switch (c.label) {
                  case 0:
                    if (this.pendingRead.has(t))
                      return (
                        (e = this.pendingRead.get(t)),
                        [
                          2,
                          new Promise(function (t) {
                            return e.push(t);
                          }),
                        ]
                      );
                    if (
                      ((n = this.texData.get(t)),
                      (r = n.values),
                      (a = n.shape),
                      (i = n.slice),
                      (o = n.dtype),
                      (s = n.complexTensors),
                      (u = n.isPacked),
                      null != i)
                    )
                      return (
                        void 0,
                        (l = u ? new Go(a, zo) : new Ao(a, zo)),
                        (h = this.runWebGLProgram(
                          l,
                          [{ dataId: t, shape: a, dtype: o }],
                          o
                        )),
                        (p = this.read(h.dataId)),
                        this.disposeData(h.dataId),
                        [2, p]
                      );
                    if (null != r) return [2, this.convertAndCacheOnCPU(t)];
                    if (
                      !d().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED") &&
                      2 === d().getNumber("WEBGL_VERSION")
                    )
                      throw new Error(
                        "tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported."
                      );
                    return (
                      (f = null),
                      "complex64" !== o &&
                        d().get("WEBGL_BUFFER_SUPPORTED") &&
                        ((m = this.decode(t)),
                        (g = this.texData.get(m.dataId)),
                        (f = (E = this.gpgpu).createBufferFromTexture.apply(
                          E,
                          [g.texture].concat(Ht(a))
                        ))),
                      this.pendingRead.set(t, []),
                      "complex64" === o
                        ? [3, 2]
                        : [4, this.gpgpu.createAndWaitForFence()]
                    );
                  case 1:
                    c.sent(), (c.label = 2);
                  case 2:
                    return "complex64" !== o
                      ? [3, 4]
                      : [4, Promise.all([s.real.data(), s.imag.data()])];
                  case 3:
                    return (
                      (v = c.sent()),
                      (y = v[0]),
                      (x = v[1]),
                      (b = ta(y, x)),
                      [3, 5]
                    );
                  case 4:
                    null == f
                      ? (b = this.getValuesFromTexture(t))
                      : ((w = R(a)),
                        (b = this.gpgpu.downloadFloat32MatrixFromBuffer(f, w))),
                      (c.label = 5);
                  case 5:
                    return (
                      null != m && this.disposeData(m.dataId),
                      (C = this.convertAndCacheOnCPU(t, b)),
                      (O = this.pendingRead.get(t)),
                      this.pendingRead.delete(t),
                      O.forEach(function (t) {
                        return t(C);
                      }),
                      this.pendingDisposal.has(t) &&
                        (this.pendingDisposal.delete(t),
                        this.disposeData(t),
                        this.pendingDeletes--),
                      [2, C]
                    );
                }
              });
            });
          }),
          (e.prototype.checkNumericalProblems = function (t) {
            if (null != t)
              for (var e = 0; e < t.length; e++) {
                var n = t[e];
                if (!Yt(n)) {
                  if (d().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))
                    throw Error(
                      "The value " +
                        n +
                        " cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'"
                    );
                  throw Error(
                    "The value " + n + " cannot be represented on this device."
                  );
                }
              }
          }),
          (e.prototype.getValuesFromTexture = function (t) {
            var e,
              n = this.texData.get(t),
              r = n.shape,
              a = n.dtype,
              i = n.isPacked,
              o = R(r);
            if (d().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")) {
              var s = this.decode(t),
                u = this.texData.get(s.dataId),
                c = (e = this.gpgpu).downloadMatrixFromPackedTexture
                  .apply(e, [u.texture].concat(Ht(r)))
                  .subarray(0, o);
              return this.disposeData(s.dataId), c;
            }
            var l = d().getBool("WEBGL_PACK") && !0 === i,
              h = l ? Se(r) : r,
              p = l ? new vi(h) : new bi(h),
              f = this.runWebGLProgram(
                p,
                [{ shape: h, dtype: a, dataId: t }],
                "float32"
              ),
              m = this.texData.get(f.dataId),
              g = this.gpgpu
                .downloadByteEncodedFloatMatrixFromOutputTexture(
                  m.texture,
                  m.texShape[0],
                  m.texShape[1]
                )
                .subarray(0, o);
            return this.disposeData(f.dataId), g;
          }),
          (e.prototype.time = function (t) {
            return u(this, void 0, void 0, function () {
              var e, n, r, a, i, o, s;
              return c(this, function (u) {
                switch (u.label) {
                  case 0:
                    return (
                      (e = this.activeTimers),
                      (n = []),
                      (r = !1),
                      null == this.programTimersStack
                        ? ((this.programTimersStack = n), (r = !0))
                        : this.activeTimers.push(n),
                      (this.activeTimers = n),
                      t(),
                      (a = N(
                        this.activeTimers.map(function (t) {
                          return t.query;
                        })
                      ).filter(function (t) {
                        return null != t;
                      })),
                      (i = N(
                        this.activeTimers.map(function (t) {
                          return t.name;
                        })
                      ).filter(function (t) {
                        return null != t;
                      })),
                      (this.activeTimers = e),
                      r && (this.programTimersStack = null),
                      (o = {
                        uploadWaitMs: this.uploadWaitMs,
                        downloadWaitMs: this.downloadWaitMs,
                        kernelMs: null,
                        wallMs: null,
                      }),
                      d().getNumber(
                        "WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE"
                      ) > 0
                        ? [4, Promise.all(a)]
                        : [3, 2]
                    );
                  case 1:
                    return (
                      (s = u.sent()),
                      (o.kernelMs = E(s)),
                      (o.getExtraProfileInfo = function () {
                        return s
                          .map(function (t, e) {
                            return { name: i[e], ms: t };
                          })
                          .map(function (t) {
                            return t.name + ": " + t.ms;
                          })
                          .join(", ");
                      }),
                      [3, 3]
                    );
                  case 2:
                    (o.kernelMs = {
                      error:
                        "WebGL query timers are not supported in this environment.",
                    }),
                      (u.label = 3);
                  case 3:
                    return (
                      (this.uploadWaitMs = 0), (this.downloadWaitMs = 0), [2, o]
                    );
                }
              });
            });
          }),
          (e.prototype.memory = function () {
            return { unreliable: !1, numBytesInGPU: this.numBytesInGPU };
          }),
          (e.prototype.startTimer = function () {
            return d().getNumber(
              "WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE"
            ) > 0
              ? this.gpgpu.beginQuery()
              : { startMs: at(), endMs: null };
          }),
          (e.prototype.endTimer = function (t) {
            return d().getNumber(
              "WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE"
            ) > 0
              ? (this.gpgpu.endQuery(), t)
              : ((t.endMs = at()), t);
          }),
          (e.prototype.getQueryTime = function (t) {
            return u(this, void 0, void 0, function () {
              var e;
              return c(this, function (n) {
                return d().getNumber(
                  "WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE"
                ) > 0
                  ? [2, this.gpgpu.waitForQueryAndGetTime(t)]
                  : [2, (e = t).endMs - e.startMs];
              });
            });
          }),
          (e.prototype.disposeData = function (t) {
            if (!this.pendingDisposal.has(t)) {
              if (this.pendingRead.has(t))
                return this.pendingDisposal.add(t), void this.pendingDeletes++;
              if (this.texData.has(t)) {
                this.releaseGPUData(t);
                var e = this.texData.get(t).complexTensors;
                null != e && (e.real.dispose(), e.imag.dispose()),
                  this.texData.delete(t);
              }
            }
          }),
          (e.prototype.releaseGPUData = function (t) {
            var e = this.texData.get(t),
              n = e.texture,
              r = e.dtype,
              a = e.texShape,
              i = e.usage,
              o = e.isPacked,
              s = e.slice,
              u = (s && s.origDataId) || t,
              c = this.dataRefCount.get(u);
            c > 1
              ? this.dataRefCount.set(u, c - 1)
              : (this.dataRefCount.delete(u),
                null != n &&
                  ((this.numBytesInGPU -= this.computeBytes(a, r)),
                  this.textureManager.releaseTexture(n, a, i, o)));
            var l = this.texData.get(t);
            (l.texture = null),
              (l.texShape = null),
              (l.isPacked = !1),
              (l.slice = null);
          }),
          (e.prototype.getTexture = function (t) {
            return this.uploadToGPU(t), this.texData.get(t).texture;
          }),
          (e.prototype.getDataInfo = function (t) {
            return this.texData.get(t);
          }),
          (e.prototype.getCPUBackend = function () {
            return d().getBool("WEBGL_CPU_FORWARD")
              ? (null == this.cpuBackend &&
                  (this.cpuBackend = Mt.findBackend("cpu")),
                this.cpuBackend)
              : null;
          }),
          (e.prototype.shouldExecuteOnCPU = function (t, e) {
            var n = this;
            return (
              void 0 === e && (e = 128),
              null != this.getCPUBackend() &&
                t.every(function (t) {
                  return null == n.texData.get(t.dataId).texture && t.size < e;
                })
            );
          }),
          (e.prototype.getGPGPUContext = function () {
            return this.gpgpu;
          }),
          (e.prototype.complex = function (t, e) {
            var n = this.makeOutput(t.shape, "complex64");
            return (
              (this.texData.get(n.dataId).complexTensors = {
                real: Mt.keep(t.clone()),
                imag: Mt.keep(e.clone()),
              }),
              n
            );
          }),
          (e.prototype.real = function (t) {
            return this.texData.get(t.dataId).complexTensors.real.clone();
          }),
          (e.prototype.imag = function (t) {
            return this.texData.get(t.dataId).complexTensors.imag.clone();
          }),
          (e.prototype.slice = function (t, e, n) {
            if (this.shouldExecuteOnCPU([t]))
              return this.cpuBackend.slice(t, e, n);
            if (0 === R(n)) return cn([], n, t.dtype);
            var r = this.texData.get(t.dataId).isPacked,
              a = Nr(t.shape, e, n);
            if (r || !a) {
              var i = d().getBool("WEBGL_PACK_ARRAY_OPERATIONS")
                  ? new xo(n)
                  : new vo(n),
                o = i.getCustomSetupFunc(e);
              return this.compileAndRun(i, [t], null, o);
            }
            return this.uploadToGPU(t.dataId), this.shallowSlice(t, e, n);
          }),
          (e.prototype.shallowSlice = function (t, e, n) {
            var r = this.texData.get(t.dataId),
              a = this.makeOutput(n, t.dtype),
              i = this.texData.get(a.dataId);
            Object.assign(i, r), (i.shape = n), (i.dtype = t.dtype);
            var o = Rr(e, t.strides);
            r.slice && (o += r.slice.flatOffset),
              (i.slice = {
                flatOffset: o,
                origDataId: (r.slice && r.slice.origDataId) || t.dataId,
              });
            var s = this.dataRefCount.get(i.slice.origDataId) || 1;
            return this.dataRefCount.set(i.slice.origDataId, s + 1), a;
          }),
          (e.prototype.stridedSlice = function (t, e, n, r) {
            if (this.shouldExecuteOnCPU([t]))
              return this.cpuBackend.stridedSlice(t, e, n, r);
            var a = Sr(e, n, r);
            if (
              a.some(function (t) {
                return 0 === t;
              })
            )
              return cn([], a);
            var i = new wo(e, r, a);
            return this.compileAndRun(i, [t]);
          }),
          (e.prototype.reverse = function (t, e) {
            var n = d().getBool("WEBGL_PACK_ARRAY_OPERATIONS")
              ? new fo(t.shape, e)
              : new po(t.shape, e);
            return this.compileAndRun(n, [t]);
          }),
          (e.prototype.concat = function (t, e) {
            if ("complex64" === t[0].dtype) {
              var n = t.map(function (t) {
                  return sn(t);
                }),
                r = t.map(function (t) {
                  return un(t);
                });
              return on(this.concat(n, e), this.concat(r, e));
            }
            if (this.shouldExecuteOnCPU(t)) return this.cpuBackend.concat(t, e);
            if (1 === t.length) return t[0];
            if (t.length > d().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")) {
              var a = Math.floor(t.length / 2),
                i = this.concat(t.slice(0, a), e),
                o = this.concat(t.slice(a), e);
              return this.concat([i, o], e);
            }
            if (d().getBool("WEBGL_PACK_ARRAY_OPERATIONS") && t[0].rank > 1) {
              var s = new Qa(
                t.map(function (t) {
                  return t.shape;
                }),
                e
              );
              return this.compileAndRun(s, t);
            }
            var u = rn(
                t.map(function (t) {
                  return t.shape;
                }),
                e
              ),
              c = t.map(function (t) {
                return t.as2D(-1, R(t.shape.slice(e)));
              }),
              l = new Ja(
                c.map(function (t) {
                  return t.shape;
                })
              );
            return this.compileAndRun(l, c).reshape(u);
          }),
          (e.prototype.neg = function (t) {
            if (this.shouldExecuteOnCPU([t])) return this.cpuBackend.neg(t);
            if (d().getBool("WEBGL_PACK_UNARY_OPERATIONS"))
              return this.packedUnaryOp(t, jo, t.dtype);
            var e = new Ao(t.shape, jo);
            return this.compileAndRun(e, [t]);
          }),
          (e.prototype.batchMatMul = function (t, e, n, r) {
            var a = n ? t.shape[2] : t.shape[1],
              i = r ? e.shape[1] : e.shape[2],
              o = n ? t.shape[1] : t.shape[2],
              s = t.shape[0];
            if ((1 === a || 1 === i) && o > 1e3) {
              n && (t = t.transpose([0, 2, 1])),
                r && (e = e.transpose([0, 2, 1]));
              var u = 1 === i ? t : t.as3D(s, o, 1),
                c = 1 === i ? 2 : 1,
                l = 1 === i ? e.as3D(s, 1, o) : e;
              return this.multiply(u, l).sum(c, !0);
            }
            var h = kt(t.dtype, e.dtype),
              d = new Ji(t.shape, [s, a, i], n, r);
            return this.compileAndRun(d, [t, e], h);
          }),
          (e.prototype.fusedBatchMatMul = function (t) {
            var e = t.a,
              n = t.b,
              r = t.transposeA,
              a = t.transposeB,
              i = t.bias,
              o = t.activation,
              s = t.preluActivationWeights,
              u = r ? e.shape[2] : e.shape[1],
              c = a ? n.shape[1] : n.shape[2],
              l = e.shape[0],
              h = kt(e.dtype, n.dtype),
              d = null != i,
              p = null != s,
              f = o ? Ko(o, !0) : null,
              m = new Ji(e.shape, [l, u, c], r, a, d, f, p),
              g = [e, n];
            return i && g.push(i), s && g.push(s), this.compileAndRun(m, g, h);
          }),
          (e.prototype.multiply = function (t, e) {
            if ("complex64" === t.dtype) {
              var n = this.texData.get(t.dataId),
                r = this.texData.get(e.dataId),
                a = new La(
                  "return areal * breal - aimag * bimag;",
                  t.shape,
                  e.shape
                ),
                i = new La(
                  "return areal * bimag + aimag * breal;",
                  t.shape,
                  e.shape
                ),
                o = [
                  this.makeComplexComponentTensorInfo(t, n.complexTensors.real),
                  this.makeComplexComponentTensorInfo(t, n.complexTensors.imag),
                  this.makeComplexComponentTensorInfo(e, r.complexTensors.real),
                  this.makeComplexComponentTensorInfo(e, r.complexTensors.imag),
                ],
                s = this.compileAndRun(a, o),
                u = this.compileAndRun(i, o),
                c = this.complex(s, u);
              return s.dispose(), u.dispose(), c;
            }
            if (this.shouldExecuteOnCPU([t, e]))
              return this.cpuBackend.multiply(t, e);
            if (d().getBool("WEBGL_PACK_BINARY_OPERATIONS"))
              return this.packedBinaryOp(t, e, Va, t.dtype);
            var l = new Ga(Va, t.shape, e.shape);
            return this.compileAndRun(l, [t, e], t.dtype);
          }),
          (e.prototype.batchNormalization = function (t, e, n, r, a, i) {
            var o = [t, e, n],
              s = null;
            null != i && ((s = i.shape), o.push(i));
            var u = null;
            if (
              (null != a && ((u = a.shape), o.push(a)),
              d().getBool("WEBGL_PACK_NORMALIZATION"))
            ) {
              var c = new Pa(t.shape, e.shape, n.shape, s, u, r);
              return this.compileAndRun(c, o);
            }
            var l = new Ba(t.shape, e.shape, n.shape, s, u, r);
            return this.compileAndRun(l, o);
          }),
          (e.prototype.localResponseNormalization4D = function (t, e, n, r, a) {
            var i = d().getBool("WEBGL_PACK_NORMALIZATION")
              ? new Ki(t.shape, e, n, r, a)
              : new Hi(t.shape, e, n, r, a);
            return this.compileAndRun(i, [t]);
          }),
          (e.prototype.LRNGrad = function (t, e, n, r, a, i, o) {
            var s = new qi(e.shape, r, a, i, o);
            return this.compileAndRun(s, [e, n, t]);
          }),
          (e.prototype.tile = function (t, e) {
            if ("string" === t.dtype) {
              var n = this.readSync(t.dataId).map(function (t) {
                return st(t);
              });
              return pa(Ln(t.shape, t.dtype, n), e);
            }
            var r = new So(t.shape, e);
            return this.compileAndRun(r, [t]);
          }),
          (e.prototype.pad = function (t, e, n) {
            var r = d().getBool("WEBGL_PACK_ARRAY_OPERATIONS")
              ? new no(t.shape, e, n)
              : new eo(t.shape, e, n);
            return this.compileAndRun(r, [t]);
          }),
          (e.prototype.transpose = function (t, e) {
            if (this.shouldExecuteOnCPU([t]))
              return this.cpuBackend.transpose(t, e);
            var n = d().getBool("WEBGL_PACK_ARRAY_OPERATIONS")
              ? new ko(t.shape, e)
              : new Io(t.shape, e);
            return this.compileAndRun(n, [t]);
          }),
          (e.prototype.gather = function (t, e, n) {
            if (this.shouldExecuteOnCPU([t, e]))
              return this.cpuBackend.gather(t, e, n);
            var r = new Oi(t.shape, e.size, n);
            return this.compileAndRun(r, [t, e]);
          }),
          (e.prototype.batchToSpaceND = function (t, e, n) {
            S(t.rank <= 4, function () {
              return "batchToSpaceND for rank > 4 with a WebGL backend not implemented yet";
            });
            var r = e.reduce(function (t, e) {
                return t * e;
              }),
              a = pr(t.shape, e, r),
              i = fr(a.length, e.length),
              o = mr(t.shape, e, r),
              s = gr(n, e.length),
              u = br(o, n, e.length);
            return t.reshape(a).transpose(i).reshape(o).slice(s, u);
          }),
          (e.prototype.spaceToBatchND = function (t, e, n) {
            S(t.rank <= 4, function () {
              return "spaceToBatchND for rank > 4 with a WebGL backend not implemented yet";
            });
            var r = e.reduce(function (t, e) {
                return t * e;
              }),
              a = [[0, 0]];
            a.push.apply(a, n);
            for (var i = 1 + e.length; i < t.shape.length; ++i) a.push([0, 0]);
            var o = t.pad(a),
              s = pr(o.shape, e, r, !1),
              u = fr(s.length, e.length, !1),
              c = mr(o.shape, e, r, !1);
            return o.reshape(s).transpose(u).reshape(c);
          }),
          (e.prototype.reduce = function (t, e, n) {
            var r = t.shape[0],
              a = t.shape[1],
              i = yr(a),
              o = new io({ windowSize: i, inSize: a, batchSize: r }, e),
              s = this.compileAndRun(o, [t], n);
            return 1 === s.shape[1] ? s : this.reduce(s, e, n);
          }),
          (e.prototype.argReduce = function (t, e, n) {
            void 0 === n && (n = null);
            var r = t.shape[0],
              a = t.shape[1];
            null != n && ((r = n.shape[0]), (a = n.shape[1]));
            var i = yr(a),
              o = new va(
                { windowSize: i, inSize: a, batchSize: r },
                e,
                null == n
              ),
              s = [t];
            null != n && s.push(n);
            var u = this.compileAndRun(o, s, "int32");
            return 1 === u.shape[1] ? u : this.argReduce(t, e, u);
          }),
          (e.prototype.argReducePacked = function (t, e, n) {
            void 0 === n && (n = null);
            var r = null != n ? n.shape : t.shape,
              a = yr(r[r.length - 1]),
              i = new Ma(r, a, e, null == n),
              o = null == n ? [t] : [t, n],
              s = this.compileAndRun(i, o, "int32");
            return s.rank === t.rank ? this.argReducePacked(t, e, s) : s;
          }),
          (e.prototype.sum = function (t, e) {
            Qe("sum", e, t.rank);
            var n = Ye(t.shape, e),
              r = n[0],
              a = R(n[1]),
              i = t.as2D(-1, a),
              o = Nt(t.dtype);
            return this.reduce(i, "sum", o).reshape(r);
          }),
          (e.prototype.prod = function (t, e) {
            if (this.shouldExecuteOnCPU([t])) return this.cpuBackend.prod(t, e);
            var n = Ye(t.shape, e),
              r = n[0],
              a = R(n[1]),
              i = t.as2D(-1, a),
              o = Nt(t.dtype);
            return this.reduce(i, "prod", o).reshape(r);
          }),
          (e.prototype.unsortedSegmentSum = function (t, e, n) {
            var r = 0,
              a = Ze([r], t.rank),
              i = t;
            null != a && ((i = t.transpose(a)), (r = en(1, t.rank)[0]));
            var o = (function (t, e, n) {
                for (var r = [], a = t.length, i = 0; i < a; i++)
                  i !== e ? r.push(t[i]) : r.push(n);
                return r;
              })(i.shape, r, n),
              s = R([i.shape[r]]),
              u = i.as2D(-1, s),
              c = Nt(t.dtype),
              l = this.segOpCompute(u, "unsortedSegmentSum", e, c, n).reshape(
                o
              );
            return null != a && (l = l.transpose(tn(a))), l;
          }),
          (e.prototype.segOpCompute = function (t, e, n, r, a) {
            var i = t.shape[0],
              o = t.shape[1],
              s = (function (t, e) {
                var n,
                  r = !1;
                for (
                  t <= 30
                    ? ((n = t), (r = !0))
                    : (n = Q(t, Math.floor(Math.sqrt(t))));
                  !r;

                )
                  n > e || n === t ? (r = !0) : (n = Q(t, n + 1));
                return n;
              })(o, a),
              u = new go(
                { windowSize: s, inSize: o, batchSize: i, numSegments: a },
                e
              ),
              c = this.compileAndRun(u, [t, n], r);
            return c.shape[1] === a
              ? c
              : ((n = yn(0, a).tile([o / s])),
                this.segOpCompute(c, e, n, r, a));
          }),
          (e.prototype.argMinMaxReduce = function (t, e, n) {
            var r = [e];
            if (
              (Qe("arg" + n.charAt(0).toUpperCase() + n.slice(1), r, t.rank),
              !d().getBool("WEBGL_PACK_REDUCE") || t.rank <= 2)
            ) {
              var a = Ye(t.shape, r),
                i = a[0],
                o = R(a[1]),
                s = t.as2D(-1, o);
              return this.argReduce(s, n).reshape(i);
            }
            return this.argReducePacked(t, n);
          }),
          (e.prototype.argMin = function (t, e) {
            return this.argMinMaxReduce(t, e, "min");
          }),
          (e.prototype.argMax = function (t, e) {
            return this.argMinMaxReduce(t, e, "max");
          }),
          (e.prototype.cumsum = function (t, e, n, r) {
            if (e !== t.rank - 1)
              throw new Error(
                "WebGL cumsum shader expects an inner-most axis=" +
                  (t.rank - 1) +
                  " but got axis=" +
                  e
              );
            var a = new hi(t.shape, n, r);
            return this.compileAndRun(a, [t]);
          }),
          (e.prototype.equal = function (t, e) {
            if (d().getBool("WEBGL_PACK_BINARY_OPERATIONS"))
              return this.packedBinaryOp(
                t,
                e,
                "\n  return vec4(equal(a, b));\n",
                "bool"
              );
            var n = new Ga("return float(a == b);", t.shape, e.shape);
            return this.compileAndRun(n, [t, e], "bool");
          }),
          (e.prototype.notEqual = function (t, e) {
            if (d().getBool("WEBGL_PACK_BINARY_OPERATIONS"))
              return this.packedBinaryOp(
                t,
                e,
                "\n  return vec4(notEqual(a, b));\n",
                "bool"
              );
            var n = new Ga("return float(a != b);", t.shape, e.shape);
            return this.compileAndRun(n, [t, e], "bool");
          }),
          (e.prototype.less = function (t, e) {
            if (this.shouldExecuteOnCPU([t, e]))
              return this.cpuBackend.less(t, e);
            if (d().getBool("WEBGL_PACK_BINARY_OPERATIONS"))
              return this.packedBinaryOp(
                t,
                e,
                "\n  return vec4(lessThan(a, b));\n",
                "bool"
              );
            var n = new Ga("return float(a < b);", t.shape, e.shape);
            return this.compileAndRun(n, [t, e], "bool");
          }),
          (e.prototype.lessEqual = function (t, e) {
            if (d().getBool("WEBGL_PACK_BINARY_OPERATIONS"))
              return this.packedBinaryOp(
                t,
                e,
                "\n  return vec4(lessThanEqual(a, b));\n",
                "bool"
              );
            var n = new Ga("return float(a <= b);", t.shape, e.shape);
            return this.compileAndRun(n, [t, e], "bool");
          }),
          (e.prototype.greater = function (t, e) {
            if (this.shouldExecuteOnCPU([t, e]))
              return this.cpuBackend.greater(t, e);
            if (d().getBool("WEBGL_PACK_BINARY_OPERATIONS"))
              return this.packedBinaryOp(
                t,
                e,
                "\n  return vec4(greaterThan(a, b));\n",
                "bool"
              );
            var n = new Ga("return float(a > b);", t.shape, e.shape);
            return this.compileAndRun(n, [t, e], "bool");
          }),
          (e.prototype.greaterEqual = function (t, e) {
            if (d().getBool("WEBGL_PACK_BINARY_OPERATIONS"))
              return this.packedBinaryOp(
                t,
                e,
                "\n  return vec4(greaterThanEqual(a, b));\n",
                "bool"
              );
            var n = new Ga("return float(a >= b);", t.shape, e.shape);
            return this.compileAndRun(n, [t, e], "bool");
          }),
          (e.prototype.logicalNot = function (t) {
            var e = new Ao(t.shape, "return float(!(x >= 1.0));");
            return this.compileAndRun(e, [t]);
          }),
          (e.prototype.logicalAnd = function (t, e) {
            if (d().getBool("WEBGL_PACK_BINARY_OPERATIONS"))
              return this.packedBinaryOp(
                t,
                e,
                "\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",
                "bool"
              );
            var n = new Ga(
              "return float(a >= 1.0 && b >= 1.0);",
              t.shape,
              e.shape
            );
            return this.compileAndRun(n, [t, e], "bool");
          }),
          (e.prototype.logicalOr = function (t, e) {
            if (d().getBool("WEBGL_PACK_BINARY_OPERATIONS"))
              return this.packedBinaryOp(
                t,
                e,
                "\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",
                "bool"
              );
            var n = new Ga(
              "return float(a >= 1.0 || b >= 1.0);",
              t.shape,
              e.shape
            );
            return this.compileAndRun(n, [t, e], "bool");
          }),
          (e.prototype.select = function (t, e, n) {
            var r = new bo(t.rank, e.shape, e.rank);
            return this.compileAndRun(r, [t, e, n], kt(e.dtype, n.dtype));
          }),
          (e.prototype.where = function (t) {
            Ve(
              "tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead"
            );
            var e = t.dataSync();
            return ma(t.shape, e);
          }),
          (e.prototype.topk = function (t, e, n) {
            return fa(t.dataSync(), t.shape, t.dtype, e);
          }),
          (e.prototype.min = function (t, e) {
            Qe("min", e, t.rank);
            var n = Ye(t.shape, e),
              r = n[0],
              a = R(n[1]),
              i = t.as2D(-1, a);
            return this.reduce(i, "min", i.dtype).reshape(r);
          }),
          (e.prototype.minimum = function (t, e) {
            if (this.shouldExecuteOnCPU([t, e]))
              return this.cpuBackend.minimum(t, e);
            var n = d().getBool("WEBGL_PACK_BINARY_OPERATIONS")
              ? new qa(
                  "\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",
                  t.shape,
                  e.shape
                )
              : new Ga(
                  "\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",
                  t.shape,
                  e.shape
                );
            return this.compileAndRun(n, [t, e]);
          }),
          (e.prototype.mod = function (t, e) {
            var n = d().getBool("WEBGL_PACK_BINARY_OPERATIONS")
              ? new qa(
                  "\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",
                  t.shape,
                  e.shape
                )
              : new Ga(
                  "if (b == 0.0) return NAN;\n  return mod(a, b);",
                  t.shape,
                  e.shape
                );
            return this.compileAndRun(n, [t, e]);
          }),
          (e.prototype.max = function (t, e) {
            if (this.shouldExecuteOnCPU([t])) return this.cpuBackend.max(t, e);
            Qe("max", e, t.rank);
            var n = Ye(t.shape, e),
              r = n[0],
              a = R(n[1]),
              i = t.as2D(-1, a);
            return this.reduce(i, "max", i.dtype).reshape(r);
          }),
          (e.prototype.maximum = function (t, e) {
            if (this.shouldExecuteOnCPU([t, e]))
              return this.cpuBackend.maximum(t, e);
            var n = d().getBool("WEBGL_PACK_BINARY_OPERATIONS")
              ? new qa(
                  "\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",
                  t.shape,
                  e.shape
                )
              : new Ga(
                  "\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",
                  t.shape,
                  e.shape
                );
            return this.compileAndRun(n, [t, e]);
          }),
          (e.prototype.all = function (t, e) {
            Qe("all", e, t.rank);
            var n = Ye(t.shape, e),
              r = n[0],
              a = R(n[1]),
              i = t.as2D(-1, a);
            return this.reduce(i, "all", i.dtype).reshape(r);
          }),
          (e.prototype.any = function (t, e) {
            Qe("any", e, t.rank);
            var n = Ye(t.shape, e),
              r = n[0],
              a = R(n[1]),
              i = t.as2D(-1, a);
            return this.reduce(i, "any", i.dtype).reshape(r);
          }),
          (e.prototype.realDivide = function (t, e) {
            if (d().getBool("WEBGL_PACK_BINARY_OPERATIONS"))
              return this.packedBinaryOp(
                t,
                e,
                "\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",
                "float32",
                !0
              );
            var n = new Ga(
              "\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",
              t.shape,
              e.shape
            );
            return this.compileAndRun(n, [t, e], "float32");
          }),
          (e.prototype.floorDiv = function (t, e) {
            if (d().getBool("WEBGL_PACK_BINARY_OPERATIONS"))
              return this.packedBinaryOp(
                t,
                e,
                "\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",
                "int32"
              );
            var n = new Ga(
              "\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",
              t.shape,
              e.shape
            );
            return this.compileAndRun(n, [t, e], "int32");
          }),
          (e.prototype.add = function (t, e) {
            if ("complex64" === t.dtype && "complex64" === e.dtype)
              return this.complexSeparableBinaryOp(t, e, za);
            if (this.shouldExecuteOnCPU([t, e]))
              return this.cpuBackend.add(t, e);
            var n = kt(t.dtype, e.dtype);
            if (d().getBool("WEBGL_PACK_BINARY_OPERATIONS"))
              return this.packedBinaryOp(t, e, za, n);
            var r = new Ga(za, t.shape, e.shape);
            return this.compileAndRun(r, [t, e], n);
          }),
          (e.prototype.packedUnaryOp = function (t, e, n) {
            var r = new Go(t.shape, e);
            return this.compileAndRun(r, [t], n);
          }),
          (e.prototype.packedBinaryOp = function (t, e, n, r, a) {
            void 0 === a && (a = !1);
            var i = new qa(n, t.shape, e.shape, a);
            return this.compileAndRun(i, [t, e], r);
          }),
          (e.prototype.complexSeparableBinaryOp = function (t, e, n) {
            var r = this,
              a = this.texData.get(t.dataId),
              i = this.texData.get(e.dataId),
              o = [
                [a.complexTensors.real, i.complexTensors.real],
                [a.complexTensors.imag, i.complexTensors.imag],
              ].map(function (a) {
                var i = a[0],
                  o = a[1],
                  s = r.makeComplexComponentTensorInfo(t, i),
                  u = r.makeComplexComponentTensorInfo(e, o),
                  c = new Ga(n, t.shape, e.shape);
                return r.compileAndRun(c, [s, u], kt(i.dtype, o.dtype));
              }),
              s = o[0],
              u = o[1],
              c = this.complex(s, u);
            return s.dispose(), u.dispose(), c;
          }),
          (e.prototype.makeComplexComponentTensorInfo = function (t, e) {
            return { dataId: e.dataId, dtype: e.dtype, shape: t.shape };
          }),
          (e.prototype.addN = function (t) {
            if (1 === t.length) return t[0];
            if (t.length > d().get("WEBGL_MAX_TEXTURES_IN_SHADER")) {
              var e = Math.floor(t.length / 2),
                n = this.addN(t.slice(0, e)),
                r = this.addN(t.slice(e));
              return this.addN([n, r]);
            }
            var a = t
                .map(function (t) {
                  return t.dtype;
                })
                .reduce(function (t, e) {
                  return kt(t, e);
                }),
              i = t.map(function (t) {
                return t.shape;
              }),
              o = d().getBool("WEBGL_PACK")
                ? new ba(t[0].shape, i)
                : new ga(t[0].shape, i);
            return this.compileAndRun(o, t, a);
          }),
          (e.prototype.subtract = function (t, e) {
            if ("complex64" === t.dtype && "complex64" === e.dtype)
              return this.complexSeparableBinaryOp(t, e, Wa);
            if (this.shouldExecuteOnCPU([t, e]))
              return this.cpuBackend.subtract(t, e);
            var n = kt(t.dtype, e.dtype);
            if (d().getBool("WEBGL_PACK_BINARY_OPERATIONS"))
              return this.packedBinaryOp(t, e, Wa, t.dtype);
            var r = new Ga(Wa, t.shape, e.shape);
            return this.compileAndRun(r, [t, e], n);
          }),
          (e.prototype.pow = function (t, e) {
            var n = d().getBool("WEBGL_PACK_BINARY_OPERATIONS")
                ? new qa(
                    "\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",
                    t.shape,
                    e.shape
                  )
                : new Ga(
                    "\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nif (b == 0.0) {\n  return 1.0;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",
                    t.shape,
                    e.shape
                  ),
              r = kt(t.dtype, e.dtype);
            return this.compileAndRun(n, [t, e], r);
          }),
          (e.prototype.ceil = function (t) {
            if (this.shouldExecuteOnCPU([t])) return this.cpuBackend.ceil(t);
            if (d().getBool("WEBGL_PACK_UNARY_OPERATIONS"))
              return this.packedUnaryOp(t, $o, t.dtype);
            var e = new Ao(t.shape, $o);
            return this.compileAndRun(e, [t]);
          }),
          (e.prototype.floor = function (t) {
            if (this.shouldExecuteOnCPU([t])) return this.cpuBackend.floor(t);
            if (d().getBool("WEBGL_PACK_UNARY_OPERATIONS"))
              return this.packedUnaryOp(t, Bo, t.dtype);
            var e = new Ao(t.shape, Bo);
            return this.compileAndRun(e, [t]);
          }),
          (e.prototype.sign = function (t) {
            var e = new Ao(
              t.shape,
              "\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"
            );
            return this.compileAndRun(e, [t]);
          }),
          (e.prototype.isNaN = function (t) {
            var e = new Ao(t.shape, "return float(isnan(x));");
            return this.compileAndRun(e, [t], "bool");
          }),
          (e.prototype.isInf = function (t) {
            var e = new Ao(t.shape, "return float(isinf(x));");
            return this.compileAndRun(e, [t], "bool");
          }),
          (e.prototype.isFinite = function (t) {
            var e = new Ao(t.shape, "return float(!isnan(x) && !isinf(x));");
            return this.compileAndRun(e, [t], "bool");
          }),
          (e.prototype.round = function (t) {
            var e = new Ao(
              t.shape,
              "\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"
            );
            return this.compileAndRun(e, [t]);
          }),
          (e.prototype.exp = function (t) {
            if (this.shouldExecuteOnCPU([t])) return this.cpuBackend.exp(t);
            if (d().getBool("WEBGL_PACK_UNARY_OPERATIONS"))
              return this.packedUnaryOp(t, Po, t.dtype);
            var e = new Ao(t.shape, Po);
            return this.compileAndRun(e, [t]);
          }),
          (e.prototype.expm1 = function (t) {
            if (this.shouldExecuteOnCPU([t])) return this.cpuBackend.expm1(t);
            if (d().getBool("WEBGL_PACK_UNARY_OPERATIONS"))
              return this.packedUnaryOp(t, Lo, t.dtype);
            var e = new Ao(t.shape, Lo);
            return this.compileAndRun(e, [t]);
          }),
          (e.prototype.softmax = function (t, e) {
            var n = $([e], t.shape),
              r = this.max(t, n),
              a = Je(r.shape, n),
              i = this.subtract(t, r.reshape(a)),
              o = this.exp(i),
              s = this.sum(o, n).reshape(a);
            return this.realDivide(o, s);
          }),
          (e.prototype.log = function (t) {
            if (this.shouldExecuteOnCPU([t])) return this.cpuBackend.log(t);
            if (d().getBool("WEBGL_PACK_UNARY_OPERATIONS"))
              return this.packedUnaryOp(
                t,
                "\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",
                t.dtype
              );
            var e = new Ao(
              t.shape,
              "if (x < 0.0) return NAN;\n  return log(x);"
            );
            return this.compileAndRun(e, [t]);
          }),
          (e.prototype.log1p = function (t) {
            var e = new Ao(t.shape, "return log(1.0 + x);");
            return this.compileAndRun(e, [t]);
          }),
          (e.prototype.sqrt = function (t) {
            var e = new Ao(t.shape, "return sqrt(x);");
            return this.compileAndRun(e, [t]);
          }),
          (e.prototype.rsqrt = function (t) {
            if (this.shouldExecuteOnCPU([t])) return this.cpuBackend.rsqrt(t);
            var e = new Ao(t.shape, "return inversesqrt(x);");
            return this.compileAndRun(e, [t]);
          }),
          (e.prototype.reciprocal = function (t) {
            var e = new Ao(t.shape, "return 1.0 / x;");
            return this.compileAndRun(e, [t]);
          }),
          (e.prototype.relu = function (t) {
            var e;
            return (
              (e = d().getBool("WEBGL_PACK")
                ? new Go(t.shape, Wo)
                : new Ao(t.shape, Do)),
              this.compileAndRun(e, [t])
            );
          }),
          (e.prototype.relu6 = function (t) {
            var e;
            return (
              (e = d().getBool("WEBGL_PACK")
                ? new Go(t.shape, Vo)
                : new Ao(t.shape, Fo)),
              this.compileAndRun(e, [t])
            );
          }),
          (e.prototype.prelu = function (t, e) {
            var n = d().getBool("WEBGL_PACK_BINARY_OPERATIONS")
              ? new qa(Ha, t.shape, e.shape)
              : new Ga(Ua, t.shape, e.shape);
            return this.compileAndRun(n, [t, e]);
          }),
          (e.prototype.elu = function (t) {
            if (d().getBool("WEBGL_PACK_UNARY_OPERATIONS"))
              return this.packedUnaryOp(t, Uo, t.dtype);
            var e = new Ao(t.shape, Mo);
            return this.compileAndRun(e, [t]);
          }),
          (e.prototype.eluDer = function (t, e) {
            var n = d().getBool("WEBGL_PACK_BINARY_OPERATIONS")
              ? new qa(
                  "\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",
                  t.shape,
                  e.shape
                )
              : new Ga(
                  "return (b >= 1.0) ? a : a * (b + 1.0);",
                  t.shape,
                  e.shape
                );
            return this.compileAndRun(n, [t, e]);
          }),
          (e.prototype.selu = function (t) {
            var e = new Ao(
              t.shape,
              "\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = 1.7580993408473768;\n  float scale = 1.0507009873554805;\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n"
            );
            return this.compileAndRun(e, [t]);
          }),
          (e.prototype.int = function (t) {
            var e = new Ao(t.shape, "return float(int(x));");
            return this.compileAndRun(e, [t], "int32");
          }),
          (e.prototype.clip = function (t, e, n) {
            var r,
              a = (r = d().getBool("WEBGL_PACK_CLIP")
                ? new Xa(t.shape)
                : new Ka(t.shape)).getCustomSetupFunc(e, n);
            return this.compileAndRun(r, [t], null, a);
          }),
          (e.prototype.abs = function (t) {
            if (this.shouldExecuteOnCPU([t])) return this.cpuBackend.abs(t);
            if (d().getBool("WEBGL_PACK_UNARY_OPERATIONS"))
              return this.packedUnaryOp(t, _o, t.dtype);
            var e = new Ao(t.shape, _o);
            return this.compileAndRun(e, [t]);
          }),
          (e.prototype.complexAbs = function (t) {
            var e = this.texData.get(t.dataId),
              n = new Ya(t.shape),
              r = [
                this.makeComplexComponentTensorInfo(t, e.complexTensors.real),
                this.makeComplexComponentTensorInfo(t, e.complexTensors.imag),
              ];
            return this.compileAndRun(n, r);
          }),
          (e.prototype.sigmoid = function (t) {
            var e = new Ao(t.shape, "return 1.0 / (1.0 + exp(-1.0 * x));");
            return this.compileAndRun(e, [t]);
          }),
          (e.prototype.softplus = function (t) {
            var e = new Ao(
              t.shape,
              "\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"
            );
            return this.compileAndRun(e, [t]);
          }),
          (e.prototype.sin = function (t) {
            var e = new Ao(
              t.shape,
              "if (isnan(x)) return x;\n  return sin(x);\n"
            );
            return this.compileAndRun(e, [t]);
          }),
          (e.prototype.cos = function (t) {
            var e = new Ao(
              t.shape,
              "if (isnan(x)) return x;\n  return cos(x);\n"
            );
            return this.compileAndRun(e, [t]);
          }),
          (e.prototype.tan = function (t) {
            var e = new Ao(t.shape, "return tan(x);");
            return this.compileAndRun(e, [t]);
          }),
          (e.prototype.asin = function (t) {
            var e = new Ao(
              t.shape,
              "if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"
            );
            return this.compileAndRun(e, [t]);
          }),
          (e.prototype.acos = function (t) {
            var e = new Ao(
              t.shape,
              "if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"
            );
            return this.compileAndRun(e, [t]);
          }),
          (e.prototype.atan = function (t) {
            var e = new Ao(
              t.shape,
              "if (isnan(x)) return x;\n  return atan(x);\n"
            );
            return this.compileAndRun(e, [t]);
          }),
          (e.prototype.atan2 = function (t, e) {
            var n = d().getBool("WEBGL_PACK_BINARY_OPERATIONS")
              ? new qa(
                  "\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",
                  t.shape,
                  e.shape
                )
              : new Ga(
                  "\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",
                  t.shape,
                  e.shape
                );
            return this.compileAndRun(n, [t, e]);
          }),
          (e.prototype.sinh = function (t) {
            var e = new Ao(
              t.shape,
              "\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"
            );
            return this.compileAndRun(e, [t]);
          }),
          (e.prototype.cosh = function (t) {
            var e = new Ao(
              t.shape,
              "\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"
            );
            return this.compileAndRun(e, [t]);
          }),
          (e.prototype.tanh = function (t) {
            var e = new Ao(
              t.shape,
              "\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"
            );
            return this.compileAndRun(e, [t]);
          }),
          (e.prototype.asinh = function (t) {
            var e = new Ao(
              t.shape,
              "if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));"
            );
            return this.compileAndRun(e, [t]);
          }),
          (e.prototype.acosh = function (t) {
            var e = new Ao(
              t.shape,
              "if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));"
            );
            return this.compileAndRun(e, [t]);
          }),
          (e.prototype.atanh = function (t) {
            var e = new Ao(
              t.shape,
              "if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;"
            );
            return this.compileAndRun(e, [t]);
          }),
          (e.prototype.erf = function (t) {
            var e = new Ao(
              t.shape,
              '\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = 0.3275911;\n  float a1 = 0.254829592;\n  float a2 = -0.284496736;\n  float a3 = 1.421413741;\n  float a4 = -1.453152027;\n  float a5 = 1.061405429;\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n'
            );
            return this.compileAndRun(e, [t]);
          }),
          (e.prototype.step = function (t, e) {
            var n = new Ao(
              t.shape,
              (function (t) {
                return (
                  void 0 === t && (t = 0),
                  To + "\n    return x > 0.0 ? 1.0 : float(" + t + ");\n  "
                );
              })(e)
            );
            return this.compileAndRun(n, [t]);
          }),
          (e.prototype.conv2dByMatMul = function (t, e, n, r, a, i) {
            var o = t.shape,
              s = this.texData.get(t.dataId),
              u = n.inChannels,
              c = o[0] * o[1] * o[2],
              l = n.outChannels,
              h = "channelsLast" === n.dataFormat,
              p = (1 === c || 1 === l) && u > 1e3,
              f = o[2] % 2 != 0 && !!s.isPacked;
            if (
              p ||
              !d().getBool("WEBGL_LAZILY_UNPACK") ||
              !d().getBool("WEBGL_PACK_BINARY_OPERATIONS") ||
              !f
            ) {
              var m = h ? o[0] * o[1] * o[2] : o[0] * o[2] * o[3],
                g = this.reshape(t, [1, m, n.inChannels]),
                b = this.reshape(e, [1, n.inChannels, n.outChannels]);
              return this.reshape(
                this.fusedBatchMatMul({
                  a: g,
                  b: b,
                  transposeA: !1,
                  transposeB: !1,
                  bias: r,
                  activation: a,
                  preluActivationWeights: i,
                }),
                n.outShape
              );
            }
            var v = h ? o[0] * o[1] * (o[2] + 1) : o[0] * o[2] * (o[3] + 1),
              y = {
                dataId: t.dataId,
                shape: [1, v, n.inChannels],
                dtype: t.dtype,
              },
              x = s.shape;
            (s.shape = s.shape.slice()),
              s.shape[s.shape.length - 2]++,
              S(Ne(s.shape, y.shape), function () {
                return (
                  "packed reshape " + s.shape + " to " + y.shape + " isn't free"
                );
              });
            var w = this.reshape(e, [1, n.inChannels, n.outChannels]),
              C = this.fusedBatchMatMul({
                a: y,
                b: w,
                transposeA: !1,
                transposeB: !1,
                bias: r,
                activation: a,
                preluActivationWeights: i,
              }),
              O = this.texData.get(C.dataId);
            return (
              S(O.isPacked, function () {
                return "batchMatMul result is expected to be packed";
              }),
              (s.shape = x),
              (O.shape = n.outShape),
              Mt.makeTensorFromDataId(C.dataId, n.outShape, C.dtype)
            );
          }),
          (e.prototype.conv2dWithIm2Row = function (t, e, n, r, a, i) {
            var o = n.filterWidth,
              s = n.filterHeight,
              u = n.inChannels,
              c = n.outWidth,
              l = n.outHeight,
              h = "channelsLast" === n.dataFormat,
              d = o * s * u,
              p = l * c,
              f = [d, p],
              m = t.squeeze([0]),
              g = e.reshape([1, d, -1]),
              b = new Gi(f, m.shape, n),
              v = this.compileAndRun(b, [m]).reshape([1, f[0], f[1]]),
              y = null != r,
              x = null != i,
              w = a ? Ko(a, !0) : null,
              C = new Ji(v.shape, [1, p, n.outChannels], !0, !1, y, w, x),
              O = [v, g];
            r && O.push(r), x && O.push(i);
            var E = this.compileAndRun(C, O);
            return h
              ? E.reshape([1, l, c, n.outChannels])
              : E.reshape([1, n.outChannels, l, c]);
          }),
          (e.prototype.fusedConv2d = function (t) {
            var e = t.input,
              n = t.filter,
              r = t.convInfo,
              a = t.bias,
              i = t.activation,
              o = t.preluActivationWeights;
            if (
              1 === r.filterHeight &&
              1 === r.filterWidth &&
              1 === r.dilationHeight &&
              1 === r.dilationWidth &&
              1 === r.strideHeight &&
              1 === r.strideWidth &&
              ("SAME" === r.padInfo.type || "VALID" === r.padInfo.type)
            )
              return this.conv2dByMatMul(e, n, r, a, i, o);
            if (d().getBool("WEBGL_CONV_IM2COL") && 1 === e.shape[0])
              return this.conv2dWithIm2Row(e, n, r, a, i, o);
            var s = null != a,
              u = null != o,
              c = i ? Ko(i, !1) : null,
              l = new oi(r, s, c, u),
              h = [e, n];
            return a && h.push(a), o && h.push(o), this.compileAndRun(l, h);
          }),
          (e.prototype.conv2d = function (t, e, n) {
            if (
              1 === n.filterHeight &&
              1 === n.filterWidth &&
              1 === n.dilationHeight &&
              1 === n.dilationWidth &&
              1 === n.strideHeight &&
              1 === n.strideWidth &&
              ("SAME" === n.padInfo.type || "VALID" === n.padInfo.type)
            )
              return this.conv2dByMatMul(t, e, n);
            if (d().getBool("WEBGL_CONV_IM2COL") && 1 === t.shape[0])
              return this.conv2dWithIm2Row(t, e, n);
            var r = new oi(n);
            return this.compileAndRun(r, [t, e]);
          }),
          (e.prototype.conv2dDerInput = function (t, e, n) {
            var r = new ei(n);
            return this.compileAndRun(r, [t, e]);
          }),
          (e.prototype.conv2dDerFilter = function (t, e, n) {
            var r = new ti(n);
            return this.compileAndRun(r, [t, e]);
          }),
          (e.prototype.fusedDepthwiseConv2D = function (t) {
            var e,
              n = t.input,
              r = t.filter,
              a = t.convInfo,
              i = t.bias,
              o = t.activation,
              s = t.preluActivationWeights,
              u =
                d().getBool("WEBGL_PACK_DEPTHWISECONV") &&
                a.strideWidth <= 2 &&
                a.outChannels / a.inChannels == 1,
              c = o ? Ko(o, u) : null,
              l = [n, r],
              h = null != i,
              p = null != s;
            return (
              h && l.push(i),
              p && l.push(s),
              u
                ? ((e = new ci(a, h, c, p)), this.compileAndRun(e, l))
                : ((e = new ui(a, h, c, p)), this.compileAndRun(e, l))
            );
          }),
          (e.prototype.depthwiseConv2D = function (t, e, n) {
            var r;
            return d().getBool("WEBGL_PACK_DEPTHWISECONV") &&
              n.strideWidth <= 2 &&
              n.outChannels / n.inChannels == 1
              ? ((r = new ci(n)), this.compileAndRun(r, [t, e]))
              : ((r = new ui(n)), this.compileAndRun(r, [t, e]));
          }),
          (e.prototype.depthwiseConv2DDerInput = function (t, e, n) {
            var r = new ii(n);
            return this.compileAndRun(r, [t, e]);
          }),
          (e.prototype.depthwiseConv2DDerFilter = function (t, e, n) {
            var r = new ai(n);
            return this.compileAndRun(r, [t, e]);
          }),
          (e.prototype.conv3d = function (t, e, n) {
            var r = new si(n);
            return this.compileAndRun(r, [t, e]);
          }),
          (e.prototype.conv3dDerInput = function (t, e, n) {
            var r = new ri(n);
            return this.compileAndRun(r, [t, e]);
          }),
          (e.prototype.conv3dDerFilter = function (t, e, n) {
            var r = new ni(n);
            return this.compileAndRun(r, [t, e]);
          }),
          (e.prototype.maxPool = function (t, e) {
            var n = new ro(e, "max", !1);
            return this.compileAndRun(n, [t]);
          }),
          (e.prototype.avgPool = function (t, e) {
            var n = new ro(e, "avg", !1);
            return this.compileAndRun(n, [t], "float32");
          }),
          (e.prototype.maxPoolBackprop = function (t, e, n, r) {
            var a = new ro(r, "max", !0),
              i = this.compileAndRun(a, [e]),
              o = new Xi(r),
              s = this.compileAndRun(o, [t, i], e.dtype);
            return i.dispose(), s;
          }),
          (e.prototype.avgPoolBackprop = function (t, e, n) {
            var r = new ja(n);
            return this.compileAndRun(r, [t], e.dtype);
          }),
          (e.prototype.cast = function (t, e) {
            return Jr(t, e, this);
          }),
          (e.prototype.unstack = function (t, e) {
            for (
              var n = t.shape[e], r = new Array(t.rank - 1), a = 0, i = 0;
              i < t.rank;
              i++
            )
              i !== e && (r[a++] = t.shape[i]);
            var o = new Array(t.rank).fill(0),
              s = t.shape.slice();
            s[e] = 1;
            var u = new Array(n);
            for (i = 0; i < u.length; i++)
              (o[e] = i), (u[i] = this.slice(t, o, s).reshape(r));
            return u;
          }),
          (e.prototype.avgPool3d = function (t, e) {
            var n = new ao(e, "avg", !1);
            return this.compileAndRun(n, [t], "float32");
          }),
          (e.prototype.avgPool3dBackprop = function (t, e, n) {
            var r = new $a(n);
            return this.compileAndRun(r, [t], e.dtype);
          }),
          (e.prototype.maxPool3d = function (t, e) {
            var n = new ao(e, "max", !1);
            return this.compileAndRun(n, [t], "float32");
          }),
          (e.prototype.maxPool3dBackprop = function (t, e, n, r) {
            var a = new ao(r, "max", !0),
              i = this.compileAndRun(a, [e]),
              o = new Yi(r),
              s = this.compileAndRun(o, [t, i], e.dtype);
            return i.dispose(), s;
          }),
          (e.prototype.reshape = function (t, e) {
            var n = this.texData.get(t.dataId);
            if (
              n.isPacked &&
              !Ne(t.shape, e) &&
              (null === n.texture || !Ne(n.shape, e))
            ) {
              var r = this.packedReshape(t, e);
              return Mt.makeTensorFromDataId(r.dataId, r.shape, r.dtype);
            }
            return Qr(t, e);
          }),
          (e.prototype.resizeBilinear = function (t, e, n, r) {
            var a = d().getBool("WEBGL_PACK_IMAGE_OPERATIONS")
              ? new co(t.shape, e, n, r)
              : new uo(t.shape, e, n, r);
            return this.compileAndRun(a, [t], "float32");
          }),
          (e.prototype.resizeBilinearBackprop = function (t, e, n) {
            var r = new so(t, e, n);
            return this.compileAndRun(r, [t]);
          }),
          (e.prototype.resizeNearestNeighbor = function (t, e, n, r) {
            var a = new ho(t.shape, e, n, r);
            return this.compileAndRun(a, [t]);
          }),
          (e.prototype.resizeNearestNeighborBackprop = function (t, e, n) {
            var r = new lo(t, e, n);
            return this.compileAndRun(r, [t]);
          }),
          (e.prototype.multinomial = function (t, e, n, r) {
            var a = e ? t : Tr(t),
              i = a.shape[0],
              o = a.shape[1],
              s = new Qi(i, o, n),
              u = s.getCustomSetupFunc(r);
            return this.compileAndRun(s, [a], "int32", u);
          }),
          (e.prototype.oneHot = function (t, e, n, r) {
            var a = new Zi(t.size, e, n, r);
            return this.compileAndRun(a, [t]);
          }),
          (e.prototype.diag = function (t) {
            var e = new gi(t.size);
            return this.compileAndRun(e, [t]);
          }),
          (e.prototype.nonMaxSuppression = function (t, e, n, r, a) {
            return (
              Ve(
                "tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead"
              ),
              oa(t.dataSync(), e.dataSync(), n, r, a)
            );
          }),
          (e.prototype.cropAndResize = function (t, e, n, r, a, i) {
            var o = new li(t.shape, e.shape, r, a, i);
            return this.compileAndRun(o, [t, e, n], "float32");
          }),
          (e.prototype.depthToSpace = function (t, e, n) {
            S(e > 1, function () {
              return "blockSize should be > 1 for depthToSpace, but was: " + e;
            });
            var r = t.shape[0],
              a = "NHWC" === n ? t.shape[1] : t.shape[2],
              i = "NHWC" === n ? t.shape[2] : t.shape[3],
              o = "NHWC" === n ? t.shape[3] : t.shape[1],
              s = a * e,
              u = i * e,
              c = o / (e * e),
              l = new mi("NHWC" === n ? [r, s, u, c] : [r, c, s, u], e, n);
            return this.compileAndRun(l, [t]);
          }),
          (e.prototype.split = function (t, e, n) {
            return da(t, e, n);
          }),
          (e.prototype.scatterND = function (t, e, n) {
            var r = Cr(0, t, n),
              a = r.sliceRank,
              i = r.numUpdates,
              o = r.sliceSize,
              s = r.strides,
              u = r.outputSize,
              c = [u / o, o],
              l = t.reshape([i, a]),
              h = e.reshape([i, o]);
            if (0 === u) return Qr(cn([]), n);
            var d = hn(0),
              p = new mo(i, a, l.rank, h.rank, s, c);
            return this.compileAndRun(p, [h, l, d]).reshape(n);
          }),
          (e.prototype.sparseToDense = function (t, e, n, r) {
            var a = Cr(0, t, n),
              i = a.sliceRank,
              o = a.numUpdates,
              s = a.strides,
              u = a.outputSize,
              c = new mo(o, i, t.rank, e.rank, s, [u, 1], !1);
            return this.compileAndRun(c, [e, t, r]).reshape(n);
          }),
          (e.prototype.fft = function (t) {
            return this.fftImpl(t, !1);
          }),
          (e.prototype.ifft = function (t) {
            return this.fftImpl(t, !0);
          }),
          (e.prototype.fftImpl = function (t, e) {
            var n = this.texData.get(t.dataId),
              r = new wi("return real * expR - imag * expI;", t.shape, e),
              a = new wi("return real * expI + imag * expR;", t.shape, e),
              i = [
                this.makeComplexComponentTensorInfo(t, n.complexTensors.real),
                this.makeComplexComponentTensorInfo(t, n.complexTensors.imag),
              ],
              o = this.compileAndRun(r, i),
              s = this.compileAndRun(a, i),
              u = this.complex(o, s).as2D(t.shape[0], t.shape[1]);
            return o.dispose(), s.dispose(), u;
          }),
          (e.prototype.gatherND = function (t, e) {
            var n = e.shape,
              r = n[n.length - 1],
              a = vr(t, e),
              i = a[0],
              o = a[1],
              s = a[2],
              u = a[3],
              c = e.reshape([o, r]),
              l = t.reshape([t.size / s, s]),
              h = new Ei(r, u, [o, s]);
            return this.compileAndRun(h, [l, c]).reshape(i);
          }),
          (e.prototype.fill = function (t, e, n) {
            if ("string" === (n = n || Y(e))) {
              var r = L(n, R(t));
              return r.fill(e), Mt.makeTensor(r, t, n, this);
            }
            var a = new Ci(t, e),
              i = a.getCustomSetupFunc(e);
            return this.compileAndRun(a, [], n, i);
          }),
          (e.prototype.onesLike = function (t) {
            if ("string" === t.dtype)
              throw new Error("onesLike is not supported under string dtype");
            return this.fill(t.shape, 1, t.dtype);
          }),
          (e.prototype.zerosLike = function (t) {
            return this.fill(t.shape, "string" === t.dtype ? "" : 0, t.dtype);
          }),
          (e.prototype.linspace = function (t, e, n) {
            return Zr(t, e, n);
          }),
          (e.prototype.makeTensorInfo = function (t, e) {
            var n = this.write(null, t, e);
            return (
              (this.texData.get(n).usage = null),
              { dataId: n, shape: t, dtype: e }
            );
          }),
          (e.prototype.makeOutput = function (t, e) {
            var n = this.makeTensorInfo(t, e).dataId;
            return Mt.makeTensorFromDataId(n, t, e, this);
          }),
          (e.prototype.unpackTensor = function (t) {
            var e = new Ho(t.shape);
            return this.runWebGLProgram(e, [t], t.dtype);
          }),
          (e.prototype.packTensor = function (t) {
            var e = new to(t.shape);
            return this.runWebGLProgram(e, [t], t.dtype, null, !0);
          }),
          (e.prototype.packedReshape = function (t, e) {
            var n = [Oe(t.shape)].concat(Ee(t.shape)),
              r = { dtype: t.dtype, shape: n, dataId: t.dataId },
              a = [Oe(e)].concat(Ee(e)),
              i = new oo(a, n),
              o = this.runWebGLProgram(i, [r], t.dtype, null, !0);
            return { dataId: o.dataId, shape: e, dtype: o.dtype };
          }),
          (e.prototype.decode = function (t) {
            var e,
              n = this.texData.get(t),
              r = n.isPacked,
              a = n.shape,
              i = n.dtype,
              o = Se(a);
            return (
              (e = r ? new fi(o) : new pi(o)),
              {
                dtype: i,
                shape: a,
                dataId: this.runWebGLProgram(
                  e,
                  [{ shape: o, dtype: i, dataId: t }],
                  i,
                  null,
                  !0
                ).dataId,
              }
            );
          }),
          (e.prototype.runWebGLProgram = function (t, e, n, r, a) {
            var i = this;
            void 0 === a && (a = !1);
            var o = this.makeTensorInfo(t.outputShape, n),
              s = this.texData.get(o.dataId);
            if (
              (t.packedOutput && (s.isPacked = !0),
              t.outPackingScheme === Bt.DENSE)
            ) {
              var u = Ht(t.outputShape);
              s.texShape = u.map(function (t) {
                return 2 * t;
              });
            }
            if (
              (null != t.outTexUsage && (s.usage = t.outTexUsage),
              0 === R(o.shape))
            )
              return (s.values = P(o.dtype, 0)), o;
            var c = [],
              l = e.map(function (e) {
                if ("complex64" === e.dtype)
                  throw new Error(
                    "GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts."
                  );
                var n = i.texData.get(e.dataId);
                if (null == n.texture) {
                  if (
                    !t.packedInputs &&
                    R(e.shape) <= d().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM")
                  )
                    return {
                      shape: e.shape,
                      texData: null,
                      isUniform: !0,
                      uniformValues: n.values,
                    };
                  t.packedInputs && ((n.isPacked = !0), (n.shape = e.shape));
                } else if (!!n.isPacked != !!t.packedInputs)
                  (e = n.isPacked ? i.unpackTensor(e) : i.packTensor(e)),
                    c.push(e),
                    (n = i.texData.get(e.dataId));
                else if (n.isPacked && !Ne(n.shape, e.shape)) {
                  var r = e,
                    a = e.shape;
                  (e.shape = n.shape),
                    (e = i.packedReshape(e, a)),
                    c.push(e),
                    (n = i.texData.get(e.dataId)),
                    (r.shape = a);
                }
                return (
                  i.uploadToGPU(e.dataId),
                  { shape: e.shape, texData: n, isUniform: !1 }
                );
              });
            this.uploadToGPU(o.dataId);
            var h,
              p = { shape: o.shape, texData: s, isUniform: !1 },
              f = (function (t, e, n) {
                var r = "";
                e.concat(n).forEach(function (t) {
                  var e =
                      null != t.texData &&
                      null != t.texData.slice &&
                      t.texData.slice.flatOffset > 0,
                    n = t.isUniform ? "uniform" : t.texData.texShape;
                  r += t.shape + "_" + n + "_" + e;
                });
                var a = t.userCode;
                return t.constructor.name + "_" + r + "_" + a;
              })(t, l, p),
              m = this.getAndSaveBinary(f, function () {
                return (function (t, e, n, r) {
                  var a = e.userCode,
                    i = n.map(function (t, n) {
                      var r = {
                        logicalShape: t.shape,
                        texShape: t.isUniform ? null : t.texData.texShape,
                        isUniform: t.isUniform,
                        isPacked: !t.isUniform && t.texData.isPacked,
                        flatOffset: null,
                      };
                      return (
                        null != t.texData &&
                          null != t.texData.slice &&
                          t.texData.slice.flatOffset > 0 &&
                          (r.flatOffset = t.texData.slice.flatOffset),
                        { name: e.variableNames[n], shapeInfo: r }
                      );
                    }),
                    o = i.map(function (t) {
                      return t.shapeInfo;
                    }),
                    s = {
                      logicalShape: r.shape,
                      texShape: r.texData.texShape,
                      isUniform: !1,
                      isPacked: r.texData.isPacked,
                      flatOffset: null,
                    },
                    u = Sa(i, s, a, e.packedInputs),
                    c = t.createProgram(u),
                    l = null,
                    h = t.getUniformLocation(c, "NAN", !1);
                  1 === d().getNumber("WEBGL_VERSION") &&
                    (l = t.getUniformLocation(c, "INFINITY", !1));
                  for (var p = {}, f = 0; f < e.variableNames.length; f++) {
                    var m = e.variableNames[f];
                    (p[m] = t.getUniformLocation(c, m, !1)),
                      (p["offset" + m] = t.getUniformLocation(
                        c,
                        "offset" + m,
                        !1
                      ));
                  }
                  return {
                    program: e,
                    source: u,
                    webGLProgram: c,
                    uniformLocations: p,
                    inShapeInfos: o,
                    outShapeInfo: s,
                    infLoc: l,
                    nanLoc: h,
                  };
                })(i.gpgpu, t, l, p);
              }),
              g = null != this.activeTimers;
            if (
              (g && (h = this.startTimer()),
              (function (t, e, n, r, a) {
                Ui(e.inShapeInfos, n), Ui([e.outShapeInfo], [r]);
                var i = r.texData.texture,
                  o = r.texData.texShape;
                r.texData.isPacked
                  ? t.setOutputPackedMatrixTexture(i, o[0], o[1])
                  : t.setOutputMatrixTexture(i, o[0], o[1]),
                  t.setProgram(e.webGLProgram),
                  1 === d().getNumber("WEBGL_VERSION") &&
                    null !== e.infLoc &&
                    t.gl.uniform1f(e.infLoc, 1 / 0),
                  null !== e.nanLoc && t.gl.uniform1f(e.nanLoc, NaN),
                  n.forEach(function (n, r) {
                    var a = e.program.variableNames[r],
                      i = e.uniformLocations[a],
                      o = e.uniformLocations["offset" + a];
                    if (null != i)
                      if (n.isUniform)
                        if (R(n.shape) < 2)
                          t.gl.uniform1f(i, n.uniformValues[0]);
                        else {
                          var s = n.uniformValues;
                          s instanceof Float32Array ||
                            (s = new Float32Array(s)),
                            t.gl.uniform1fv(i, s);
                        }
                      else
                        null != n.texData.slice &&
                          null != o &&
                          t.gl.uniform1i(o, n.texData.slice.flatOffset),
                          t.setInputMatrixTexture(n.texData.texture, i, r);
                  }),
                  null != a && a(t, e.webGLProgram),
                  t.executeProgram();
              })(this.gpgpu, m, l, p, r),
              c.forEach(function (t) {
                return i.disposeData(t.dataId);
              }),
              g &&
                ((h = this.endTimer(h)),
                this.activeTimers.push({
                  name: t.constructor.name,
                  query: this.getQueryTime(h),
                })),
              !d().getBool("WEBGL_LAZILY_UNPACK") && s.isPacked && !1 === a)
            ) {
              var b = this.unpackTensor(o);
              return this.disposeData(o.dataId), b;
            }
            return o;
          }),
          (e.prototype.compileAndRun = function (t, e, n, r, a) {
            void 0 === a && (a = !1), (n = n || e[0].dtype);
            var i = this.runWebGLProgram(t, e, n, r, a);
            return Mt.makeTensorFromDataId(i.dataId, i.shape, i.dtype);
          }),
          (e.prototype.getAndSaveBinary = function (t, e) {
            return (
              t in this.binaryCache || (this.binaryCache[t] = e()),
              this.binaryCache[t]
            );
          }),
          (e.prototype.getTextureManager = function () {
            return this.textureManager;
          }),
          (e.prototype.dispose = function () {
            var t = this;
            this.disposed ||
              (d().getBool("IS_TEST") ||
                Object.keys(this.binaryCache).forEach(function (e) {
                  t.gpgpu.deleteProgram(t.binaryCache[e].webGLProgram),
                    delete t.binaryCache[e];
                }),
              this.textureManager.dispose(),
              null != this.canvas &&
              "undefined" != typeof HTMLCanvasElement &&
              this.canvas instanceof HTMLCanvasElement
                ? this.canvas.remove()
                : (this.canvas = null),
              this.gpgpuCreatedLocally &&
                ((this.gpgpu.program = null), this.gpgpu.dispose()),
              (this.disposed = !0));
          }),
          (e.prototype.floatPrecision = function () {
            var t = this;
            return (
              null == this.floatPrecisionValue &&
                (this.floatPrecisionValue = ze(function () {
                  if (!d().get("WEBGL_RENDER_FLOAT32_ENABLED")) {
                    var e = d().getBool("DEBUG");
                    d().set("DEBUG", !1);
                    var n = t.abs(hn(1e-8)).dataSync()[0];
                    if ((d().set("DEBUG", e), n > 0)) return 32;
                  }
                  return 16;
                })),
              this.floatPrecisionValue
            );
          }),
          (e.prototype.epsilon = function () {
            return 32 === this.floatPrecision() ? 1e-7 : 1e-4;
          }),
          (e.prototype.uploadToGPU = function (t) {
            var e,
              n = this.texData.get(t),
              r = n.shape,
              a = n.dtype,
              i = n.values,
              o = n.texture,
              s = n.usage,
              u = n.isPacked;
            if (null == o) {
              var c,
                l = null != this.activeTimers;
              l && (c = at());
              var h = n.texShape;
              if (
                (null == h && ((h = Ie(r, u)), (n.texShape = h)), null != i)
              ) {
                var d = Se(r),
                  p = void 0,
                  f = h[1],
                  m = h[0],
                  g = i instanceof Uint8Array;
                u
                  ? ((f = (e = qt(h[0], h[1]))[0]),
                    (m = e[1]),
                    (p = new xi(d, [m, f], g)))
                  : (p = new yi(d, [m, f], g));
                var b = this.makeTensorInfo([m, f], a);
                (this.texData.get(b.dataId).usage = g ? Pt.PIXELS : Pt.UPLOAD),
                  this.gpgpu.uploadDenseMatrixToTexture(
                    this.getTexture(b.dataId),
                    f,
                    m,
                    i
                  );
                var v = this.runWebGLProgram(p, [b], a, null, !0),
                  y = this.texData.get(v.dataId);
                (n.texture = y.texture),
                  (n.texShape = y.texShape),
                  (n.isPacked = y.isPacked),
                  (n.usage = y.usage),
                  this.disposeData(b.dataId),
                  this.texData.delete(v.dataId),
                  (n.values = null),
                  l && (this.uploadWaitMs += at() - c);
              } else {
                var x = this.acquireTexture(h, s, a, u);
                n.texture = x;
              }
            }
          }),
          (e.prototype.convertAndCacheOnCPU = function (t, e) {
            var n = this.texData.get(t),
              r = n.dtype;
            return (
              this.releaseGPUData(t),
              null != e &&
                (n.values = (function (t, e) {
                  if ("float32" === e || "complex64" === e) return t;
                  if ("int32" === e || "bool" === e) {
                    for (
                      var n =
                          "int32" === e
                            ? new Int32Array(t.length)
                            : new Uint8Array(t.length),
                        r = 0;
                      r < n.length;
                      ++r
                    )
                      n[r] = Math.round(t[r]);
                    return n;
                  }
                  throw new Error("Unknown dtype " + e);
                })(e, r)),
              n.values
            );
          }),
          (e.prototype.acquireTexture = function (t, e, n, r) {
            if (
              ((this.numBytesInGPU += this.computeBytes(t, n)),
              !this.warnedAboutMemory &&
                this.numBytesInGPU > 1024 * this.numMBBeforeWarning * 1024)
            ) {
              var a = (this.numBytesInGPU / 1024 / 1024).toFixed(2);
              (this.warnedAboutMemory = !0),
                console.warn(
                  "High memory usage in GPU: " +
                    a +
                    " MB, most likely due to a memory leak"
                );
            }
            return this.textureManager.acquireTexture(t, e, r);
          }),
          (e.prototype.computeBytes = function (t, e) {
            return t[0] * t[1] * G(e);
          }),
          e
        );
      })(Fr);
      jt() &&
        Mt.registerBackend(
          "webgl",
          function () {
            return new Xo();
          },
          2
        );
      var Yo = an({
          square_: function (t) {
            var e = He(t, "x", "square"),
              n = [e];
            return Mt.runKernelFunc(
              function (t, n) {
                return n([e]), t.square(e);
              },
              { x: e },
              null,
              "Square",
              {},
              n,
              []
            );
          },
        }),
        Jo = "SquaredDifference",
        Qo = an({
          squaredDifference_: function (t, e) {
            var n,
              r = He(t, "a", "squaredDifference"),
              a = He(e, "b", "squaredDifference");
            (n = Rt(r, a)), (r = n[0]), (a = n[1]), Br(r.shape, a.shape);
            var i = { a: r, b: a },
              o = [r, a];
            return Mt.runKernelFunc(
              function (t, e) {
                var n = t.squaredDifference(r, a);
                return e([r, a]), n;
              },
              i,
              function (t, e) {
                var n = e[0],
                  r = e[1],
                  a = hn(2);
                return {
                  a: function () {
                    return t.mul(n.sub(r).mul(a));
                  },
                  b: function () {
                    return t.mul(r.sub(n).mul(a));
                  },
                };
              },
              Jo,
              {},
              o,
              []
            );
          },
        }),
        Zo = an({
          abs_: function (t) {
            var e = He(t, "x", "abs");
            return "complex64" === e.dtype
              ? Mt.runKernelFunc(
                  function (t) {
                    return t.complexAbs(e);
                  },
                  { $x: e }
                )
              : Mt.runKernelFunc(
                  function (t, n) {
                    var r = t.abs(e);
                    return n([e]), r;
                  },
                  { x: e },
                  function (t, e) {
                    var n = e[0];
                    return {
                      x: function () {
                        return t.mul(n.toFloat().step(-1));
                      },
                    };
                  },
                  "Abs"
                );
          },
        }),
        ts = an({
          acos_: function (t) {
            var e = He(t, "x", "acos");
            return Mt.runKernelFunc(
              function (t, n) {
                var r = t.acos(e);
                return n([e]), r;
              },
              { $x: e },
              function (t, e) {
                var n = e[0];
                return {
                  $x: function () {
                    return t
                      .divStrict(hn(1).sub(n.toFloat().square()).sqrt())
                      .neg();
                  },
                };
              }
            );
          },
        }),
        es = an({
          acosh_: function (t) {
            var e = He(t, "x", "acosh");
            return Mt.runKernelFunc(
              function (t, n) {
                var r = t.acosh(e);
                return n([e]), r;
              },
              { $x: e },
              function (t, e) {
                var n = e[0];
                return {
                  $x: function () {
                    return t.divStrict(n.toFloat().square().sub(1).sqrt());
                  },
                };
              }
            );
          },
        }),
        ns = an({
          asin_: function (t) {
            var e = He(t, "x", "asin");
            return Mt.runKernelFunc(
              function (t, n) {
                var r = t.asin(e);
                return n([e]), r;
              },
              { $x: e },
              function (t, e) {
                var n = e[0];
                return {
                  $x: function () {
                    return t.divStrict(hn(1).sub(n.toFloat().square()).sqrt());
                  },
                };
              }
            );
          },
        }),
        rs = an({
          asinh_: function (t) {
            var e = He(t, "x", "asinh");
            return Mt.runKernelFunc(
              function (t, n) {
                var r = t.asinh(e);
                return n([e]), r;
              },
              { $x: e },
              function (t, e) {
                var n = e[0];
                return {
                  $x: function () {
                    return t.divStrict(hn(1).add(n.toFloat().square()).sqrt());
                  },
                };
              }
            );
          },
        }),
        as = an({
          atan_: function (t) {
            var e = He(t, "x", "atan");
            return Mt.runKernelFunc(
              function (t, n) {
                var r = t.atan(e);
                return n([e]), r;
              },
              { $x: e },
              function (t, e) {
                var n = e[0];
                return {
                  $x: function () {
                    return t.div(n.toFloat().square().add(1));
                  },
                };
              }
            );
          },
        }),
        is = an({
          atanh_: function (t) {
            var e = He(t, "x", "atanh");
            return Mt.runKernelFunc(
              function (t, n) {
                var r = t.atanh(e);
                return n([e]), r;
              },
              { $x: e },
              function (t, e) {
                var n = e[0];
                return {
                  $x: function () {
                    return t.div(hn(1).sub(n.toFloat().square()));
                  },
                };
              }
            );
          },
        }),
        os = an({
          ceil_: function (t) {
            var e = He(t, "x", "ceil");
            return Mt.runKernelFunc(
              function (t) {
                return t.ceil(e);
              },
              { $x: e },
              function (t) {
                return {
                  $x: function () {
                    return wn(t);
                  },
                };
              }
            );
          },
        }),
        ss = an({
          clipByValue_: function (t, e, n) {
            var r = He(t, "x", "clipByValue");
            S(e <= n, function () {
              return (
                "Error in clip: min (" +
                e +
                ") must be less than or equal to max (" +
                n +
                ")."
              );
            });
            var a = [r],
              i = { min: e, max: n };
            return Mt.runKernelFunc(
              function (t, a) {
                var i = t.clip(r, e, n);
                return a([r]), i;
              },
              { x: r },
              function (t, r) {
                var a = r[0];
                return {
                  x: function () {
                    return t.where(
                      a.greaterEqual(e).logicalAnd(a.lessEqual(n)),
                      wn(t)
                    );
                  },
                };
              },
              "ClipByValue",
              i,
              a
            );
          },
        }),
        us = an({
          cos_: function (t) {
            var e = He(t, "x", "cos"),
              n = [e];
            return Mt.runKernelFunc(
              function (t, n) {
                var r = t.cos(e);
                return n([e]), r;
              },
              { x: e },
              function (t, e) {
                var n = e[0];
                return {
                  x: function () {
                    return n.toFloat().sin().neg().mul(t);
                  },
                };
              },
              "Cos",
              {},
              n
            );
          },
        }),
        cs = an({
          cosh_: function (t) {
            var e = He(t, "x", "cosh");
            return Mt.runKernelFunc(
              function (t, n) {
                var r = t.cosh(e);
                return n([e]), r;
              },
              { $x: e },
              function (t, e) {
                var n = e[0];
                return {
                  $x: function () {
                    return n.toFloat().sinh().mulStrict(t);
                  },
                };
              }
            );
          },
        }),
        ls = an({
          erf_: function (t) {
            var e = He(t, "x", "erf");
            return (
              S("int32" === e.dtype || "float32" === e.dtype, function () {
                return "Input dtype must be `int32` or `float32`.";
              }),
              "int32" === e.dtype && (e = e.toFloat()),
              Mt.runKernelFunc(
                function (t, n) {
                  var r = t.erf(e);
                  return n([e]), r;
                },
                { $x: e },
                function (t, e) {
                  var n = e[0];
                  return {
                    $x: function () {
                      return t.mul(
                        n
                          .square()
                          .neg()
                          .exp()
                          .mul(2 / Math.sqrt(Math.PI))
                      );
                    },
                  };
                }
              )
            );
          },
        }),
        hs = an({
          exp_: function (t) {
            var e = He(t, "x", "exp");
            return Mt.runKernelFunc(
              function (t, n) {
                var r = t.exp(e);
                return n([r]), r;
              },
              { x: e },
              function (t, e) {
                return {
                  x: function () {
                    return t.mulStrict(e[0]);
                  },
                };
              },
              "Exp",
              {},
              [],
              [!0]
            );
          },
        }),
        ds = an({
          expm1_: function (t) {
            var e = He(t, "x", "expm1");
            return Mt.runKernelFunc(
              function (t, n) {
                var r = t.expm1(e);
                return n([e]), r;
              },
              { $x: e },
              function (t, e) {
                var n = e[0];
                return {
                  $x: function () {
                    return t.mul(n.exp());
                  },
                };
              }
            );
          },
        }),
        ps = an({
          floor_: function (t) {
            var e = He(t, "x", "floor");
            return Mt.runKernelFunc(
              function (t) {
                return t.floor(e);
              },
              { $x: e },
              function (t) {
                return {
                  $x: function () {
                    return wn(t);
                  },
                };
              }
            );
          },
        }),
        fs = an({
          log_: function (t) {
            var e = He(t, "x", "log"),
              n = [e];
            return Mt.runKernelFunc(
              function (t, n) {
                var r = t.log(e);
                return n([e]), r;
              },
              { x: e },
              function (t, e) {
                var n = e[0];
                return {
                  x: function () {
                    return t.div(n.toFloat());
                  },
                };
              },
              "Log",
              {},
              n
            );
          },
        }),
        ms = an({
          log1p_: function (t) {
            var e = He(t, "x", "log1p");
            return Mt.runKernelFunc(
              function (t, n) {
                var r = t.log1p(e);
                return n([e]), r;
              },
              { $x: e },
              function (t, e) {
                var n = e[0];
                return {
                  $x: function () {
                    return t.div(n.add(1));
                  },
                };
              }
            );
          },
        }),
        gs = an({
          logSigmoid_: function (t) {
            var e = He(t, "x", "logSigmoid");
            return Mt.runKernelFunc(
              function (t, n) {
                var r = t.softplus(e.neg()).neg();
                return n([e]), r;
              },
              { $x: e },
              function (t, e) {
                var n = e[0];
                return {
                  $x: function () {
                    return t.mul(n.neg().sigmoid());
                  },
                };
              }
            );
          },
        }),
        bs = an({
          neg_: function (t) {
            var e = He(t, "x", "neg"),
              n = [e];
            return Mt.runKernelFunc(
              function (t) {
                return t.neg(e);
              },
              { x: e },
              function (t) {
                return {
                  x: function () {
                    return t.neg();
                  },
                };
              },
              "Neg",
              {},
              n
            );
          },
        }),
        vs = an({
          reciprocal_: function (t) {
            var e = He(t, "x", "reciprocal");
            return Mt.runKernelFunc(
              function (t, n) {
                var r = t.reciprocal(e);
                return n([e]), r;
              },
              { $x: e },
              function (t, e) {
                var n = e[0];
                return {
                  $x: function () {
                    return t.div(n.square().neg());
                  },
                };
              }
            );
          },
        }),
        ys = an({
          round_: function (t) {
            var e = He(t, "x", "round");
            return Mt.runKernelFunc(
              function (t) {
                return t.round(e);
              },
              { $x: e },
              function (t) {
                return {
                  $x: function () {
                    return wn(t);
                  },
                };
              }
            );
          },
        }),
        xs = an({
          rsqrt_: function (t) {
            var e = He(t, "x", "rsqrt"),
              n = [e];
            return Mt.runKernelFunc(
              function (t, n) {
                var r = t.rsqrt(e);
                return n([e]), r;
              },
              { x: e },
              function (t, e) {
                var n = e[0];
                return {
                  x: function () {
                    return t.div(n.pow(1.5).mul(2)).neg();
                  },
                };
              },
              "Rsqrt",
              {},
              n
            );
          },
        }),
        ws = an({
          sigmoid_: function (t) {
            var e = He(t, "x", "sigmoid");
            return Mt.runKernelFunc(
              function (t, n) {
                var r = t.sigmoid(e);
                return n([r]), r;
              },
              { x: e },
              function (t, e) {
                var n = e[0];
                return {
                  x: function () {
                    return t.mul(n.mul(hn(1).sub(n)));
                  },
                };
              },
              "Sigmoid"
            );
          },
        }),
        Cs = an({
          sign_: function (t) {
            var e = He(t, "x", "sign");
            return Mt.runKernelFunc(
              function (t) {
                return t.sign(e);
              },
              { $x: e },
              function (t) {
                return {
                  $x: function () {
                    return wn(t);
                  },
                };
              }
            );
          },
        }),
        Os = an({
          isNaN_: function (t) {
            var e = He(t, "x", "isNaN");
            return Mt.runKernelFunc(
              function (t) {
                return t.isNaN(e);
              },
              { $x: e },
              function (t) {
                return {
                  $x: function () {
                    return wn(t);
                  },
                };
              }
            );
          },
        }),
        Es = an({
          isInf_: function (t) {
            var e = He(t, "x", "isInf");
            return Mt.runKernelFunc(
              function (t) {
                return t.isInf(e);
              },
              { $x: e },
              function (t) {
                return {
                  $x: function () {
                    return wn(t);
                  },
                };
              }
            );
          },
        }),
        Ss = an({
          isFinite_: function (t) {
            var e = He(t, "x", "isFinite");
            return Mt.runKernelFunc(
              function (t) {
                return t.isFinite(e);
              },
              { $x: e },
              function (t) {
                return {
                  $x: function () {
                    return wn(t);
                  },
                };
              }
            );
          },
        }),
        Is = an({
          sin_: function (t) {
            var e = He(t, "x", "sin"),
              n = [e];
            return Mt.runKernelFunc(
              function (t, n) {
                var r = t.sin(e);
                return n([e]), r;
              },
              { x: e },
              function (t, e) {
                var n = e[0];
                return {
                  x: function () {
                    return n.toFloat().cos().mul(t);
                  },
                };
              },
              "Sin",
              {},
              n
            );
          },
        }),
        ks = an({
          sinh_: function (t) {
            var e = He(t, "x", "sinh");
            return Mt.runKernelFunc(
              function (t, n) {
                var r = t.sinh(e);
                return n([e]), r;
              },
              { $x: e },
              function (t, e) {
                var n = e[0];
                return {
                  $x: function () {
                    return n.toFloat().cosh().mulStrict(t);
                  },
                };
              }
            );
          },
        }),
        Ns = an({
          softplus_: function (t) {
            var e = He(t, "x", "softplus");
            return Mt.runKernelFunc(
              function (t, n) {
                var r = t.softplus(e);
                return n([e]), r;
              },
              { $x: e },
              function (t, e) {
                var n = e[0];
                return {
                  $x: function () {
                    return t.mul(n.sigmoid());
                  },
                };
              }
            );
          },
        }),
        Rs = an({
          sqrt_: function (t) {
            var e = He(t, "x", "sqrt");
            return Mt.runKernelFunc(
              function (t, n) {
                var r = t.sqrt(e);
                return n([e]), r;
              },
              { $x: e },
              function (t, e) {
                var n = e[0];
                return {
                  $x: function () {
                    return t.div(n.toFloat().sqrt().mul(2));
                  },
                };
              }
            );
          },
        }),
        As = an({
          step_: function (t, e) {
            void 0 === e && (e = 0);
            var n = He(t, "x", "step");
            return Mt.runKernelFunc(
              function (t) {
                return t.step(n, e);
              },
              { $x: n },
              function (t) {
                return {
                  $x: function () {
                    return wn(t);
                  },
                };
              }
            );
          },
        }),
        Ts = an({
          tan_: function (t) {
            var e = He(t, "x", "tan");
            return Mt.runKernelFunc(
              function (t, n) {
                var r = t.tan(e);
                return n([e]), r;
              },
              { $x: e },
              function (t, e) {
                var n = e[0];
                return {
                  $x: function () {
                    return t.div(n.cos().square());
                  },
                };
              }
            );
          },
        }),
        _s = an({
          tanh_: function (t) {
            var e = He(t, "x", "tanh");
            return Mt.runKernelFunc(
              function (t, n) {
                var r = t.tanh(e);
                return n([r]), r;
              },
              { x: e },
              function (t, e) {
                var n = e[0];
                return {
                  x: function () {
                    return hn(1).sub(n.square()).mulStrict(t);
                  },
                };
              },
              "Tanh",
              {},
              null,
              [!0]
            );
          },
        });
      function Ds(t, e, n, r, a, i) {
        var o,
          s,
          u = He(t, "x", "batchNorm"),
          c = He(e, "mean", "batchNorm"),
          l = He(n, "variance", "batchNorm");
        return (
          null != a && (o = He(a, "scale", "batchNorm")),
          null != r && (s = He(r, "offset", "batchNorm")),
          S(2 === u.rank, function () {
            return (
              "Error in batchNorm3D: x must be rank 3 but got rank " +
              u.rank +
              "."
            );
          }),
          S(2 === c.rank || 1 === c.rank, function () {
            return (
              "Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank " +
              c.rank +
              "."
            );
          }),
          S(2 === l.rank || 1 === l.rank, function () {
            return (
              "Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank " +
              l.rank +
              "."
            );
          }),
          null != o &&
            S(2 === o.rank || 1 === o.rank, function () {
              return (
                "Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank " +
                o.rank +
                "."
              );
            }),
          null != s &&
            S(2 === s.rank || 1 === s.rank, function () {
              return (
                "Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank " +
                s.rank +
                "."
              );
            }),
          js(u, c, l, s, o, i)
        );
      }
      function Fs(t, e, n, r, a, i) {
        var o,
          s,
          u = He(t, "x", "batchNorm"),
          c = He(e, "mean", "batchNorm"),
          l = He(n, "variance", "batchNorm");
        return (
          null != a && (o = He(a, "scale", "batchNorm")),
          null != r && (s = He(r, "offset", "batchNorm")),
          S(3 === u.rank, function () {
            return (
              "Error in batchNorm3D: x must be rank 3 but got rank " +
              u.rank +
              "."
            );
          }),
          S(3 === c.rank || 1 === c.rank, function () {
            return (
              "Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank " +
              c.rank +
              "."
            );
          }),
          S(3 === l.rank || 1 === l.rank, function () {
            return (
              "Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank " +
              l.rank +
              "."
            );
          }),
          null != o &&
            S(3 === o.rank || 1 === o.rank, function () {
              return (
                "Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank " +
                o.rank +
                "."
              );
            }),
          null != s &&
            S(3 === s.rank || 1 === s.rank, function () {
              return (
                "Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank " +
                s.rank +
                "."
              );
            }),
          js(u, c, l, s, o, i)
        );
      }
      function Ms(t, e, n, r, a, i) {
        var o,
          s,
          u = He(t, "x", "batchNorm"),
          c = He(e, "mean", "batchNorm"),
          l = He(n, "variance", "batchNorm");
        return (
          null != a && (o = He(a, "scale", "batchNorm")),
          null != r && (s = He(r, "offset", "batchNorm")),
          S(4 === u.rank, function () {
            return (
              "Error in batchNorm4D: x must be rank 4 but got rank " +
              u.rank +
              "."
            );
          }),
          S(4 === c.rank || 1 === c.rank, function () {
            return (
              "Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank " +
              c.rank +
              "."
            );
          }),
          S(4 === l.rank || 1 === l.rank, function () {
            return (
              "Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank " +
              l.rank +
              "."
            );
          }),
          null != o &&
            S(4 === o.rank || 1 === o.rank, function () {
              return (
                "Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank " +
                o.rank +
                "."
              );
            }),
          null != s &&
            S(4 === s.rank || 1 === s.rank, function () {
              return (
                "Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank " +
                s.rank +
                "."
              );
            }),
          js(u, c, l, s, o, i)
        );
      }
      function js(t, e, n, r, a, i) {
        null == i && (i = 0.001);
        var o,
          s,
          u,
          c = He(t, "x", "batchNorm"),
          l = He(e, "mean", "batchNorm"),
          h = He(n, "variance", "batchNorm");
        null != a && (o = He(a, "scale", "batchNorm")),
          null != r && (s = He(r, "offset", "batchNorm")),
          S(l.rank === h.rank, function () {
            return "Batch normalization gradient requires mean and variance to have equal ranks.";
          }),
          S(null == s || l.rank === s.rank, function () {
            return "Batch normalization gradient requires mean and offset to have equal ranks.";
          }),
          S(null == o || l.rank === o.rank, function () {
            return "Batch normalization gradient requires mean and scale to have equal ranks.";
          }),
          (u =
            0 === c.rank || 1 === c.rank
              ? c.as4D(1, 1, 1, c.size)
              : 2 === c.rank
              ? c.as4D(1, 1, c.shape[0], c.shape[1])
              : 3 === c.rank
              ? c.as4D(1, c.shape[0], c.shape[1], c.shape[2])
              : c);
        var d = [c, l, h, o];
        return Mt.runKernelFunc(
          function (t, e) {
            var n = t.batchNormalization(u, $s(l), $s(h), i, $s(o), $s(s));
            return e([c, l, h, o]), n;
          },
          { x: c, mean: l, variance: h, scale: o, offset: s },
          function (t, e) {
            var n = e,
              r = n[0],
              a = n[1],
              o = n[2],
              s = n[3],
              c = null == s ? hn(1) : s,
              l = $r(a.shape, u.shape),
              h = [];
            if (1 === a.rank) {
              for (var d = 0; d < u.shape.length - 1; ++d) h.push(u.shape[d]);
              h.push(1);
            }
            var p = r.sub(a),
              f = t.mul(c),
              m = xs(o.add(hn(i))),
              g = m.mul(m).mul(m).mul(hn(-0.5));
            return {
              x: function () {
                return 1 === a.rank
                  ? t
                      .mul(lr(m.as4D(1, 1, 1, a.shape[0]), h))
                      .mul(c)
                      .reshape(r.shape)
                  : t.mul(m).mul(c).reshape(r.shape);
              },
              mean: function () {
                var t = m.mul(hn(-1)).mul(f);
                return 1 === a.rank && (t = t.sum(l)), t.reshape(a.shape);
              },
              variance: function () {
                var t = g.mul(p).mul(f);
                return 1 === a.rank && (t = t.sum(l)), t.reshape(a.shape);
              },
              scale: function () {
                var e = p.mul(m),
                  n = t.mul(e);
                return 1 === a.rank && (n = n.sum(l)), n.reshape(a.shape);
              },
              offset: function () {
                var e = t;
                return 1 === a.rank && (e = e.sum(l)), e.reshape(a.shape);
              },
            };
          },
          "BatchNormalization",
          { varianceEpsilon: i },
          d
        ).reshape(c.shape);
      }
      function $s(t) {
        return null == t
          ? null
          : 0 === t.rank
          ? t.as1D()
          : 1 === t.rank
          ? t
          : 2 === t.rank
          ? t.as4D(1, 1, t.shape[0], t.shape[1])
          : 3 === t.rank
          ? t.as4D(1, t.shape[0], t.shape[1], t.shape[2])
          : t;
      }
      function Bs() {
        Le(
          "tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon"
        );
      }
      var Ps = an({
          batchNormalization2d_: function (t, e, n, r, a, i) {
            return void 0 === r && (r = 0.001), Bs(), Ds(t, e, n, i, a, r);
          },
        }),
        Ls = an({
          batchNormalization3d_: function (t, e, n, r, a, i) {
            return void 0 === r && (r = 0.001), Bs(), Fs(t, e, n, i, a, r);
          },
        }),
        zs = an({
          batchNormalization4d_: function (t, e, n, r, a, i) {
            return void 0 === r && (r = 0.001), Bs(), Ms(t, e, n, i, a, r);
          },
        }),
        Ws = an({
          batchNormalization_: function (t, e, n, r, a, i) {
            return void 0 === r && (r = 0.001), Bs(), js(t, e, n, i, a, r);
          },
        }),
        Vs = an({ batchNorm_: js }),
        Us = an({ batchNorm2d_: Ds }),
        Gs = an({ batchNorm3d_: Fs }),
        Hs = an({ batchNorm4d_: Ms }),
        qs = an({
          logicalAnd_: function (t, e) {
            var n = He(t, "a", "logicalAnd", "bool"),
              r = He(e, "b", "logicalAnd", "bool");
            return (
              Br(n.shape, r.shape),
              Mt.runKernelFunc(
                function (t) {
                  return t.logicalAnd(n, r);
                },
                { a: n, b: r },
                null,
                "LogicalAnd"
              )
            );
          },
        }),
        Ks = an({
          logicalNot_: function (t) {
            var e = He(t, "x", "logicalNot", "bool");
            return Mt.runKernelFunc(
              function (t) {
                return t.logicalNot(e);
              },
              { $x: e }
            );
          },
        }),
        Xs = an({
          logicalOr_: function (t, e) {
            var n = He(t, "a", "logicalOr", "bool"),
              r = He(e, "b", "logicalOr", "bool");
            return (
              Br(n.shape, r.shape),
              Mt.runKernelFunc(
                function (t) {
                  return t.logicalOr(n, r);
                },
                { $a: n, $b: r }
              )
            );
          },
        }),
        Ys = an({
          logicalXor_: function (t, e) {
            var n = He(t, "a", "logicalXor", "bool"),
              r = He(e, "b", "logicalXor", "bool");
            return (
              Br(n.shape, r.shape), Xs(t, e).logicalAnd(qs(t, e).logicalNot())
            );
          },
        }),
        Js = an({
          where_: function (t, e, n) {
            var r = He(e, "a", "where"),
              a = He(n, "b", "where"),
              i = He(t, "condition", "where", "bool");
            return (
              I(r.shape, a.shape, "Error in where: "),
              1 === i.rank
                ? S(i.shape[0] === r.shape[0], function () {
                    return "The first dimension of `a` must match the size of `condition`.";
                  })
                : I(i.shape, a.shape, "Error in where: "),
              Mt.runKernelFunc(
                function (t, e) {
                  var n = t.select(i, r, a);
                  return e([i]), n;
                },
                { $condition: i, $a: r, $b: a },
                function (t, e) {
                  var n = e[0];
                  return {
                    $condition: function () {
                      return wn(n).toFloat();
                    },
                    $a: function () {
                      return t.mul(n.cast(t.dtype));
                    },
                    $b: function () {
                      return t.mul(n.logicalNot().cast(t.dtype));
                    },
                  };
                }
              )
            );
          },
        }),
        Qs = function (t) {
          return u(this, void 0, void 0, function () {
            var e, n, r;
            return c(this, function (a) {
              switch (a.label) {
                case 0:
                  return [
                    4,
                    (e = He(t, "condition", "whereAsync", "bool")).data(),
                  ];
                case 1:
                  return (
                    (n = a.sent()),
                    (r = ma(e.shape, n)),
                    t !== e && e.dispose(),
                    [2, r]
                  );
              }
            });
          });
        },
        Zs = an({
          add_: function (t, e) {
            var n,
              r = He(t, "a", "add"),
              a = He(e, "b", "add");
            (n = Rt(r, a)), (r = n[0]), (a = n[1]);
            var i = Br(r.shape, a.shape);
            return Mt.runKernelFunc(
              function (t) {
                return t.add(r, a);
              },
              { a: r, b: a },
              function (t) {
                return {
                  a: function () {
                    var e = t,
                      n = $r(r.shape, i);
                    return n.length > 0 && (e = e.sum(n)), e.reshape(r.shape);
                  },
                  b: function () {
                    var e = t,
                      n = $r(a.shape, i);
                    return n.length > 0 && (e = e.sum(n)), e.reshape(a.shape);
                  },
                };
              },
              "Add"
            );
          },
        }),
        tu = an({
          addN_: function (t) {
            S(Array.isArray(t), function () {
              return "The argument passed to tf.addN() must be a list of tensors";
            }),
              S(t.length >= 1, function () {
                return (
                  "Must pass at least one tensor to tf.addN(), but got " +
                  t.length
                );
              });
            var e = t.map(function (t, e) {
                return He(t, "tensors" + e, "addN");
              }),
              n = e[0];
            e.forEach(function (t) {
              if (t.dtype !== n.dtype)
                throw new Error(
                  "All tensors passed to tf.addN() must have the same dtype"
                );
            }),
              e.forEach(function (t) {
                if (!A(t.shape, n.shape))
                  throw new Error(
                    "All tensors passed to tf.addN() must have the same shape"
                  );
              });
            var r = e;
            return Mt.runKernelFunc(
              function (t) {
                return t.addN(e);
              },
              r,
              function (t) {
                var n = {};
                return (
                  e.forEach(function (e, r) {
                    n[r] = function () {
                      return t.clone();
                    };
                  }),
                  n
                );
              },
              "AddN"
            );
          },
        }),
        eu = an({
          addStrict_: function (t, e) {
            var n = He(t, "a", "addStrict"),
              r = He(e, "b", "addStrict");
            return I(n.shape, r.shape, "Error in addStrict: "), n.add(r);
          },
        }),
        nu = an({
          atan2_: function (t, e) {
            var n,
              r = He(t, "a", "atan2"),
              a = He(e, "b", "atan2");
            (n = Rt(r, a)), (r = n[0]), (a = n[1]);
            var i = Br(r.shape, a.shape);
            return Mt.runKernelFunc(
              function (t, e) {
                var n = t.atan2(r, a);
                return e([r, a]), n;
              },
              { $a: r, $b: a },
              function (t, e) {
                var n = e[0],
                  r = e[1];
                return {
                  $a: function () {
                    var e = Zs(n.square(), r.square()),
                      a = t.mul(r.div(e)),
                      o = $r(n.shape, i);
                    return o.length > 0 && (a = a.sum(o)), a.reshape(n.shape);
                  },
                  $b: function () {
                    var e = Zs(n.square(), r.square()),
                      a = bs(t.mul(n.div(e))),
                      o = $r(r.shape, i);
                    return o.length > 0 && (a = a.sum(o)), a.reshape(r.shape);
                  },
                };
              }
            );
          },
        }),
        ru = an({
          div_: function (t, e) {
            var n,
              r = He(t, "a", "div"),
              a = He(e, "b", "div");
            if (
              ((n = Rt(r, a)),
              (r = n[0]),
              (a = n[1]),
              "int32" === r.dtype && "int32" === a.dtype)
            )
              return ou(r, a);
            var i = Br(r.shape, a.shape);
            return Mt.runKernelFunc(
              function (t, e) {
                var n = t.realDivide(r, a);
                return e([r, a]), n;
              },
              { a: r, b: a },
              function (t, e) {
                var n = e[0],
                  r = e[1];
                return {
                  a: function () {
                    var e = t.div(r.toFloat()),
                      a = $r(n.shape, i);
                    return a.length > 0 ? e.sum(a).reshape(n.shape) : e;
                  },
                  b: function () {
                    var e = t.mul(n.toFloat()),
                      a = $r(r.shape, i);
                    a.length > 0 && (e = e.sum(a).reshape(r.shape));
                    var o = r.square();
                    return e.div(o.toFloat()).neg();
                  },
                };
              },
              "Div"
            );
          },
        }),
        au = an({
          divNoNan_: function (t, e) {
            var n,
              r = He(t, "a", "div"),
              a = He(e, "b", "div");
            (r = (n = Rt(r, a))[0]), (a = n[1]);
            var i = ru(r, a),
              o = wn(i),
              s = a.equal(o);
            return Js(s, o, i);
          },
        }),
        iu = an({
          divStrict_: function (t, e) {
            var n = He(t, "a", "div"),
              r = He(e, "b", "div");
            return I(n.shape, r.shape, "Error in divideStrict: "), n.div(r);
          },
        }),
        ou = an({
          floorDiv_: function (t, e) {
            var n,
              r = He(t, "a", "floorDiv"),
              a = He(e, "b", "floorDiv");
            (n = Rt(r, a)), (r = n[0]), (a = n[1]);
            var i = Br(r.shape, a.shape);
            return Mt.runKernelFunc(
              function (t, e) {
                var n = t.floorDiv(r, a);
                return e([r, a]), n;
              },
              { a: r, b: a },
              function (t, e) {
                var n = e[0],
                  r = e[1];
                return {
                  a: function () {
                    var e = t.div(r.toFloat()),
                      a = $r(n.shape, i);
                    return a.length > 0 ? e.sum(a).reshape(n.shape) : e;
                  },
                  b: function () {
                    var e = t.mul(n.toFloat()),
                      a = $r(r.shape, i);
                    a.length > 0 && (e = e.sum(a).reshape(r.shape));
                    var o = r.square();
                    return e.div(o.toFloat()).neg();
                  },
                };
              },
              "FloorDiv"
            );
          },
        }),
        su = an({
          maximum_: function (t, e) {
            var n,
              r = He(t, "a", "maximum"),
              a = He(e, "b", "maximum");
            return (
              (n = Rt(r, a)),
              (r = n[0]),
              (a = n[1]),
              "bool" === r.dtype && ((r = r.toInt()), (a = a.toInt())),
              Br(r.shape, a.shape),
              Mt.runKernelFunc(
                function (t, e) {
                  var n = t.maximum(r, a);
                  return e([r, a]), n;
                },
                { a: r, b: a },
                function (t, e) {
                  var n = e[0],
                    r = e[1];
                  return {
                    a: function () {
                      return t.mul(n.greaterEqual(r).toFloat());
                    },
                    b: function () {
                      return t.mul(n.less(r).toFloat());
                    },
                  };
                },
                "Maximum"
              )
            );
          },
        }),
        uu = an({
          maximumStrict_: function (t, e) {
            var n = He(t, "a", "maximumStrict"),
              r = He(e, "b", "maximumStrict");
            return (
              I(n.shape, r.shape, "Error in maximumStrict: "), n.maximum(r)
            );
          },
        }),
        cu = an({
          minimum_: function (t, e) {
            var n,
              r = He(t, "a", "minimum"),
              a = He(e, "b", "minimum");
            return (
              (n = Rt(r, a)),
              (r = n[0]),
              (a = n[1]),
              "bool" === r.dtype && ((r = r.toInt()), (a = a.toInt())),
              Br(r.shape, a.shape),
              Mt.runKernelFunc(
                function (t, e) {
                  var n = t.minimum(r, a);
                  return e([r, a]), n;
                },
                { a: r, b: a },
                function (t, e) {
                  var n = e[0],
                    r = e[1];
                  return {
                    a: function () {
                      return t.mul(n.lessEqual(r).toFloat());
                    },
                    b: function () {
                      return t.mul(n.greater(r).toFloat());
                    },
                  };
                },
                "Minimum"
              )
            );
          },
        }),
        lu = an({
          minimumStrict_: function (t, e) {
            var n = He(t, "a", "minimumStrict"),
              r = He(e, "b", "minimumStrict");
            return (
              I(n.shape, r.shape, "Error in minimumStrict: "), n.minimum(r)
            );
          },
        }),
        hu = an({
          mod_: function (t, e) {
            var n,
              r = He(t, "a", "mod"),
              a = He(e, "b", "mod");
            (n = Rt(r, a)), (r = n[0]), (a = n[1]);
            var i = Br(r.shape, a.shape);
            return Mt.runKernelFunc(
              function (t, e) {
                var n = t.mod(r, a);
                return e([r, a]), n;
              },
              { $a: r, $b: a },
              function (t, e) {
                var n = e[0],
                  r = e[1];
                return {
                  $a: function () {
                    var e = $r(n.shape, i);
                    return e.length > 0 ? t.sum(e).reshape(n.shape) : t;
                  },
                  $b: function () {
                    var e = t.mul(n.div(r).floor().neg()),
                      a = $r(r.shape, i);
                    return a.length > 0 ? e.sum(a).reshape(r.shape) : e;
                  },
                };
              }
            );
          },
        }),
        du = an({
          modStrict_: function (t, e) {
            var n = He(t, "a", "modStrict"),
              r = He(e, "b", "modStrict");
            return I(n.shape, r.shape, "Error in modStrict: "), n.mod(r);
          },
        }),
        pu = an({
          mul_: function (t, e) {
            var n,
              r = He(t, "a", "mul"),
              a = He(e, "b", "mul");
            (n = Rt(r, a)), (r = n[0]), (a = n[1]);
            var i = Br(r.shape, a.shape);
            return Mt.runKernelFunc(
              function (t, e) {
                var n = t.multiply(r, a);
                return e([r, a]), n;
              },
              { a: r, b: a },
              function (t, e) {
                var n = e[0],
                  r = e[1];
                return {
                  a: function () {
                    var e = t.mul(r.toFloat()),
                      a = $r(n.shape, i);
                    return a.length > 0 ? e.sum(a).reshape(n.shape) : e;
                  },
                  b: function () {
                    var e = t.mul(n.toFloat()),
                      a = $r(r.shape, i);
                    return a.length > 0 ? e.sum(a).reshape(r.shape) : e;
                  },
                };
              },
              "Mul"
            );
          },
        }),
        fu = an({
          mulStrict_: function (t, e) {
            var n = He(t, "a", "mul"),
              r = He(e, "b", "mul");
            return I(n.shape, r.shape, "Error in multiplyStrict: "), n.mul(r);
          },
        }),
        mu = an({
          pow_: function (t, e) {
            var n,
              r = He(t, "base", "pow"),
              a = He(e, "exp", "pow");
            (n = Rt(r, a)), (r = n[0]), (a = n[1]);
            var i = Br(r.shape, a.shape),
              o = [r, a];
            return Mt.runKernelFunc(
              function (t, e) {
                var n = t.pow(r, a);
                return e([r, a, n]), n;
              },
              { a: r, b: a },
              function (t, e) {
                var n = e[0],
                  r = e[1],
                  a = e[2];
                return {
                  a: function () {
                    var e = r.toFloat(),
                      a = t.mul(e.mul(n.pow(e.sub(hn(1))))),
                      o = $r(n.shape, i);
                    return o.length > 0 && (a = a.sum(o)), a.reshape(n.shape);
                  },
                  b: function () {
                    var e = n.greater(0),
                      o = n.log().where(e, wn(n)),
                      s = t.mul(a.mul(o)),
                      u = $r(r.shape, i);
                    return u.length > 0 && (s = s.sum(u)), s.reshape(r.shape);
                  },
                };
              },
              "Pow",
              {},
              o,
              [!0]
            );
          },
        }),
        gu = an({
          powStrict_: function (t, e) {
            return I(t.shape, e.shape, "Error in powStrict: "), t.pow(e);
          },
        }),
        bu = an({
          squaredDifferenceStrict_: function (t, e) {
            var n = He(t, "a", "squaredDifferenceStrict"),
              r = He(e, "b", "squaredDifferenceStrict");
            return (
              I(n.shape, r.shape, "Error in squaredDifferenceStrict: "),
              n.squaredDifference(r)
            );
          },
        }),
        vu = an({
          sub_: function (t, e) {
            var n,
              r = He(t, "a", "sub"),
              a = He(e, "b", "sub");
            (n = Rt(r, a)), (r = n[0]), (a = n[1]);
            var i = Br(r.shape, a.shape);
            return Mt.runKernelFunc(
              function (t) {
                return t.subtract(r, a);
              },
              { a: r, b: a },
              function (t) {
                return {
                  a: function () {
                    var e = t,
                      n = $r(r.shape, i);
                    return n.length > 0 && (e = e.sum(n)), e.reshape(r.shape);
                  },
                  b: function () {
                    var e = t,
                      n = $r(a.shape, i);
                    return (
                      n.length > 0 && (e = e.sum(n)), e.neg().reshape(a.shape)
                    );
                  },
                };
              },
              "Sub"
            );
          },
        }),
        yu = an({
          subStrict_: function (t, e) {
            var n = He(t, "a", "subStrict"),
              r = He(e, "b", "subStrict");
            return I(n.shape, r.shape, "Error in subStrict: "), n.sub(r);
          },
        }),
        xu = an({
          equal_: function (t, e) {
            var n,
              r = He(t, "a", "equal"),
              a = He(e, "b", "equal");
            return (
              (n = Rt(r, a)),
              (r = n[0]),
              (a = n[1]),
              Br(r.shape, a.shape),
              Mt.runKernelFunc(
                function (t) {
                  return t.equal(r, a);
                },
                { $a: r, $b: a }
              )
            );
          },
        }),
        wu = an({
          equalStrict_: function (t, e) {
            var n = He(t, "a", "equalStrict"),
              r = He(e, "b", "equalStrict");
            return I(n.shape, r.shape, "Error in equalStrict: "), n.equal(r);
          },
        }),
        Cu = an({
          greater_: function (t, e) {
            var n,
              r = He(t, "a", "greater"),
              a = He(e, "b", "greater");
            return (
              (n = Rt(r, a)),
              (r = n[0]),
              (a = n[1]),
              Br(r.shape, a.shape),
              Mt.runKernelFunc(
                function (t) {
                  return t.greater(r, a);
                },
                { a: r, b: a },
                null,
                "Greater"
              )
            );
          },
        }),
        Ou = an({
          greaterEqual_: function (t, e) {
            var n,
              r = He(t, "a", "greaterEqual"),
              a = He(e, "b", "greaterEqual");
            return (
              (n = Rt(r, a)),
              (r = n[0]),
              (a = n[1]),
              Br(r.shape, a.shape),
              Mt.runKernelFunc(
                function (t, e) {
                  var n = t.greaterEqual(r, a);
                  return e([r, a]), n;
                },
                { a: r, b: a },
                function (t, e) {
                  var n = e[0],
                    r = e[1];
                  return {
                    a: function () {
                      return wn(n);
                    },
                    b: function () {
                      return wn(r);
                    },
                  };
                },
                "GreaterEqual"
              )
            );
          },
        }),
        Eu = an({
          greaterEqualStrict_: function (t, e) {
            var n = He(t, "a", "greaterEqualStrict"),
              r = He(e, "b", "greaterEqualStrict");
            return (
              I(n.shape, r.shape, "Error in greaterEqualStrict: "),
              n.greaterEqual(r)
            );
          },
        }),
        Su = an({
          greaterStrict_: function (t, e) {
            var n = He(t, "a", "greaterStrict"),
              r = He(e, "b", "greaterStrict");
            return (
              I(n.shape, r.shape, "Error in greaterStrict: "), n.greater(r)
            );
          },
        }),
        Iu = an({
          less_: function (t, e) {
            var n,
              r = He(t, "a", "less"),
              a = He(e, "b", "less");
            return (
              (n = Rt(r, a)),
              (r = n[0]),
              (a = n[1]),
              Br(r.shape, a.shape),
              Mt.runKernelFunc(
                function (t) {
                  return t.less(r, a);
                },
                { a: r, b: a },
                null,
                "Less"
              )
            );
          },
        }),
        ku = an({
          lessEqual_: function (t, e) {
            var n,
              r = He(t, "a", "lessEqual"),
              a = He(e, "b", "lessEqual");
            return (
              (n = Rt(r, a)),
              (r = n[0]),
              (a = n[1]),
              Br(r.shape, a.shape),
              Mt.runKernelFunc(
                function (t, e) {
                  var n = t.lessEqual(r, a);
                  return e([r, a]), n;
                },
                { a: r, b: a },
                null,
                "LessEqual"
              )
            );
          },
        }),
        Nu = an({
          lessEqualStrict_: function (t, e) {
            var n = He(t, "a", "lessEqualStrict"),
              r = He(e, "b", "lessEqualStrict");
            return (
              I(n.shape, r.shape, "Error in lessEqualStrict: "), n.lessEqual(r)
            );
          },
        }),
        Ru = an({
          lessStrict_: function (t, e) {
            var n = He(t, "a", "lessStrict"),
              r = He(e, "b", "lessStrict");
            return I(n.shape, r.shape, "Error in lessStrict: "), n.less(r);
          },
        }),
        Au = an({
          notEqual_: function (t, e) {
            var n,
              r = He(t, "a", "notEqual"),
              a = He(e, "b", "notEqual");
            return (
              (n = Rt(r, a)),
              (r = n[0]),
              (a = n[1]),
              Br(r.shape, a.shape),
              Mt.runKernelFunc(
                function (t) {
                  return t.notEqual(r, a);
                },
                { a: r, b: a },
                null,
                "NotEqual"
              )
            );
          },
        }),
        Tu = an({
          notEqualStrict_: function (t, e) {
            var n = He(t, "a", "notEqualStrict"),
              r = He(e, "b", "notEqualStrict");
            return (
              I(n.shape, r.shape, "Error in notEqualStrict: "), n.notEqual(r)
            );
          },
        });
      function _u(t, e) {
        for (var n = [], r = t; r < e; ++r) n.push(r);
        return n;
      }
      function Du(t) {
        for (var e = [], n = 0; n < t.length; ++n)
          for (var r = 0; r < t[n].length; ++r) e.push(t[n][r]);
        return e;
      }
      var Fu = an({
          gather_: function (t, e, n) {
            void 0 === n && (n = 0);
            var r = He(t, "x", "gather"),
              a = He(e, "indices", "gather", "int32");
            n = $(n, r.shape)[0];
            var i = (function (t, e, n) {
              for (var r = t.shape[n], a = [], i = 1, o = 1, s = 0; s < n; s++)
                a.push(t.shape[s]), (i *= t.shape[s]);
              for (s = 0; s < e.rank; s++) a.push(e.shape[s]);
              for (s = n + 1; s < t.rank; s++)
                a.push(t.shape[s]), (o *= t.shape[s]);
              return { batchSize: i, sliceSize: o, dimSize: r, outputShape: a };
            })(r, a, n);
            return Mt.runKernelFunc(
              function (t, e) {
                var i = t.gather(r, a.flatten(), n);
                return e([a]), i;
              },
              { x: r, indices: a },
              function (t, e) {
                var a = e[0];
                return {
                  x: function () {
                    var e = r.shape,
                      i = a.size,
                      o = e.slice(0, n),
                      s = o.length,
                      u = e.slice(n, e.length).slice(1),
                      c = u.length,
                      l = _u(0, s),
                      h = _u(s + 1, s + 1 + c),
                      d = Du([o, [i], u]),
                      p = t.reshape(d),
                      f = a.reshape([i]),
                      m = Du([[s], l, h]),
                      g = p.transpose(m),
                      b = Mu(g, f, r.shape[n]),
                      v = tn(m);
                    return b.transpose(v);
                  },
                  indices: function () {
                    return a;
                  },
                };
              },
              "Gather",
              { axis: n }
            ).reshape(i.outputShape);
          },
        }),
        Mu = an({
          unsortedSegmentSum_: function (t, e, n) {
            var r = He(t, "x", "unsortedSegmentSum"),
              a = He(e, "segmentIds", "unsortedSegmentSum", "int32");
            return (
              S(T(n), function () {
                return "numSegments must be of dtype int";
              }),
              Mt.runKernelFunc(
                function (t, e) {
                  var i = t.unsortedSegmentSum(r, a, n);
                  return e([a]), i;
                },
                { $x: r },
                function (t, e) {
                  var n = e[0];
                  return {
                    $x: function () {
                      return (function (t, e) {
                        for (
                          var n = su(e, wn(e)),
                            r = Fu(t, n),
                            a = Ou(e, hn(0, "int32")),
                            i = r.rank - a.rank,
                            o = 0;
                          o < i;
                          ++o
                        )
                          a = qn(a, o + 1);
                        a = qs(a, gn(r.shape, "bool"));
                        var s = wn(r);
                        return Js(a, r, s);
                      })(t, n);
                    },
                  };
                }
              )
            );
          },
        });
      function ju(t, e, n, r, a, i, o) {
        void 0 === i && (i = "NHWC"),
          S(t.length === e.rank, function () {
            return (
              "Length of inShape (" +
              t.length +
              ") and rank of dy (" +
              e.rank +
              ") must match"
            );
          });
        var s = t,
          u = e,
          c = !1;
        3 === e.rank &&
          ((c = !0),
          (u = e.as4D(1, e.shape[0], e.shape[1], e.shape[2])),
          (s = [1, t[0], t[1], t[2]])),
          S(4 === s.length, function () {
            return (
              "Error in conv2dDerInput: inShape must be length 4, but got length " +
              s.length +
              "."
            );
          }),
          S(4 === u.rank, function () {
            return (
              "Error in conv2dDerInput: dy must be rank 4, but got rank " +
              u.rank
            );
          }),
          S(4 === n.rank, function () {
            return (
              "Error in conv2dDerInput: filter must be rank 4, but got rank " +
              n.rank
            );
          });
        var l = "NHWC" === i ? s[3] : s[1],
          h = "NHWC" === i ? u.shape[3] : u.shape[1];
        S(l === n.shape[2], function () {
          return (
            "Error in conv2dDerInput: depth of input (" +
            l +
            ") must match input depth for filter " +
            n.shape[2] +
            "."
          );
        }),
          S(h === n.shape[3], function () {
            return (
              "Error in conv2dDerInput: depth of output (" +
              h +
              ") must match output depth for filter " +
              n.shape[3] +
              "."
            );
          }),
          null != o &&
            S(T(a), function () {
              return (
                "Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode " +
                o +
                " but got pad " +
                a +
                "."
              );
            });
        var d = Yr(i),
          p = zr(s, n.shape, r, 1, a, o, !1, d),
          f = Mt.runKernelFunc(
            function (t, e) {
              var r = t.conv2dDerInput(u, n, p);
              return e([n, u]), r;
            },
            { dy4D: u, filter: n },
            function (t, e) {
              var n = e[0],
                s = e[1];
              return {
                dy4D: function () {
                  return Lu(t, n, r, a, i, 1, o);
                },
                filter: function () {
                  return Wu(t, s, n.shape, r, a, i, o);
                },
              };
            }
          );
        return c ? f.as3D(f.shape[1], f.shape[2], f.shape[3]) : f;
      }
      function $u(t) {
        var e = (function (t) {
            return "number" == typeof t
              ? [t, t, t]
              : 2 === t.length
              ? [t[0], t[1], 1]
              : t;
          })(t),
          n = e[0],
          r = e[1],
          a = e[2];
        return 1 === n && 1 === r && 1 === a;
      }
      function Bu(t, e, n, r, a) {
        S(t.length === e.rank, function () {
          return (
            "Length of inShape (" +
            t.length +
            ") and rank of dy (" +
            e.rank +
            ") must match"
          );
        });
        var i = t,
          o = e,
          s = !1;
        4 === e.rank &&
          ((s = !0),
          (o = e.as5D(1, e.shape[0], e.shape[1], e.shape[2], e.shape[3])),
          (i = [1, t[0], t[1], t[2], t[3]]));
        var u = i[4],
          c = o.shape[4];
        S(5 === i.length, function () {
          return (
            "Error in conv3dDerInput: inShape must be length 5, but got length " +
            i.length +
            "."
          );
        }),
          S(5 === o.rank, function () {
            return (
              "Error in conv3dDerInput: dy must be rank 5, but got rank " +
              o.rank
            );
          }),
          S(5 === n.rank, function () {
            return (
              "Error in conv3dDerInput: filter must be rank 5, but got rank " +
              n.rank
            );
          }),
          S(u === n.shape[3], function () {
            return (
              "Error in conv3dDerInput: depth of input (" +
              u +
              ") must match input depth for filter " +
              n.shape[3] +
              "."
            );
          }),
          S(c === n.shape[4], function () {
            return (
              "Error in conv3dDerInput: depth of output (" +
              c +
              ") must match output depth for filter " +
              n.shape[4] +
              "."
            );
          });
        var l = Wr(i, n.shape, r, 1, a),
          h = Mt.runKernelFunc(
            function (t) {
              return t.conv3dDerInput(o, n, l);
            },
            { dy5D: o }
          );
        return s ? h.as4D(h.shape[1], h.shape[2], h.shape[3], h.shape[4]) : h;
      }
      var Pu = an({
          conv1d_: function (t, e, n, r, a, i, o) {
            void 0 === a && (a = "NWC"), void 0 === i && (i = 1);
            var s = He(t, "x", "conv1d"),
              u = He(e, "filter", "conv1d"),
              c = s,
              l = !1;
            2 === s.rank && ((l = !0), (c = s.as3D(1, s.shape[0], s.shape[1]))),
              S(3 === c.rank, function () {
                return (
                  "Error in conv1d: input must be rank 3, but got rank " +
                  c.rank +
                  "."
                );
              }),
              S(3 === u.rank, function () {
                return (
                  "Error in conv1d: filter must be rank 3, but got rank " +
                  u.rank +
                  "."
                );
              }),
              null != o &&
                S(T(r), function () {
                  return (
                    "Error in conv1d: pad must be an integer when using, dimRoundingMode " +
                    o +
                    " but got pad " +
                    r +
                    "."
                  );
                }),
              S(c.shape[2] === u.shape[1], function () {
                return (
                  "Error in conv1d: depth of input (" +
                  c.shape[2] +
                  ") must match input depth for filter " +
                  u.shape[1] +
                  "."
                );
              }),
              S(Xr(n, i), function () {
                return (
                  "Error in conv1D: Either stride or dilation must be 1. Got stride " +
                  n +
                  " and dilation '" +
                  i +
                  "'"
                );
              }),
              S("NWC" === a, function () {
                return (
                  "Error in conv1d: got dataFormat of " +
                  a +
                  " but only NWC is currently supported."
                );
              });
            var h = u.as4D(1, u.shape[0], u.shape[1], u.shape[2]),
              d = c.as4D(c.shape[0], 1, c.shape[1], c.shape[2]),
              p = Lu(d, h, [1, n], r, "NHWC", [1, i], o);
            return l
              ? p.as2D(p.shape[2], p.shape[3])
              : p.as3D(p.shape[0], p.shape[2], p.shape[3]);
          },
        }),
        Lu = an({
          conv2d_: function (t, e, n, r, a, i, o) {
            void 0 === a && (a = "NHWC"), void 0 === i && (i = [1, 1]);
            var s = He(t, "x", "conv2d"),
              u = He(e, "filter", "conv2d"),
              c = s,
              l = !1;
            3 === s.rank &&
              ((l = !0), (c = s.as4D(1, s.shape[0], s.shape[1], s.shape[2]))),
              S(4 === c.rank, function () {
                return (
                  "Error in conv2d: input must be rank 4, but got rank " +
                  c.rank +
                  "."
                );
              }),
              S(4 === u.rank, function () {
                return (
                  "Error in conv2d: filter must be rank 4, but got rank " +
                  u.rank +
                  "."
                );
              }),
              null != o &&
                S(T(r), function () {
                  return (
                    "Error in conv2d: pad must be an integer when using, dimRoundingMode " +
                    o +
                    " but got pad " +
                    r +
                    "."
                  );
                });
            var h = "NHWC" === a ? c.shape[3] : c.shape[1];
            S(h === u.shape[2], function () {
              return (
                "Error in conv2d: depth of input (" +
                h +
                ") must match input depth for filter " +
                u.shape[2] +
                "."
              );
            }),
              S(Xr(n, i), function () {
                return (
                  "Error in conv2D: Either strides or dilations must be 1. Got strides " +
                  n +
                  " and dilations '" +
                  i +
                  "'"
                );
              });
            var d = Yr(a),
              p = zr(c.shape, u.shape, n, i, r, o, !1, d),
              f = [u, c],
              m = Mt.runKernelFunc(
                function (t, e) {
                  var n = t.conv2d(c, u, p);
                  return e([u, c]), n;
                },
                { x: c, filter: u },
                function (t, e) {
                  var o = e,
                    s = o[0],
                    u = o[1];
                  return (
                    S(Kr(i), function () {
                      return (
                        "Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '" +
                        i +
                        "'"
                      );
                    }),
                    {
                      x: function () {
                        return Vu(u.shape, t, s, n, r, a);
                      },
                      filter: function () {
                        return Wu(u, t, s.shape, n, r, a);
                      },
                    }
                  );
                },
                "Conv2D",
                p,
                f
              );
            return l ? m.as3D(m.shape[1], m.shape[2], m.shape[3]) : m;
          },
        }),
        zu = an({
          conv3d_: function (t, e, n, r, a, i) {
            void 0 === a && (a = "NDHWC"), void 0 === i && (i = [1, 1, 1]);
            var o = He(t, "x", "conv3d"),
              s = He(e, "filter", "conv3d"),
              u = o,
              c = !1;
            4 === o.rank &&
              ((c = !0),
              (u = o.as5D(1, o.shape[0], o.shape[1], o.shape[2], o.shape[3]))),
              S(5 === u.rank, function () {
                return (
                  "Error in conv3d: input must be rank 5, but got rank " +
                  u.rank +
                  "."
                );
              }),
              S(5 === s.rank, function () {
                return (
                  "Error in conv3d: filter must be rank 5, but got rank " +
                  s.rank +
                  "."
                );
              }),
              S(u.shape[4] === s.shape[3], function () {
                return (
                  "Error in conv3d: depth of input (" +
                  u.shape[4] +
                  ") must match input depth for filter " +
                  s.shape[3] +
                  "."
                );
              }),
              S(
                (function (t, e) {
                  return $u(t) || $u(e);
                })(n, i),
                function () {
                  return (
                    "Error in conv3D: Either strides or dilations must be 1. Got strides " +
                    n +
                    " and dilations '" +
                    i +
                    "'"
                  );
                }
              ),
              S("NDHWC" === a, function () {
                return (
                  "Error in conv3d: got dataFormat of " +
                  a +
                  " but only NDHWC is currently supported."
                );
              });
            var l = Wr(u.shape, s.shape, n, i, r),
              h = Mt.runKernelFunc(
                function (t, e) {
                  var n = t.conv3d(u, s, l);
                  return e([u, s]), n;
                },
                { x: u, $filter: s },
                function (t, e) {
                  S($u(i), function () {
                    return (
                      "Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '" +
                      i +
                      "'"
                    );
                  });
                  var a = e[0],
                    o = e[1];
                  return {
                    x: function () {
                      return Bu(a.shape, t, o, n, r);
                    },
                    $filter: function () {
                      return (function (t, e, n, r, a) {
                        var i = t;
                        4 === t.rank &&
                          (i = t.as5D(
                            1,
                            t.shape[0],
                            t.shape[1],
                            t.shape[2],
                            t.shape[3]
                          ));
                        var o = e;
                        4 === o.rank &&
                          (o = e.as5D(
                            1,
                            e.shape[0],
                            e.shape[1],
                            e.shape[2],
                            e.shape[3]
                          )),
                          S(5 === i.rank, function () {
                            return (
                              "Error in conv3dDerFilter: input must be rank 5, but got shape " +
                              i.shape +
                              "."
                            );
                          }),
                          S(5 === o.rank, function () {
                            return (
                              "Error in conv3dDerFilter: dy must be rank 5, but got shape " +
                              o.shape +
                              "."
                            );
                          }),
                          S(5 === n.length, function () {
                            return (
                              "Error in conv3dDerFilter: filterShape must be length 5, but got " +
                              n +
                              "."
                            );
                          }),
                          S(i.shape[4] === n[3], function () {
                            return (
                              "Error in conv3dDerFilter: depth of input " +
                              i.shape[4] +
                              ") must match input depth in filter (" +
                              n[3] +
                              "."
                            );
                          }),
                          S(o.shape[4] === n[4], function () {
                            return (
                              "Error in conv3dDerFilter: depth of dy (" +
                              o.shape[4] +
                              ") must match output depth for filter (" +
                              n[4] +
                              ")."
                            );
                          });
                        var s = Wr(i.shape, n, r, 1, a);
                        return Mt.runKernelFunc(
                          function (t) {
                            return t.conv3dDerFilter(i, o, s);
                          },
                          { x5D: i, dy5D: o }
                        );
                      })(a, t, o.shape, n, r);
                    },
                  };
                }
              );
            return c
              ? h.as4D(h.shape[1], h.shape[2], h.shape[3], h.shape[4])
              : h;
          },
        }),
        Wu = an({
          conv2dDerFilter_: function (t, e, n, r, a, i, o) {
            void 0 === i && (i = "NHWC");
            var s = t;
            3 === t.rank && (s = t.as4D(1, t.shape[0], t.shape[1], t.shape[2]));
            var u = e;
            3 === u.rank && (u = e.as4D(1, e.shape[0], e.shape[1], e.shape[2])),
              S(4 === s.rank, function () {
                return (
                  "Error in conv2dDerFilter: input must be rank 4, but got shape " +
                  s.shape +
                  "."
                );
              }),
              S(4 === u.rank, function () {
                return (
                  "Error in conv2dDerFilter: dy must be rank 4, but got shape " +
                  u.shape +
                  "."
                );
              }),
              S(4 === n.length, function () {
                return (
                  "Error in conv2dDerFilter: filterShape must be length 4, but got " +
                  n +
                  "."
                );
              });
            var c = "NHWC" === i ? s.shape[3] : s.shape[1],
              l = "NHWC" === i ? u.shape[3] : u.shape[1];
            S(c === n[2], function () {
              return (
                "Error in conv2dDerFilter: depth of input " +
                c +
                ") must match input depth in filter (" +
                n[2] +
                "."
              );
            }),
              S(l === n[3], function () {
                return (
                  "Error in conv2dDerFilter: depth of dy (" +
                  l +
                  ") must match output depth for filter (" +
                  n[3] +
                  ")."
                );
              }),
              null != o &&
                S(T(a), function () {
                  return (
                    "Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode " +
                    o +
                    " but got pad " +
                    a +
                    "."
                  );
                });
            var h = Yr(i),
              d = zr(s.shape, n, r, 1, a, o, !1, h);
            return Mt.runKernelFunc(
              function (t) {
                return t.conv2dDerFilter(s, u, d);
              },
              { x4D: s, dy4D: u }
            );
          },
        }),
        Vu = an({ conv2dDerInput_: ju }),
        Uu = an({
          depthwiseConv2d_: function (t, e, n, r, a, i, o) {
            void 0 === a && (a = "NHWC"), void 0 === i && (i = [1, 1]);
            var s = He(t, "x", "depthwiseConv2d"),
              u = He(e, "filter", "depthwiseConv2d"),
              c = s,
              l = !1;
            3 === s.rank &&
              ((l = !0), (c = s.as4D(1, s.shape[0], s.shape[1], s.shape[2]))),
              S(4 === c.rank, function () {
                return (
                  "Error in depthwiseConv2d: input must be rank 4, but got rank " +
                  c.rank +
                  "."
                );
              }),
              S(4 === u.rank, function () {
                return (
                  "Error in depthwiseConv2d: filter must be rank 4, but got rank " +
                  u.rank +
                  "."
                );
              }),
              S(c.shape[3] === u.shape[2], function () {
                return (
                  "Error in depthwiseConv2d: number of input channels (" +
                  c.shape[3] +
                  ") must match the inChannels dimension in filter " +
                  u.shape[2] +
                  "."
                );
              }),
              null == i && (i = [1, 1]),
              S(Xr(n, i), function () {
                return (
                  "Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides " +
                  n +
                  " and dilations '" +
                  i +
                  "'"
                );
              }),
              null != o &&
                S(T(r), function () {
                  return (
                    "Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode " +
                    o +
                    " but got pad " +
                    r +
                    "."
                  );
                });
            var h = zr(c.shape, u.shape, n, i, r, o, !0),
              d = [c, u],
              p = Mt.runKernelFunc(
                function (t, e) {
                  var n = t.depthwiseConv2D(c, u, h);
                  return e([c, u]), n;
                },
                { x: c, filter: u },
                function (t, e) {
                  S(Kr(i), function () {
                    return (
                      "Error in gradient of depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '" +
                      i +
                      "'"
                    );
                  });
                  var n = e[0],
                    r = e[1];
                  return {
                    x: function () {
                      return Gu(n.shape, t, r, h);
                    },
                    filter: function () {
                      return Hu(n, t, r.shape, h);
                    },
                  };
                },
                "DepthwiseConv2dNative",
                h,
                d
              );
            return l ? p.as3D(p.shape[1], p.shape[2], p.shape[3]) : p;
          },
        }),
        Gu = an({
          depthwiseConv2dDerInput_: function (t, e, n, r) {
            var a = e,
              i = !1;
            3 === e.rank &&
              ((i = !0), (a = e.as4D(1, e.shape[0], e.shape[1], e.shape[2])));
            var o = Mt.runKernelFunc(
              function (t) {
                return t.depthwiseConv2DDerInput(a, n, r);
              },
              { dy4D: a }
            );
            return i ? o.as3D(o.shape[1], o.shape[2], o.shape[3]) : o;
          },
        }),
        Hu = an({
          depthwiseConv2dDerFilter_: function (t, e, n, r) {
            var a = t;
            3 === t.rank && (a = t.as4D(1, t.shape[0], t.shape[1], t.shape[2]));
            var i = e;
            return (
              3 === i.rank &&
                (i = e.as4D(1, e.shape[0], e.shape[1], e.shape[2])),
              Mt.runKernelFunc(
                function (t) {
                  return t.depthwiseConv2DDerFilter(a, i, r);
                },
                { x4D: a, dy4D: i }
              )
            );
          },
        }),
        qu = an({
          separableConv2d_: function (t, e, n, r, a, i, o) {
            void 0 === i && (i = [1, 1]), void 0 === o && (o = "NHWC");
            var s = He(t, "x", "separableConv2d"),
              u = He(e, "depthwiseFilter", "separableConv2d"),
              c = He(n, "pointwiseFilter", "separableConv2d"),
              l = s,
              h = !1;
            if (
              (3 === s.rank &&
                ((h = !0), (l = s.as4D(1, s.shape[0], s.shape[1], s.shape[2]))),
              "NCHW" === o)
            )
              throw new Error(
                "separableConv2d currently does not support dataFormat NCHW; only NHWC is supported"
              );
            S(4 === l.rank, function () {
              return (
                "Error in separableConv2d: input must be rank 4, but got rank " +
                l.rank +
                "."
              );
            }),
              S(4 === u.rank, function () {
                return (
                  "Error in separableConv2d: depthwise filter must be rank 4, but got rank " +
                  u.rank +
                  "."
                );
              }),
              S(4 === c.rank, function () {
                return (
                  "Error in separableConv2d: pointwise filter must be rank 4, but got rank " +
                  u.rank +
                  "."
                );
              }),
              S(1 === c.shape[0], function () {
                return (
                  "Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got " +
                  c.shape[0] +
                  "."
                );
              }),
              S(1 === c.shape[1], function () {
                return (
                  "Error in separableConv2d: the second dimension of pointwise filter must be 1, but got " +
                  c.shape[1] +
                  "."
                );
              });
            var d = u.shape[2],
              p = u.shape[3];
            S(c.shape[2] === d * p, function () {
              return (
                "Error in separableConv2d: the third dimension of pointwise filter must be " +
                d * p +
                ", but got " +
                c.shape[2] +
                "."
              );
            });
            var f = Uu(l, u, r, a, o, i),
              m = Lu(f, c, 1, "valid", o);
            return h ? m.as3D(m.shape[1], m.shape[2], m.shape[3]) : m;
          },
        }),
        Ku = an({
          conv2dTranspose_: function (t, e, n, r, a, i) {
            return ju(
              n,
              He(t, "x", "conv2dTranspose"),
              He(e, "filter", "conv2dTranspose"),
              r,
              a,
              "NHWC",
              i
            );
          },
        }),
        Xu = an({
          conv3dTranspose_: function (t, e, n, r, a) {
            return Bu(
              n,
              He(t, "x", "conv3dTranspose"),
              He(e, "filter", "conv3dTranspose"),
              r,
              a
            );
          },
        }),
        Yu = an({
          matMul_: function (t, e, n, r) {
            var a;
            void 0 === n && (n = !1), void 0 === r && (r = !1);
            var i = He(t, "a", "matMul"),
              o = He(e, "b", "matMul");
            (a = Rt(i, o)), (i = a[0]), (o = a[1]);
            var s = n ? i.shape[i.rank - 2] : i.shape[i.rank - 1],
              u = r ? o.shape[o.rank - 1] : o.shape[o.rank - 2],
              c = n ? i.shape[i.rank - 1] : i.shape[i.rank - 2],
              l = r ? o.shape[o.rank - 2] : o.shape[o.rank - 1],
              h = i.shape.slice(0, -2),
              d = o.shape.slice(0, -2),
              p = R(h),
              f = R(d);
            S(i.rank >= 2 && o.rank >= 2 && i.rank === o.rank, function () {
              return (
                "Error in matMul: inputs must have the same rank of at least 2, got ranks " +
                i.rank +
                " and " +
                o.rank +
                "."
              );
            }),
              S(A(h, d), function () {
                return (
                  "Error in matMul: outer dimensions (" +
                  h +
                  ") and (" +
                  d +
                  ") of Tensors with shapes " +
                  i.shape +
                  " and " +
                  o.shape +
                  " must match."
                );
              }),
              S(s === u, function () {
                return (
                  "Error in matMul: inner shapes (" +
                  s +
                  ") and (" +
                  u +
                  ") of Tensors with shapes " +
                  i.shape +
                  " and " +
                  o.shape +
                  " and transposeA=" +
                  n +
                  " and transposeB=" +
                  r +
                  " must match."
                );
              });
            var m = i.shape.slice(0, -2).concat([c, l]),
              g = n ? i.as3D(p, s, c) : i.as3D(p, c, s),
              b = r ? o.as3D(f, l, u) : o.as3D(f, u, l),
              v = { transposeA: n, transposeB: r };
            return Mt.runKernelFunc(
              function (t, e) {
                var a = t.batchMatMul(g, b, n, r);
                return e([g, b]), a;
              },
              { a: g, b: b },
              function (t, e) {
                var a = e,
                  i = a[0],
                  o = a[1];
                return n || r
                  ? !n && r
                    ? {
                        a: function () {
                          return t.matMul(o, !1, !1);
                        },
                        b: function () {
                          return t.matMul(i, !0, !1);
                        },
                      }
                    : n && !r
                    ? {
                        a: function () {
                          return o.matMul(t, !1, !0);
                        },
                        b: function () {
                          return i.matMul(t, !1, !1);
                        },
                      }
                    : {
                        a: function () {
                          return o.matMul(t, !0, !0);
                        },
                        b: function () {
                          return t.matMul(i, !0, !0);
                        },
                      }
                  : {
                      a: function () {
                        return t.matMul(o, !1, !0);
                      },
                      b: function () {
                        return i.matMul(t, !0, !1);
                      },
                    };
              },
              "BatchMatMul",
              v
            ).reshape(m);
          },
        }),
        Ju = an({
          dot_: function (t, e) {
            var n = He(t, "t1", "dot"),
              r = He(e, "t2", "dot");
            S(
              !(
                (1 !== n.rank && 2 !== n.rank) ||
                (1 !== r.rank && 2 !== r.rank)
              ),
              function () {
                return (
                  "Error in dot: inputs must all be rank 1 or 2, but got ranks " +
                  n.rank +
                  " and " +
                  r.rank +
                  "."
                );
              }
            );
            var a = 1 === n.rank ? n.size : n.shape[1],
              i = 1 === r.rank ? r.size : r.shape[0];
            return (
              S(a === i, function () {
                return (
                  "Error in dot: inner dimensions of inputs must match, but got " +
                  a +
                  " and " +
                  i +
                  "."
                );
              }),
              1 === n.rank && 1 === r.rank
                ? n.as2D(1, -1).matMul(r.as2D(-1, 1)).asScalar()
                : 1 === n.rank && 2 === r.rank
                ? n.as2D(1, -1).matMul(r.as2D(r.shape[0], r.shape[1])).as1D()
                : 2 === n.rank && 1 === r.rank
                ? n.matMul(r.as2D(-1, 1)).as1D()
                : n.matMul(r.as2D(r.shape[0], r.shape[1]))
            );
          },
        }),
        Qu = an({
          outerProduct_: function (t, e) {
            var n = He(t, "v1", "outerProduct"),
              r = He(e, "v2", "outerProduct");
            return (
              S(1 === n.rank && 1 === r.rank, function () {
                return (
                  "Error in outerProduct: inputs must be rank 1, but got ranks " +
                  n.rank +
                  " and " +
                  r.rank +
                  "."
                );
              }),
              n.as2D(-1, 1).matMul(r.as2D(1, -1))
            );
          },
        }),
        Zu = an({
          reverse_: function (t, e) {
            var n = He(t, "x", "reverse");
            if (0 === n.rank) return n.clone();
            var r = $(e, n.shape);
            return Mt.runKernelFunc(
              function (t) {
                return t.reverse(n, r);
              },
              { $x: n },
              function (t) {
                return {
                  $x: function () {
                    return t.reverse(r);
                  },
                };
              }
            ).reshapeAs(n);
          },
        }),
        tc = an({
          reverse1d_: function (t) {
            var e = He(t, "x", "reverse");
            return (
              S(1 === e.rank, function () {
                return (
                  "Error in reverse1D: x must be rank 1 but got rank " +
                  e.rank +
                  "."
                );
              }),
              Zu(e, 0)
            );
          },
        }),
        ec = an({
          reverse2d_: function (t, e) {
            var n = He(t, "x", "reverse");
            return (
              S(2 === n.rank, function () {
                return (
                  "Error in reverse2D: x must be rank 2 but got rank " +
                  n.rank +
                  "."
                );
              }),
              Zu(n, e)
            );
          },
        }),
        nc = an({
          reverse3d_: function (t, e) {
            var n = He(t, "x", "reverse");
            return (
              S(3 === n.rank, function () {
                return (
                  "Error in reverse3D: x must be rank 3 but got rank " +
                  n.rank +
                  "."
                );
              }),
              Zu(n, e)
            );
          },
        }),
        rc = an({
          reverse4d_: function (t, e) {
            var n = He(t, "x", "reverse");
            return (
              S(4 === n.rank, function () {
                return (
                  "Error in reverse4D: x must be rank 4 but got rank " +
                  n.rank +
                  "."
                );
              }),
              Zu(n, e)
            );
          },
        });
      function ac(t, e, n, r, a, i) {
        var o = He(t, "x", "maxPool"),
          s = o,
          u = !1;
        3 === o.rank &&
          ((u = !0), (s = o.as4D(1, o.shape[0], o.shape[1], o.shape[2]))),
          null == r && (r = [1, 1]),
          S(4 === s.rank, function () {
            return (
              "Error in maxPool: input must be rank 4 but got rank " +
              s.rank +
              "."
            );
          }),
          S(Xr(n, r), function () {
            return (
              "Error in maxPool: Either strides or dilations must be 1. Got strides " +
              n +
              " and dilations '" +
              r +
              "'"
            );
          }),
          null != i &&
            S(T(a), function () {
              return (
                "Error in maxPool: pad must be an integer when using, dimRoundingMode " +
                i +
                " but got pad " +
                a +
                "."
              );
            });
        var c = Pr(s.shape, e, n, r, a, i);
        if (
          1 === c.filterWidth &&
          1 === c.filterHeight &&
          A(c.inShape, c.outShape)
        )
          return o.clone();
        var l = [s],
          h = Mt.runKernelFunc(
            function (t, e) {
              var n = t.maxPool(s, c);
              return e([s, n]), n;
            },
            { x: s },
            function (t, i) {
              var o = i[0],
                s = i[1];
              return {
                x: function () {
                  return (function (t, e, n, r, a, i, o, s) {
                    var u = He(t, "dy", "maxPoolBackprop"),
                      c = He(e, "input", "maxPoolBackprop"),
                      l = He(n, "output", "maxPoolBackprop");
                    S(c.rank === u.rank, function () {
                      return (
                        "Rank of input (" +
                        c.rank +
                        ") does not match rank of dy (" +
                        u.rank +
                        ")"
                      );
                    }),
                      null == i && (i = [1, 1]),
                      S(Xr(a, i), function () {
                        return (
                          "Error in maxPoolBackProp: Either strides or dilations must be 1. Got strides " +
                          a +
                          " and dilations '" +
                          i +
                          "'"
                        );
                      }),
                      S(4 === u.rank, function () {
                        return (
                          "Error in maxPoolBackprop: dy must be rank 4 but got rank " +
                          u.rank +
                          "."
                        );
                      }),
                      S(4 === c.rank, function () {
                        return (
                          "Error in maxPoolBackprop: input must be rank 4 but got rank " +
                          c.rank +
                          "."
                        );
                      });
                    var h = Pr(c.shape, r, a, i, o, s);
                    return Mt.runKernelFunc(
                      function (t) {
                        return t.maxPoolBackprop(u, c, l, h);
                      },
                      { $dy: u, $input: c }
                    );
                  })(t, o, s, e, n, r, a);
                },
              };
            },
            "MaxPool",
            c,
            l
          );
        return u ? h.as3D(h.shape[1], h.shape[2], h.shape[3]) : h;
      }
      function ic(t, e, n, r, a, i) {
        var o = He(t, "x", "avgPool", "float32");
        null == r && (r = [1, 1]),
          S(Xr(n, r), function () {
            return (
              "Error in avgPool: Either strides or dilations must be 1. Got strides " +
              n +
              " and dilations '" +
              r +
              "'"
            );
          });
        var s = o,
          u = !1;
        3 === o.rank &&
          ((u = !0), (s = o.as4D(1, o.shape[0], o.shape[1], o.shape[2]))),
          S(4 === s.rank, function () {
            return (
              "Error in avgPool: x must be rank 4 but got rank " + s.rank + "."
            );
          }),
          null != i &&
            S(T(a), function () {
              return (
                "Error in avgPool: pad must be an integer when using, dimRoundingMode " +
                i +
                " but got pad " +
                a +
                "."
              );
            });
        var c = Pr(s.shape, e, n, r, a, i);
        if (
          1 === c.filterWidth &&
          1 === c.filterHeight &&
          A(c.inShape, c.outShape)
        )
          return o.clone();
        var l = Mt.runKernelFunc(
          function (t) {
            return t.avgPool(s, c);
          },
          { x: s },
          function (t) {
            return {
              x: function () {
                return (function (t, e, n, r, a, i) {
                  var o = He(t, "dy", "avgPoolBackprop"),
                    s = He(e, "input", "avgPoolBackprop");
                  S(s.rank === o.rank, function () {
                    return (
                      "Rank of input (" +
                      s.rank +
                      ") does not match rank of dy (" +
                      o.rank +
                      ")"
                    );
                  }),
                    null == a && (a = [1, 1]),
                    S(Xr(r, a), function () {
                      return (
                        "Error in avgPoolBackprop: Either strides or dilations must be 1. Got strides " +
                        r +
                        " and dilations '" +
                        a +
                        "'"
                      );
                    });
                  var u = s,
                    c = o,
                    l = !1;
                  3 === s.rank &&
                    ((l = !0),
                    (u = s.as4D(1, s.shape[0], s.shape[1], s.shape[2])),
                    (c = o.as4D(1, o.shape[0], o.shape[1], o.shape[2]))),
                    S(4 === c.rank, function () {
                      return (
                        "Error in avgPoolBackprop: dy must be rank 4 but got rank " +
                        c.rank +
                        "."
                      );
                    }),
                    S(4 === u.rank, function () {
                      return (
                        "Error in avgPoolBackprop: input must be rank 4 but got rank " +
                        u.rank +
                        "."
                      );
                    });
                  var h = Pr(u.shape, n, r, a, i),
                    d = Mt.runKernelFunc(
                      function (t) {
                        return t.avgPoolBackprop(c, u, h);
                      },
                      { dy4D: c, input4D: u }
                    );
                  return l ? d.as3D(d.shape[1], d.shape[2], d.shape[3]) : d;
                })(t, s, e, n, r, a);
              },
            };
          },
          "AvgPool",
          c
        );
        return (
          (l = l.cast(o.dtype)),
          u ? l.as3D(l.shape[1], l.shape[2], l.shape[3]) : l
        );
      }
      var oc = an({
          maxPool_: function (t, e, n, r, a) {
            return ac(t, e, n, 1, r, a);
          },
        }),
        sc = an({
          avgPool_: function (t, e, n, r, a) {
            return ic(t, e, n, 1, r, a);
          },
        }),
        uc = an({
          pool_: function (t, e, n, r, a, i) {
            null == a && (a = [1, 1]),
              null == i && (i = 1),
              0 === r && (r = "valid");
            var o = He(t, "x", "maxPool"),
              s = o,
              u = !1;
            3 === o.rank &&
              ((u = !0), (s = o.as4D(1, o.shape[0], o.shape[1], o.shape[2]))),
              S(Xr(i, a), function () {
                return (
                  "Error in pool: Either strides or dilations must be 1. Got strides " +
                  i +
                  " and dilations '" +
                  a +
                  "'"
                );
              });
            var c,
              l = Pr(s.shape, e, i, a, r),
              h = [l.dilationHeight, l.dilationWidth];
            c =
              "same" === r
                ? (function (t, e) {
                    var n = t
                        .map(function (t, n) {
                          return t + (t - 1) * (e[n] - 1);
                        })
                        .map(function (t) {
                          return t - 1;
                        }),
                      r = n.map(function (t) {
                        return Math.floor(t / 2);
                      }),
                      a = n.map(function (t, e) {
                        return t - r[e];
                      });
                    return n.map(function (t, e) {
                      return [r[e], a[e]];
                    });
                  })([l.filterHeight, l.filterWidth], h)
                : [
                    [0, 0],
                    [0, 0],
                  ];
            var d = 1 === h[0] && 1 === h[1],
              p = (function (t, e, n) {
                var r = n.map(function (t) {
                    return t[0];
                  }),
                  a = n.map(function (t) {
                    return t[1];
                  }),
                  i = t.concat(r, a),
                  o = e.map(function (t, e) {
                    return (t - (i[e] % t)) % t;
                  }),
                  s = a.map(function (t, e) {
                    return t + o[e];
                  });
                return [
                  e.map(function (t, e) {
                    return [r[e], s[e]];
                  }),
                  e.map(function (t, e) {
                    return [0, o[e]];
                  }),
                ];
              })([l.inHeight, l.inWidth], h, c),
              f = p[0],
              m = p[1],
              g = d ? r : "valid",
              b = d ? s : sr(s, h, f),
              v = ("avg" === n
                ? function () {
                    return ic(b, e, i, 1, g);
                  }
                : function () {
                    return ac(b, e, i, 1, g);
                  })(),
              y = d ? v : zn(v, h, m);
            return u ? y.as3D(y.shape[1], y.shape[2], y.shape[3]) : y;
          },
        }),
        cc = an({
          maxPool3d_: function (t, e, n, r, a, i, o) {
            void 0 === i && (i = "NDHWC");
            var s = He(t, "x", "maxPool3d"),
              u = s,
              c = !1;
            4 === s.rank &&
              ((c = !0),
              (u = s.as5D(1, s.shape[0], s.shape[1], s.shape[2], s.shape[3]))),
              null == o && (o = [1, 1, 1]),
              S(5 === u.rank, function () {
                return (
                  "Error in maxPool3d: x must be rank 5 but got rank " +
                  u.rank +
                  "."
                );
              }),
              S("NDHWC" === i, function () {
                return (
                  "Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of " +
                  i
                );
              }),
              S(Xr(n, o), function () {
                return (
                  "Error in maxPool3d: Either strides or dilations must be 1. Got strides " +
                  n +
                  " and dilations '" +
                  o +
                  "'"
                );
              }),
              null != a &&
                S(T(r), function () {
                  return (
                    "Error in maxPool3d: pad must be an integer when using, dimRoundingMode " +
                    a +
                    " but got pad " +
                    r +
                    "."
                  );
                });
            var l = Lr(u.shape, e, n, o, r, a, i),
              h = Mt.runKernelFunc(
                function (t, e) {
                  var n = t.maxPool3d(u, l);
                  return e([u, n]), n;
                },
                { x: u },
                function (t, i) {
                  var s = i[0],
                    u = i[1];
                  return {
                    x: function () {
                      return (function (t, e, n, r, a, i, o, s) {
                        var u = He(t, "dy", "maxPool3dBackprop"),
                          c = He(e, "input", "maxPool3dBackprop"),
                          l = He(n, "output", "maxPool3dBackprop"),
                          h = u,
                          d = c,
                          p = l,
                          f = !1;
                        4 === c.rank &&
                          ((f = !0),
                          (h = u.as5D(
                            1,
                            u.shape[0],
                            u.shape[1],
                            u.shape[2],
                            u.shape[3]
                          )),
                          (d = c.as5D(
                            1,
                            c.shape[0],
                            c.shape[1],
                            c.shape[2],
                            c.shape[3]
                          )),
                          (p = l.as5D(
                            1,
                            l.shape[0],
                            l.shape[1],
                            l.shape[2],
                            l.shape[3]
                          ))),
                          S(5 === h.rank, function () {
                            return (
                              "Error in maxPool3dBackprop: dy must be rank 5 but got rank " +
                              h.rank +
                              "."
                            );
                          }),
                          S(5 === d.rank, function () {
                            return (
                              "Error in maxPool3dBackprop: input must be rank 5 but got rank " +
                              d.rank +
                              "."
                            );
                          }),
                          S(5 === p.rank, function () {
                            return (
                              "Error in maxPool3dBackprop: output must be rank 5 but got rank " +
                              p.rank +
                              "."
                            );
                          }),
                          null == i && (i = [1, 1, 1]),
                          S(Xr(a, i), function () {
                            return (
                              "Error in maxPool3dBackprop: Either strides or dilations must be 1. Got strides " +
                              a +
                              " and dilations '" +
                              i +
                              "'"
                            );
                          }),
                          null != s &&
                            S(T(o), function () {
                              return (
                                "Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode " +
                                s +
                                " but got pad " +
                                o +
                                "."
                              );
                            });
                        var m = Lr(d.shape, r, a, i, o, s),
                          g = Mt.runKernelFunc(
                            function (t) {
                              return t.maxPool3dBackprop(h, d, p, m);
                            },
                            { dy5D: h, input5D: d }
                          );
                        return f
                          ? g.as4D(
                              g.shape[1],
                              g.shape[2],
                              g.shape[3],
                              g.shape[4]
                            )
                          : g;
                      })(t, s, u, e, n, o, r, a);
                    },
                  };
                }
              );
            return c
              ? h.as4D(h.shape[1], h.shape[2], h.shape[3], h.shape[4])
              : h;
          },
        }),
        lc = an({
          avgPool3d_: function (t, e, n, r, a, i, o) {
            void 0 === i && (i = "NDHWC");
            var s = He(t, "x", "avgPool3d", "float32"),
              u = s,
              c = !1;
            4 === s.rank &&
              ((c = !0),
              (u = s.as5D(1, s.shape[0], s.shape[1], s.shape[2], s.shape[3]))),
              null == o && (o = [1, 1, 1]),
              S(5 === u.rank, function () {
                return (
                  "Error in avgPool3d: x must be rank 5 but got rank " +
                  u.rank +
                  "."
                );
              }),
              S("NDHWC" === i, function () {
                return (
                  "Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of " +
                  i
                );
              }),
              S(Xr(n, o), function () {
                return (
                  "Error in avgPool3d: Either strides or dilations must be 1. Got strides " +
                  n +
                  " and dilations '" +
                  o +
                  "'"
                );
              }),
              null != a &&
                S(T(r), function () {
                  return (
                    "Error in avgPool3d: pad must be an integer when using, dimRoundingMode " +
                    a +
                    " but got pad " +
                    r +
                    "."
                  );
                });
            var l = Lr(u.shape, e, n, o, r, a, i),
              h = Mt.runKernelFunc(
                function (t) {
                  return t.avgPool3d(u, l);
                },
                { x: u },
                function (t) {
                  return {
                    x: function () {
                      return (function (t, e, n, r, a, i, o) {
                        var s = He(t, "dy", "avgPool3dBackprop"),
                          u = He(e, "input", "avgPool3dBackprop"),
                          c = s,
                          l = u,
                          h = !1;
                        4 === u.rank &&
                          ((h = !0),
                          (c = s.as5D(
                            1,
                            s.shape[0],
                            s.shape[1],
                            s.shape[2],
                            s.shape[3]
                          )),
                          (l = u.as5D(
                            1,
                            u.shape[0],
                            u.shape[1],
                            u.shape[2],
                            u.shape[3]
                          ))),
                          S(5 === c.rank, function () {
                            return (
                              "Error in avgPool3dBackprop: dy must be rank 5 but got rank " +
                              c.rank +
                              "."
                            );
                          }),
                          S(5 === l.rank, function () {
                            return (
                              "Error in avgPool3dBackprop: input must be rank 5 but got rank " +
                              l.rank +
                              "."
                            );
                          }),
                          null == a && (a = [1, 1, 1]),
                          S(Xr(r, a), function () {
                            return (
                              "Error in avgPool3dBackprop: Either strides or dilations must be 1. Got strides " +
                              r +
                              " and dilations '" +
                              a +
                              "'"
                            );
                          }),
                          null != o &&
                            S(T(i), function () {
                              return (
                                "Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode " +
                                o +
                                " but got pad " +
                                i +
                                "."
                              );
                            });
                        var d = Lr(l.shape, n, r, a, i, o),
                          p = Mt.runKernelFunc(
                            function (t) {
                              return t.avgPool3dBackprop(c, l, d);
                            },
                            { dy5D: c, input5D: l }
                          );
                        return h
                          ? p.as4D(
                              p.shape[1],
                              p.shape[2],
                              p.shape[3],
                              p.shape[4]
                            )
                          : p;
                      })(t, u, e, n, o, r, a);
                    },
                  };
                }
              );
            return (
              (h = h.cast(u.dtype)),
              c ? h.as4D(h.shape[1], h.shape[2], h.shape[3], h.shape[4]) : h
            );
          },
        }),
        hc = an({
          slice_: function (t, e, n) {
            var r,
              a,
              i = He(t, "x", "slice");
            if (0 === i.rank) throw new Error("Slicing scalar is not possible");
            (r =
              "number" == typeof e
                ? [e].concat(new Array(i.rank - 1).fill(0))
                : e.length < i.rank
                ? e.concat(new Array(i.rank - e.length).fill(0))
                : e.slice()).forEach(function (t) {
              S(-1 !== t, function () {
                return "slice() does not support negative begin indexing.";
              });
            }),
              (a = (a =
                null == n
                  ? new Array(i.rank).fill(-1)
                  : "number" == typeof n
                  ? [n].concat(new Array(i.rank - 1).fill(-1))
                  : n.length < i.rank
                  ? n.concat(new Array(i.rank - n.length).fill(-1))
                  : n).map(function (t, e) {
                return t >= 0
                  ? t
                  : (S(-1 === t, function () {
                      return (
                        "Negative size values should be exactly -1 but got " +
                        t +
                        " for the slice() size at index " +
                        e +
                        "."
                      );
                    }),
                    i.shape[e] - r[e]);
              })),
              Or(i, r, a);
            var o = i.shape,
              s = { begin: r, size: a };
            return Mt.runKernelFunc(
              function (t) {
                return t.slice(i, r, a);
              },
              { x: i },
              function (t) {
                for (var e = [], n = 0; n < t.rank; n++)
                  e.push([r[n], o[n] - r[n] - a[n]]);
                return {
                  x: function () {
                    return t.pad(e);
                  },
                };
              },
              "Slice",
              s
            );
          },
        }),
        dc = an({
          slice1d_: function (t, e, n) {
            var r = He(t, "x", "slice1d");
            return (
              S(1 === r.rank, function () {
                return (
                  "slice1d expects a rank-1 tensor, but got a rank-" +
                  r.rank +
                  " tensor"
                );
              }),
              hc(r, [e], [n])
            );
          },
        }),
        pc = an({
          slice2d_: function (t, e, n) {
            var r = He(t, "x", "slice2d");
            return (
              S(2 === r.rank, function () {
                return (
                  "slice2d expects a rank-2 tensor, but got a rank-" +
                  r.rank +
                  " tensor"
                );
              }),
              hc(r, e, n)
            );
          },
        }),
        fc = an({
          slice3d_: function (t, e, n) {
            var r = He(t, "x", "slice3d");
            return (
              S(3 === r.rank, function () {
                return (
                  "slice3d expects a rank-3 tensor, but got a rank-" +
                  r.rank +
                  " tensor"
                );
              }),
              hc(r, e, n)
            );
          },
        }),
        mc = an({
          slice4d_: function (t, e, n) {
            var r = He(t, "x", "slice4d");
            return (
              S(4 === r.rank, function () {
                return (
                  "slice4d expects a rank-4 tensor, but got a rank-" +
                  r.rank +
                  " tensor"
                );
              }),
              hc(r, e, n)
            );
          },
        });
      function gc(t, e, n, r, a) {
        return (
          e.rank < n.rank && (e = e.reshape(Je(e.shape, r))),
          t.rank < n.rank && (t = t.reshape(Je(t.shape, r))),
          {
            x: function () {
              var r = t.mul(n.equal(e).cast(t.dtype));
              return null == a ? r : r.transpose(a);
            },
          }
        );
      }
      var bc = an({
          all_: function (t, e, n) {
            void 0 === e && (e = null), void 0 === n && (n = !1);
            var r = He(t, "x", "all", "bool"),
              a = $(e, r.shape),
              i = a,
              o = Ze(i, r.rank);
            null != o && ((r = r.transpose(o)), (i = en(i.length, r.rank)));
            var s = Mt.runKernelFunc(
              function (t) {
                return t.all(r, i);
              },
              { $x: r }
            );
            if (n) {
              var u = Je(s.shape, a);
              return s.reshape(u);
            }
            return s;
          },
        }),
        vc = an({
          any_: function (t, e, n) {
            void 0 === e && (e = null), void 0 === n && (n = !1);
            var r = He(t, "x", "any", "bool"),
              a = $(e, r.shape),
              i = a,
              o = Ze(i, r.rank);
            null != o && ((r = r.transpose(o)), (i = en(i.length, r.rank)));
            var s = Mt.runKernelFunc(
              function (t) {
                return t.any(r, i);
              },
              { $x: r }
            );
            if (n) {
              var u = Je(s.shape, a);
              return s.reshape(u);
            }
            return s;
          },
        }),
        yc = an({
          argMax_: function (t, e) {
            void 0 === e && (e = 0);
            var n = He(t, "x", "argMax");
            null == e && (e = 0);
            var r = $(e, n.shape),
              a = Ze(r, n.rank);
            null != a && ((n = n.transpose(a)), (r = en(r.length, n.rank)));
            var i = { axis: r[0] },
              o = [n];
            return Mt.runKernelFunc(
              function (t, e) {
                var a = t.argMax(n, r[0]);
                return e([n]), a;
              },
              { x: n },
              function (t, e) {
                var n = e[0];
                return {
                  x: function () {
                    return wn(n);
                  },
                };
              },
              "ArgMax",
              i,
              o
            );
          },
        }),
        xc = an({
          argMin_: function (t, e) {
            void 0 === e && (e = 0);
            var n = He(t, "x", "argMin");
            null == e && (e = 0);
            var r = $(e, n.shape),
              a = Ze(r, n.rank);
            return (
              null != a && ((n = n.transpose(a)), (r = en(r.length, n.rank))),
              Mt.runKernelFunc(
                function (t, e) {
                  var a = t.argMin(n, r[0]);
                  return e([n]), a;
                },
                { $x: n },
                function (t, e) {
                  var n = e[0];
                  return {
                    $x: function () {
                      return wn(n);
                    },
                  };
                }
              )
            );
          },
        }),
        wc = an({
          logSumExp_: function (t, e, n) {
            void 0 === e && (e = null), void 0 === n && (n = !1);
            var r = He(t, "x", "logSumExp"),
              a = $(e, r.shape),
              i = r.max(a, !0),
              o = r.sub(i).exp().sum(a).log(),
              s = i.reshape(o.shape).add(o);
            if (n) {
              var u = Je(s.shape, a);
              return s.reshape(u);
            }
            return s;
          },
        }),
        Cc = an({
          max_: function (t, e, n) {
            void 0 === e && (e = null), void 0 === n && (n = !1);
            var r = He(t, "x", "max"),
              a = r,
              i = $(e, r.shape),
              o = i,
              s = Ze(o, r.rank);
            null != s && ((r = r.transpose(s)), (o = en(o.length, r.rank)));
            var u = [r],
              c = Mt.runKernelFunc(
                function (t, e) {
                  var n = t.max(r, o);
                  return e([a, n]), n;
                },
                { x: r },
                function (t, e) {
                  return gc(t, e[1], e[0], i, s);
                },
                "Max",
                { axes: o },
                u,
                [!0]
              );
            if (n) {
              var l = Je(c.shape, i);
              c = c.reshape(l);
            }
            return c;
          },
        }),
        Oc = an({
          mean_: function (t, e, n) {
            void 0 === e && (e = null), void 0 === n && (n = !1);
            var r = He(t, "x", "mean"),
              a = $(e, r.shape),
              i = R(Ye(r.shape, a)[1]);
            return Ar(function (t) {
              var r = hn(i);
              return {
                value: (r.dtype === t.dtype ? t : t.cast(r.dtype))
                  .div(r)
                  .sum(e, n),
                gradFunc: function (e) {
                  var n = t.shape.slice();
                  return (
                    a.forEach(function (t) {
                      n[t] = 1;
                    }),
                    e.reshape(n).mul(gn(t.shape, "float32")).div(i)
                  );
                },
              };
            })(r);
          },
        }),
        Ec = an({
          min_: function (t, e, n) {
            void 0 === e && (e = null), void 0 === n && (n = !1);
            var r = He(t, "x", "min"),
              a = r,
              i = $(e, r.shape),
              o = i,
              s = Ze(o, r.rank);
            null != s && ((r = r.transpose(s)), (o = en(o.length, r.rank)));
            var u = [r],
              c = Mt.runKernelFunc(
                function (t, e) {
                  var n = t.min(r, o);
                  return e([a, n]), n;
                },
                { x: r },
                function (t, e) {
                  return gc(t, e[1], e[0], i, s);
                },
                "Min",
                { axes: o },
                u,
                [!0]
              );
            if (n) {
              var l = Je(c.shape, i);
              c = c.reshape(l);
            }
            return c;
          },
        }),
        Sc = an({
          moments_: function (t, e, n) {
            void 0 === e && (e = null), void 0 === n && (n = !1);
            var r = $(e, (t = He(t, "x", "moments")).shape),
              a = t.mean(r, n),
              i = a.shape;
            n || (i = Je(a.shape, r));
            var o = t.toFloat().sub(a.reshape(i)).square();
            return { mean: a, variance: o.mean(r, n) };
          },
        }),
        Ic = an({
          sum_: function (t, e, n) {
            void 0 === e && (e = null), void 0 === n && (n = !1);
            var r = He(t, "x", "sum");
            "bool" === r.dtype && (r = r.toInt());
            var a = $(e, r.shape);
            return Ar(function (t) {
              var e = Ze(a, t.rank),
                r = a,
                i = t;
              null != e && ((i = t.transpose(e)), (r = en(r.length, t.rank)));
              var o = function (e) {
                  var n = t.shape.slice();
                  return (
                    a.forEach(function (t) {
                      n[t] = 1;
                    }),
                    e.reshape(n).mul(gn(t.shape, "float32"))
                  );
                },
                s = { axes: r },
                u = Mt.runKernelFunc(
                  function (t) {
                    return t.sum(i, r);
                  },
                  { x: i },
                  function (t) {
                    return {
                      x: function () {
                        return o(t);
                      },
                    };
                  },
                  "Sum",
                  s
                );
              if (n) {
                var c = Je(u.shape, a);
                u = u.reshape(c);
              }
              return { value: u, gradFunc: o };
            })(r);
          },
        }),
        kc = an({
          prod_: function (t, e, n) {
            void 0 === e && (e = null), void 0 === n && (n = !1);
            var r = He(t, "x", "prod");
            "bool" === r.dtype && (r = r.toInt());
            var a = $(e, r.shape),
              i = Ze(a, r.rank),
              o = a,
              s = r;
            null != i && ((s = r.transpose(i)), (o = en(o.length, r.rank)));
            var u = Mt.runKernelFunc(
              function (t) {
                return t.prod(s, o);
              },
              { permutedX: s }
            );
            if (n) {
              var c = Je(u.shape, a);
              u = u.reshape(c);
            }
            return u;
          },
        }),
        Nc = an({
          elu_: function (t) {
            var e = He(t, "x", "elu");
            return Mt.runKernelFunc(
              function (t, n) {
                var r = t.elu(e);
                return n([r]), r;
              },
              { $x: e },
              function (t, e) {
                var n = e[0];
                return {
                  $x: function () {
                    return Mt.runKernelFunc(
                      function (e) {
                        return e.eluDer(t, n);
                      },
                      { dy: t, y: n }
                    );
                  },
                };
              }
            );
          },
        }),
        Rc = an({
          leakyRelu_: function (t, e) {
            void 0 === e && (e = 0.2);
            var n = He(t, "x", "leakyRelu");
            return su(hn(e).mul(n), n);
          },
        }),
        Ac = an({
          prelu_: function (t, e) {
            var n = He(t, "x", "prelu"),
              r = He(e, "alpha", "prelu");
            return Mt.runKernelFunc(
              function (t, e) {
                var a = t.prelu(n, r);
                return e([n, r]), a;
              },
              { x: n, alpha: r },
              function (t, e) {
                var n = e[0],
                  r = e[1],
                  a = n.greater(0);
                return {
                  x: function () {
                    return Js(a, t, t.mul(r));
                  },
                  alpha: function () {
                    var e = Js(a, wn(t), t.mul(n)),
                      i = $r(r.shape, t.shape);
                    return i.length > 0 && (e = e.sum(i)), e.reshape(r.shape);
                  },
                };
              },
              "Prelu"
            );
          },
        }),
        Tc = an({
          relu_: function (t) {
            var e = He(t, "x", "relu");
            return "bool" === e.dtype
              ? e.toInt()
              : Mt.runKernelFunc(
                  function (t, n) {
                    var r = t.relu(e);
                    return n([e]), r;
                  },
                  { x: e },
                  function (t, e) {
                    var n = e[0];
                    return {
                      x: function () {
                        return t.mulStrict(n.step().toFloat());
                      },
                    };
                  },
                  "Relu"
                );
          },
        }),
        _c = an({
          relu6_: function (t) {
            var e = He(t, "x", "relu6");
            return "bool" === e.dtype
              ? e.toInt()
              : Mt.runKernelFunc(
                  function (t, n) {
                    var r = t.relu6(e);
                    return n([e]), r;
                  },
                  { x: e },
                  function (t, e) {
                    var n = e[0],
                      r = n.lessEqual(6).mul(n.step());
                    return {
                      x: function () {
                        return t.mulStrict(r.toFloat());
                      },
                    };
                  },
                  "Relu6"
                );
          },
        }),
        Dc = an({
          selu_: function (t) {
            var e = He(t, "x", "selu");
            return Mt.runKernelFunc(
              function (t, n) {
                var r = t.selu(e);
                return n([e]), r;
              },
              { $x: e },
              function (t, e) {
                var n = e[0];
                return {
                  $x: function () {
                    var e = n.greater(hn(0)),
                      r = hn(No),
                      a = hn(Ro),
                      i = t.mul(a),
                      o = t.mul(r).mul(n.toFloat().exp());
                    return Js(e, i, o);
                  },
                };
              }
            );
          },
        }),
        Fc = an({
          transpose_: function (t, e) {
            var n = He(t, "x", "transpose");
            if (
              (null == e &&
                (e = n.shape
                  .map(function (t, e) {
                    return e;
                  })
                  .reverse()),
              S(n.rank === e.length, function () {
                return (
                  "Error in transpose: rank of input " +
                  n.rank +
                  " must match length of perm " +
                  e +
                  "."
                );
              }),
              e.forEach(function (t) {
                S(t >= 0 && t < n.rank, function () {
                  return (
                    "All entries in 'perm' must be between 0 and " +
                    (n.rank - 1) +
                    " but got " +
                    e
                  );
                });
              }),
              n.rank <= 1)
            )
              return n.clone();
            var r = { perm: e };
            return Mt.runKernelFunc(
              function (t) {
                return t.transpose(n, e);
              },
              { x: n },
              function (t) {
                var n = tn(e);
                return {
                  x: function () {
                    return t.transpose(n);
                  },
                };
              },
              "Transpose",
              r
            );
          },
        }),
        Mc = an({
          localResponseNormalization_: function (t, e, n, r, a) {
            void 0 === e && (e = 5),
              void 0 === n && (n = 1),
              void 0 === r && (r = 1),
              void 0 === a && (a = 0.5);
            var i = He(t, "x", "localResponseNormalization");
            S(4 === i.rank || 3 === i.rank, function () {
              return (
                "Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank " +
                i.rank +
                "."
              );
            }),
              S(T(e), function () {
                return (
                  "Error in localResponseNormalization: depthRadius must be an integer but got depthRadius " +
                  e +
                  "."
                );
              });
            var o = i,
              s = !1;
            3 === i.rank &&
              ((s = !0), (o = i.as4D(1, i.shape[0], i.shape[1], i.shape[2])));
            var u = Mt.runKernelFunc(
              function (t, i) {
                var s = t.localResponseNormalization4D(o, e, n, r, a);
                return i([o, s]), s;
              },
              { x4D: o },
              function (t, i) {
                var o = i[0],
                  s = i[1];
                return {
                  x4D: function () {
                    return Mt.runKernelFunc(function (i) {
                      return i.LRNGrad(t, o, s, e, n, r, a);
                    }, {});
                  },
                };
              }
            );
            return s ? u.as3D(u.shape[1], u.shape[2], u.shape[3]) : u;
          },
        }),
        jc = an({
          norm_: function (t, e, n, r) {
            void 0 === e && (e = "euclidean"),
              void 0 === n && (n = null),
              void 0 === r && (r = !1);
            var a = (function t(e, n, r) {
                if ((void 0 === r && (r = null), 0 === e.rank)) return e.abs();
                if (1 !== e.rank && null === r) return t(e.reshape([-1]), n, r);
                if (
                  1 === e.rank ||
                  "number" == typeof r ||
                  (Array.isArray(r) && 1 === r.length)
                ) {
                  if (1 === n) return e.abs().sum(r);
                  if (n === 1 / 0) return e.abs().max(r);
                  if (n === -1 / 0) return e.abs().min(r);
                  if ("euclidean" === n || 2 === n)
                    return e.abs().pow(hn(2, "int32")).sum(r).sqrt();
                  throw new Error("Error in norm: invalid ord value: " + n);
                }
                if (Array.isArray(r) && 2 === r.length) {
                  if (1 === n)
                    return e
                      .abs()
                      .sum(r[0])
                      .max(r[1] - 1);
                  if (n === 1 / 0) return e.abs().sum(r[1]).max(r[0]);
                  if (n === -1 / 0) return e.abs().sum(r[1]).min(r[0]);
                  if ("fro" === n || "euclidean" === n)
                    return e.square().sum(r).sqrt();
                  throw new Error("Error in norm: invalid ord value: " + n);
                }
                throw new Error("Error in norm: invalid axis: " + r);
              })((t = He(t, "x", "norm")), e, n),
              i = a.shape;
            if (r) {
              var o = $(n, t.shape);
              i = Je(a.shape, o);
            }
            return a.reshape(i);
          },
        }),
        $c = an({
          basicLSTMCell_: function (t, e, n, r, a, i) {
            var o = He(t, "forgetBias", "basicLSTMCell"),
              s = He(e, "lstmKernel", "basicLSTMCell"),
              u = He(n, "lstmBias", "basicLSTMCell"),
              c = He(r, "data", "basicLSTMCell"),
              l = He(a, "c", "basicLSTMCell"),
              h = He(i, "h", "basicLSTMCell"),
              d = c.concat(h, 1).matMul(s).add(u),
              p = d.shape[0],
              f = d.shape[1] / 4,
              m = [p, f],
              g = d.slice([0, 0], m),
              b = d.slice([0, f], m),
              v = d.slice([0, 2 * f], m),
              y = d.slice([0, 3 * f], m),
              x = g
                .sigmoid()
                .mulStrict(b.tanh())
                .addStrict(l.mulStrict(o.add(v).sigmoid())),
              w = x.tanh().mulStrict(y.sigmoid());
            return [x, w];
          },
        }),
        Bc = an({
          multiRNNCell_: function (t, e, n, r) {
            for (
              var a = He(e, "data", "multiRNNCell"),
                i = qe(n, "c", "multiRNNCell"),
                o = qe(r, "h", "multiRNNCell"),
                s = a,
                u = [],
                c = 0;
              c < t.length;
              c++
            ) {
              var l = t[c](s, i[c], o[c]);
              u.push(l[0]), u.push(l[1]), (s = l[1]);
            }
            var h = [],
              d = [];
            for (c = 0; c < u.length; c += 2) h.push(u[c]), d.push(u[c + 1]);
            return [h, d];
          },
        }),
        Pc = an({
          movingAverage_: function (t, e, n, r, a) {
            void 0 === a && (a = !0);
            var i = He(t, "v", "movingAverage"),
              o = He(e, "x", "movingAverage"),
              s = He(n, "decay", "movingAverage");
            At(i, o),
              S(A(i.shape, o.shape), function () {
                return "Shape mismatch in v and x";
              });
            var u = hn(1),
              c = u.sub(s),
              l = o.sub(i).mul(c);
            if (a) {
              S(null != r, function () {
                return "When using zeroDebias: true, step is required.";
              });
              var h = He(r, "step", "movingAverage");
              l = l.div(u.sub(mu(s, h)));
            }
            return i.add(l);
          },
        }),
        Lc = an({
          stridedSlice_: function (t, e, n, r, a, i, o, s, u) {
            if (
              (void 0 === a && (a = 0),
              void 0 === i && (i = 0),
              void 0 === o && (o = 0),
              void 0 === s && (s = 0),
              void 0 === u && (u = 0),
              null == r && (r = new Array(e.length)),
              0 !== o)
            )
              throw new Error("ellipsis mask is not yet supported");
            var c = He(t, "x", "stridedSlice"),
              l = Er(s),
              h = c.shape.slice();
            l.forEach(function (t) {
              (e[t] = 0), (n[t] = 1), h.splice(t, 0, 1);
            }),
              (c = c.reshape(h));
            for (var d = 0; d < c.rank; d++)
              (e[d] = Ir(a, e, r, c.shape, d)),
                (n[d] = kr(i, n, r, c.shape, d)),
                (r[d] = r[d] || 1);
            var p = Er(u);
            p.forEach(function (t) {
              (n[t] = e[t] + 1), (r[t] = 1);
            });
            var f = Sr(e, n, r),
              m = f.filter(function (t, e) {
                return -1 === p.indexOf(e);
              });
            return r.every(function (t) {
              return 1 === t;
            })
              ? hc(c, e, f).reshape(m)
              : Mt.runKernelFunc(
                  function (t) {
                    return t.stridedSlice(c, e, n, r);
                  },
                  { $x: c }
                ).reshape(m);
          },
        }),
        zc = an({
          topk_: function (t, e, n) {
            void 0 === e && (e = 1), void 0 === n && (n = !0);
            var r = He(t, "x", "topk");
            if (0 === r.rank)
              throw new Error(
                "topk() expects the input to be of rank 1 or higher"
              );
            var a = r.shape[r.shape.length - 1];
            if (e > a)
              throw new Error(
                "'k' passed to topk() must be <= the last dimension (" +
                  a +
                  ") but got " +
                  e
              );
            var i = Mt.runKernelFunc(
              function (t) {
                return t.topk(r, e, n);
              },
              { $x: r }
            );
            return { values: i[0], indices: i[1] };
          },
        }),
        Wc = an({
          scatterND_: function (t, e, n) {
            var r = He(t, "indices", "scatterND", "int32"),
              a = He(e, "updates", "scatterND");
            return (
              wr(a, r, n),
              Mt.runKernelFunc(
                function (t) {
                  return t.scatterND(r, a, n);
                },
                { indices: r, updates: a },
                null,
                "ScatterNd",
                { shape: n }
              )
            );
          },
        }),
        Vc = an({
          fft_: function (t) {
            S("complex64" === t.dtype, function () {
              return (
                "The dtype for tf.spectral.fft() must be complex64 but got " +
                t.dtype +
                "."
              );
            });
            var e = t.shape[t.shape.length - 1],
              n = t.size / e,
              r = t.as2D(n, e);
            return Mt.runKernelFunc(
              function (t) {
                return t.fft(r);
              },
              { input: t }
            ).reshape(t.shape);
          },
        }),
        Uc = an({
          ifft_: function (t) {
            S("complex64" === t.dtype, function () {
              return (
                "The dtype for tf.spectral.ifft() must be complex64 but got " +
                t.dtype +
                "."
              );
            });
            var e = t.shape[t.shape.length - 1],
              n = t.size / e,
              r = t.as2D(n, e);
            return Mt.runKernelFunc(
              function (t) {
                return t.ifft(r);
              },
              { input: t }
            ).reshape(t.shape);
          },
        }),
        Gc = an({
          rfft_: function (t, e) {
            S("float32" === t.dtype, function () {
              return (
                "The dtype for rfft() must be real value but got " + t.dtype
              );
            });
            var n,
              r = t.shape[t.shape.length - 1],
              a = t.size / r;
            if (null != e && e < r) {
              var i = t.shape.map(function (t) {
                  return 0;
                }),
                o = t.shape.map(function (t) {
                  return t;
                });
              (o[t.shape.length - 1] = e), (n = t.slice(i, o)), (r = e);
            } else if (null != e && e > r) {
              var s = t.shape.map(function (t) {
                return t;
              });
              (s[t.shape.length - 1] = e - r),
                (n = t.concat(bn(s), t.shape.length - 1)),
                (r = e);
            } else n = t;
            var u = n.zerosLike(),
              c = on(n, u).as2D(a, r),
              l = Vc(c),
              h = Math.floor(r / 2) + 1,
              d = sn(l),
              p = un(l),
              f = d.split([h, r - h], d.shape.length - 1),
              m = p.split([h, r - h], p.shape.length - 1),
              g = n.shape.slice();
            return (g[n.shape.length - 1] = h), on(f[0], m[0]).reshape(g);
          },
        }),
        Hc = an({
          irfft_: function (t) {
            var e = t.shape[t.shape.length - 1],
              n = t.size / e;
            if (e <= 2) {
              var r = t.as2D(n, e),
                a = Uc(r);
              return sn(a);
            }
            var i = [n, 2 * (e - 1)],
              o = sn(t).as2D(n, e),
              s = un(t).as2D(n, e),
              u = o.slice([0, 1], [n, e - 2]).reverse(1),
              c = s
                .slice([0, 1], [n, e - 2])
                .reverse(1)
                .mul(hn(-1)),
              l = o.concat(u, 1),
              h = s.concat(c, 1);
            return (r = on(l, h).as2D(i[0], i[1])), (a = Uc(r)), sn(a);
          },
        }),
        qc = Object.freeze({ fft: Vc, ifft: Uc, rfft: Gc, irfft: Hc }),
        Kc = an({
          sparseToDense_: function (t, e, n, r) {
            void 0 === r && (r = 0);
            var a = He(t, "sparseIndices", "sparseToDense", "int32"),
              i = He(e, "sparseValues", "sparseToDense"),
              o = He(r, "defaultValue", "sparseToDense", i.dtype);
            return (
              (function (t, e, n, r) {
                if ("int32" !== t.dtype)
                  throw new Error(
                    "tf.sparseToDense() expects the indices to be int32 type, but the dtype was " +
                      t.dtype +
                      "."
                  );
                if (t.rank > 2)
                  throw new Error(
                    "sparseIndices should be a scalar, vector, or matrix, but got shape " +
                      t.shape +
                      "."
                  );
                var a = t.rank > 0 ? t.shape[0] : 1,
                  i = t.rank > 1 ? t.shape[1] : 1;
                if (n.length !== i)
                  throw new Error(
                    "outputShape has incorrect number of elements:, " +
                      n.length +
                      ", should be: " +
                      i +
                      "."
                  );
                var o = e.size;
                if (0 !== e.rank && (1 !== e.rank || o !== a))
                  throw new Error(
                    "sparseValues has incorrect shape " +
                      e.shape +
                      ", should be [] or [" +
                      a +
                      "]"
                  );
                if (e.dtype !== r.dtype)
                  throw new Error(
                    "sparseValues.dtype must match defaultValues.dtype"
                  );
              })(a, i, n, o),
              Mt.runKernelFunc(
                function (t) {
                  return t.sparseToDense(a, i, n, o);
                },
                { $sparseIndices: a, $sparseValues: i, $defaultValue: o }
              )
            );
          },
        }),
        Xc = an({
          gatherND_: function (t, e) {
            var n = He(e, "indices", "gatherND", "int32"),
              r = He(t, "x", "gatherND");
            return Mt.runKernelFunc(
              function (t) {
                return t.gatherND(r, n);
              },
              { x: r, indices: n },
              null,
              "GatherNd"
            );
          },
        }),
        Yc = an({
          diag_: function (t) {
            var e = He(t, "x", "diag").flatten(),
              n = t.shape.concat(t.shape);
            return Mt.runKernelFunc(
              function (t) {
                return t.diag(e);
              },
              { $x: e }
            ).reshape(n);
          },
        }),
        Jc = an({
          dropout_: function (t, e, n, r) {
            var a = He(t, "x", "dropout");
            if (
              (S("float32" === a.dtype, function () {
                return (
                  "x has to be a floating point tensor since it's going to be scaled, but got a " +
                  a.dtype +
                  " tensor instead."
                );
              }),
              S(e >= 0 && e < 1, function () {
                return (
                  "rate must be a float in the range [0, 1), but got " + e + "."
                );
              }),
              0 === e)
            )
              return t instanceof yt ? a.clone() : a;
            var i = (function (t, e) {
                if (null == e) return t.shape.slice();
                if (A(t.shape, e)) return e;
                if (t.shape.length === e.length) {
                  for (var n = [], r = 0; r < t.shape.length; r++)
                    null == e[r] && null != t.shape[r]
                      ? n.push(t.shape[r])
                      : n.push(e[r]);
                  return n;
                }
                return e;
              })(a, n),
              o = 1 - e,
              s = ir(i, 0, 1, "float32", r).add(o).floor().div(o);
            return a.mul(s);
          },
        });
      function Qc(t, e, n) {
        for (var r = 1 - (t % 2), a = new Float32Array(t), i = 0; i < t; ++i) {
          var o = (2 * Math.PI * i) / (t + r - 1);
          a[i] = e - n * Math.cos(o);
        }
        return dn(a, "float32");
      }
      var Zc,
        tl = an({
          hannWindow_: function (t) {
            return Qc(t, 0.5, 0.5);
          },
        }),
        el = an({
          hammingWindow_: function (t) {
            return Qc(t, 0.54, 0.46);
          },
        }),
        nl = an({
          frame_: function (t, e, n, r, a) {
            void 0 === r && (r = !1), void 0 === a && (a = 0);
            for (var i = 0, o = []; i + e <= t.size; )
              o.push(hc(t, i, e)), (i += n);
            if (r)
              for (; i < t.size; ) {
                var s = i + e - t.size,
                  u = Cn([hc(t, i, e - s), vn([s], a)]);
                o.push(u), (i += n);
              }
            return 0 === o.length ? pn([], [0, e]) : Cn(o).as2D(o.length, e);
          },
        }),
        rl = an({
          stft_: function (t, e, n, r, a) {
            var i;
            void 0 === a && (a = tl),
              null == r &&
                ((i = e),
                (r = Math.floor(
                  Math.pow(2, Math.ceil(Math.log(i) / Math.log(2)))
                )));
            for (
              var o = nl(t, e, n), s = pu(o, a(e)), u = [], c = 0;
              c < o.shape[0];
              c++
            )
              u.push(Gc(s.slice([c, 0], [1, e]), r));
            return Cn(u);
          },
        }),
        al = Object.freeze({
          hannWindow: tl,
          hammingWindow: el,
          frame: nl,
          stft: rl,
        });
      !(function (t) {
        (t[(t.NONE = 0)] = "NONE"),
          (t[(t.MEAN = 1)] = "MEAN"),
          (t[(t.SUM = 2)] = "SUM"),
          (t[(t.SUM_BY_NONZERO_WEIGHTS = 3)] = "SUM_BY_NONZERO_WEIGHTS");
      })(Zc || (Zc = {}));
      var il = an({
          absoluteDifference_: function (t, e, n, r) {
            void 0 === r && (r = Zc.SUM_BY_NONZERO_WEIGHTS);
            var a = He(t, "labels", "absoluteDifference"),
              i = He(e, "predictions", "absoluteDifference"),
              o = null;
            null != n && (o = He(n, "weights", "absoluteDifference")),
              I(a.shape, i.shape, "Error in absoluteDifference: ");
            var s = a.sub(i).abs();
            return ol(s, o, r);
          },
        }),
        ol = an({
          computeWeightedLoss_: function (t, e, n) {
            void 0 === n && (n = Zc.SUM_BY_NONZERO_WEIGHTS);
            var r = He(t, "losses", "computeWeightedLoss"),
              a = null;
            null != e && (a = He(e, "weights", "computeWeightedLoss"));
            var i = null == a ? r : r.mul(a);
            if (n === Zc.NONE) return i;
            if (n === Zc.SUM) return i.sum();
            if (n === Zc.MEAN) {
              if (null == a) return i.mean();
              var o = r.size / a.size,
                s = i.sum().div(a.sum());
              return o > 1 ? s.div(hn(o)) : s;
            }
            if (n === Zc.SUM_BY_NONZERO_WEIGHTS) {
              if (null == a) return i.sum().div(hn(r.size));
              var u = a.mul(gn(r.shape)).notEqual(hn(0)).sum().toFloat();
              return i.sum().div(u);
            }
            throw Error("Unknown reduction: " + n);
          },
        }),
        sl = an({
          cosineDistance_: function (t, e, n, r, a) {
            void 0 === a && (a = Zc.SUM_BY_NONZERO_WEIGHTS);
            var i = He(t, "labels", "cosineDistance"),
              o = He(e, "predictions", "cosineDistance"),
              s = null;
            null != r && (s = He(r, "weights", "cosineDistance")),
              I(i.shape, o.shape, "Error in cosineDistance: ");
            var u = hn(1).sub(i.mul(o).sum(n, !0));
            return ol(u, s, a);
          },
        }),
        ul = an({
          hingeLoss_: function (t, e, n, r) {
            void 0 === r && (r = Zc.SUM_BY_NONZERO_WEIGHTS);
            var a = He(t, "labels", "hingeLoss"),
              i = He(e, "predictions", "hingeLoss"),
              o = null;
            null != n && (o = He(n, "weights", "hingeLoss")),
              I(a.shape, i.shape, "Error in hingeLoss: ");
            var s = hn(1);
            a = hn(2).mul(a).sub(s);
            var u = s.sub(a.mul(i)).relu();
            return ol(u, o, r);
          },
        }),
        cl = an({
          huberLoss_: function (t, e, n, r, a) {
            void 0 === r && (r = 1),
              void 0 === a && (a = Zc.SUM_BY_NONZERO_WEIGHTS);
            var i = He(t, "labels", "huberLoss"),
              o = He(e, "predictions", "huberLoss"),
              s = null;
            null != n && (s = He(n, "weights", "huberLoss")),
              I(i.shape, o.shape, "Error in huberLoss: ");
            var u = hn(r),
              c = o.sub(i).abs(),
              l = cu(c, u),
              h = c.sub(l),
              d = hn(0.5).mul(l.square()).add(u.mul(h));
            return ol(d, s, a);
          },
        }),
        ll = an({
          logLoss_: function (t, e, n, r, a) {
            void 0 === r && (r = 1e-7),
              void 0 === a && (a = Zc.SUM_BY_NONZERO_WEIGHTS);
            var i = He(t, "labels", "logLoss"),
              o = He(e, "predictions", "logLoss"),
              s = null;
            null != n && (s = He(n, "weights", "logLoss")),
              I(i.shape, o.shape, "Error in logLoss: ");
            var u = hn(1),
              c = hn(r),
              l = i
                .mul(o.add(c).log())
                .neg()
                .sub(u.sub(i).mul(u.sub(o).add(c).log()));
            return ol(l, s, a);
          },
        }),
        hl = an({
          meanSquaredError_: function (t, e, n, r) {
            void 0 === r && (r = Zc.SUM_BY_NONZERO_WEIGHTS);
            var a = He(t, "labels", "meanSquaredError"),
              i = He(e, "predictions", "meanSquaredError"),
              o = null;
            null != n && (o = He(n, "weights", "meanSquaredError")),
              I(a.shape, i.shape, "Error in meanSquaredError: ");
            var s = a.squaredDifference(i);
            return ol(s, o, r);
          },
        }),
        dl = an({
          sigmoidCrossEntropy_: function (t, e, n, r, a) {
            void 0 === r && (r = 0),
              void 0 === a && (a = Zc.SUM_BY_NONZERO_WEIGHTS);
            var i = He(t, "multiClassLabels", "sigmoidCrossEntropy"),
              o = He(e, "logits", "sigmoidCrossEntropy"),
              s = null;
            if (
              (null != n && (s = He(n, "weights", "sigmoidCrossEntropy")),
              I(i.shape, o.shape, "Error in sigmoidCrossEntropy: "),
              r > 0)
            ) {
              var u = hn(r),
                c = hn(1),
                l = hn(0.5);
              i = i.mul(c.sub(u)).add(l.mul(u));
            }
            var h = (function (t, e) {
              var n = He(t, "labels", "sigmoidCrossEntropyWithLogits"),
                r = He(e, "logits", "sigmoidCrossEntropyWithLogits");
              I(n.shape, r.shape, "Error in sigmoidCrossEntropyWithLogits: ");
              var a = r.relu(),
                i = r.mul(n),
                o = r.abs().neg().exp().log1p();
              return a.sub(i).add(o);
            })(i, o);
            return ol(h, s, a);
          },
        }),
        pl = an({
          softmaxCrossEntropy_: function (t, e, n, r, a) {
            void 0 === r && (r = 0),
              void 0 === a && (a = Zc.SUM_BY_NONZERO_WEIGHTS);
            var i = He(t, "onehotLabels", "softmaxCrossEntropy"),
              o = He(e, "logits", "softmaxCrossEntropy"),
              s = null;
            if (
              (null != n && (s = He(n, "weights", "softmaxCrossEntropy")),
              I(i.shape, o.shape, "Error in softmaxCrossEntropy: "),
              r > 0)
            ) {
              var u = hn(r),
                c = hn(1),
                l = hn(i.shape[1]);
              i = i.mul(c.sub(u)).add(u.div(l));
            }
            var h = (function (t, e, n) {
              if (
                (void 0 === n && (n = -1),
                -1 === n && (n = e.rank - 1),
                n !== e.rank - 1)
              )
                throw Error(
                  "Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank " +
                    e.rank +
                    " and dim was " +
                    n
                );
              return Ar(function (t, e, r) {
                var a = e.logSumExp([n], !0),
                  i = e.toFloat().sub(a);
                return (
                  r([t, i]),
                  {
                    value: i.mul(t).neg().sum([n]),
                    gradFunc: function (t, e) {
                      var r = e[0],
                        a = e[1],
                        i = Je(t.shape, [n]);
                      return [
                        t.reshape(i).mul(r.toFloat().sub(a.exp())),
                        t.reshape(i).mul(a.exp().sub(r.toFloat())),
                      ];
                    },
                  }
                );
              })(t, e);
            })(i, o);
            return ol(h, s, a);
          },
        }),
        fl = Object.freeze({
          get Reduction() {
            return Zc;
          },
          absoluteDifference: il,
          computeWeightedLoss: ol,
          cosineDistance: sl,
          hingeLoss: ul,
          huberLoss: cl,
          logLoss: ll,
          meanSquaredError: hl,
          sigmoidCrossEntropy: dl,
          softmaxCrossEntropy: pl,
        });
      function ml(t, e) {
        return (
          void 0 === e && (e = !1),
          Mt.tidy(function () {
            if (2 !== t.shape.length)
              throw new Error(
                "qr2d() requires a 2D Tensor, but got a " +
                  t.shape.length +
                  "D Tensor."
              );
            for (
              var n = t.shape[0],
                r = t.shape[1],
                a = Kn(n),
                i = t.clone(),
                o = pn([[1]], [1, 1]),
                s = o.clone(),
                u = n >= r ? r : n,
                c = function (t) {
                  var e,
                    u = i,
                    c = s,
                    l = a;
                  (e = Mt.tidy(function () {
                    var e = i.slice([t, t], [n - t, 1]),
                      u = e.norm(),
                      c = i.slice([t, t], [1, 1]),
                      l = pn([[-1]]).where(c.greater(0), pn([[1]])),
                      h = c.sub(l.mul(u)),
                      d = e.div(h);
                    s =
                      1 === d.shape[0]
                        ? o.clone()
                        : o.concat(
                            d.slice([1, 0], [d.shape[0] - 1, d.shape[1]]),
                            0
                          );
                    var p = l.matMul(h).div(u).neg(),
                      f = i.slice([t, 0], [n - t, r]),
                      m = p.mul(s);
                    if (0 === t) i = f.sub(m.matMul(s.transpose().matMul(f)));
                    else {
                      var g = f.sub(m.matMul(s.transpose().matMul(f)));
                      i = i.slice([0, 0], [t, r]).concat(g, 0);
                    }
                    var b = a.slice([0, t], [n, a.shape[1] - t]);
                    if (0 === t) a = b.sub(b.matMul(s).matMul(m.transpose()));
                    else {
                      var v = b.sub(b.matMul(s).matMul(m.transpose()));
                      a = a.slice([0, 0], [n, t]).concat(v, 1);
                    }
                    return [s, i, a];
                  })),
                    (s = e[0]),
                    (i = e[1]),
                    (a = e[2]),
                    We([u, c, l]);
                },
                l = 0;
              l < u;
              ++l
            )
              c(l);
            return (
              !e &&
                n > r &&
                ((a = a.slice([0, 0], [n, r])), (i = i.slice([0, 0], [r, r]))),
              [a, i]
            );
          })
        );
      }
      var gl = an({
          bandPart_: function (t, e, n) {
            if (e % 1 != 0)
              throw new Error(
                "bandPart(): numLower must be an integer, got " + e + "."
              );
            if (n % 1 != 0)
              throw new Error(
                "bandPart(): numUpper must be an integer, got " + n + "."
              );
            var r = He(t, "a", "bandPart");
            if (r.rank < 2)
              throw new Error(
                "bandPart(): Rank must be at least 2, got " + r.rank + "."
              );
            var a = r.shape,
              i = r.shape.slice(-2),
              o = i[0],
              s = i[1];
            if (!(e <= o))
              throw new Error(
                "bandPart(): numLower (" +
                  e +
                  ") must not be greater than the number of rows (" +
                  o +
                  ")."
              );
            if (!(n <= s))
              throw new Error(
                "bandPart(): numUpper (" +
                  n +
                  ") must not be greater than the number of columns (" +
                  s +
                  ")."
              );
            e < 0 && (e = o), n < 0 && (n = s);
            var u = yn(0, o, 1, "int32").reshape([-1, 1]),
              c = yn(0, s, 1, "int32"),
              l = vu(u, c),
              h = qs(
                l.lessEqual(hn(+e, "int32")),
                l.greaterEqual(hn(-n, "int32"))
              ),
              d = bn([o, s], r.dtype);
            return cr(
              dr(r.reshape([-1, o, s])).map(function (t) {
                return Js(h, t, d);
              })
            ).reshape(a);
          },
        }),
        bl = an({
          gramSchmidt_: function (t) {
            var e;
            if (Array.isArray(t)) {
              (e = !1),
                S(null != t && t.length > 0, function () {
                  return "Gram-Schmidt process: input must not be null, undefined, or empty";
                });
              for (
                var n = t[0].shape[0],
                  r = function (e) {
                    S(t[e].shape[0] === n, function () {
                      return (
                        "Gram-Schmidt: Non-unique lengths found in the input vectors: (" +
                        t[e].shape[0] +
                        " vs. " +
                        n +
                        ")"
                      );
                    });
                  },
                  a = 1;
                a < t.length;
                ++a
              )
                r(a);
            } else
              (e = !0),
                (t = kn(t, t.shape[0], 0).map(function (t) {
                  return ur(t, [0]);
                }));
            S(t.length <= t[0].shape[0], function () {
              return (
                "Gram-Schmidt: Number of vectors (" +
                t.length +
                ") exceeds number of dimensions (" +
                t[0].shape[0] +
                ")."
              );
            });
            var i = [],
              o = t,
              s = function (t) {
                i.push(
                  Mt.tidy(function () {
                    var e = o[t];
                    if (t > 0)
                      for (var n = 0; n < t; ++n) {
                        var r = Ic(i[n].mulStrict(e)).mul(i[n]);
                        e = e.sub(r);
                      }
                    return e.div(jc(e, "euclidean"));
                  })
                );
              };
            for (a = 0; a < t.length; ++a) s(a);
            return e ? cr(i, 0) : i;
          },
        }),
        vl = an({
          qr_: function (t, e) {
            if ((void 0 === e && (e = !1), t.rank < 2))
              throw new Error(
                "qr() requires input tensor to have a rank >= 2, but got rank " +
                  t.rank
              );
            if (2 === t.rank) return ml(t, e);
            var n = t.shape
                .slice(0, t.shape.length - 2)
                .reduce(function (t, e) {
                  return t * e;
                }),
              r = dr(
                t.reshape([
                  n,
                  t.shape[t.shape.length - 2],
                  t.shape[t.shape.length - 1],
                ]),
                0
              ),
              a = [],
              i = [];
            return (
              r.forEach(function (t) {
                var n = ml(t, e),
                  r = n[0],
                  o = n[1];
                a.push(r), i.push(o);
              }),
              [cr(a, 0).reshape(t.shape), cr(i, 0).reshape(t.shape)]
            );
          },
        }),
        yl = Object.freeze({ bandPart: gl, gramSchmidt: bl, qr: vl });
      function xl(t, e, n, r, a, i) {
        null == r && (r = 0.5),
          null == a && (a = Number.NEGATIVE_INFINITY),
          null == i && (i = 0);
        var o = t.shape[0];
        return (
          (n = Math.min(n, o)),
          S(0 <= r && r <= 1, function () {
            return "iouThreshold must be in [0, 1], but was '" + r + "'";
          }),
          S(2 === t.rank, function () {
            return (
              "boxes must be a 2D tensor, but was of rank '" + t.rank + "'"
            );
          }),
          S(4 === t.shape[1], function () {
            return (
              "boxes must have 4 columns, but 2nd dimension was " + t.shape[1]
            );
          }),
          S(1 === e.rank, function () {
            return "scores must be a 1D tensor";
          }),
          S(e.shape[0] === o, function () {
            return (
              "scores has incompatible shape with boxes. Expected " +
              o +
              ", but was " +
              e.shape[0]
            );
          }),
          S(0 <= i && i <= 1, function () {
            return "softNmsSigma must be in [0, 1], but was '" + i + "'";
          }),
          {
            maxOutputSize: n,
            iouThreshold: r,
            scoreThreshold: a,
            softNmsSigma: i,
          }
        );
      }
      var wl = an({
          resizeBilinear_: function (t, e, n) {
            void 0 === n && (n = !1);
            var r = He(t, "images", "resizeBilinear");
            S(3 === r.rank || 4 === r.rank, function () {
              return (
                "Error in resizeBilinear: x must be rank 3 or 4, but got rank " +
                r.rank +
                "."
              );
            }),
              S(2 === e.length, function () {
                return (
                  "Error in resizeBilinear: new shape must 2D, but got shape " +
                  e +
                  "."
                );
              });
            var a = r,
              i = !1;
            3 === r.rank &&
              ((i = !0), (a = r.as4D(1, r.shape[0], r.shape[1], r.shape[2])));
            var o = e[0],
              s = e[1],
              u = Mt.runKernelFunc(
                function (t, e) {
                  return e([a]), t.resizeBilinear(a, o, s, n);
                },
                { x: a },
                function (t, e) {
                  return {
                    x: function () {
                      return Mt.runKernelFunc(function (r) {
                        return r.resizeBilinearBackprop(t, e[0], n);
                      }, {});
                    },
                  };
                },
                "ResizeBilinear",
                { alignCorners: n, newHeight: o, newWidth: s }
              );
            return i ? u.as3D(u.shape[1], u.shape[2], u.shape[3]) : u;
          },
        }),
        Cl = an({
          resizeNearestNeighbor_: function (t, e, n) {
            void 0 === n && (n = !1);
            var r = He(t, "images", "resizeNearestNeighbor");
            S(3 === r.rank || 4 === r.rank, function () {
              return (
                "Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank " +
                r.rank +
                "."
              );
            }),
              S(2 === e.length, function () {
                return (
                  "Error in resizeNearestNeighbor: new shape must 2D, but got shape " +
                  e +
                  "."
                );
              }),
              S("float32" === r.dtype || "int32" === r.dtype, function () {
                return "`images` must have `int32` or `float32` as dtype";
              });
            var a = r,
              i = !1;
            3 === r.rank &&
              ((i = !0), (a = r.as4D(1, r.shape[0], r.shape[1], r.shape[2])));
            var o = e[0],
              s = e[1],
              u = Mt.runKernelFunc(
                function (t, e) {
                  return e([a]), t.resizeNearestNeighbor(a, o, s, n);
                },
                { batchImages: a },
                function (t, e) {
                  return {
                    batchImages: function () {
                      return Mt.runKernelFunc(function (r) {
                        return r.resizeNearestNeighborBackprop(t, e[0], n);
                      }, {});
                    },
                  };
                }
              );
            return i ? u.as3D(u.shape[1], u.shape[2], u.shape[3]) : u;
          },
        }),
        Ol = an({
          nonMaxSuppression_: function (t, e, n, r, a) {
            void 0 === r && (r = 0.5),
              void 0 === a && (a = Number.NEGATIVE_INFINITY);
            var i = He(t, "boxes", "nonMaxSuppression"),
              o = He(e, "scores", "nonMaxSuppression"),
              s = xl(i, o, n, r, a);
            (n = s.maxOutputSize), (r = s.iouThreshold), (a = s.scoreThreshold);
            var u = { maxOutputSize: n, iouThreshold: r, scoreThreshold: a };
            return Mt.runKernelFunc(
              function (t) {
                return t.nonMaxSuppression(i, o, n, r, a);
              },
              { boxes: i, scores: o },
              null,
              "NonMaxSuppressionV3",
              u
            );
          },
        }),
        El = an({
          nonMaxSuppressionWithScore_: function (t, e, n, r, a, i) {
            void 0 === r && (r = 0.5),
              void 0 === a && (a = Number.NEGATIVE_INFINITY),
              void 0 === i && (i = 0);
            var o = He(t, "boxes", "nonMaxSuppression"),
              s = He(e, "scores", "nonMaxSuppression"),
              u = xl(o, s, n, r, a, i),
              c = {
                maxOutputSize: (n = u.maxOutputSize),
                iouThreshold: (r = u.iouThreshold),
                scoreThreshold: (a = u.scoreThreshold),
                softNmsSigma: (i = u.softNmsSigma),
              },
              l = Mt.runKernel(
                "NonMaxSuppressionV5",
                { boxes: o, scores: s },
                c
              );
            return { selectedIndices: l[0], selectedScores: l[1] };
          },
        }),
        Sl = an({
          cropAndResize_: function (t, e, n, r, a, i) {
            var o = He(t, "image", "cropAndResize"),
              s = He(e, "boxes", "cropAndResize", "float32"),
              u = He(n, "boxInd", "cropAndResize", "int32");
            (a = a || "bilinear"), (i = i || 0);
            var c = s.shape[0];
            return (
              S(4 === o.rank, function () {
                return (
                  "Error in cropAndResize: image must be rank 4,but got rank " +
                  o.rank +
                  "."
                );
              }),
              S(2 === s.rank && 4 === s.shape[1], function () {
                return (
                  "Error in cropAndResize: boxes must be have size [" +
                  c +
                  ",4] but had shape " +
                  s.shape +
                  "."
                );
              }),
              S(1 === u.rank && u.shape[0] === c, function () {
                return (
                  "Error in cropAndResize: boxInd must be have size [" +
                  c +
                  "] but had shape " +
                  s.shape +
                  "."
                );
              }),
              S(2 === r.length, function () {
                return (
                  "Error in cropAndResize: cropSize must be of length 2, but got length " +
                  r.length +
                  "."
                );
              }),
              S(r[0] >= 1 && r[1] >= 1, function () {
                return "cropSize must be atleast [1,1], but was " + r;
              }),
              S("bilinear" === a || "nearest" === a, function () {
                return "method must be bilinear or nearest, but was " + a;
              }),
              Mt.runKernelFunc(
                function (t, e) {
                  return t.cropAndResize(o, s, u, r, a, i);
                },
                { images: o, boxes: s, boxInd: u },
                null,
                "CropAndResize",
                { method: a, extrapolationValue: i, cropSize: r }
              )
            );
          },
        }),
        Il = Object.freeze({
          resizeBilinear: wl,
          resizeNearestNeighbor: Cl,
          nonMaxSuppression: Ol,
          nonMaxSuppressionAsync: function (t, e, n, r, a) {
            return (
              void 0 === r && (r = 0.5),
              void 0 === a && (a = Number.NEGATIVE_INFINITY),
              u(this, void 0, void 0, function () {
                var i, o, s, u, l, h, d;
                return c(this, function (c) {
                  switch (c.label) {
                    case 0:
                      return (
                        (i = He(t, "boxes", "nonMaxSuppressionAsync")),
                        (o = He(e, "scores", "nonMaxSuppressionAsync")),
                        (s = xl(i, o, n, r, a)),
                        (n = s.maxOutputSize),
                        (r = s.iouThreshold),
                        (a = s.scoreThreshold),
                        [4, Promise.all([i.data(), o.data()])]
                      );
                    case 1:
                      return (
                        (u = c.sent()),
                        (l = u[0]),
                        (h = u[1]),
                        (d = oa(l, h, n, r, a)),
                        i !== t && i.dispose(),
                        o !== e && o.dispose(),
                        [2, d]
                      );
                  }
                });
              })
            );
          },
          nonMaxSuppressionWithScore: El,
          nonMaxSuppressionWithScoreAsync: function (t, e, n, r, a, i) {
            return (
              void 0 === r && (r = 0.5),
              void 0 === a && (a = Number.NEGATIVE_INFINITY),
              void 0 === i && (i = 0),
              u(this, void 0, void 0, function () {
                var o, s, u, l, h, d, p;
                return c(this, function (c) {
                  switch (c.label) {
                    case 0:
                      return (
                        (o = He(t, "boxes", "nonMaxSuppressionAsync")),
                        (s = He(e, "scores", "nonMaxSuppressionAsync")),
                        (u = xl(o, s, n, r, a, i)),
                        (n = u.maxOutputSize),
                        (r = u.iouThreshold),
                        (a = u.scoreThreshold),
                        (i = u.softNmsSigma),
                        [4, Promise.all([o.data(), s.data()])]
                      );
                    case 1:
                      return (
                        (l = c.sent()),
                        (h = l[0]),
                        (d = l[1]),
                        (p = sa(h, d, n, r, a, i)),
                        o !== t && o.dispose(),
                        s !== e && s.dispose(),
                        [2, p]
                      );
                  }
                });
              })
            );
          },
          cropAndResize: Sl,
        }),
        kl = function (t, e) {
          return !(t > 0) || "linear" === e;
        },
        Nl = function (t, e, n) {
          if (null == n || "linear" === n) return t;
          if ("relu" === n) return t.mul(e.step());
          throw new Error(
            "Gradient for activation " + n + " has not been implemented yet."
          );
        },
        Rl = function (t, e) {
          var n = e,
            r = $r(t.shape, e.shape);
          return r.length > 0 && (n = n.sum(r)), n.reshape(t.shape);
        },
        Al = function (t, e, n) {
          if ("linear" === e) return t;
          if ("relu" === e) return Tc(t);
          if ("elu" === e) return Nc(t);
          if ("relu6" === e) return _c(t);
          if ("prelu" === e) return Ac(t, n);
          throw new Error("Unknown fused activation " + e + ".");
        },
        Tl = an({
          fusedMatMul_: function (t) {
            var e,
              n = t.a,
              r = t.b,
              a = t.transposeA,
              i = void 0 !== a && a,
              o = t.transposeB,
              s = void 0 !== o && o,
              u = t.bias,
              c = t.activation,
              l = void 0 === c ? "linear" : c,
              h = t.preluActivationWeights;
            if (!1 === kl(Mt.state.gradientDepth, l)) {
              var d = Yu(n, r, i, s);
              return null != u && (d = Zs(d, u)), Al(d, l, h);
            }
            var p = He(n, "a", "fused matMul"),
              f = He(r, "b", "fused matMul");
            (e = Rt(p, f)), (p = e[0]), (f = e[1]);
            var m = i ? p.shape[p.rank - 2] : p.shape[p.rank - 1],
              g = s ? f.shape[f.rank - 1] : f.shape[f.rank - 2],
              b = i ? p.shape[p.rank - 1] : p.shape[p.rank - 2],
              v = s ? f.shape[f.rank - 2] : f.shape[f.rank - 1],
              y = p.shape.slice(0, -2),
              x = f.shape.slice(0, -2),
              w = R(y),
              C = R(x);
            S(p.rank >= 2 && f.rank >= 2 && p.rank === f.rank, function () {
              return (
                "Error in fused matMul: inputs must have the same rank of at least 2, got ranks " +
                p.rank +
                " and " +
                f.rank +
                "."
              );
            }),
              S(A(y, x), function () {
                return (
                  "Error in fused matMul: outer dimensions (" +
                  y +
                  ") and (" +
                  x +
                  ") of Tensors with shapes " +
                  p.shape +
                  " and " +
                  f.shape +
                  " must match."
                );
              }),
              S(m === g, function () {
                return (
                  "Error in fused matMul: inner shapes (" +
                  m +
                  ") and (" +
                  g +
                  ") of Tensors with shapes " +
                  p.shape +
                  " and " +
                  f.shape +
                  " and transposeA=" +
                  i +
                  " and transposeB=" +
                  s +
                  " must match."
                );
              });
            var O,
              E,
              I = p.shape.slice(0, -2).concat([b, v]),
              k = i ? p.as3D(w, m, b) : p.as3D(w, b, m),
              N = s ? f.as3D(C, v, g) : f.as3D(C, g, v);
            null != u &&
              Br(I, (O = Rt((O = He(u, "bias", "fused matMul")), p)[0]).shape),
              null != h && (E = He(h, "prelu weights", "fused matMul"));
            var T = { a: k, b: N };
            null != u && (T.bias = O),
              null != h && (T.preluActivationWeights = E);
            var _ = [k, N];
            return Mt.runKernelFunc(
              function (t, e) {
                var n = t.fusedBatchMatMul({
                  a: k,
                  b: N,
                  transposeA: i,
                  transposeB: s,
                  bias: O,
                  activation: l,
                  preluActivationWeights: E,
                });
                return e([k, N, n]), n;
              },
              T,
              function (t, e) {
                var n = e[0],
                  r = e[1],
                  a = e[2],
                  o = Nl(t, a, l),
                  c = {};
                return (
                  null != u &&
                    (c = {
                      bias: function () {
                        return Rl(O, o);
                      },
                    }),
                  i || s
                    ? !i && s
                      ? Object.assign(
                          {
                            a: function () {
                              return o.matMul(r, !1, !1);
                            },
                            b: function () {
                              return o.matMul(n, !0, !1);
                            },
                          },
                          c
                        )
                      : i && !s
                      ? Object.assign(
                          {
                            a: function () {
                              return r.matMul(o, !1, !0);
                            },
                            b: function () {
                              return n.matMul(o, !1, !1);
                            },
                          },
                          c
                        )
                      : Object.assign(
                          {
                            a: function () {
                              return r.matMul(o, !0, !0);
                            },
                            b: function () {
                              return o.matMul(n, !0, !0);
                            },
                          },
                          c
                        )
                    : Object.assign(
                        {
                          a: function () {
                            return o.matMul(r, !1, !0);
                          },
                          b: function () {
                            return n.matMul(o, !0, !1);
                          },
                        },
                        c
                      )
                );
              },
              "_FusedMatMul",
              { transposeA: i, transposeB: s, activation: l },
              _,
              [!0]
            ).reshape(I);
          },
        }),
        _l = an({
          fusedConv2d_: function (t) {
            var e = t.x,
              n = t.filter,
              r = t.strides,
              a = t.pad,
              i = t.dataFormat,
              o = void 0 === i ? "NHWC" : i,
              s = t.dilations,
              u = void 0 === s ? [1, 1] : s,
              c = t.dimRoundingMode,
              l = t.bias,
              h = t.activation,
              d = void 0 === h ? "linear" : h,
              p = t.preluActivationWeights;
            if (((d = d || "linear"), !1 === kl(Mt.state.gradientDepth, d))) {
              var f = Lu(e, n, r, a, o, u, c);
              return null != l && (f = Zs(f, l)), Al(f, d, p);
            }
            var m = He(e, "x", "conv2d"),
              g = He(n, "filter", "conv2d"),
              b = m,
              v = !1;
            3 === m.rank &&
              ((v = !0), (b = m.as4D(1, m.shape[0], m.shape[1], m.shape[2]))),
              S(4 === b.rank, function () {
                return (
                  "Error in fused conv2d: input must be rank 4, but got rank " +
                  b.rank +
                  "."
                );
              }),
              S(4 === g.rank, function () {
                return (
                  "Error in fused conv2d: filter must be rank 4, but got rank " +
                  g.rank +
                  "."
                );
              }),
              null != c &&
                S(T(a), function () {
                  return (
                    "Error in fused conv2d: pad must be an integer when using, dimRoundingMode " +
                    c +
                    " but got pad " +
                    a +
                    "."
                  );
                }),
              S(b.shape[3] === g.shape[2], function () {
                return (
                  "Error in conv2d: depth of input (" +
                  b.shape[3] +
                  ") must match input depth for filter " +
                  g.shape[2] +
                  "."
                );
              }),
              S(Xr(r, u), function () {
                return (
                  "Error in conv2D: Either strides or dilations must be 1. Got strides " +
                  r +
                  " and dilations '" +
                  u +
                  "'"
                );
              }),
              S("NHWC" === o, function () {
                return (
                  "Error in conv2d: got dataFormat of " +
                  o +
                  " but only NHWC is currently supported."
                );
              });
            var y,
              x,
              w = zr(b.shape, g.shape, r, u, a, c);
            null != l &&
              ((y = Rt((y = He(l, "bias", "fused conv2d")), m)[0]),
              Br(w.outShape, y.shape)),
              null != p && (x = He(p, "prelu weights", "fused conv2d"));
            var C = { x: b, filter: g };
            null != l && (C.bias = y),
              null != p && (C.preluActivationWeights = x);
            var O = [g, b],
              E = Mt.runKernelFunc(
                function (t, e) {
                  var n = t.fusedConv2d({
                    input: b,
                    filter: g,
                    convInfo: w,
                    bias: y,
                    activation: d,
                    preluActivationWeights: x,
                  });
                  return e([g, b, n]), n;
                },
                C,
                function (t, e) {
                  var n = e,
                    i = n[0],
                    o = n[1],
                    s = n[2],
                    c = Nl(t, s, d);
                  S(Kr(u), function () {
                    return (
                      "Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '" +
                      u +
                      "'"
                    );
                  });
                  var h = {};
                  return (
                    null != l &&
                      (h = {
                        bias: function () {
                          return Rl(y, c);
                        },
                      }),
                    Object.assign(
                      {
                        x: function () {
                          return Vu(o.shape, c, i, r, a);
                        },
                        filter: function () {
                          return Wu(o, c, i.shape, r, a);
                        },
                      },
                      h
                    )
                  );
                },
                "FusedConv2D",
                { convInfo: w, activation: d },
                O,
                [!0]
              );
            return v ? E.as3D(E.shape[1], E.shape[2], E.shape[3]) : E;
          },
        }),
        Dl = an({
          fusedDepthwiseConv2d_: function (t) {
            var e = t.x,
              n = t.filter,
              r = t.strides,
              a = t.pad,
              i = t.dataFormat,
              o = void 0 === i ? "NHWC" : i,
              s = t.dilations,
              u = void 0 === s ? [1, 1] : s,
              c = t.dimRoundingMode,
              l = t.bias,
              h = t.activation,
              d = void 0 === h ? "linear" : h,
              p = t.preluActivationWeights;
            if (!1 === kl(Mt.state.gradientDepth, d)) {
              var f = Uu(e, n, r, a, o, u, c);
              return null != l && (f = Zs(f, l)), Al(f, d, p);
            }
            var m = He(e, "x", "depthwiseConv2d"),
              g = He(n, "filter", "depthwiseConv2d"),
              b = m,
              v = !1;
            3 === m.rank &&
              ((v = !0), (b = m.as4D(1, m.shape[0], m.shape[1], m.shape[2]))),
              S(4 === b.rank, function () {
                return (
                  "Error in fused depthwiseConv2d: input must be rank 4, but got rank " +
                  b.rank +
                  "."
                );
              }),
              S(4 === g.rank, function () {
                return (
                  "Error in fused depthwiseConv2d: filter must be rank 4, but got rank " +
                  g.rank +
                  "."
                );
              }),
              S(b.shape[3] === g.shape[2], function () {
                return (
                  "Error in fused depthwiseConv2d: number of input channels (" +
                  b.shape[3] +
                  ") must match the inChannels dimension in filter " +
                  g.shape[2] +
                  "."
                );
              }),
              null == u && (u = [1, 1]),
              S(Xr(r, u), function () {
                return (
                  "Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides " +
                  r +
                  " and dilations '" +
                  u +
                  "'"
                );
              }),
              null != c &&
                S(T(a), function () {
                  return (
                    "Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode " +
                    c +
                    " but got pad " +
                    a +
                    "."
                  );
                });
            var y,
              x,
              w = zr(b.shape, g.shape, r, u, a, c, !0);
            null != l &&
              ((y = Rt((y = He(l, "bias", "fused conv2d")), m)[0]),
              Br(w.outShape, y.shape)),
              null != p &&
                (x = He(p, "prelu weights", "fused depthwiseConv2d"));
            var C = { x: b, filter: g };
            null != l && (C.bias = y),
              null != p && (C.preluActivationWeights = x);
            var O = [g, b],
              E = Mt.runKernelFunc(
                function (t, e) {
                  var n = t.fusedDepthwiseConv2D({
                    input: b,
                    filter: g,
                    convInfo: w,
                    bias: y,
                    activation: d,
                    preluActivationWeights: x,
                  });
                  return e([g, b, n]), n;
                },
                C,
                function (t, e) {
                  S(Kr(u), function () {
                    return (
                      "Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '" +
                      u +
                      "'"
                    );
                  });
                  var n = e[0],
                    r = e[1],
                    a = e[2],
                    i = Nl(t, a, d),
                    o = {};
                  return (
                    null != l &&
                      (o = {
                        bias: function () {
                          return Rl(y, i);
                        },
                      }),
                    Object.assign(
                      {
                        x: function () {
                          return Gu(r.shape, i, n, w);
                        },
                        filter: function () {
                          return Hu(r, i, n.shape, w);
                        },
                      },
                      o
                    )
                  );
                },
                "FusedDepthwiseConv2D",
                { convInfo: w, activation: d },
                O,
                [!0]
              );
            return v ? E.as3D(E.shape[1], E.shape[2], E.shape[3]) : E;
          },
        }),
        Fl = Object.freeze({ matMul: Tl, conv2d: _l, depthwiseConv2d: Dl }),
        Ml = Object.freeze({
          image: Il,
          linalg: yl,
          losses: fl,
          spectral: qc,
          fused: Fl,
          signal: al,
          square: Yo,
          squaredDifference: Qo,
          conv1d: Pu,
          conv2d: Lu,
          conv3d: zu,
          depthwiseConv2d: Uu,
          separableConv2d: qu,
          conv2dTranspose: Ku,
          conv3dTranspose: Xu,
          op: an,
          batchNormalization2d: Ps,
          batchNormalization3d: Ls,
          batchNormalization4d: zs,
          batchNormalization: Ws,
          batchNorm: Vs,
          batchNorm2d: Us,
          batchNorm3d: Gs,
          batchNorm4d: Hs,
          booleanMaskAsync: function (t, e, n) {
            return u(this, void 0, void 0, function () {
              var r, a, i, o, s, u, l, h, d, p, f, m, g;
              return c(this, function (c) {
                switch (c.label) {
                  case 0:
                    for (
                      r = He(t, "tensor", "boolMask"),
                        a = He(e, "mask", "boolMask", "bool"),
                        i = null == n ? 0 : n,
                        o = a.rank,
                        s = r.shape,
                        S(o > 0, function () {
                          return "mask cannot be scalar";
                        }),
                        I(
                          s.slice(i, i + o),
                          a.shape,
                          "mask's shape must match the first K dimensions of tensor's shape,"
                        ),
                        u = 1,
                        l = i;
                      l < i + o;
                      l++
                    )
                      u *= s[l];
                    return (
                      (h = s.slice(0, i).concat([u], s.slice(i + o))),
                      (d = r.reshape(h)),
                      (p = a.reshape([-1])),
                      [4, Qs(p)]
                    );
                  case 1:
                    return (
                      (f = c.sent()),
                      (m = f.squeeze([1])),
                      (g = Fu(d, m, i)),
                      t !== r && r.dispose(),
                      e !== a && a.dispose(),
                      m.dispose(),
                      d.dispose(),
                      p.dispose(),
                      f.dispose(),
                      [2, g]
                    );
                }
              });
            });
          },
          complex: on,
          real: sn,
          imag: un,
          concat: Cn,
          concat1d: On,
          concat2d: En,
          concat3d: Sn,
          concat4d: In,
          split: kn,
          matMul: Yu,
          dot: Ju,
          outerProduct: Qu,
          reverse: Zu,
          reverse1d: tc,
          reverse2d: ec,
          reverse3d: nc,
          reverse4d: rc,
          maxPool: oc,
          avgPool: sc,
          pool: uc,
          maxPool3d: cc,
          avgPool3d: lc,
          slice: hc,
          slice1d: dc,
          slice2d: pc,
          slice3d: fc,
          slice4d: mc,
          abs: Zo,
          acos: ts,
          acosh: es,
          asin: ns,
          asinh: rs,
          atan: as,
          atanh: is,
          ceil: os,
          clipByValue: ss,
          cos: us,
          cosh: cs,
          erf: ls,
          exp: hs,
          expm1: ds,
          floor: ps,
          log: fs,
          log1p: ms,
          logSigmoid: gs,
          neg: bs,
          reciprocal: vs,
          round: ys,
          rsqrt: xs,
          sigmoid: ws,
          sign: Cs,
          isNaN: Os,
          isInf: Es,
          isFinite: Ss,
          sin: Is,
          sinh: ks,
          softplus: Ns,
          sqrt: Rs,
          step: As,
          tan: Ts,
          tanh: _s,
          all: bc,
          any: vc,
          argMax: yc,
          argMin: xc,
          logSumExp: wc,
          max: Cc,
          mean: Oc,
          min: Ec,
          moments: Sc,
          sum: Ic,
          prod: kc,
          equal: xu,
          equalStrict: wu,
          greater: Cu,
          greaterEqual: Ou,
          greaterEqualStrict: Eu,
          greaterStrict: Su,
          less: Iu,
          lessEqual: ku,
          lessEqualStrict: Nu,
          lessStrict: Ru,
          notEqual: Au,
          notEqualStrict: Tu,
          add: Zs,
          addN: tu,
          addStrict: eu,
          atan2: nu,
          div: ru,
          divNoNan: au,
          divStrict: iu,
          floorDiv: ou,
          maximum: su,
          maximumStrict: uu,
          minimum: cu,
          minimumStrict: lu,
          mod: hu,
          modStrict: du,
          mul: pu,
          mulStrict: fu,
          pow: mu,
          powStrict: gu,
          squaredDifferenceStrict: bu,
          sub: vu,
          subStrict: yu,
          elu: Nc,
          leakyRelu: Rc,
          prelu: Ac,
          relu: Tc,
          relu6: _c,
          selu: Dc,
          logicalAnd: qs,
          logicalNot: Ks,
          logicalOr: Xs,
          logicalXor: Ys,
          where: Js,
          whereAsync: Qs,
          buffer: Ln,
          print: function (t, e) {
            void 0 === e && (e = !1), console.log(t.toString(e));
          },
          batchToSpaceND: zn,
          broadcastTo: Wn,
          cast: Vn,
          clone: Un,
          cumsum: Gn,
          depthToSpace: Hn,
          expandDims: qn,
          eye: Kn,
          multinomial: Xn,
          oneHot: Yn,
          pad: Jn,
          pad1d: Qn,
          pad2d: Zn,
          pad3d: tr,
          pad4d: er,
          rand: nr,
          randomNormal: rr,
          randomGamma: ar,
          randomUniform: ir,
          reshape: or,
          spaceToBatchND: sr,
          squeeze: ur,
          stack: cr,
          tile: lr,
          truncatedNormal: hr,
          unstack: dr,
          setdiff1dAsync: function (t, e) {
            return u(this, void 0, void 0, function () {
              var n, r, a, i, o, s, u, l, h, d;
              return c(this, function (c) {
                switch (c.label) {
                  case 0:
                    return (
                      (n = He(t, "x", "setdiff1d")),
                      (r = He(e, "y", "setdiff1d")),
                      S(n.dtype === r.dtype, function () {
                        return (
                          "x and y should have the same dtype, but got x (" +
                          n.dtype +
                          ") and y (" +
                          r.dtype +
                          ")."
                        );
                      }),
                      S(1 === n.rank, function () {
                        return (
                          "x should be 1D tensor, but got x (" + n.shape + ")."
                        );
                      }),
                      S(1 === r.rank, function () {
                        return (
                          "y should be 1D tensor, but got y (" + r.shape + ")."
                        );
                      }),
                      [4, n.data()]
                    );
                  case 1:
                    return (a = c.sent()), [4, r.data()];
                  case 2:
                    for (
                      i = c.sent(), o = new Set(i), s = 0, h = 0;
                      h < a.length;
                      h++
                    )
                      o.has(a[h]) || s++;
                    for (
                      u = new mt([s], n.dtype),
                        l = new mt([s], "int32"),
                        h = 0,
                        d = 0;
                      h < a.length;
                      h++
                    )
                      o.has(a[h]) ||
                        ((u.values[d] = a[h]), (l.values[d] = h), d++);
                    return [2, [u.toTensor(), l.toTensor()]];
                }
              });
            });
          },
          fill: vn,
          linspace: function (t, e, n) {
            if (n <= 0)
              throw new Error("The number of values should be positive.");
            return Mt.runKernelFunc(function (r) {
              return r.linspace(t, e, n);
            }, {});
          },
          ones: gn,
          range: yn,
          scalar: hn,
          tensor: cn,
          tensor1d: dn,
          tensor2d: pn,
          tensor3d: fn,
          tensor4d: mn,
          tensor5d: function (t, e, n) {
            if ((k(t), null != e && 5 !== e.length))
              throw new Error("tensor5d() requires shape to have five numbers");
            var r = Ue(t, n);
            if (5 !== r.length && 1 !== r.length)
              throw new Error(
                "tensor5d() requires values to be number[][][][][] or flat/TypedArray"
              );
            if (1 === r.length && null == e)
              throw new Error(
                "tensor5d() requires shape to be provided when `values` are a flat array"
              );
            return ln(t, e, r, n);
          },
          tensor6d: function (t, e, n) {
            if ((k(t), null != e && 6 !== e.length))
              throw new Error("tensor6d() requires shape to have six numbers");
            var r = Ue(t, n);
            if (6 !== r.length && 1 !== r.length)
              throw new Error(
                "tensor6d() requires values to be number[][][][][][] or flat/TypedArray"
              );
            if (1 === r.length && null == e)
              throw new Error(
                "tensor6d() requires shape to be provided when `values` are a flat array"
              );
            return ln(t, (e = e || r), r, n);
          },
          variable: function (t, e, n, r) {
            return void 0 === e && (e = !0), Mt.makeVariable(t, e, n, r);
          },
          zeros: bn,
          onesLike: xn,
          zerosLike: wn,
          transpose: Fc,
          softmax: Tr,
          logSoftmax: _r,
          localResponseNormalization: Mc,
          norm: jc,
          gather: Fu,
          unsortedSegmentSum: Mu,
          basicLSTMCell: $c,
          multiRNNCell: Bc,
          movingAverage: Pc,
          stridedSlice: Lc,
          topk: zc,
          scatterND: Wc,
          fft: Vc,
          ifft: Uc,
          rfft: Gc,
          irfft: Hc,
          sparseToDense: Kc,
          gatherND: Xc,
          diag: Yc,
          dropout: Jc,
          hannWindow: tl,
          hammingWindow: el,
          frame: nl,
          stft: rl,
          inTopKAsync: function (t, e, n) {
            return (
              void 0 === n && (n = 1),
              u(this, void 0, void 0, function () {
                var r, a, i, o, s, u, l, h, d, p, f, m, g, b;
                return c(this, function (c) {
                  switch (c.label) {
                    case 0:
                      return (
                        (r = He(t, "predictions", "inTopK")),
                        (a = He(e, "targets", "inTopK")),
                        S(r.rank > 1, function () {
                          return (
                            "inTopK() expects the predictions to be of rank 2 or higher, but got " +
                            r.rank
                          );
                        }),
                        S(r.rank - 1 === a.rank, function () {
                          return (
                            "predictions rank should be 1 larger than targets rank, but got predictions rank " +
                            r.rank +
                            " and targets rank " +
                            a.rank
                          );
                        }),
                        I(
                          r.shape.slice(0, r.shape.length - 1),
                          a.shape,
                          "predictions's shape should be align with the targets' shape, except the last dimension."
                        ),
                        (i = r.shape[r.shape.length - 1]),
                        S(n > 0 && n <= i, function () {
                          return (
                            "'k' passed to inTopK() must be > 0 && <= the predictions last dimension (" +
                            i +
                            "), but got " +
                            n
                          );
                        }),
                        [4, r.data()]
                      );
                    case 1:
                      return (o = c.sent()), [4, a.data()];
                    case 2:
                      for (
                        s = c.sent(),
                          u = [o.length / i, i],
                          h = u[1],
                          d = P("bool", (l = u[0])),
                          p = 0;
                        p < l;
                        p++
                      ) {
                        for (
                          f = p * h, m = o.subarray(f, f + h), g = [], b = 0;
                          b < m.length;
                          b++
                        )
                          g.push({ value: m[b], index: b });
                        for (
                          g.sort(function (t, e) {
                            return e.value - t.value;
                          }),
                            d[p] = 0,
                            b = 0;
                          b < n;
                          b++
                        )
                          if (g[b].index === s[p]) {
                            d[p] = 1;
                            break;
                          }
                      }
                      return (
                        t !== r && r.dispose(),
                        e !== a && a.dispose(),
                        [2, cn(d, a.shape, "bool")]
                      );
                  }
                });
              })
            );
          },
        });
      function jl(t, e) {
        Array.isArray(t) || (t = [t]),
          t.forEach(function (t) {
            null != t &&
              S("complex64" !== t.dtype, function () {
                return e + " does not support complex64 tensors.";
              });
          });
      }
      function $l(t, e, n, r) {
        if ("linear" === n) return t.linear(e);
        if ("relu" === n) return t.relu(e);
        if ("elu" === n) return t.elu(e);
        if ("relu6" === n) return t.relu6(e);
        if ("prelu" === n) return t.prelu(e, r);
        throw new Error(
          "Activation " + n + " has not been implemented for the CPU backend."
        );
      }
      var Bl = (function (t) {
        function e() {
          var e = t.call(this) || this;
          return (
            (e.blockSize = 48), (e.firstUse = !0), (e.data = new Dr(e, Mt)), e
          );
        }
        return (
          s(e, t),
          (e.prototype.write = function (t, e, n) {
            this.firstUse &&
              ((this.firstUse = !1),
              d().get("IS_NODE") &&
                Ve(
                  "\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"
                ));
            var r = {};
            return this.data.set(r, { values: t, dtype: n }), r;
          }),
          (e.prototype.move = function (t, e, n, r) {
            this.data.set(t, { values: e, dtype: r });
          }),
          (e.prototype.numDataIds = function () {
            return this.data.numDataIds();
          }),
          (e.prototype.read = function (t) {
            return u(this, void 0, void 0, function () {
              return c(this, function (e) {
                return [2, this.readSync(t)];
              });
            });
          }),
          (e.prototype.readSync = function (t) {
            var e = this.data.get(t),
              n = e.dtype,
              r = e.complexTensors;
            return "complex64" === n
              ? ta(this.readSync(r.real.dataId), this.readSync(r.imag.dataId))
              : this.data.get(t).values;
          }),
          (e.prototype.bufferSync = function (t) {
            var e = this.readSync(t.dataId),
              n = e;
            if ("string" === t.dtype)
              try {
                n = e.map(function (t) {
                  return st(t);
                });
              } catch (t) {
                throw new Error(
                  "Failed to decode encoded string bytes into utf-8"
                );
              }
            return Ln(t.shape, t.dtype, n);
          }),
          (e.prototype.makeOutput = function (t, e, n) {
            var r = this.write(t, e, n);
            return Mt.makeTensorFromDataId(r, e, n, this);
          }),
          (e.prototype.disposeData = function (t) {
            if (this.data.has(t)) {
              var e = this.data.get(t).complexTensors;
              null != e && (e.real.dispose(), e.imag.dispose()),
                this.data.delete(t);
            }
          }),
          (e.prototype.time = function (t) {
            return u(this, void 0, void 0, function () {
              var e;
              return c(this, function (n) {
                return (e = at()), t(), [2, { kernelMs: at() - e }];
              });
            });
          }),
          (e.prototype.memory = function () {
            return {
              unreliable: !0,
              reasons: [
                "The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less.",
              ],
            };
          }),
          (e.prototype.complex = function (t, e) {
            var n = this.makeOutput(null, t.shape, "complex64");
            return (
              (this.data.get(n.dataId).complexTensors = {
                real: Mt.keep(t.clone()),
                imag: Mt.keep(e.clone()),
              }),
              n
            );
          }),
          (e.prototype.real = function (t) {
            return this.data.get(t.dataId).complexTensors.real.clone();
          }),
          (e.prototype.imag = function (t) {
            return this.data.get(t.dataId).complexTensors.imag.clone();
          }),
          (e.prototype.slice = function (t, e, n) {
            if ((jl(t, "slice"), Nr(t.shape, e, n))) {
              var r = Rr(e, t.strides),
                a = R(n);
              return cn(this.readSync(t.dataId).subarray(r, r + a), n, t.dtype);
            }
            for (
              var i = Ln(n, t.dtype), o = this.bufferSync(t), s = 0;
              s < i.size;
              ++s
            ) {
              var u = i.indexToLoc(s).map(function (t, n) {
                return t + e[n];
              });
              i.values[s] = o.get.apply(o, u);
            }
            return i.toTensor();
          }),
          (e.prototype.stridedSlice = function (t, e, n, r) {
            jl(t, "stridedSlice");
            var a = Sr(e, n, r);
            if (
              a.some(function (t) {
                return 0 === t;
              })
            )
              return cn([], a);
            for (
              var i = Ln(a, t.dtype), o = this.bufferSync(t), s = 0;
              s < i.size;
              s++
            ) {
              for (
                var u = i.indexToLoc(s), c = new Array(u.length), l = 0;
                l < c.length;
                l++
              )
                c[l] = u[l] * r[l] + e[l];
              i.set.apply(i, [o.get.apply(o, c)].concat(u));
            }
            return i.toTensor();
          }),
          (e.prototype.diag = function (t) {
            for (
              var e = this.readSync(t.dataId),
                n = Ln([t.size, t.size], t.dtype),
                r = n.values,
                a = 0;
              a < e.length;
              a++
            )
              r[a * t.size + a] = e[a];
            return n.toTensor();
          }),
          (e.prototype.unstack = function (t, e) {
            for (
              var n = t.shape[e], r = new Array(t.rank - 1), a = 0, i = 0;
              i < t.rank;
              i++
            )
              i !== e && (r[a++] = t.shape[i]);
            var o = new Array(t.rank).fill(0),
              s = t.shape.slice();
            s[e] = 1;
            var u = new Array(n);
            for (i = 0; i < u.length; i++)
              (o[e] = i), (u[i] = this.slice(t, o, s).reshape(r));
            return u;
          }),
          (e.prototype.reverse = function (t, e) {
            jl(t, "reverse");
            for (
              var n = Ln(t.shape, t.dtype),
                r = this.bufferSync(t),
                a = function (a) {
                  var i = n.indexToLoc(a),
                    o = i.slice();
                  e.forEach(function (e) {
                    return (o[e] = t.shape[e] - 1 - o[e]);
                  }),
                    n.set.apply(n, [r.get.apply(r, o)].concat(i));
                },
                i = 0;
              i < n.size;
              i++
            )
              a(i);
            return n.toTensor();
          }),
          (e.prototype.concat = function (t, e) {
            var n = this;
            if ("complex64" === t[0].dtype) {
              var r = t.map(function (t) {
                  return sn(t);
                }),
                a = t.map(function (t) {
                  return un(t);
                });
              return on(this.concat(r, e), this.concat(a, e));
            }
            var i = t.map(function (t) {
                var n = R(t.shape.slice(e));
                return t.as2D(-1, n);
              }),
              o = rn(
                i.map(function (t) {
                  return t.shape;
                }),
                1
              ),
              s = Ln(o, t[0].dtype).values;
            if (1 === i[0].shape[0]) {
              var u = 0;
              i.forEach(function (t) {
                s.set(n.readSync(t.dataId), u), (u += t.size);
              });
            } else {
              var c = 0;
              i.forEach(function (t) {
                for (
                  var e = n.readSync(t.dataId), r = 0, a = 0;
                  a < t.shape[0];
                  ++a
                )
                  for (var i = a * o[1] + c, u = 0; u < t.shape[1]; ++u)
                    s[i + u] = e[r++];
                c += t.shape[1];
              });
            }
            var l = rn(
              t.map(function (t) {
                return t.shape;
              }),
              e
            );
            return cn(s, l, t[0].dtype);
          }),
          (e.prototype.neg = function (t) {
            return jl(t, "neg"), this.multiply(hn(-1), t);
          }),
          (e.prototype.add = function (t, e) {
            return "complex64" === t.dtype || "complex64" === e.dtype
              ? this.broadcastedBinaryComplexOp(
                  t.cast("complex64"),
                  e.cast("complex64"),
                  function (t, e, n, r) {
                    return { real: t + n, imag: e + r };
                  }
                )
              : this.broadcastedBinaryOp(t, e, kt(t.dtype, e.dtype), function (
                  t,
                  e
                ) {
                  return t + e;
                });
          }),
          (e.prototype.addN = function (t) {
            var e = this;
            jl(t, "addN");
            for (
              var n = t.map(function (t) {
                  return e.readSync(t.dataId);
                }),
                r = Ln(t[0].shape, t[0].dtype),
                a = r.values,
                i = 0;
              i < t.length;
              i++
            )
              for (var o = n[i], s = 0; s < a.length; s++) a[s] += o[s];
            return r.toTensor();
          }),
          (e.prototype.softmax = function (t, e) {
            var n = $([e], t.shape),
              r = this.max(t, n),
              a = Je(r.shape, n),
              i = this.subtract(t, r.reshape(a)),
              o = this.exp(i),
              s = this.sum(o, n).reshape(a);
            return this.realDivide(o, s);
          }),
          (e.prototype.subtract = function (t, e) {
            return "complex64" === t.dtype || "complex64" === e.dtype
              ? this.broadcastedBinaryComplexOp(
                  t.cast("complex64"),
                  e.cast("complex64"),
                  function (t, e, n, r) {
                    return { real: t - n, imag: e - r };
                  }
                )
              : this.broadcastedBinaryOp(t, e, kt(t.dtype, e.dtype), function (
                  t,
                  e
                ) {
                  return t - e;
                });
          }),
          (e.prototype.pow = function (t, e) {
            return (
              jl([t, e], "pow"),
              this.broadcastedBinaryOp(t, e, t.dtype, function (t, e) {
                return Math.pow(t, e);
              })
            );
          }),
          (e.prototype.batchMatMul = function (t, e, n, r) {
            jl([t, e], "matMul");
            for (
              var a = n ? t.shape[1] : t.shape[2],
                i = n ? t.shape[2] : t.shape[1],
                o = r ? e.shape[1] : e.shape[2],
                s = t.shape[0],
                u = this.readSync(t.dataId),
                c = this.readSync(e.dataId),
                l = n
                  ? [t.strides[0], 1, t.strides[1]]
                  : [t.strides[0], t.strides[1], 1],
                h = l[0],
                d = l[1],
                p = l[2],
                f = r
                  ? [1, e.strides[1], e.strides[0]]
                  : [e.strides[1], 1, e.strides[0]],
                m = f[0],
                g = f[1],
                b = f[2],
                v = i * o,
                y = Ln([s, i, o], t.dtype),
                x = y.values,
                w = this.blockSize,
                C = 0;
              C < s;
              C++
            )
              for (var O = 0; O < i; O += w)
                for (var E = 0; E < o; E += w)
                  for (var S = 0; S < a; S += w)
                    for (
                      var I = Math.min(O + w, i),
                        k = Math.min(E + w, o),
                        N = Math.min(S + w, a),
                        R = O;
                      R < I;
                      R++
                    )
                      for (var A = E; A < k; A++) {
                        for (var T = 0, _ = S; _ < N; _++)
                          T +=
                            u[C * h + R * d + _ * p] * c[_ * m + A * g + C * b];
                        x[C * v + (R * o + A)] += T;
                      }
            return y.toTensor();
          }),
          (e.prototype.fusedBatchMatMul = function (t) {
            var e = t.a,
              n = t.b,
              r = t.transposeA,
              a = t.transposeB,
              i = t.bias,
              o = t.activation,
              s = t.preluActivationWeights,
              u = this.batchMatMul(e, n, r, a);
            return i && (u = this.add(u, i)), o && (u = $l(this, u, o, s)), u;
          }),
          (e.prototype.multiply = function (t, e) {
            return "complex64" === t.dtype || "complex64" === e.dtype
              ? this.broadcastedBinaryComplexOp(
                  t.cast("complex64"),
                  e.cast("complex64"),
                  function (t, e, n, r) {
                    return { real: t * n - e * r, imag: t * r + e * n };
                  }
                )
              : this.broadcastedBinaryOp(t, e, kt(t.dtype, e.dtype), function (
                  t,
                  e
                ) {
                  return t * e;
                });
          }),
          (e.prototype.realDivide = function (t, e) {
            return (
              jl([t, e], "realDivide"),
              this.broadcastedBinaryOp(t, e, "float32", function (t, e) {
                return t / e;
              })
            );
          }),
          (e.prototype.floorDiv = function (t, e) {
            return (
              jl([t, e], "floorDiv"),
              this.broadcastedBinaryOp(t, e, "int32", function (t, e) {
                return Math.floor(t / e);
              })
            );
          }),
          (e.prototype.sum = function (t, e) {
            jl(t, "sum"), Qe("sum", e, t.rank);
            for (
              var n = Ye(t.shape, e),
                r = n[0],
                a = n[1],
                i = bn(r, kt(t.dtype, "int32")),
                o = R(a),
                s = this.readSync(i.dataId),
                u = this.readSync(t.dataId),
                c = 0;
              c < s.length;
              ++c
            ) {
              for (var l = c * o, h = 0, d = 0; d < o; ++d) h += u[l + d];
              s[c] = h;
            }
            return i;
          }),
          (e.prototype.prod = function (t, e) {
            jl(t, "sum");
            for (
              var n = Ye(t.shape, e),
                r = n[0],
                a = n[1],
                i = bn(r, kt(t.dtype, "int32")),
                o = R(a),
                s = this.readSync(i.dataId),
                u = this.readSync(t.dataId),
                c = 0;
              c < s.length;
              ++c
            ) {
              for (var l = c * o, h = 1, d = 0; d < o; ++d) h *= u[l + d];
              s[c] = h;
            }
            return i;
          }),
          (e.prototype.unsortedSegmentSum = function (t, e, n) {
            jl(t, "unsortedSegmentSum");
            for (var r = [], a = t.rank - e.rank, i = 0; i < a; ++i)
              e = e.expandDims(i + 1);
            for (i = 0; i < n; ++i) {
              var o = hn(i, "int32"),
                s = xu(o, e).asType("float32").mul(t).sum(0);
              r.push(s);
            }
            return cr(r);
          }),
          (e.prototype.argMin = function (t, e) {
            jl(t, "argMin");
            var n = [e];
            Qe("argMin", n, t.rank);
            for (
              var r = Ye(t.shape, n),
                a = r[0],
                i = r[1],
                o = bn(a, "int32"),
                s = R(i),
                u = this.readSync(o.dataId),
                c = this.readSync(t.dataId),
                l = 0;
              l < u.length;
              ++l
            ) {
              for (var h = l * s, d = c[h], p = 0, f = 0; f < s; ++f) {
                var m = c[h + f];
                m < d && ((d = m), (p = f));
              }
              u[l] = p;
            }
            return o;
          }),
          (e.prototype.argMax = function (t, e) {
            jl(t, "argMax");
            var n = [e];
            Qe("argMax", n, t.rank);
            for (
              var r = Ye(t.shape, n),
                a = r[0],
                i = r[1],
                o = bn(a, "int32"),
                s = R(i),
                u = this.readSync(o.dataId),
                c = this.readSync(t.dataId),
                l = 0;
              l < u.length;
              ++l
            ) {
              for (var h = l * s, d = c[h], p = 0, f = 0; f < s; ++f) {
                var m = c[h + f];
                m > d && ((d = m), (p = f));
              }
              u[l] = p;
            }
            return o;
          }),
          (e.prototype.cumsum = function (t, e, n, r) {
            if ((jl(t, "cumsum"), e !== t.rank - 1))
              throw new Error(
                "backend.cumsum in CPU expects an inner-most axis=" +
                  (t.rank - 1) +
                  " but got axis=" +
                  e
              );
            for (
              var a = kt(t.dtype, "int32"),
                i = bn(t.shape, a),
                o = this.readSync(i.dataId),
                s = this.readSync(t.dataId),
                u = t.shape[t.rank - 1],
                c = r
                  ? function (t, e) {
                      return t + u - e - 1;
                    }
                  : function (t, e) {
                      return t + e;
                    },
                l = 0;
              l < s.length;
              l += u
            )
              for (var h = 0; h < u; h++) {
                var d = c(l, h);
                if (0 === h) o[d] = n ? 0 : s[d];
                else {
                  var p = c(l, h - 1);
                  o[d] = n ? s[p] + o[p] : s[d] + o[p];
                }
              }
            return i;
          }),
          (e.prototype.equal = function (t, e) {
            return (
              jl([t, e], "equal"),
              this.broadcastedBinaryOp(t, e, "bool", function (t, e) {
                return t === e ? 1 : 0;
              })
            );
          }),
          (e.prototype.notEqual = function (t, e) {
            return (
              jl([t, e], "notEqual"),
              this.broadcastedBinaryOp(t, e, "bool", function (t, e) {
                return t !== e ? 1 : 0;
              })
            );
          }),
          (e.prototype.less = function (t, e) {
            return (
              jl([t, e], "less"),
              this.broadcastedBinaryOp(t, e, "bool", function (t, e) {
                return t < e ? 1 : 0;
              })
            );
          }),
          (e.prototype.lessEqual = function (t, e) {
            return (
              jl([t, e], "lessEqual"),
              this.broadcastedBinaryOp(t, e, "bool", function (t, e) {
                return t <= e ? 1 : 0;
              })
            );
          }),
          (e.prototype.greater = function (t, e) {
            return (
              jl([t, e], "greater"),
              this.broadcastedBinaryOp(t, e, "bool", function (t, e) {
                return t > e ? 1 : 0;
              })
            );
          }),
          (e.prototype.greaterEqual = function (t, e) {
            return (
              jl([t, e], "greaterEqual"),
              this.broadcastedBinaryOp(t, e, "bool", function (t, e) {
                return t >= e ? 1 : 0;
              })
            );
          }),
          (e.prototype.logicalNot = function (t) {
            jl(t, "logicalNot");
            for (
              var e = this.readSync(t.dataId),
                n = new Uint8Array(e.length),
                r = 0;
              r < e.length;
              ++r
            )
              n[r] = e[r] ? 0 : 1;
            return this.makeOutput(n, t.shape, "bool");
          }),
          (e.prototype.logicalAnd = function (t, e) {
            return (
              jl([t, e], "logicalAnd"),
              this.broadcastedBinaryOp(t, e, "bool", function (t, e) {
                return t && e;
              })
            );
          }),
          (e.prototype.logicalOr = function (t, e) {
            return (
              jl([t, e], "logicalOr"),
              this.broadcastedBinaryOp(t, e, "bool", function (t, e) {
                return t || e;
              })
            );
          }),
          (e.prototype.select = function (t, e, n) {
            jl([t, e, n], "select");
            for (
              var r = this.readSync(t.dataId),
                a = this.readSync(e.dataId),
                i = this.readSync(n.dataId),
                o = bn(e.shape, kt(e.dtype, n.dtype)),
                s = this.readSync(o.dataId),
                u = 0,
                c =
                  0 === t.rank || t.rank > 1 || 1 === e.rank
                    ? 1
                    : R(e.shape.slice(1)),
                l = 0;
              l < r.length;
              l++
            )
              for (var h = 0; h < c; h++)
                1 === r[l] ? (s[u++] = a[l]) : (s[u++] = i[l]);
            return o;
          }),
          (e.prototype.where = function (t) {
            jl([t], "where");
            var e = this.readSync(t.dataId);
            return ma(t.shape, e);
          }),
          (e.prototype.topk = function (t, e, n) {
            return (
              jl(t, "topk"), fa(this.readSync(t.dataId), t.shape, t.dtype, e)
            );
          }),
          (e.prototype.min = function (t, e) {
            jl(t, "min"), Qe("min", e, t.rank);
            for (
              var n = Ye(t.shape, e),
                r = n[0],
                a = n[1],
                i = bn(r, t.dtype),
                o = R(a),
                s = this.readSync(i.dataId),
                u = this.readSync(t.dataId),
                c = 0;
              c < s.length;
              ++c
            ) {
              for (var l = c * o, h = u[l], d = 0; d < o; ++d) {
                var p = u[l + d];
                p < h && (h = p);
              }
              s[c] = h;
            }
            return i;
          }),
          (e.prototype.minimum = function (t, e) {
            return (
              jl([t, e], "minimum"),
              this.broadcastedBinaryOp(t, e, t.dtype, function (t, e) {
                return Math.min(t, e);
              })
            );
          }),
          (e.prototype.mod = function (t, e) {
            return (
              jl([t, e], "mod"),
              this.broadcastedBinaryOp(t, e, t.dtype, function (t, e) {
                var n = t % e;
                return (t < 0 && e < 0) || (t >= 0 && e >= 0) ? n : (n + e) % e;
              })
            );
          }),
          (e.prototype.max = function (t, e) {
            jl(t, "max"), Qe("max", e, t.rank);
            for (
              var n = Ye(t.shape, e),
                r = n[0],
                a = n[1],
                i = bn(r, t.dtype),
                o = R(a),
                s = this.readSync(i.dataId),
                u = this.readSync(t.dataId),
                c = 0;
              c < s.length;
              ++c
            ) {
              for (var l = c * o, h = u[l], d = 0; d < o; ++d) {
                var p = u[l + d];
                p > h && (h = p);
              }
              s[c] = h;
            }
            return i;
          }),
          (e.prototype.maximum = function (t, e) {
            return (
              jl([t, e], "maximum"),
              this.broadcastedBinaryOp(t, e, t.dtype, function (t, e) {
                return Math.max(t, e);
              })
            );
          }),
          (e.prototype.all = function (t, e) {
            jl(t, "all"), Qe("all", e, t.rank);
            for (
              var n = Ye(t.shape, e),
                r = n[0],
                a = n[1],
                i = bn(r, t.dtype),
                o = R(a),
                s = this.readSync(i.dataId),
                u = this.readSync(t.dataId),
                c = 0;
              c < s.length;
              ++c
            ) {
              for (var l = c * o, h = u[l], d = 0; d < o; ++d) {
                var p = u[l + d];
                h = h && p;
              }
              s[c] = h;
            }
            return i;
          }),
          (e.prototype.any = function (t, e) {
            jl(t, "any"), Qe("any", e, t.rank);
            for (
              var n = Ye(t.shape, e),
                r = n[0],
                a = n[1],
                i = bn(r, t.dtype),
                o = R(a),
                s = this.readSync(i.dataId),
                u = this.readSync(t.dataId),
                c = 0;
              c < s.length;
              ++c
            ) {
              for (var l = c * o, h = u[l], d = 0; d < o; ++d) {
                var p = u[l + d];
                h = h || p;
              }
              s[c] = h;
            }
            return i;
          }),
          (e.prototype.squaredDifference = function (t, e) {
            return (
              jl([t, e], "squaredDifference"),
              this.broadcastedBinaryOp(t, e, t.dtype, function (t, e) {
                var n = t - e;
                return n * n;
              })
            );
          }),
          (e.prototype.ceil = function (t) {
            jl(t, "ceil");
            for (
              var e = this.readSync(t.dataId),
                n = new Float32Array(e.length),
                r = 0;
              r < e.length;
              ++r
            )
              n[r] = Math.ceil(e[r]);
            return this.makeOutput(n, t.shape, "float32");
          }),
          (e.prototype.floor = function (t) {
            jl(t, "floor");
            for (
              var e = this.readSync(t.dataId),
                n = new Float32Array(e.length),
                r = 0;
              r < e.length;
              ++r
            )
              n[r] = Math.floor(e[r]);
            return this.makeOutput(n, t.shape, "float32");
          }),
          (e.prototype.sign = function (t) {
            jl(t, "x");
            for (
              var e = this.readSync(t.dataId),
                n = new Float32Array(e.length),
                r = 0;
              r < e.length;
              ++r
            )
              e[r] < 0 ? (n[r] = -1) : e[r] > 0 ? (n[r] = 1) : (n[r] = 0);
            return this.makeOutput(n, t.shape, "float32");
          }),
          (e.prototype.isNaN = function (t) {
            jl(t, "x");
            for (
              var e = this.readSync(t.dataId),
                n = new Uint8Array(e.length),
                r = 0;
              r < e.length;
              ++r
            )
              Number.isNaN(e[r]) && (n[r] = 1);
            return this.makeOutput(n, t.shape, "bool");
          }),
          (e.prototype.isInf = function (t) {
            jl(t, "x");
            for (
              var e = this.readSync(t.dataId),
                n = new Uint8Array(e.length),
                r = 0;
              r < e.length;
              ++r
            )
              Math.abs(e[r]) === 1 / 0 && (n[r] = 1);
            return this.makeOutput(n, t.shape, "bool");
          }),
          (e.prototype.isFinite = function (t) {
            jl(t, "x");
            for (
              var e = this.readSync(t.dataId),
                n = new Uint8Array(e.length),
                r = 0;
              r < e.length;
              ++r
            )
              Number.isFinite(e[r]) && (n[r] = 1);
            return this.makeOutput(n, t.shape, "bool");
          }),
          (e.prototype.round = function (t) {
            jl(t, "round");
            for (
              var e = this.readSync(t.dataId),
                n = new Float32Array(e.length),
                r = 0;
              r < e.length;
              ++r
            ) {
              var a = Math.floor(e[r]);
              e[r] - a < 0.5
                ? (n[r] = Math.floor(e[r]))
                : e[r] - a > 0.5
                ? (n[r] = Math.ceil(e[r]))
                : (n[r] = a % 2 == 0 ? a : a + 1);
            }
            return this.makeOutput(n, t.shape, "float32");
          }),
          (e.prototype.exp = function (t) {
            jl(t, "exp");
            for (
              var e = this.readSync(t.dataId),
                n = new Float32Array(e.length),
                r = 0;
              r < e.length;
              ++r
            )
              n[r] = Math.exp(e[r]);
            return this.makeOutput(n, t.shape, "float32");
          }),
          (e.prototype.expm1 = function (t) {
            jl(t, "expm1");
            for (
              var e = this.readSync(t.dataId),
                n = new Float32Array(e.length),
                r = 0;
              r < e.length;
              ++r
            )
              n[r] = Math.expm1(e[r]);
            return this.makeOutput(n, t.shape, "float32");
          }),
          (e.prototype.log = function (t) {
            jl(t, "log");
            for (
              var e = this.readSync(t.dataId),
                n = new Float32Array(e.length),
                r = 0;
              r < e.length;
              ++r
            ) {
              var a = e[r];
              n[r] = Math.log(a);
            }
            return this.makeOutput(n, t.shape, "float32");
          }),
          (e.prototype.log1p = function (t) {
            jl(t, "log1p");
            for (
              var e = this.readSync(t.dataId),
                n = new Float32Array(e.length),
                r = 0;
              r < e.length;
              ++r
            ) {
              var a = e[r];
              n[r] = Math.log1p(a);
            }
            return this.makeOutput(n, t.shape, "float32");
          }),
          (e.prototype.sqrt = function (t) {
            jl(t, "sqrt");
            for (
              var e = this.readSync(t.dataId),
                n = new Float32Array(e.length),
                r = 0;
              r < e.length;
              ++r
            ) {
              var a = e[r];
              n[r] = Math.sqrt(a);
            }
            return this.makeOutput(n, t.shape, "float32");
          }),
          (e.prototype.rsqrt = function (t) {
            jl(t, "rsqrt");
            for (
              var e = this.readSync(t.dataId),
                n = new Float32Array(e.length),
                r = 0;
              r < e.length;
              ++r
            ) {
              var a = e[r];
              n[r] = 1 / Math.sqrt(a);
            }
            return this.makeOutput(n, t.shape, "float32");
          }),
          (e.prototype.reciprocal = function (t) {
            jl(t, "reciprocal");
            for (
              var e = this.readSync(t.dataId),
                n = new Float32Array(e.length),
                r = 0;
              r < e.length;
              ++r
            )
              n[r] = 1 / e[r];
            return this.makeOutput(n, t.shape, "float32");
          }),
          (e.prototype.linear = function (t) {
            return t;
          }),
          (e.prototype.relu = function (t) {
            jl(t, "relu");
            for (
              var e = bn(t.shape, t.dtype),
                n = this.readSync(e.dataId),
                r = this.readSync(t.dataId),
                a = 0;
              a < r.length;
              ++a
            )
              n[a] = Math.max(0, r[a]);
            return e;
          }),
          (e.prototype.relu6 = function (t) {
            jl(t, "relu");
            for (
              var e = bn(t.shape, t.dtype),
                n = this.readSync(e.dataId),
                r = this.readSync(t.dataId),
                a = 0;
              a < r.length;
              ++a
            )
              n[a] = Math.min(Math.max(0, r[a]), 6);
            return e;
          }),
          (e.prototype.prelu = function (t, e) {
            return (
              jl([t, e], "prelu"),
              this.broadcastedBinaryOp(t, e, t.dtype, function (t, e) {
                return t < 0 ? e * t : t;
              })
            );
          }),
          (e.prototype.elu = function (t) {
            jl(t, "elu");
            for (
              var e = new Float32Array(t.size),
                n = this.readSync(t.dataId),
                r = 0;
              r < n.length;
              ++r
            ) {
              var a = n[r];
              e[r] = a >= 0 ? a : Math.exp(a) - 1;
            }
            return this.makeOutput(e, t.shape, "float32");
          }),
          (e.prototype.eluDer = function (t, e) {
            jl([t, e], "eluDer");
            for (
              var n = new Float32Array(e.size),
                r = this.readSync(e.dataId),
                a = this.readSync(t.dataId),
                i = 0;
              i < r.length;
              ++i
            ) {
              var o = r[i];
              n[i] = o >= 1 ? a[i] : a[i] * (o + 1);
            }
            return this.makeOutput(n, e.shape, "float32");
          }),
          (e.prototype.selu = function (t) {
            jl(t, "selu");
            for (
              var e = new Float32Array(t.size),
                n = this.readSync(t.dataId),
                r = 0;
              r < n.length;
              ++r
            ) {
              var a = n[r];
              e[r] =
                a >= 0
                  ? 1.0507009873554805 * a
                  : 1.7580993408473768 * (Math.exp(a) - 1);
            }
            return this.makeOutput(e, t.shape, "float32");
          }),
          (e.prototype.clip = function (t, e, n) {
            jl(t, "clip");
            for (
              var r = new Float32Array(t.size),
                a = this.readSync(t.dataId),
                i = 0;
              i < a.length;
              ++i
            ) {
              var o = a[i];
              r[i] = o > n ? n : o < e ? e : o;
            }
            return this.makeOutput(r, t.shape, "float32");
          }),
          (e.prototype.abs = function (t) {
            for (
              var e = new Float32Array(t.size),
                n = this.readSync(t.dataId),
                r = 0;
              r < n.length;
              ++r
            )
              e[r] = Math.abs(n[r]);
            return this.makeOutput(e, t.shape, "float32");
          }),
          (e.prototype.complexAbs = function (t) {
            for (
              var e = new Float32Array(t.size),
                n = this.readSync(t.dataId),
                r = 0;
              r < t.size;
              ++r
            ) {
              var a = n[2 * r],
                i = n[2 * r + 1];
              e[r] = Math.hypot(a, i);
            }
            return this.makeOutput(e, t.shape, "float32");
          }),
          (e.prototype.int = function (t) {
            jl(t, "int");
            for (
              var e = new Int32Array(t.size),
                n = this.readSync(t.dataId),
                r = 0;
              r < n.length;
              ++r
            )
              e[r] = n[r];
            return this.makeOutput(e, t.shape, "int32");
          }),
          (e.prototype.sigmoid = function (t) {
            jl(t, "sigmoid");
            for (
              var e = new Float32Array(t.size),
                n = this.readSync(t.dataId),
                r = 0;
              r < n.length;
              ++r
            )
              e[r] = 1 / (1 + Math.exp(-n[r]));
            return this.makeOutput(e, t.shape, "float32");
          }),
          (e.prototype.softplus = function (t) {
            jl(t, "softplus");
            for (
              var e = Math.log(1.1920928955078125e-7) + 2,
                n = new Float32Array(t.size),
                r = this.readSync(t.dataId),
                a = 0;
              a < r.length;
              ++a
            ) {
              var i,
                o = r[a] > -e,
                s = r[a] < e,
                u = Math.exp(r[a]);
              (i = s ? u : o ? r[a] : Math.log(1 + u)), (n[a] = i);
            }
            return this.makeOutput(n, t.shape, "float32");
          }),
          (e.prototype.sin = function (t) {
            jl(t, "sin");
            for (
              var e = new Float32Array(t.size),
                n = this.readSync(t.dataId),
                r = 0;
              r < n.length;
              ++r
            )
              e[r] = Math.sin(n[r]);
            return this.makeOutput(e, t.shape, "float32");
          }),
          (e.prototype.cos = function (t) {
            jl(t, "cos");
            for (
              var e = new Float32Array(t.size),
                n = this.readSync(t.dataId),
                r = 0;
              r < n.length;
              ++r
            )
              e[r] = Math.cos(n[r]);
            return this.makeOutput(e, t.shape, "float32");
          }),
          (e.prototype.tan = function (t) {
            jl(t, "tan");
            for (
              var e = new Float32Array(t.size),
                n = this.readSync(t.dataId),
                r = 0;
              r < n.length;
              ++r
            )
              e[r] = Math.tan(n[r]);
            return this.makeOutput(e, t.shape, "float32");
          }),
          (e.prototype.asin = function (t) {
            jl(t, "asin");
            for (
              var e = new Float32Array(t.size),
                n = this.readSync(t.dataId),
                r = 0;
              r < n.length;
              ++r
            )
              e[r] = Math.asin(n[r]);
            return this.makeOutput(e, t.shape, "float32");
          }),
          (e.prototype.acos = function (t) {
            jl(t, "acos");
            for (
              var e = new Float32Array(t.size),
                n = this.readSync(t.dataId),
                r = 0;
              r < n.length;
              ++r
            )
              e[r] = Math.acos(n[r]);
            return this.makeOutput(e, t.shape, "float32");
          }),
          (e.prototype.atan = function (t) {
            jl(t, "atan");
            for (
              var e = new Float32Array(t.size),
                n = this.readSync(t.dataId),
                r = 0;
              r < n.length;
              ++r
            )
              e[r] = Math.atan(n[r]);
            return this.makeOutput(e, t.shape, "float32");
          }),
          (e.prototype.atan2 = function (t, e) {
            return (
              jl([t, e], "atan2"),
              this.broadcastedBinaryOp(t, e, t.dtype, function (t, e) {
                return Math.atan2(t, e);
              })
            );
          }),
          (e.prototype.sinh = function (t) {
            jl(t, "sinh");
            for (
              var e = new Float32Array(t.size),
                n = this.readSync(t.dataId),
                r = 0;
              r < n.length;
              ++r
            )
              e[r] = Math.sinh(n[r]);
            return this.makeOutput(e, t.shape, "float32");
          }),
          (e.prototype.cosh = function (t) {
            jl(t, "cosh");
            for (
              var e = new Float32Array(t.size),
                n = this.readSync(t.dataId),
                r = 0;
              r < n.length;
              ++r
            )
              e[r] = Math.cosh(n[r]);
            return this.makeOutput(e, t.shape, "float32");
          }),
          (e.prototype.tanh = function (t) {
            jl(t, "tanh");
            for (
              var e = new Float32Array(t.size),
                n = this.readSync(t.dataId),
                r = 0;
              r < n.length;
              ++r
            )
              e[r] = _(n[r]);
            return this.makeOutput(e, t.shape, "float32");
          }),
          (e.prototype.asinh = function (t) {
            jl(t, "asinh");
            for (
              var e = new Float32Array(t.size),
                n = this.readSync(t.dataId),
                r = 0;
              r < n.length;
              ++r
            )
              e[r] = Math.asinh(n[r]);
            return this.makeOutput(e, t.shape, "float32");
          }),
          (e.prototype.acosh = function (t) {
            jl(t, "acosh");
            for (
              var e = new Float32Array(t.size),
                n = this.readSync(t.dataId),
                r = 0;
              r < n.length;
              ++r
            )
              e[r] = Math.acosh(n[r]);
            return this.makeOutput(e, t.shape, "float32");
          }),
          (e.prototype.atanh = function (t) {
            jl(t, "atanh");
            for (
              var e = new Float32Array(t.size),
                n = this.readSync(t.dataId),
                r = 0;
              r < n.length;
              ++r
            )
              e[r] = Math.atanh(n[r]);
            return this.makeOutput(e, t.shape, "float32");
          }),
          (e.prototype.erf = function (t) {
            jl(t, "erf");
            for (
              var e = new Float32Array(t.size),
                n = this.readSync(t.dataId),
                r = 0;
              r < n.length;
              ++r
            ) {
              var a = Math.sign(n[r]),
                i = Math.abs(n[r]),
                o = 1 / (1 + 0.3275911 * i);
              e[r] =
                a *
                (1 -
                  ((((1.061405429 * o - 1.453152027) * o + 1.421413741) * o -
                    0.284496736) *
                    o +
                    0.254829592) *
                    o *
                    Math.exp(-i * i));
            }
            return this.makeOutput(e, t.shape, "float32");
          }),
          (e.prototype.step = function (t, e) {
            void 0 === e && (e = 0), jl(t, "step");
            for (
              var n = new Float32Array(t.size),
                r = this.readSync(t.dataId),
                a = 0;
              a < r.length;
              ++a
            ) {
              var i = r[a];
              isNaN(i) ? (n[a] = NaN) : (n[a] = i > 0 ? 1 : e);
            }
            return this.makeOutput(n, t.shape, "float32");
          }),
          (e.prototype.fusedConv2d = function (t) {
            var e = t.input,
              n = t.filter,
              r = t.convInfo,
              a = t.bias,
              i = t.activation,
              o = t.preluActivationWeights,
              s = this.conv2d(e, n, r);
            return a && (s = this.add(s, a)), i && (s = $l(this, s, i, o)), s;
          }),
          (e.prototype.conv2d = function (t, e, n) {
            jl([t, e], "conv2d");
            for (
              var r = n.filterHeight,
                a = n.filterWidth,
                i = n.dilationHeight,
                o = n.dilationWidth,
                s = n.padInfo.left,
                u = n.padInfo.top,
                c = "channelsLast" === n.dataFormat,
                l = Ln(n.outShape, t.dtype),
                h = t.strides[0],
                d = c ? t.strides[1] : t.strides[2],
                p = c ? t.strides[2] : 1,
                f = c ? 1 : t.strides[1],
                m = l.strides[0],
                g = c ? l.strides[1] : l.strides[2],
                b = c ? l.strides[2] : 1,
                v = c ? 1 : l.strides[1],
                y = this.readSync(t.dataId),
                x = this.readSync(e.dataId),
                w = l.values,
                C = 0;
              C < n.batchSize;
              ++C
            )
              for (var O = C * h, E = C * m, S = 0; S < n.outHeight; ++S)
                for (
                  var I = E + S * g, k = S * n.strideHeight - u, N = 0;
                  N < r;
                  N++
                ) {
                  var R = k + N * i;
                  if (!(R < 0 || R >= n.inHeight))
                    for (
                      var A = N * e.strides[0], T = O + R * d, _ = 0;
                      _ < n.outWidth;
                      ++_
                    )
                      for (
                        var D = I + _ * b, F = _ * n.strideWidth - s, M = 0;
                        M < a;
                        M++
                      ) {
                        var j = F + M * o;
                        if (!(j < 0 || j >= n.inWidth))
                          for (
                            var $ = T + j * p, B = A + M * e.strides[1], P = 0;
                            P < n.inChannels;
                            ++P
                          ) {
                            for (
                              var L = y[$ + P * f], z = 0;
                              z < n.outChannels;
                              ++z
                            )
                              w[D + z * v] += L * x[B + z];
                            B += n.outChannels;
                          }
                      }
                }
            return l.toTensor();
          }),
          (e.prototype.conv3d = function (t, e, n) {
            for (
              var r = n.filterDepth,
                a = n.filterHeight,
                i = n.filterWidth,
                o = n.dilationDepth,
                s = n.dilationHeight,
                u = n.dilationWidth,
                c = n.padInfo.front,
                l = n.padInfo.left,
                h = n.padInfo.top,
                d = Ln(n.outShape, t.dtype),
                p = this.readSync(t.dataId),
                f = this.readSync(e.dataId),
                m = d.values,
                g = 0;
              g < n.batchSize;
              ++g
            )
              for (
                var b = g * t.strides[0], v = g * d.strides[0], y = 0;
                y < n.outDepth;
                ++y
              )
                for (
                  var x = v + y * d.strides[1],
                    w = y * n.strideDepth - c,
                    C = 0;
                  C < r;
                  C++
                ) {
                  var O = w + C * o;
                  if (!(O < 0 || O >= n.inDepth))
                    for (
                      var E = C * e.strides[0], S = b + O * t.strides[1], I = 0;
                      I < n.outHeight;
                      ++I
                    )
                      for (
                        var k = x + I * d.strides[2],
                          N = I * n.strideHeight - h,
                          R = 0;
                        R < a;
                        R++
                      ) {
                        var A = N + R * s;
                        if (!(A < 0 || A >= n.inHeight))
                          for (
                            var T = E + R * e.strides[1],
                              _ = S + A * t.strides[2],
                              D = 0;
                            D < n.outWidth;
                            ++D
                          )
                            for (
                              var F = k + D * n.outChannels,
                                M = D * n.strideWidth - l,
                                j = 0;
                              j < i;
                              j++
                            ) {
                              var $ = M + j * u;
                              if (!($ < 0 || $ >= n.inWidth))
                                for (
                                  var B = T + j * e.strides[2],
                                    P = _ + $ * n.inChannels,
                                    L = B,
                                    z = 0;
                                  z < n.inChannels;
                                  ++z
                                ) {
                                  for (
                                    var W = p[P + z], V = 0;
                                    V < n.outChannels;
                                    ++V
                                  )
                                    m[F + V] += W * f[L + V];
                                  L += n.outChannels;
                                }
                            }
                      }
                }
            return d.toTensor();
          }),
          (e.prototype.conv2dDerInput = function (t, e, n) {
            jl([t, e], "conv2dDerInput");
            for (
              var r = Ln(n.inShape, "float32"),
                a = r.values,
                i = this.readSync(t.dataId),
                o = this.readSync(e.dataId),
                s = e.strides,
                u = s[0],
                c = s[1],
                l = s[2],
                h = n.batchSize,
                d = n.filterHeight,
                p = n.filterWidth,
                f = n.inChannels,
                m = n.inHeight,
                g = n.inWidth,
                b = n.outChannels,
                v = n.outHeight,
                y = n.outWidth,
                x = n.strideHeight,
                w = n.strideWidth,
                C = n.dataFormat,
                O = d - 1 - n.padInfo.top,
                E = p - 1 - n.padInfo.left,
                S = "channelsLast" === C,
                I = r.strides[0],
                k = S ? r.strides[1] : r.strides[2],
                N = S ? r.strides[2] : 1,
                R = S ? 1 : r.strides[1],
                A = t.strides[0],
                T = S ? t.strides[1] : t.strides[2],
                _ = S ? t.strides[2] : 1,
                D = S ? 1 : t.strides[1],
                F = 0;
              F < h;
              ++F
            )
              for (var M = 0; M < f; ++M)
                for (var j = 0; j < m; ++j)
                  for (
                    var $ = j - O,
                      B = Math.max(0, Math.ceil($ / x)),
                      P = Math.min(v, (d + $) / x),
                      L = 0;
                    L < g;
                    ++L
                  ) {
                    for (
                      var z = L - E,
                        W = Math.max(0, Math.ceil(z / w)),
                        V = Math.min(y, (p + z) / w),
                        U = 0,
                        G = B;
                      G < P;
                      ++G
                    )
                      for (var H = G * x - $, q = W; q < V; ++q)
                        for (
                          var K = A * F + T * G + _ * q,
                            X =
                              u * (d - 1 - H) +
                              c * (p - 1 - (q * w - z)) +
                              l * M,
                            Y = 0;
                          Y < b;
                          ++Y
                        )
                          U += i[K + D * Y] * o[X + Y];
                    a[I * F + k * j + N * L + R * M] = U;
                  }
            return r.toTensor();
          }),
          (e.prototype.conv3dDerInput = function (t, e, n) {
            for (
              var r = Ln(n.inShape, "float32"),
                a = r.values,
                i = r.strides,
                o = i[0],
                s = i[1],
                u = i[2],
                c = i[3],
                l = this.readSync(t.dataId),
                h = t.strides,
                d = h[0],
                p = h[1],
                f = h[2],
                m = h[3],
                g = this.readSync(e.dataId),
                b = e.strides,
                v = b[0],
                y = b[1],
                x = b[2],
                w = b[3],
                C = n.batchSize,
                O = n.filterDepth,
                E = n.filterHeight,
                S = n.filterWidth,
                I = n.inChannels,
                k = n.inDepth,
                N = n.inHeight,
                R = n.inWidth,
                A = n.outChannels,
                T = n.outDepth,
                _ = n.outHeight,
                D = n.outWidth,
                F = n.strideDepth,
                M = n.strideHeight,
                j = n.strideWidth,
                $ = O - 1 - n.padInfo.front,
                B = E - 1 - n.padInfo.top,
                P = S - 1 - n.padInfo.left,
                L = 0;
              L < C;
              ++L
            )
              for (var z = 0; z < I; ++z)
                for (var W = 0; W < k; ++W)
                  for (
                    var V = W - $,
                      U = Math.max(0, Math.ceil(V / F)),
                      G = Math.min(T, (O + V) / F),
                      H = 0;
                    H < N;
                    ++H
                  )
                    for (
                      var q = H - B,
                        K = Math.max(0, Math.ceil(q / M)),
                        X = Math.min(_, (E + q) / M),
                        Y = 0;
                      Y < R;
                      ++Y
                    ) {
                      for (
                        var J = Y - P,
                          Q = Math.max(0, Math.ceil(J / j)),
                          Z = Math.min(D, (S + J) / j),
                          tt = 0,
                          et = U;
                        et < G;
                        ++et
                      )
                        for (var nt = et * F - V, rt = K; rt < X; ++rt)
                          for (var at = rt * M - q, it = Q; it < Z; ++it)
                            for (
                              var ot = d * L + p * et + f * rt + m * it,
                                st =
                                  v * (O - 1 - nt) +
                                  y * (E - 1 - at) +
                                  x * (S - 1 - (it * j - J)) +
                                  w * z,
                                ut = 0;
                              ut < A;
                              ++ut
                            )
                              tt += l[ot + ut] * g[st + ut];
                      a[o * L + s * W + u * H + c * Y + z] = tt;
                    }
            return r.toTensor();
          }),
          (e.prototype.conv2dDerFilter = function (t, e, n) {
            jl([t, e], "conv2dDerFilter");
            for (
              var r = n.strideHeight,
                a = n.strideWidth,
                i = n.filterHeight,
                o = n.filterWidth,
                s = "channelsLast" === n.dataFormat,
                u = Ln(n.filterShape, "float32"),
                c = n.padInfo.left,
                l = n.padInfo.top,
                h = this.bufferSync(t),
                d = this.bufferSync(e),
                p = 0;
              p < i;
              ++p
            )
              for (
                var f = Math.max(0, Math.ceil((l - p) / r)),
                  m = Math.min(n.outHeight, (n.inHeight + l - p) / r),
                  g = 0;
                g < o;
                ++g
              )
                for (
                  var b = Math.max(0, Math.ceil((c - g) / a)),
                    v = Math.min(n.outWidth, (n.inWidth + c - g) / a),
                    y = 0;
                  y < n.inChannels;
                  ++y
                )
                  for (var x = 0; x < n.outChannels; ++x) {
                    for (var w = 0, C = 0; C < n.batchSize; ++C)
                      for (var O = f; O < m; ++O)
                        for (var E = p + O * r - l, S = b; S < v; ++S) {
                          var I = g + S * a - c;
                          w += s
                            ? h.get(C, E, I, y) * d.get(C, O, S, x)
                            : h.get(C, y, E, I) * d.get(C, x, O, S);
                        }
                    u.set(w, p, g, y, x);
                  }
            return u.toTensor();
          }),
          (e.prototype.conv3dDerFilter = function (t, e, n) {
            for (
              var r = n.strideDepth,
                a = n.strideHeight,
                i = n.strideWidth,
                o = n.filterDepth,
                s = n.filterHeight,
                u = n.filterWidth,
                c = Ln(n.filterShape, "float32"),
                l = c.values,
                h = c.strides,
                d = h[0],
                p = h[1],
                f = h[2],
                m = h[3],
                g = this.readSync(e.dataId),
                b = e.strides,
                v = b[0],
                y = b[1],
                x = b[2],
                w = b[3],
                C = this.readSync(t.dataId),
                O = t.strides,
                E = O[0],
                S = O[1],
                I = O[2],
                k = O[3],
                N = n.padInfo.front,
                R = n.padInfo.left,
                A = n.padInfo.top,
                T = 0;
              T < o;
              ++T
            )
              for (
                var _ = Math.max(0, Math.ceil((N - T) / r)),
                  D = Math.min(n.outDepth, (n.inDepth + N - T) / r),
                  F = T * d,
                  M = 0;
                M < s;
                ++M
              )
                for (
                  var j = Math.max(0, Math.ceil((A - M) / a)),
                    $ = Math.min(n.outHeight, (n.inHeight + A - M) / a),
                    B = M * p + F,
                    P = 0;
                  P < u;
                  ++P
                )
                  for (
                    var L = Math.max(0, Math.ceil((R - P) / i)),
                      z = Math.min(n.outWidth, (n.inWidth + R - P) / i),
                      W = P * f + B,
                      V = 0;
                    V < n.inChannels;
                    ++V
                  )
                    for (var U = V * m + W, G = 0; G < n.outChannels; ++G) {
                      for (var H = 0, q = 0; q < n.batchSize; ++q)
                        for (var K = q * E, X = q * v, Y = _; Y < D; ++Y)
                          for (
                            var J = (T + Y * r - N) * S + K,
                              Q = Y * y + X,
                              Z = j;
                            Z < $;
                            ++Z
                          )
                            for (
                              var tt = (M + Z * a - A) * I + J,
                                et = Z * x + Q,
                                nt = L;
                              nt < z;
                              ++nt
                            ) {
                              var rt = nt * w + et;
                              H += C[(P + nt * i - R) * k + tt + V] * g[rt + G];
                            }
                      l[U + G] = H;
                    }
            return c.toTensor();
          }),
          (e.prototype.fusedDepthwiseConv2D = function (t) {
            var e = t.input,
              n = t.filter,
              r = t.convInfo,
              a = t.bias,
              i = t.activation,
              o = t.preluActivationWeights,
              s = this.depthwiseConv2D(e, n, r);
            return a && (s = this.add(s, a)), i && (s = $l(this, s, i, o)), s;
          }),
          (e.prototype.depthwiseConv2D = function (t, e, n) {
            jl([t, e], "depthwiseConv2D");
            for (
              var r = n.filterHeight,
                a = n.filterWidth,
                i = n.dilationHeight,
                o = n.dilationWidth,
                s = n.padInfo.left,
                u = n.padInfo.top,
                c = n.outChannels / n.inChannels,
                l = Ln(n.outShape, t.dtype),
                h = this.readSync(t.dataId),
                d = this.readSync(e.dataId),
                p = l.values,
                f = 0;
              f < n.batchSize;
              ++f
            )
              for (
                var m = f * t.strides[0], g = f * l.strides[0], b = 0;
                b < n.outHeight;
                ++b
              )
                for (
                  var v = g + b * l.strides[1],
                    y = b * n.strideHeight - s,
                    x = 0;
                  x < r;
                  ++x
                ) {
                  var w = y + x * i;
                  if (!(w < 0 || w >= n.inHeight))
                    for (
                      var C = x * e.strides[0], O = m + w * t.strides[1], E = 0;
                      E < n.outWidth;
                      ++E
                    )
                      for (
                        var S = v + E * l.strides[2],
                          I = E * n.strideWidth - u,
                          k = 0;
                        k < a;
                        ++k
                      ) {
                        var N = I + k * o;
                        if (!(N < 0 || N >= n.inWidth))
                          for (
                            var R = C + k * e.strides[1],
                              A = O + N * n.inChannels,
                              T = S,
                              _ = R,
                              D = 0;
                            D < n.inChannels;
                            ++D
                          ) {
                            for (var F = h[A + D], M = 0; M < c; ++M)
                              p[T + M] += F * d[_ + M];
                            (T += c), (_ += c);
                          }
                      }
                }
            return l.toTensor();
          }),
          (e.prototype.depthwiseConv2DDerInput = function (t, e, n) {
            jl([t, e], "depthwiseConv2DDerInput");
            for (
              var r = Ln(n.inShape, "float32"),
                a = r.values,
                i = r.strides,
                o = i[0],
                s = i[1],
                u = i[2],
                c = this.readSync(t.dataId),
                l = t.strides,
                h = l[0],
                d = l[1],
                p = l[2],
                f = this.readSync(e.dataId),
                m = e.strides,
                g = m[0],
                b = m[1],
                v = m[2],
                y = n.batchSize,
                x = n.filterHeight,
                w = n.filterWidth,
                C = n.inChannels,
                O = n.inHeight,
                E = n.inWidth,
                S = n.outChannels,
                I = n.outHeight,
                k = n.outWidth,
                N = n.strideHeight,
                R = n.strideWidth,
                A = x - 1 - n.padInfo.top,
                T = w - 1 - n.padInfo.left,
                _ = S / C,
                D = 0;
              D < y;
              ++D
            )
              for (var F = 0; F < C; ++F)
                for (var M = 0; M < O; ++M)
                  for (
                    var j = M - A,
                      $ = Math.max(0, Math.ceil(j / N)),
                      B = Math.min(I, (x + j) / N),
                      P = 0;
                    P < E;
                    ++P
                  ) {
                    for (
                      var L = P - T,
                        z = Math.max(0, Math.ceil(L / R)),
                        W = Math.min(k, (w + L) / R),
                        V = 0,
                        U = $;
                      U < B;
                      ++U
                    )
                      for (var G = U * N - j, H = z; H < W; ++H)
                        for (
                          var q = h * D + d * U + p * H,
                            K =
                              g * (x - 1 - G) +
                              b * (w - 1 - (H * R - L)) +
                              v * F,
                            X = 0;
                          X < _;
                          ++X
                        )
                          V += c[q + (F * _ + X)] * f[K + X];
                    a[o * D + s * M + u * P + F] = V;
                  }
            return r.toTensor();
          }),
          (e.prototype.depthwiseConv2DDerFilter = function (t, e, n) {
            jl([t, e], "depthwiseConv2DDerFilter");
            for (
              var r = n.strideHeight,
                a = n.strideWidth,
                i = n.filterHeight,
                o = n.filterWidth,
                s = Ln(n.filterShape, "float32"),
                u = n.padInfo.left,
                c = n.padInfo.top,
                l = n.outChannels / n.inChannels,
                h = this.bufferSync(t),
                d = this.bufferSync(e),
                p = 0;
              p < i;
              ++p
            )
              for (
                var f = Math.max(0, Math.ceil((c - p) / r)),
                  m = Math.min(n.outHeight, (n.inHeight + c - p) / r),
                  g = 0;
                g < o;
                ++g
              )
                for (
                  var b = Math.max(0, Math.ceil((u - g) / a)),
                    v = Math.min(n.outWidth, (n.inWidth + u - g) / a),
                    y = 0;
                  y < n.outChannels;
                  ++y
                ) {
                  for (
                    var x = Math.trunc(y / l), w = y % l, C = 0, O = 0;
                    O < n.batchSize;
                    ++O
                  )
                    for (var E = f; E < m; ++E)
                      for (var S = p + E * r - c, I = b; I < v; ++I) {
                        var k = g + I * a - u;
                        C += h.get(O, S, k, x) * d.get(O, E, I, y);
                      }
                  s.set(C, p, g, x, w);
                }
            return s.toTensor();
          }),
          (e.prototype.tile = function (t, e) {
            return jl(t, "tile"), pa(this.bufferSync(t), e);
          }),
          (e.prototype.pad = function (t, e, n) {
            jl(t, "pad");
            var r = e.map(function (e, n) {
                return e[0] + t.shape[n] + e[1];
              }),
              a = e.map(function (t) {
                return t[0];
              }),
              i = this.bufferSync(t),
              o = Ln(r, t.dtype);
            0 !== n && o.values.fill(n);
            for (var s = 0; s < t.size; s++) {
              var u = i.indexToLoc(s),
                c = u.map(function (t, e) {
                  return t + a[e];
                });
              o.set.apply(o, [i.get.apply(i, u)].concat(c));
            }
            return o.toTensor();
          }),
          (e.prototype.transpose = function (t, e) {
            jl(t, "transpose");
            for (var n = new Array(t.rank), r = 0; r < n.length; r++)
              n[r] = t.shape[e[r]];
            var a = this.readSync(t.dataId),
              i = Ln(n, t.dtype),
              o = this.bufferSync(t);
            for (r = 0; r < t.size; ++r) {
              for (
                var s = o.indexToLoc(r), u = new Array(s.length), c = 0;
                c < u.length;
                c++
              )
                u[c] = s[e[c]];
              var l = i.locToIndex(u);
              i.values[l] = a[r];
            }
            return i.toTensor();
          }),
          (e.prototype.gather = function (t, e, n) {
            jl([t, e], "gather");
            var r = t.shape.slice(),
              a = this.readSync(e.dataId);
            r[n] = a.length;
            for (
              var i = Ln(r, t.dtype), o = this.bufferSync(t), s = 0;
              s < i.size;
              ++s
            ) {
              var u = i.indexToLoc(s),
                c = u.slice();
              c[n] = a[u[n]];
              var l = o.locToIndex(c);
              i.values[s] = o.values[l];
            }
            return i.toTensor();
          }),
          (e.prototype.batchToSpaceND = function (t, e, n) {
            jl([t], "batchToSpaceND");
            var r = e.reduce(function (t, e) {
                return t * e;
              }),
              a = pr(t.shape, e, r),
              i = fr(a.length, e.length),
              o = mr(t.shape, e, r),
              s = gr(n, e.length),
              u = br(o, n, e.length);
            return t.reshape(a).transpose(i).reshape(o).slice(s, u);
          }),
          (e.prototype.spaceToBatchND = function (t, e, n) {
            jl([t], "spaceToBatchND");
            var r = e.reduce(function (t, e) {
                return t * e;
              }),
              a = [[0, 0]];
            a.push.apply(a, n);
            for (var i = 1 + e.length; i < t.shape.length; ++i) a.push([0, 0]);
            var o = t.pad(a),
              s = pr(o.shape, e, r, !1),
              u = fr(s.length, e.length, !1),
              c = mr(o.shape, e, r, !1);
            return o.reshape(s).transpose(u).reshape(c);
          }),
          (e.prototype.pool = function (t, e, n) {
            jl(t, "pool");
            for (
              var r = e.strideHeight,
                a = e.strideWidth,
                i = e.dilationHeight,
                o = e.dilationWidth,
                s = e.effectiveFilterHeight,
                u = e.effectiveFilterWidth,
                c = e.padInfo.top,
                l = e.padInfo.left,
                h =
                  "max" === n
                    ? Number.NEGATIVE_INFINITY
                    : Number.POSITIVE_INFINITY,
                d = this.readSync(t.dataId),
                p = Ln(e.outShape, t.dtype),
                f = p.values,
                m = e.outShape[1] * e.outShape[2] * e.outShape[3],
                g = e.outShape[2] * e.outShape[3],
                b = e.outShape[3],
                v = 0;
              v < e.batchSize;
              ++v
            )
              for (
                var y = v * m, x = v * t.strides[0], w = 0;
                w < e.inChannels;
                ++w
              )
                for (var C = 0; C < e.outHeight; ++C)
                  for (
                    var O = C * r - c,
                      E = Math.max(0, O),
                      S = Math.min(e.inHeight, s + O),
                      I = y + C * g,
                      k = 0;
                    k < e.outWidth;
                    ++k
                  ) {
                    for (
                      var N = k * a - l,
                        R = Math.max(0, N),
                        A = Math.min(e.inWidth, u + N),
                        T = h,
                        _ = 0,
                        D = 0,
                        F = E;
                      F < S;
                      F += i
                    ) {
                      for (var M = x + F * t.strides[1], j = R; j < A; j += o) {
                        var $ = d[M + j * t.strides[2] + w];
                        "max" === n && $ > T
                          ? (T = $)
                          : "avg" === n && ((_ += $), D++);
                      }
                      if (isNaN(T)) break;
                    }
                    f[I + k * b + w] = "avg" === n ? _ / D : T;
                  }
            return p.toTensor();
          }),
          (e.prototype.maxPool = function (t, e) {
            return this.pool(t, e, "max");
          }),
          (e.prototype.maxPoolPositions = function (t, e) {
            for (
              var n = Ln(e.outShape, "int32"),
                r = e.strideHeight,
                a = e.strideWidth,
                i = e.dilationHeight,
                o = e.dilationWidth,
                s = e.effectiveFilterHeight,
                u = e.effectiveFilterWidth,
                c = e.padInfo.top,
                l = e.padInfo.left,
                h = this.bufferSync(t),
                d = 0;
              d < e.batchSize;
              ++d
            )
              for (var p = 0; p < e.inChannels; ++p)
                for (var f = 0; f < e.outHeight; ++f) {
                  for (var m = f * r - c, g = m; g < 0; ) g += i;
                  for (
                    var b = Math.min(e.inHeight, s + m), v = 0;
                    v < e.outWidth;
                    ++v
                  ) {
                    for (var y = v * a - l, x = y; x < 0; ) x += o;
                    for (
                      var w = Math.min(e.inWidth, u + y),
                        C = Number.NEGATIVE_INFINITY,
                        O = -1,
                        E = g;
                      E < b;
                      E += i
                    )
                      for (var S = E - m, I = x; I < w; I += o) {
                        var k = I - y,
                          N = h.get(d, E, I, p);
                        N > C && ((C = N), (O = S * u + k));
                      }
                    n.set(O, d, f, v, p);
                  }
                }
            return n.toTensor();
          }),
          (e.prototype.maxPoolBackprop = function (t, e, n, r) {
            jl([e, n], "maxPoolBackprop");
            for (
              var a = this.maxPoolPositions(e, r),
                i = r.strideHeight,
                o = r.strideWidth,
                s = r.dilationHeight,
                u = r.dilationWidth,
                c = r.effectiveFilterHeight,
                l = r.effectiveFilterWidth,
                h = l - 1 - r.padInfo.left,
                d = c - 1 - r.padInfo.top,
                p = Ln(e.shape, "float32"),
                f = this.bufferSync(a),
                m = this.bufferSync(t),
                g = 0;
              g < r.batchSize;
              ++g
            )
              for (var b = 0; b < r.inChannels; ++b)
                for (var v = 0; v < r.inHeight; ++v)
                  for (var y = 0; y < r.inWidth; ++y) {
                    for (
                      var x = v - d, w = y - h, C = 0, O = 0;
                      O < c;
                      O += s
                    ) {
                      var E = (x + O) / i;
                      if (!(E < 0 || E >= r.outHeight || Math.floor(E) !== E))
                        for (var S = 0; S < l; S += u) {
                          var I = (w + S) / o;
                          if (
                            !(I < 0 || I >= r.outWidth || Math.floor(I) !== I)
                          ) {
                            var k =
                              c * l - 1 - f.get(g, E, I, b) === O * l + S
                                ? 1
                                : 0;
                            0 !== k && (C += m.get(g, E, I, b) * k);
                          }
                        }
                    }
                    p.set(C, g, v, y, b);
                  }
            return p.toTensor();
          }),
          (e.prototype.avgPoolBackprop = function (t, e, n) {
            jl([t, e], "avgPoolBackprop");
            for (
              var r = n.strideHeight,
                a = n.strideWidth,
                i = n.filterHeight,
                o = n.filterWidth,
                s = n.dilationHeight,
                u = n.dilationWidth,
                c = n.effectiveFilterHeight,
                l = n.effectiveFilterWidth,
                h = l - 1 - n.padInfo.left,
                d = c - 1 - n.padInfo.top,
                p = Ln(e.shape, "float32"),
                f = 1 / (i * o),
                m = this.bufferSync(t),
                g = 0;
              g < n.batchSize;
              ++g
            )
              for (var b = 0; b < n.inChannels; ++b)
                for (var v = 0; v < n.inHeight; ++v)
                  for (var y = 0; y < n.inWidth; ++y) {
                    for (
                      var x = v - d, w = y - h, C = 0, O = 0;
                      O < c;
                      O += s
                    ) {
                      var E = (x + O) / r;
                      if (!(E < 0 || E >= n.outHeight || Math.floor(E) !== E))
                        for (var S = 0; S < l; S += u) {
                          var I = (w + S) / a;
                          I < 0 ||
                            I >= n.outWidth ||
                            Math.floor(I) !== I ||
                            (C += m.get(g, E, I, b));
                        }
                    }
                    p.set(C * f, g, v, y, b);
                  }
            return p.toTensor();
          }),
          (e.prototype.pool3d = function (t, e, n) {
            jl(t, "pool3d");
            for (
              var r = e.strideDepth,
                a = e.strideHeight,
                i = e.strideWidth,
                o = e.dilationDepth,
                s = e.dilationHeight,
                u = e.dilationWidth,
                c = e.effectiveFilterDepth,
                l = e.effectiveFilterHeight,
                h = e.effectiveFilterWidth,
                d = e.padInfo.front,
                p = e.padInfo.top,
                f = e.padInfo.left,
                m =
                  "max" === n
                    ? Number.NEGATIVE_INFINITY
                    : Number.POSITIVE_INFINITY,
                g = this.readSync(t.dataId),
                b = Ln(e.outShape, t.dtype),
                v = b.values,
                y =
                  e.outShape[1] * e.outShape[2] * e.outShape[3] * e.outShape[4],
                x = e.outShape[2] * e.outShape[3] * e.outShape[4],
                w = e.outShape[3] * e.outShape[4],
                C = e.outShape[4],
                O = 0;
              O < e.batchSize;
              ++O
            )
              for (
                var E = O * y, S = O * t.strides[0], I = 0;
                I < e.inChannels;
                ++I
              )
                for (var k = 0; k < e.outDepth; ++k) {
                  for (var N = k * r - d, R = N; R < 0; ) R += o;
                  for (
                    var A = Math.min(e.inDepth, c + N), T = E + k * x, _ = 0;
                    _ < e.outHeight;
                    ++_
                  ) {
                    for (var D = _ * a - p, F = D; F < 0; ) F += s;
                    for (
                      var M = Math.min(e.inHeight, l + D), j = T + _ * w, $ = 0;
                      $ < e.outWidth;
                      ++$
                    ) {
                      for (var B = $ * i - f, P = B; P < 0; ) P += u;
                      for (
                        var L = Math.min(e.inWidth, h + B),
                          z = j + $ * C,
                          W = m,
                          V = 0,
                          U = 0,
                          G = R;
                        G < A;
                        G += o
                      ) {
                        for (
                          var H = S + G * t.strides[1], q = F;
                          q < M;
                          q += s
                        ) {
                          for (
                            var K = H + q * t.strides[2], X = P;
                            X < L;
                            X += u
                          ) {
                            var Y = g[K + X * t.strides[3] + I];
                            if (
                              ("max" === n && Y > W
                                ? (W = Y)
                                : "avg" === n && ((V += Y), U++),
                              isNaN(W))
                            )
                              break;
                          }
                          if (isNaN(W)) break;
                        }
                        if (isNaN(W)) break;
                      }
                      v[z + I] = "avg" === n ? V / U : W;
                    }
                  }
                }
            return b.toTensor();
          }),
          (e.prototype.avgPool3d = function (t, e) {
            return jl(t, "avgPool3d"), this.pool3d(t, e, "avg").toFloat();
          }),
          (e.prototype.avgPool3dBackprop = function (t, e, n) {
            jl([t, e], "avgPool3dBackprop");
            for (
              var r = n.strideDepth,
                a = n.strideHeight,
                i = n.strideWidth,
                o = n.filterDepth,
                s = n.filterHeight,
                u = n.filterWidth,
                c = n.dilationDepth,
                l = n.dilationHeight,
                h = n.dilationWidth,
                d = n.effectiveFilterDepth,
                p = n.effectiveFilterHeight,
                f = n.effectiveFilterWidth,
                m = d - 1 - n.padInfo.front,
                g = f - 1 - n.padInfo.left,
                b = p - 1 - n.padInfo.top,
                v = Ln(e.shape, "float32"),
                y = 1 / (o * s * u),
                x = this.bufferSync(t),
                w = 0;
              w < n.batchSize;
              ++w
            )
              for (var C = 0; C < n.inChannels; ++C)
                for (var O = 0; O < n.inDepth; ++O)
                  for (var E = 0; E < n.inHeight; ++E)
                    for (var S = 0; S < n.inWidth; ++S) {
                      for (
                        var I = O - m, k = E - b, N = S - g, R = 0, A = 0;
                        A < d;
                        A += c
                      ) {
                        var T = (I + A) / r;
                        if (!(T < 0 || T >= n.outDepth || Math.floor(T) !== T))
                          for (var _ = 0; _ < p; _ += l) {
                            var D = (k + _) / a;
                            if (
                              !(
                                D < 0 ||
                                D >= n.outHeight ||
                                Math.floor(D) !== D
                              )
                            )
                              for (var F = 0; F < f; F += h) {
                                var M = (N + F) / i;
                                M < 0 ||
                                  M >= n.outWidth ||
                                  Math.floor(M) !== M ||
                                  (R += x.get(w, T, D, M, C));
                              }
                          }
                      }
                      v.set(R * y, w, O, E, S, C);
                    }
            return v.toTensor();
          }),
          (e.prototype.maxPool3d = function (t, e) {
            return jl(t, "maxPool3d"), this.pool3d(t, e, "max").toFloat();
          }),
          (e.prototype.maxPool3dPositions = function (t, e) {
            for (
              var n = Ln(e.outShape, "int32"),
                r = e.strideDepth,
                a = e.strideHeight,
                i = e.strideWidth,
                o = e.dilationDepth,
                s = e.dilationHeight,
                u = e.dilationWidth,
                c = e.effectiveFilterDepth,
                l = e.effectiveFilterHeight,
                h = e.effectiveFilterWidth,
                d = e.padInfo.front,
                p = e.padInfo.top,
                f = e.padInfo.left,
                m = this.bufferSync(t),
                g = 0;
              g < e.batchSize;
              ++g
            )
              for (var b = 0; b < e.inChannels; ++b)
                for (var v = 0; v < e.outDepth; ++v) {
                  for (var y = v * r - d, x = y; x < 0; ) x += o;
                  for (
                    var w = Math.min(e.inDepth, c + y), C = 0;
                    C < e.outHeight;
                    ++C
                  ) {
                    for (var O = C * a - p, E = O; E < 0; ) E += s;
                    for (
                      var S = Math.min(e.inHeight, l + O), I = 0;
                      I < e.outWidth;
                      ++I
                    ) {
                      for (var k = I * i - f, N = k; N < 0; ) N += u;
                      for (
                        var R = Math.min(e.inWidth, h + k),
                          A = Number.NEGATIVE_INFINITY,
                          T = -1,
                          _ = x;
                        _ < w;
                        _ += o
                      )
                        for (var D = _ - y, F = E; F < S; F += s)
                          for (var M = F - O, j = N; j < R; j += u) {
                            var $ = j - k,
                              B = m.get(g, _, F, j, b);
                            B >= A && ((A = B), (T = D * l * h + M * l + $));
                          }
                      n.set(T, g, v, C, I, b);
                    }
                  }
                }
            return n.toTensor();
          }),
          (e.prototype.maxPool3dBackprop = function (t, e, n, r) {
            jl([e, n], "maxPool3dBackprop");
            for (
              var a = this.maxPool3dPositions(e, r),
                i = r.strideDepth,
                o = r.strideHeight,
                s = r.strideWidth,
                u = r.dilationDepth,
                c = r.dilationHeight,
                l = r.dilationWidth,
                h = r.effectiveFilterDepth,
                d = r.effectiveFilterHeight,
                p = r.effectiveFilterWidth,
                f = h - 1 - r.padInfo.front,
                m = p - 1 - r.padInfo.left,
                g = d - 1 - r.padInfo.top,
                b = Ln(e.shape, "float32"),
                v = this.bufferSync(a),
                y = this.bufferSync(t),
                x = 0;
              x < r.batchSize;
              ++x
            )
              for (var w = 0; w < r.inChannels; ++w)
                for (var C = 0; C < r.inDepth; ++C)
                  for (var O = 0; O < r.inHeight; ++O)
                    for (var E = 0; E < r.inWidth; ++E) {
                      for (
                        var S = C - f, I = O - g, k = E - m, N = 0, R = 0;
                        R < h;
                        R += u
                      ) {
                        var A = (S + R) / i;
                        if (!(A < 0 || A >= r.outDepth || Math.floor(A) !== A))
                          for (var T = 0; T < d; T += c) {
                            var _ = (I + T) / o;
                            if (
                              !(
                                _ < 0 ||
                                _ >= r.outHeight ||
                                Math.floor(_) !== _
                              )
                            )
                              for (var D = 0; D < p; D += l) {
                                var F = (k + D) / s;
                                if (
                                  !(
                                    F < 0 ||
                                    F >= r.outWidth ||
                                    Math.floor(F) !== F
                                  )
                                ) {
                                  var M =
                                    h * d * p - 1 - v.get(x, A, _, F, w) ===
                                    R * d * p + T * p + D
                                      ? 1
                                      : 0;
                                  0 !== M && (N += y.get(x, A, _, F, w) * M);
                                }
                              }
                          }
                      }
                      b.set(N, x, C, O, E, w);
                    }
            return b.toTensor();
          }),
          (e.prototype.cast = function (t, e) {
            return Jr(t, e, this);
          }),
          (e.prototype.reshape = function (t, e) {
            return Qr(t, e);
          }),
          (e.prototype.avgPool = function (t, e) {
            return jl(t, "avgPool"), this.pool(t, e, "avg").toFloat();
          }),
          (e.prototype.resizeBilinear = function (t, e, n, r) {
            jl(t, "resizeBilinear");
            for (
              var a = t.shape,
                i = a[0],
                o = a[1],
                s = a[2],
                u = a[3],
                c = this.readSync(t.dataId),
                l = new Float32Array(R([i, e, n, u])),
                h = [r && e > 1 ? o - 1 : o, r && n > 1 ? s - 1 : s],
                d = [r && e > 1 ? e - 1 : e, r && n > 1 ? n - 1 : n],
                p = 0,
                f = h[0] / d[0],
                m = h[1] / d[1],
                g = 0;
              g < i;
              g++
            )
              for (var b = 0; b < e; b++)
                for (
                  var v = f * b,
                    y = Math.floor(v),
                    x = v - y,
                    w = Math.min(o - 1, Math.ceil(v)),
                    C = g * t.strides[0] + y * t.strides[1],
                    O = g * t.strides[0] + w * t.strides[1],
                    E = 0;
                  E < n;
                  E++
                )
                  for (
                    var S = m * E,
                      I = Math.floor(S),
                      k = S - I,
                      N = Math.min(s - 1, Math.ceil(S)),
                      A = C + I * t.strides[2],
                      T = O + I * t.strides[2],
                      _ = C + N * t.strides[2],
                      D = O + N * t.strides[2],
                      F = 0;
                    F < u;
                    F++
                  ) {
                    var M = c[A + F],
                      j = c[T + F],
                      $ = M + (c[_ + F] - M) * k,
                      B = $ + (j + (c[D + F] - j) * k - $) * x;
                    l[p++] = B;
                  }
            return cn(l, [i, e, n, u]);
          }),
          (e.prototype.resizeBilinearBackprop = function (t, e, n) {
            jl([t, e], "resizeBilinearBackprop");
            for (
              var r = e.shape,
                a = r[0],
                i = r[1],
                o = r[2],
                s = r[3],
                u = t.shape,
                c = u[1],
                l = u[2],
                h = new Float32Array(a * i * o * s),
                d = [n && c > 1 ? i - 1 : i, n && l > 1 ? o - 1 : o],
                p = [n && c > 1 ? c - 1 : c, n && l > 1 ? l - 1 : l],
                f = d[0] / p[0],
                m = d[1] / p[1],
                g = this.readSync(t.dataId),
                b = 0,
                v = 0;
              v < a;
              v++
            )
              for (var y = v * e.strides[0], x = 0; x < c; x++)
                for (
                  var w = x * f,
                    C = Math.floor(w),
                    O = Math.min(Math.ceil(w), i - 1),
                    E = y + C * e.strides[1],
                    S = y + O * e.strides[1],
                    I = w - C,
                    k = 1 - I,
                    N = 0;
                  N < l;
                  N++
                )
                  for (
                    var R = N * m,
                      A = Math.floor(R),
                      T = Math.min(Math.ceil(R), o - 1),
                      _ = R - A,
                      D = 1 - _,
                      F = E + A * e.strides[2],
                      M = E + T * e.strides[2],
                      j = S + A * e.strides[2],
                      $ = S + T * e.strides[2],
                      B = k * D,
                      P = k * _,
                      L = I * D,
                      z = I * _,
                      W = 0;
                    W < s;
                    W++
                  ) {
                    var V = g[b++];
                    (h[F + W] += V * B),
                      (h[M + W] += V * P),
                      (h[j + W] += V * L),
                      (h[$ + W] += V * z);
                  }
            return mn(h, [a, o, i, s], e.dtype);
          }),
          (e.prototype.resizeNearestNeighbor = function (t, e, n, r) {
            jl(t, "resizeNearestNeighbor");
            for (
              var a = t.shape,
                i = a[0],
                o = a[1],
                s = a[2],
                u = a[3],
                c = this.readSync(t.dataId),
                l = new Float32Array(i * e * n * u),
                h = [r && e > 1 ? o - 1 : o, r && n > 1 ? s - 1 : s],
                d = [r && e > 1 ? e - 1 : e, r && n > 1 ? n - 1 : n],
                p = h[0] / d[0],
                f = h[1] / d[1],
                m = 0,
                g = 0;
              g < i;
              g++
            )
              for (var b = g * t.strides[0], v = 0; v < e; v++)
                for (
                  var y = p * v,
                    x =
                      b +
                      Math.min(o - 1, r ? Math.round(y) : Math.floor(y)) *
                        t.strides[1],
                    w = 0;
                  w < n;
                  w++
                )
                  for (
                    var C = f * w,
                      O =
                        x +
                        Math.min(s - 1, r ? Math.round(C) : Math.floor(C)) *
                          t.strides[2],
                      E = 0;
                    E < u;
                    E++
                  ) {
                    var S = c[O + E];
                    l[m++] = S;
                  }
            return cn(l, [i, e, n, u], t.dtype);
          }),
          (e.prototype.resizeNearestNeighborBackprop = function (t, e, n) {
            jl([t, e], "resizeNearestNeighborBackprop");
            for (
              var r = e.shape,
                a = r[0],
                i = r[1],
                o = r[2],
                s = r[3],
                u = t.shape,
                c = u[1],
                l = u[2],
                h = new Float32Array(a * i * o * s),
                d = this.readSync(t.dataId),
                p = [n && c > 1 ? i - 1 : i, n && l > 1 ? o - 1 : o],
                f = [n && c > 1 ? c - 1 : c, n && l > 1 ? l - 1 : l],
                m = p[0] / f[0],
                g = p[1] / f[1],
                b = 1 / m,
                v = 1 / g,
                y = 2 * Math.ceil(b) + 2,
                x = 2 * Math.ceil(v) + 2,
                w = 0;
              w < a;
              w++
            )
              for (var C = w * e.strides[0], O = 0; O < i; O++)
                for (
                  var E = C + O * e.strides[1],
                    S = Math.floor(O * b),
                    I = Math.floor(S - y / 2),
                    k = 0;
                  k < o;
                  k++
                )
                  for (
                    var N = E + k * e.strides[2],
                      R = Math.floor(k * v),
                      A = Math.floor(R - x / 2),
                      T = 0;
                    T < s;
                    T++
                  ) {
                    for (var _ = 0, D = 0; D < y; D++) {
                      var F = D + I;
                      if (!(F < 0 || F >= c)) {
                        var M = C + F * t.strides[1],
                          j = F * m;
                        if (
                          O ===
                          Math.min(i - 1, n ? Math.round(j) : Math.floor(j))
                        )
                          for (var $ = 0; $ < x; $++) {
                            var B = $ + A;
                            if (!(B < 0 || B >= l)) {
                              var P = M + B * t.strides[2],
                                L = B * g;
                              k ===
                                Math.min(
                                  o - 1,
                                  n ? Math.round(L) : Math.floor(L)
                                ) && (_ += d[P + T]);
                            }
                          }
                      }
                    }
                    h[N + T] = _;
                  }
            return mn(h, e.shape, e.dtype);
          }),
          (e.prototype.batchNormalization = function (t, e, n, r, a, i) {
            jl([t, e, n, a, i], "batchNorm");
            for (
              var o = this.readSync(t.dataId),
                s = this.readSync(e.dataId),
                u = this.readSync(n.dataId),
                c = a ? this.readSync(a.dataId) : new Float32Array([1]),
                l = i ? this.readSync(i.dataId) : new Float32Array([0]),
                h = new Float32Array(o.length),
                d = l.length,
                p = c.length,
                f = u.length,
                m = s.length,
                g = 0,
                b = 0,
                v = 0,
                y = 0,
                x = 0;
              x < o.length;
              ++x
            )
              (h[x] =
                l[g++] + ((o[x] - s[b++]) * c[v++]) / Math.sqrt(u[y++] + r)),
                g >= d && (g = 0),
                b >= m && (b = 0),
                v >= p && (v = 0),
                y >= f && (y = 0);
            return mn(h, t.shape);
          }),
          (e.prototype.localResponseNormalization4D = function (t, e, n, r, a) {
            jl(t, "localResponseNormalization4D");
            var i = t.shape[3],
              o = i - 1,
              s = this.readSync(t.dataId),
              u = t.size,
              c = new Float32Array(u);
            function l(t) {
              for (
                var n = t % i,
                  r = t - n + Math.max(0, n - e),
                  a = t - n + Math.min(n + e, o),
                  u = 0;
                r <= a;
                r++
              ) {
                var c = s[r];
                u += c * c;
              }
              return u;
            }
            for (var h = 0; h < u; h++) {
              var d = l(h),
                p = s[h] * Math.pow(n + r * d, -a);
              c[h] = p;
            }
            return mn(c, t.shape);
          }),
          (e.prototype.LRNGrad = function (t, e, n, r, a, i, o) {
            jl(t, "LRNGrad");
            for (
              var s = t.shape[3],
                u = this.readSync(t.dataId),
                c = this.readSync(e.dataId),
                l = this.readSync(n.dataId),
                h = new Float32Array(t.size),
                d = t.size,
                p = 0;
              p < d;
              p++
            ) {
              for (
                var f = p % s,
                  m = p - f + Math.max(0, f - r),
                  g = p - f + Math.min(s, f + r + 1),
                  b = 0,
                  v = m;
                v < g;
                v++
              )
                b += Math.pow(c[v], 2);
              for (b = i * b + a, v = m; v < g; v++) {
                var y = (-2 * i * o * c[v] * l[p]) / b;
                p === v && (y += Math.pow(b, -o)), (y *= u[p]), (h[v] += y);
              }
            }
            return mn(h, t.shape);
          }),
          (e.prototype.multinomial = function (t, e, n, r) {
            jl(t, "multinomial");
            for (
              var a = e ? t : Tr(t),
                i = a.shape[0],
                o = a.shape[1],
                s = bn([i, n], "int32"),
                u = this.readSync(s.dataId),
                c = this.readSync(a.dataId),
                l = 0;
              l < i;
              ++l
            ) {
              var h = l * o,
                d = new Float32Array(o - 1);
              d[0] = c[h];
              for (var p = 1; p < d.length; ++p) d[p] = d[p - 1] + c[h + p];
              for (var f = jn(r.toString()), m = l * n, g = 0; g < n; ++g) {
                var b = f();
                u[m + g] = d.length;
                for (var v = 0; v < d.length; v++)
                  if (b < d[v]) {
                    u[m + g] = v;
                    break;
                  }
              }
            }
            return s;
          }),
          (e.prototype.oneHot = function (t, e, n, r) {
            jl(t, "oneHot");
            var a = new Float32Array(t.size * e);
            a.fill(r);
            for (var i = this.readSync(t.dataId), o = 0; o < t.size; ++o)
              i[o] >= 0 && i[o] < e && (a[o * e + i[o]] = n);
            return pn(a, [t.size, e], "int32");
          }),
          (e.prototype.nonMaxSuppression = function (t, e, n, r, a) {
            return (
              jl(t, "nonMaxSuppression"),
              oa(this.readSync(t.dataId), this.readSync(e.dataId), n, r, a)
            );
          }),
          (e.prototype.fft = function (t) {
            return this.fftBatch(t, !1);
          }),
          (e.prototype.ifft = function (t) {
            return this.fftBatch(t, !0);
          }),
          (e.prototype.fftBatch = function (t, e) {
            for (
              var n = t.shape[0],
                r = t.shape[1],
                a = Ln(t.shape, "float32"),
                i = Ln(t.shape, "float32"),
                o = sn(t).as2D(n, r),
                s = un(t).as2D(n, r),
                u = 0;
              u < n;
              u++
            )
              for (
                var c = o.slice([u, 0], [1, r]),
                  l = s.slice([u, 0], [1, r]),
                  h = on(c, l),
                  d = this.readSync(this.fftImpl(h, e).dataId),
                  p = 0;
                p < r;
                p++
              ) {
                var f = ea(d, p);
                (a.values[u * r + p] = f.real), (i.values[u * r + p] = f.imag);
              }
            return on(a.toTensor(), i.toTensor()).as2D(n, r);
          }),
          (e.prototype.fftImpl = function (t, e) {
            var n = t.as1D(),
              r = n.size;
            if (this.isExponentOf2(r)) {
              var a = this.fftRadix2(n, r, e).as2D(t.shape[0], t.shape[1]);
              return e && (a = on(sn(a).div(hn(r)), un(a).div(hn(r)))), a;
            }
            var i = this.readSync(t.dataId),
              o = (function (t) {
                for (
                  var e = new Float32Array(t.length / 2),
                    n = new Float32Array(t.length / 2),
                    r = 0;
                  r < t.length;
                  r += 2
                )
                  (e[r / 2] = t[r]), (n[r / 2] = t[r + 1]);
                return { real: e, imag: n };
              })(this.fourierTransformByMatmul(i, r, e));
            return on(o.real, o.imag).as2D(t.shape[0], t.shape[1]);
          }),
          (e.prototype.isExponentOf2 = function (t) {
            return 0 == (t & (t - 1));
          }),
          (e.prototype.fftRadix2 = function (t, e, n) {
            if (1 === e) return t;
            var r = this.readSync(t.dataId),
              a = e / 2,
              i = (function (t) {
                for (
                  var e = Math.ceil(t.length / 4),
                    n = new Float32Array(e),
                    r = new Float32Array(e),
                    a = 0;
                  a < t.length;
                  a += 4
                )
                  (n[Math.floor(a / 4)] = t[a]),
                    (r[Math.floor(a / 4)] = t[a + 1]);
                return { real: n, imag: r };
              })(r),
              o = on(i.real, i.imag).as1D(),
              s = (function (t) {
                for (
                  var e = Math.floor(t.length / 4),
                    n = new Float32Array(e),
                    r = new Float32Array(e),
                    a = 2;
                  a < t.length;
                  a += 4
                )
                  (n[Math.floor(a / 4)] = t[a]),
                    (r[Math.floor(a / 4)] = t[a + 1]);
                return { real: n, imag: r };
              })(r),
              u = on(s.real, s.imag).as1D();
            (o = this.fftRadix2(o, a, n)), (u = this.fftRadix2(u, a, n));
            var c = (function (t, e) {
                for (
                  var n = new Float32Array(t / 2),
                    r = new Float32Array(t / 2),
                    a = 0;
                  a < Math.ceil(t / 2);
                  a++
                ) {
                  var i = (e ? 2 : -2) * Math.PI * (a / t);
                  (n[a] = Math.cos(i)), (r[a] = Math.sin(i));
                }
                return { real: n, imag: r };
              })(e, n),
              l = on(c.real, c.imag).mul(u),
              h = o.add(l),
              d = o.sub(l),
              p = sn(h).concat(sn(d)),
              f = un(h).concat(un(d));
            return on(p, f).as1D();
          }),
          (e.prototype.fourierTransformByMatmul = function (t, e, n) {
            for (var r = new Float32Array(2 * e), a = 0; a < e; a++) {
              for (var i = 0, o = 0, s = 0; s < e; s++) {
                var u = ra(a * s, e, n),
                  c = ea(t, s);
                (i += c.real * u.real - c.imag * u.imag),
                  (o += c.real * u.imag + c.imag * u.real);
              }
              n && ((i /= e), (o /= e)), na(r, i, o, a);
            }
            return r;
          }),
          (e.prototype.depthToSpace = function (t, e, n) {
            S("NHWC" === n, function () {
              return (
                "Only NHWC dataFormat supported on CPU for depthToSpace. Got " +
                n
              );
            }),
              S(e > 1, function () {
                return (
                  "blockSize should be > 1 for depthToSpace, but was: " + e
                );
              });
            for (
              var r = t.shape[0],
                a = t.shape[1],
                i = t.shape[2],
                o = t.shape[3],
                s = a * e,
                u = i * e,
                c = o / (e * e),
                l = this.readSync(t.dataId),
                h = new Float32Array(r * s * u * c),
                d = 0,
                p = 0;
              p < r;
              ++p
            )
              for (var f = 0; f < s; ++f)
                for (var m = Math.floor(f / e), g = f % e, b = 0; b < u; ++b)
                  for (
                    var v = Math.floor(b / e), y = (g * e + (b % e)) * c, x = 0;
                    x < c;
                    ++x
                  ) {
                    var w = x + y + o * (v + i * (m + a * p));
                    h[d++] = l[w];
                  }
            return mn(h, [r, s, u, c]);
          }),
          (e.prototype.broadcastedBinaryOp = function (t, e, n, r) {
            var a = Br(t.shape, e.shape),
              i = Ln(a, n),
              o = this.readSync(t.dataId),
              s = this.readSync(e.dataId),
              u = jr(t.shape, a),
              c = jr(e.shape, a),
              l = i.values;
            if (u.length + c.length === 0)
              for (var h = 0; h < l.length; ++h)
                l[h] = r(o[h % o.length], s[h % s.length]);
            else {
              var d = this.bufferSync(t),
                p = this.bufferSync(e),
                f = function (n) {
                  var a = i.indexToLoc(n),
                    h = a.slice(-t.rank);
                  u.forEach(function (t) {
                    return (h[t] = 0);
                  });
                  var f = d.locToIndex(h),
                    m = a.slice(-e.rank);
                  c.forEach(function (t) {
                    return (m[t] = 0);
                  });
                  var g = p.locToIndex(m);
                  l[n] = r(o[f], s[g]);
                };
              for (h = 0; h < l.length; ++h) f(h);
            }
            return i.toTensor();
          }),
          (e.prototype.broadcastedBinaryComplexOp = function (t, e, n) {
            var r = Br(t.shape, e.shape),
              a = Ln(r, "float32"),
              i = Ln(r, "float32"),
              o = this.readSync(t.dataId),
              s = this.readSync(e.dataId),
              u = jr(t.shape, r),
              c = jr(e.shape, r),
              l = a.values,
              h = i.values;
            if (u.length + c.length === 0)
              for (var d = 0; d < l.length; d++) {
                var p = d % o.length,
                  f = d % s.length,
                  m = n(o[2 * p], o[2 * p + 1], s[2 * f], s[2 * f + 1]);
                (l[d] = m.real), (h[d] = m.imag);
              }
            else {
              var g = this.bufferSync(
                  this.data.get(t.dataId).complexTensors.real
                ),
                b = this.bufferSync(
                  this.data.get(e.dataId).complexTensors.real
                ),
                v = function (r) {
                  var i = a.indexToLoc(r),
                    d = i.slice(-t.rank);
                  u.forEach(function (t) {
                    return (d[t] = 0);
                  });
                  var p = g.locToIndex(d),
                    f = i.slice(-e.rank);
                  c.forEach(function (t) {
                    return (f[t] = 0);
                  });
                  var m = b.locToIndex(f),
                    v = n(o[2 * p], o[2 * p + 1], s[2 * m], s[2 * m + 1]);
                  (l[r] = v.real), (h[r] = v.imag);
                };
              for (d = 0; d < l.length; d++) v(d);
            }
            return this.complex(a.toTensor(), i.toTensor());
          }),
          (e.prototype.split = function (t, e, n) {
            return da(t, e, n);
          }),
          (e.prototype.dispose = function () {}),
          (e.prototype.floatPrecision = function () {
            return 32;
          }),
          (e.prototype.epsilon = function () {
            return 1e-7;
          }),
          (e.prototype.cropAndResize = function (t, e, n, r, a, i) {
            for (
              var o = t.shape,
                s = o[0],
                u = o[1],
                c = o[2],
                l = o[3],
                h = e.shape[0],
                d = r[0],
                p = r[1],
                f = Ln([h, d, p, l], "float32"),
                m = this.readSync(e.dataId),
                g = this.readSync(n.dataId),
                b = this.readSync(t.dataId),
                v = t.strides,
                y = f.strides,
                x = 0;
              x < h;
              x++
            ) {
              var w = 4 * x,
                C = m[w],
                O = m[w + 1],
                E = m[w + 2],
                S = m[w + 3],
                I = g[x];
              if (!(I >= s))
                for (
                  var k = d > 1 ? ((E - C) * (u - 1)) / (d - 1) : 0,
                    N = p > 1 ? ((S - O) * (c - 1)) / (p - 1) : 0,
                    R = 0;
                  R < d;
                  R++
                ) {
                  var A = d > 1 ? C * (u - 1) + R * k : 0.5 * (C + E) * (u - 1);
                  if (A < 0 || A > u - 1)
                    for (var T = 0; T < p; T++)
                      for (var _ = 0; _ < l; _++) {
                        var D = _ + T * y[2] + R * y[1] + x * y[0];
                        f.values[D] = i;
                      }
                  else if ("bilinear" === a) {
                    var F = Math.floor(A),
                      M = Math.ceil(A),
                      j = A - F;
                    for (T = 0; T < p; T++)
                      if (
                        (G =
                          p > 1
                            ? O * (c - 1) + T * N
                            : 0.5 * (O + S) * (c - 1)) < 0 ||
                        G > c - 1
                      )
                        for (_ = 0; _ < l; _++)
                          (D = _ + T * y[2] + R * y[1] + x * y[0]),
                            (f.values[D] = i);
                      else {
                        var $ = Math.floor(G),
                          B = Math.ceil(G),
                          P = G - $;
                        for (_ = 0; _ < l; _++) {
                          var L = b[(D = _ + $ * v[2] + F * v[1] + I * v[0])],
                            z = b[(D = _ + B * v[2] + F * v[1] + I * v[0])],
                            W = b[(D = _ + $ * v[2] + M * v[1] + I * v[0])],
                            V = L + (z - L) * P,
                            U =
                              W +
                              (b[(D = _ + B * v[2] + M * v[1] + I * v[0])] -
                                W) *
                                P;
                          (D = _ + T * y[2] + R * y[1] + x * y[0]),
                            (f.values[D] = V + (U - V) * j);
                        }
                      }
                  } else
                    for (T = 0; T < p; ++T) {
                      var G;
                      if (
                        (G =
                          p > 1
                            ? O * (c - 1) + T * N
                            : 0.5 * (O + S) * (c - 1)) < 0 ||
                        G > c - 1
                      )
                        for (_ = 0; _ < l; _++)
                          (D = _ + T * y[2] + R * y[1] + x * y[0]),
                            (f.values[D] = i);
                      else {
                        var H = Math.round(G),
                          q = Math.round(A);
                        for (_ = 0; _ < l; _++) {
                          var K = _ + H * v[2] + q * v[1] + I * v[0],
                            X = _ + T * y[2] + R * y[1] + x * y[0];
                          f.values[X] = b[K];
                        }
                      }
                    }
                }
            }
            return f.toTensor();
          }),
          (e.prototype.sparseToDense = function (t, e, n, r) {
            var a = Cr(0, t, n),
              i = a.sliceRank,
              o = a.numUpdates,
              s = a.sliceSize,
              u = a.strides,
              c = a.outputSize;
            return this.scatter(t, e, n, c, s, o, i, u, r, !1);
          }),
          (e.prototype.gatherND = function (t, e) {
            var n = e.shape,
              r = n[n.length - 1],
              a = vr(t, e),
              i = a[0],
              o = a[1],
              s = a[2],
              u = a[3];
            if (0 === o) return cn([], i, t.dtype);
            for (
              var c = new mt([o, s], t.dtype),
                l = this.readSync(e.dataId),
                h = this.readSync(t.dataId),
                d = 0;
              d < o;
              d++
            ) {
              for (var p = [], f = 0, m = 0; m < r; m++) {
                var g = l[d * r + m];
                (f += g * u[m]), p.push(g);
              }
              if (f < 0 || f >= t.size / s)
                throw new Error(
                  "Invalid indices: " + p + " does not index into " + t.shape
                );
              for (var b = 0; b < s; b++) c.values[d * s + b] = h[f * s + b];
            }
            return c.toTensor().reshape(i);
          }),
          (e.prototype.scatterND = function (t, e, n) {
            var r = Cr(0, t, n),
              a = r.sliceRank,
              i = r.numUpdates,
              o = r.sliceSize,
              s = r.strides,
              u = r.outputSize,
              c = hn(0);
            return this.scatter(t, e, n, u, o, i, a, s, c, !0);
          }),
          (e.prototype.fill = function (t, e, n) {
            var r = L((n = n || Y(e)), R(t));
            return r.fill(e), Mt.makeTensor(r, t, n, this);
          }),
          (e.prototype.onesLike = function (t) {
            if ("string" === t.dtype)
              throw new Error("onesLike is not supported for string tensors");
            return this.fill(t.shape, 1, t.dtype);
          }),
          (e.prototype.zerosLike = function (t) {
            var e = L(t.dtype, R(t.shape));
            return this.makeOutput(e, t.shape, t.dtype);
          }),
          (e.prototype.linspace = function (t, e, n) {
            return Zr(t, e, n);
          }),
          (e.prototype.scatter = function (t, e, n, r, a, i, o, s, u, c) {
            var l = [r / a, a],
              h = this.readSync(t.dataId),
              d = this.readSync(e.dataId);
            if (0 === r) return cn([], n, e.dtype);
            var p = new mt(l, e.dtype);
            p.values.fill(this.readSync(u.dataId)[0]);
            for (var f = 0; f < i; f++) {
              for (var m = [], g = 0, b = 0; b < o; b++) {
                var v = h[f * o + b];
                m.push(v), (g += v * s[b]);
              }
              if (g < 0 || g >= r / a)
                throw new Error(
                  "Invalid indices: " + m + " does not index into " + n
                );
              for (var y = 0; y < a; y++)
                c
                  ? (p.values[g * a + y] += d[f * a + y])
                  : (p.values[g * a + y] = 0 === e.rank ? d[0] : d[f * a + y]);
            }
            return p.toTensor().reshape(n);
          }),
          e
        );
      })(Fr);
      Mt.registerBackend(
        "cpu",
        function () {
          return new Bl();
        },
        1
      );
      for (
        var Pl = 0,
          Ll = [
            {
              kernelName: "NonMaxSuppressionV5",
              backendName: "cpu",
              kernelFunc: function (t) {
                var e = t.inputs,
                  n = t.backend,
                  r = t.attrs,
                  a = e,
                  i = a.boxes,
                  o = a.scores,
                  s = r,
                  u = s.maxOutputSize,
                  c = s.iouThreshold,
                  l = s.scoreThreshold,
                  h = s.softNmsSigma,
                  d = n;
                jl(i, "NonMaxSuppressionWithScore");
                var p = sa(
                  d.data.get(i.dataId).values,
                  d.data.get(o.dataId).values,
                  u,
                  c,
                  l,
                  h
                );
                return [p.selectedIndices, p.selectedScores];
              },
            },
            {
              kernelName: "Square",
              backendName: "cpu",
              kernelFunc: function (t) {
                var e = t.inputs,
                  n = t.backend,
                  r = e.x,
                  a = n;
                jl(r, "square");
                for (
                  var i = a.data.get(r.dataId).values,
                    o = new Float32Array(i.length),
                    s = 0;
                  s < i.length;
                  ++s
                ) {
                  var u = i[s];
                  o[s] = u * u;
                }
                return {
                  dataId: a.write(o, r.shape, r.dtype),
                  shape: r.shape,
                  dtype: r.dtype,
                };
              },
            },
            {
              kernelName: Jo,
              backendName: "cpu",
              kernelFunc: function (t) {
                var e = t.inputs,
                  n = t.backend,
                  r = e,
                  a = r.a,
                  i = r.b,
                  o = n;
                jl([a, i], Jo);
                var s = o.data.get(a.dataId).values,
                  u = o.data.get(i.dataId).values,
                  c = (function (t, e, n, r, a, i) {
                    var o = Br(t, e),
                      s = o.length,
                      u = Z(o),
                      c = P(a, R(o)),
                      l = t.length,
                      h = e.length,
                      d = Z(t),
                      p = Z(e),
                      f = jr(t, o),
                      m = jr(e, o);
                    if (f.length + m.length === 0)
                      for (var g = 0; g < c.length; ++g)
                        c[g] = i(n[g % n.length], r[g % r.length]);
                    else {
                      var b = function (t) {
                        var e = ct(t, s, u),
                          a = e.slice(-l);
                        f.forEach(function (t) {
                          return (a[t] = 0);
                        });
                        var o = ut(a, l, d),
                          g = e.slice(-h);
                        m.forEach(function (t) {
                          return (g[t] = 0);
                        });
                        var b = ut(g, h, p);
                        c[t] = i(n[o], r[b]);
                      };
                      for (g = 0; g < c.length; ++g) b(g);
                    }
                    return [c, o];
                  })(a.shape, i.shape, s, u, a.dtype, function (t, e) {
                    var n = t - e;
                    return n * n;
                  }),
                  l = c[0],
                  h = c[1];
                return {
                  dataId: o.write(l, h, a.dtype),
                  shape: h,
                  dtype: a.dtype,
                };
              },
            },
          ];
        Pl < Ll.length;
        Pl++
      )
        v(Ll[Pl]);
      for (
        var zl,
          Wl = function (t) {
            this.variableNames = ["A"];
            var e = wa(),
              n = t[0],
              r = t[1];
            (this.outputShape = t),
              (this.userCode =
                "\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(" +
                r +
                ".0, " +
                n +
                ".0);\n\n        vec4 values = " +
                e.texture2D +
                "(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    ");
          },
          Vl = function (t) {
            (this.variableNames = ["A"]),
              (this.packedInputs = !1),
              (this.packedOutput = !0);
            var e = wa(),
              n = t[0],
              r = t[1];
            (this.outputShape = t),
              (this.userCode =
                "\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(" +
                r +
                ".0, " +
                n +
                ".0);\n            vec4 values = " +
                e.texture2D +
                "(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        " +
                e.output +
                " = result;\n      }\n    ");
          },
          Ul = 0,
          Gl = [
            {
              kernelName: "FromPixels",
              backendName: "webgl",
              kernelFunc: function (t) {
                var e = t.inputs,
                  n = t.backend,
                  r = t.attrs,
                  a = e.pixels,
                  i = r.numChannels,
                  o =
                    "undefined" != typeof HTMLVideoElement &&
                    a instanceof HTMLVideoElement,
                  s =
                    "undefined" != typeof HTMLImageElement &&
                    a instanceof HTMLImageElement,
                  u = o ? [a.videoWidth, a.videoHeight] : [a.width, a.height],
                  c = u[0],
                  l = u[1],
                  h = [l, c],
                  p = [l, c, i];
                (s || o) &&
                  (null == zl &&
                    (zl = document.createElement("canvas").getContext("2d")),
                  (zl.canvas.width = c),
                  (zl.canvas.height = l),
                  zl.drawImage(a, 0, 0, c, l),
                  (a = zl.canvas));
                var f = n.makeTensorInfo(h, "int32");
                (n.texData.get(f.dataId).usage = Pt.PIXELS),
                  n.gpgpu.uploadPixelDataToTexture(n.getTexture(f.dataId), a);
                var m = d().getBool("WEBGL_PACK") ? new Vl(p) : new Wl(p),
                  g = n.runWebGLProgram(m, [f], "int32");
                return n.disposeData(f.dataId), g;
              },
            },
            {
              kernelName: "NonMaxSuppressionV5",
              backendName: "webgl",
              kernelFunc: function (t) {
                var e = t.inputs,
                  n = t.backend,
                  r = t.attrs;
                Ve(
                  "tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead"
                );
                var a = e,
                  i = a.boxes,
                  o = a.scores,
                  s = r,
                  u = s.maxOutputSize,
                  c = s.iouThreshold,
                  l = s.scoreThreshold,
                  h = s.softNmsSigma,
                  d = n,
                  p = sa(
                    d.readSync(i.dataId),
                    d.readSync(o.dataId),
                    u,
                    c,
                    l,
                    h
                  );
                return [p.selectedIndices, p.selectedScores];
              },
            },
            {
              kernelName: "Square",
              backendName: "webgl",
              kernelFunc: function (t) {
                var e = t.inputs,
                  n = t.backend,
                  r = e.x,
                  a = n,
                  i = new Ao(r.shape, "return x * x;");
                return a.runWebGLProgram(i, [r], r.dtype);
              },
            },
            {
              kernelName: Jo,
              backendName: "webgl",
              kernelFunc: function (t) {
                var e = t.inputs,
                  n = t.backend,
                  r = e,
                  a = r.a,
                  i = r.b,
                  o = n,
                  s = d().getBool("WEBGL_PACK_BINARY_OPERATIONS")
                    ? new qa("return (a - b) * (a - b);", a.shape, i.shape)
                    : new Ga("return (a - b) * (a - b);", a.shape, i.shape);
                return o.compileAndRun(s, [a, i]);
              },
            },
          ];
        Ul < Gl.length;
        Ul++
      )
        v(Gl[Ul]);
      for (
        var Hl = 0,
          ql = [
            {
              kernelName: "Square",
              gradFunc: function (t, e) {
                var n = e[0];
                return {
                  x: function () {
                    return t.mul(n.toFloat().mul(2));
                  },
                };
              },
            },
            {
              kernelName: Jo,
              gradFunc: function (t, e) {
                var n = e[0],
                  r = e[1],
                  a = hn(2);
                return {
                  a: function () {
                    return pu(t, pu(a, vu(n, r)));
                  },
                  b: function () {
                    return pu(t, pu(a, vu(r, n)));
                  },
                };
              },
            },
          ];
        Hl < ql.length;
        Hl++
      )
        y(ql[Hl]);
      var Kl = (function () {
        function t() {}
        return (
          (t.prototype.fetch = function (t, e) {
            return fetch(t, e);
          }),
          (t.prototype.now = function () {
            return performance.now();
          }),
          (t.prototype.encode = function (t, e) {
            if ("utf-8" !== e && "utf8" !== e)
              throw new Error(
                "Browser's encoder only supports utf-8, but got " + e
              );
            return (
              null == this.textEncoder &&
                (this.textEncoder = new TextEncoder()),
              this.textEncoder.encode(t)
            );
          }),
          (t.prototype.decode = function (t, e) {
            return new TextDecoder(e).decode(t);
          }),
          t
        );
      })();
      d().get("IS_BROWSER") && d().setPlatform("browser", new Kl());
      var Xl,
        Yl = (function () {
          function t() {
            (this.util = n(65)),
              (this.textEncoder = new this.util.TextEncoder());
          }
          return (
            (t.prototype.fetch = function (t, e) {
              return null != d().global.fetch
                ? d().global.fetch(t, e)
                : (null == Xl && (Xl = n(64)), Xl(t, e));
            }),
            (t.prototype.now = function () {
              var t = r.hrtime();
              return 1e3 * t[0] + t[1] / 1e6;
            }),
            (t.prototype.encode = function (t, e) {
              if ("utf-8" !== e && "utf8" !== e)
                throw new Error(
                  "Node built-in encoder only supports utf-8, but got " + e
                );
              return this.textEncoder.encode(t);
            }),
            (t.prototype.decode = function (t, e) {
              return 0 === t.length
                ? ""
                : new this.util.TextDecoder(e).decode(t);
            }),
            t
          );
        })();
      d().get("IS_NODE") && d().setPlatform("node", new Yl());
      var Jl = { float32: 4, int32: 4, uint16: 2, uint8: 1, bool: 1 };
      function Ql(t, e) {
        for (
          var n = {},
            r = 0,
            a = function (e) {
              var a = e.name,
                i = e.dtype,
                o = e.shape,
                s = R(o),
                u = void 0;
              if (("quantization" in e)) {
                var c = e.quantization;
                if ("uint8" !== c.dtype && "uint16" !== c.dtype)
                  throw new Error(
                    "Weight " +
                      e.name +
                      " has unknown quantization dtype " +
                      c.dtype +
                      ". Supported quantization dtypes are: 'uint8' and 'uint16'."
                  );
                var l = Jl[c.dtype],
                  h = t.slice(r, r + s * l),
                  d =
                    "uint8" === c.dtype
                      ? new Uint8Array(h)
                      : new Uint16Array(h);
                if ("float32" === i)
                  u = Float32Array.from(d, function (t) {
                    return t * c.scale + c.min;
                  });
                else {
                  if ("int32" !== i)
                    throw new Error(
                      "Unsupported dtype in weight '" + a + "': " + i
                    );
                  u = Int32Array.from(d, function (t) {
                    return Math.round(t * c.scale + c.min);
                  });
                }
                r += s * l;
              } else if ("string" === i) {
                var p = R(e.shape);
                u = [];
                for (var f = 0; f < p; f++) {
                  var m = new Uint32Array(t.slice(r, r + 4))[0];
                  r += 4;
                  var g = new Uint8Array(t.slice(r, r + m));
                  u.push(g), (r += m);
                }
              } else {
                var b = Jl[i];
                if (((h = t.slice(r, r + s * b)), "float32" === i))
                  u = new Float32Array(h);
                else if ("int32" === i) u = new Int32Array(h);
                else {
                  if ("bool" !== i)
                    throw new Error(
                      "Unsupported dtype in weight '" + a + "': " + i
                    );
                  u = new Uint8Array(h);
                }
                r += s * b;
              }
              n[a] = cn(u, o, i);
            },
            i = 0,
            o = e;
          i < o.length;
          i++
        )
          a(o[i]);
        return n;
      }
      function Zl(t) {
        if (null === t)
          throw new Error("Invalid input value: " + JSON.stringify(t));
        var e = 0,
          n = [];
        t.forEach(function (t) {
          if (
            ((e += t.byteLength),
            n.push(
              t.byteLength === t.buffer.byteLength ? t : new t.constructor(t)
            ),
            !(
              t instanceof Float32Array ||
              t instanceof Int32Array ||
              t instanceof Uint8Array
            ))
          )
            throw new Error(
              "Unsupported TypedArray subtype: " + t.constructor.name
            );
        });
        var r = new Uint8Array(e),
          a = 0;
        return (
          n.forEach(function (t) {
            r.set(new Uint8Array(t.buffer), a), (a += t.byteLength);
          }),
          r.buffer
        );
      }
      var th =
        void 0 !== a &&
        ("undefined" == typeof Blob ||
          "undefined" == typeof atob ||
          "undefined" == typeof btoa);
      function eh(t) {
        return th ? a.byteLength(t) : new Blob([t]).size;
      }
      function nh(t) {
        var e = 0;
        t.forEach(function (t) {
          e += t.byteLength;
        });
        var n = new Uint8Array(e),
          r = 0;
        return (
          t.forEach(function (t) {
            n.set(new Uint8Array(t), r), (r += t.byteLength);
          }),
          n.buffer
        );
      }
      function rh(t) {
        for (t = t.trim(); t.endsWith("/"); ) t = t.slice(0, t.length - 1);
        var e = t.split("/");
        return e[e.length - 1];
      }
      function ah(t) {
        if (t.modelTopology instanceof ArrayBuffer)
          throw new Error(
            "Expected JSON model topology, received ArrayBuffer."
          );
        return {
          dateSaved: new Date(),
          modelTopologyType: "JSON",
          modelTopologyBytes:
            null == t.modelTopology ? 0 : eh(JSON.stringify(t.modelTopology)),
          weightSpecsBytes:
            null == t.weightSpecs ? 0 : eh(JSON.stringify(t.weightSpecs)),
          weightDataBytes: null == t.weightData ? 0 : t.weightData.byteLength,
        };
      }
      var ih = (function () {
          function t() {
            (this.saveRouters = []), (this.loadRouters = []);
          }
          return (
            (t.getInstance = function () {
              return null == t.instance && (t.instance = new t()), t.instance;
            }),
            (t.registerSaveRouter = function (e) {
              t.getInstance().saveRouters.push(e);
            }),
            (t.registerLoadRouter = function (e) {
              t.getInstance().loadRouters.push(e);
            }),
            (t.getSaveHandlers = function (e) {
              return t.getHandlers(e, "save");
            }),
            (t.getLoadHandlers = function (e, n) {
              return t.getHandlers(e, "load", n);
            }),
            (t.getHandlers = function (e, n, r) {
              var a = [];
              return (
                ("load" === n
                  ? t.getInstance().loadRouters
                  : t.getInstance().saveRouters
                ).forEach(function (t) {
                  var n = t(e, r);
                  null !== n && a.push(n);
                }),
                a
              );
            }),
            t
          );
        })(),
        oh = "://",
        sh = (function () {
          function t() {
            this.managers = {};
          }
          return (
            (t.getInstance = function () {
              return null == t.instance && (t.instance = new t()), t.instance;
            }),
            (t.registerManager = function (e, n) {
              S(null != e, function () {
                return "scheme must not be undefined or null.";
              }),
                e.endsWith(oh) && (e = e.slice(0, e.indexOf(oh))),
                S(e.length > 0, function () {
                  return "scheme must not be an empty string.";
                });
              var r = t.getInstance();
              S(null == r.managers[e], function () {
                return (
                  "A model store manager is already registered for scheme '" +
                  e +
                  "'."
                );
              }),
                (r.managers[e] = n);
            }),
            (t.getManager = function (t) {
              var e = this.getInstance().managers[t];
              if (null == e)
                throw new Error(
                  "Cannot find model manager for scheme '" + t + "'"
                );
              return e;
            }),
            (t.getSchemes = function () {
              return Object.keys(this.getInstance().managers);
            }),
            t
          );
        })();
      function uh(t) {
        if (-1 === t.indexOf(oh))
          throw new Error(
            "The url string provided does not contain a scheme. Supported schemes are: " +
              sh.getSchemes().join(",")
          );
        return { scheme: t.split(oh)[0], path: t.split(oh)[1] };
      }
      function ch(t, e, n) {
        return (
          void 0 === n && (n = !1),
          u(this, void 0, void 0, function () {
            var r, a, i, o, s, u, l, h, d;
            return c(this, function (c) {
              switch (c.label) {
                case 0:
                  return (
                    S(t !== e, function () {
                      return "Old path and new path are the same: '" + t + "'";
                    }),
                    S((r = ih.getLoadHandlers(t)).length > 0, function () {
                      return (
                        "Copying failed because no load handler is found for source URL " +
                        t +
                        "."
                      );
                    }),
                    S(r.length < 2, function () {
                      return (
                        "Copying failed because more than one (" +
                        r.length +
                        ") load handlers for source URL " +
                        t +
                        "."
                      );
                    }),
                    (a = r[0]),
                    S((i = ih.getSaveHandlers(e)).length > 0, function () {
                      return (
                        "Copying failed because no save handler is found for destination URL " +
                        e +
                        "."
                      );
                    }),
                    S(i.length < 2, function () {
                      return (
                        "Copying failed because more than one (" +
                        r.length +
                        ") save handlers for destination URL " +
                        e +
                        "."
                      );
                    }),
                    (o = i[0]),
                    (s = uh(t).scheme),
                    (u = uh(t).path),
                    (l = s === uh(t).scheme),
                    [4, a.load()]
                  );
                case 1:
                  return (
                    (h = c.sent()),
                    n && l ? [4, sh.getManager(s).removeModel(u)] : [3, 3]
                  );
                case 2:
                  c.sent(), (c.label = 3);
                case 3:
                  return [4, o.save(h)];
                case 4:
                  return (
                    (d = c.sent()),
                    !n || l ? [3, 6] : [4, sh.getManager(s).removeModel(u)]
                  );
                case 5:
                  c.sent(), (c.label = 6);
                case 6:
                  return [2, d.modelArtifactsInfo];
              }
            });
          })
        );
      }
      var lh = "models_store",
        hh = "model_info_store";
      function dh() {
        if (!d().getBool("IS_BROWSER"))
          throw new Error(
            "Failed to obtain IndexedDB factory because the current environmentis not a web browser."
          );
        var t = window || self,
          e =
            t.indexedDB ||
            t.mozIndexedDB ||
            t.webkitIndexedDB ||
            t.msIndexedDB ||
            t.shimIndexedDB;
        if (null == e)
          throw new Error(
            "The current browser does not appear to support IndexedDB."
          );
        return e;
      }
      function ph(t) {
        var e = t.result;
        e.createObjectStore(lh, { keyPath: "modelPath" }),
          e.createObjectStore(hh, { keyPath: "modelPath" });
      }
      var fh = (function () {
          function t(t) {
            if (((this.indexedDB = dh()), null == t || !t))
              throw new Error(
                "For IndexedDB, modelPath must not be null, undefined or empty."
              );
            this.modelPath = t;
          }
          return (
            (t.prototype.save = function (t) {
              return u(this, void 0, void 0, function () {
                return c(this, function (e) {
                  if (t.modelTopology instanceof ArrayBuffer)
                    throw new Error(
                      "BrowserLocalStorage.save() does not support saving model topology in binary formats yet."
                    );
                  return [2, this.databaseAction(this.modelPath, t)];
                });
              });
            }),
            (t.prototype.load = function () {
              return u(this, void 0, void 0, function () {
                return c(this, function (t) {
                  return [2, this.databaseAction(this.modelPath)];
                });
              });
            }),
            (t.prototype.databaseAction = function (t, e) {
              var n = this;
              return new Promise(function (t, r) {
                var a = n.indexedDB.open("tensorflowjs", 1);
                (a.onupgradeneeded = function () {
                  return ph(a);
                }),
                  (a.onsuccess = function () {
                    var i = a.result;
                    if (null == e) {
                      var o = i.transaction(lh, "readonly"),
                        s = o.objectStore(lh).get(n.modelPath);
                      (s.onsuccess = function () {
                        if (null == s.result)
                          return (
                            i.close(),
                            r(
                              new Error(
                                "Cannot find model with path '" +
                                  n.modelPath +
                                  "' in IndexedDB."
                              )
                            )
                          );
                        t(s.result.modelArtifacts);
                      }),
                        (s.onerror = function (t) {
                          return i.close(), r(s.error);
                        }),
                        (o.oncomplete = function () {
                          return i.close();
                        });
                    } else {
                      var u,
                        c = ah(e),
                        l = i.transaction(hh, "readwrite"),
                        h = l.objectStore(hh),
                        d = h.put({
                          modelPath: n.modelPath,
                          modelArtifactsInfo: c,
                        });
                      (d.onsuccess = function () {
                        var a = (u = i.transaction(lh, "readwrite"))
                          .objectStore(lh)
                          .put({
                            modelPath: n.modelPath,
                            modelArtifacts: e,
                            modelArtifactsInfo: c,
                          });
                        (a.onsuccess = function () {
                          return t({ modelArtifactsInfo: c });
                        }),
                          (a.onerror = function (t) {
                            var e = (h = l.objectStore(hh)).delete(n.modelPath);
                            (e.onsuccess = function () {
                              return i.close(), r(a.error);
                            }),
                              (e.onerror = function (t) {
                                return i.close(), r(a.error);
                              });
                          });
                      }),
                        (d.onerror = function (t) {
                          return i.close(), r(d.error);
                        }),
                        (l.oncomplete = function () {
                          null == u
                            ? i.close()
                            : (u.oncomplete = function () {
                                return i.close();
                              });
                        });
                    }
                  }),
                  (a.onerror = function (t) {
                    return r(a.error);
                  });
              });
            }),
            (t.URL_SCHEME = "indexeddb://"),
            t
          );
        })(),
        mh = function (t) {
          return d().getBool("IS_BROWSER") &&
            !Array.isArray(t) &&
            t.startsWith(fh.URL_SCHEME)
            ? ((e = t.slice(fh.URL_SCHEME.length)), new fh(e))
            : null;
          var e;
        };
      ih.registerSaveRouter(mh), ih.registerLoadRouter(mh);
      var gh = (function () {
        function t() {
          this.indexedDB = dh();
        }
        return (
          (t.prototype.listModels = function () {
            return u(this, void 0, void 0, function () {
              var t = this;
              return c(this, function (e) {
                return [
                  2,
                  new Promise(function (e, n) {
                    var r = t.indexedDB.open("tensorflowjs", 1);
                    (r.onupgradeneeded = function () {
                      return ph(r);
                    }),
                      (r.onsuccess = function () {
                        var t = r.result,
                          a = t.transaction(hh, "readonly"),
                          i = a.objectStore(hh).getAll();
                        (i.onsuccess = function () {
                          for (
                            var t = {}, n = 0, r = i.result;
                            n < r.length;
                            n++
                          ) {
                            var a = r[n];
                            t[a.modelPath] = a.modelArtifactsInfo;
                          }
                          e(t);
                        }),
                          (i.onerror = function (e) {
                            return t.close(), n(i.error);
                          }),
                          (a.oncomplete = function () {
                            return t.close();
                          });
                      }),
                      (r.onerror = function (t) {
                        return n(r.error);
                      });
                  }),
                ];
              });
            });
          }),
          (t.prototype.removeModel = function (t) {
            return u(this, void 0, void 0, function () {
              var e = this;
              return c(this, function (n) {
                var r;
                return (
                  (t = (r = t).startsWith(fh.URL_SCHEME)
                    ? r.slice(fh.URL_SCHEME.length)
                    : r),
                  [
                    2,
                    new Promise(function (n, r) {
                      var a = e.indexedDB.open("tensorflowjs", 1);
                      (a.onupgradeneeded = function () {
                        return ph(a);
                      }),
                        (a.onsuccess = function () {
                          var e,
                            i = a.result,
                            o = i.transaction(hh, "readwrite"),
                            s = o.objectStore(hh),
                            u = s.get(t);
                          (u.onsuccess = function () {
                            if (null == u.result)
                              return (
                                i.close(),
                                r(
                                  new Error(
                                    "Cannot find model with path '" +
                                      t +
                                      "' in IndexedDB."
                                  )
                                )
                              );
                            var a = s.delete(t),
                              o = function () {
                                var a = (e = i.transaction(lh, "readwrite"))
                                  .objectStore(lh)
                                  .delete(t);
                                (a.onsuccess = function () {
                                  return n(u.result.modelArtifactsInfo);
                                }),
                                  (a.onerror = function (t) {
                                    return r(u.error);
                                  });
                              };
                            (a.onsuccess = o),
                              (a.onerror = function (t) {
                                return o(), i.close(), r(u.error);
                              });
                          }),
                            (u.onerror = function (t) {
                              return i.close(), r(u.error);
                            }),
                            (o.oncomplete = function () {
                              null == e
                                ? i.close()
                                : (e.oncomplete = function () {
                                    return i.close();
                                  });
                            });
                        }),
                        (a.onerror = function (t) {
                          return r(a.error);
                        });
                    }),
                  ]
                );
              });
            });
          }),
          t
        );
      })();
      if (d().getBool("IS_BROWSER"))
        try {
          sh.registerManager(fh.URL_SCHEME, new gh());
        } catch (o) {}
      var bh = "/",
        vh = "tensorflowjs_models",
        yh = "info",
        xh = "model_topology",
        wh = "weight_specs",
        Ch = "weight_data",
        Oh = "model_metadata";
      function Eh(t) {
        return {
          info: [vh, t, yh].join(bh),
          topology: [vh, t, xh].join(bh),
          weightSpecs: [vh, t, wh].join(bh),
          weightData: [vh, t, Ch].join(bh),
          modelMetadata: [vh, t, Oh].join(bh),
        };
      }
      function Sh(t) {
        var e = t.split(bh);
        if (e.length < 3) throw new Error("Invalid key format: " + t);
        return e.slice(1, e.length - 1).join(bh);
      }
      var Ih = (function () {
          function t(t) {
            if (
              !d().getBool("IS_BROWSER") ||
              "undefined" == typeof window ||
              void 0 === window.localStorage
            )
              throw new Error(
                "The current environment does not support local storage."
              );
            if (((this.LS = window.localStorage), null == t || !t))
              throw new Error(
                "For local storage, modelPath must not be null, undefined or empty."
              );
            (this.modelPath = t), (this.keys = Eh(this.modelPath));
          }
          return (
            (t.prototype.save = function (t) {
              return u(this, void 0, void 0, function () {
                var e, n, r;
                return c(this, function (i) {
                  if (t.modelTopology instanceof ArrayBuffer)
                    throw new Error(
                      "BrowserLocalStorage.save() does not support saving model topology in binary formats yet."
                    );
                  (e = JSON.stringify(t.modelTopology)),
                    (n = JSON.stringify(t.weightSpecs)),
                    (r = ah(t));
                  try {
                    return (
                      this.LS.setItem(this.keys.info, JSON.stringify(r)),
                      this.LS.setItem(this.keys.topology, e),
                      this.LS.setItem(this.keys.weightSpecs, n),
                      this.LS.setItem(
                        this.keys.weightData,
                        (function (t) {
                          if (th) return a.from(t).toString("base64");
                          for (
                            var e = new Uint8Array(t),
                              n = "",
                              r = 0,
                              i = e.length;
                            r < i;
                            r++
                          )
                            n += String.fromCharCode(e[r]);
                          return btoa(n);
                        })(t.weightData)
                      ),
                      this.LS.setItem(
                        this.keys.modelMetadata,
                        JSON.stringify({
                          format: t.format,
                          generatedBy: t.generatedBy,
                          convertedBy: t.convertedBy,
                          userDefinedMetadata: t.userDefinedMetadata,
                        })
                      ),
                      [2, { modelArtifactsInfo: r }]
                    );
                  } catch (t) {
                    throw (
                      (this.LS.removeItem(this.keys.info),
                      this.LS.removeItem(this.keys.topology),
                      this.LS.removeItem(this.keys.weightSpecs),
                      this.LS.removeItem(this.keys.weightData),
                      this.LS.removeItem(this.keys.modelMetadata),
                      new Error(
                        "Failed to save model '" +
                          this.modelPath +
                          "' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=" +
                          r.modelTopologyBytes +
                          ", weightSpecsBytes=" +
                          r.weightSpecsBytes +
                          ", weightDataBytes=" +
                          r.weightDataBytes +
                          "."
                      ))
                    );
                  }
                  return [2];
                });
              });
            }),
            (t.prototype.load = function () {
              return u(this, void 0, void 0, function () {
                var t, e, n, r, i, o, s;
                return c(this, function (u) {
                  if (null == (t = JSON.parse(this.LS.getItem(this.keys.info))))
                    throw new Error(
                      "In local storage, there is no model with name '" +
                        this.modelPath +
                        "'"
                    );
                  if ("JSON" !== t.modelTopologyType)
                    throw new Error(
                      "BrowserLocalStorage does not support loading non-JSON model topology yet."
                    );
                  if (
                    ((e = {}),
                    null ==
                      (n = JSON.parse(this.LS.getItem(this.keys.topology))))
                  )
                    throw new Error(
                      "In local storage, the topology of model '" +
                        this.modelPath +
                        "' is missing."
                    );
                  if (
                    ((e.modelTopology = n),
                    null ==
                      (r = JSON.parse(this.LS.getItem(this.keys.weightSpecs))))
                  )
                    throw new Error(
                      "In local storage, the weight specs of model '" +
                        this.modelPath +
                        "' are missing."
                    );
                  if (
                    ((e.weightSpecs = r),
                    null != (i = this.LS.getItem(this.keys.modelMetadata)) &&
                      ((o = JSON.parse(i)),
                      (e.format = o.format),
                      (e.generatedBy = o.generatedBy),
                      (e.convertedBy = o.convertedBy),
                      (e.userDefinedMetadata = o.userDefinedMetadata)),
                    null == (s = this.LS.getItem(this.keys.weightData)))
                  )
                    throw new Error(
                      "In local storage, the binary weight values of model '" +
                        this.modelPath +
                        "' are missing."
                    );
                  return (
                    (e.weightData = (function (t) {
                      if (th) {
                        var e = a.from(t, "base64");
                        return e.buffer.slice(
                          e.byteOffset,
                          e.byteOffset + e.byteLength
                        );
                      }
                      for (
                        var n = atob(t), r = new Uint8Array(n.length), i = 0;
                        i < n.length;
                        ++i
                      )
                        r.set([n.charCodeAt(i)], i);
                      return r.buffer;
                    })(s)),
                    [2, e]
                  );
                });
              });
            }),
            (t.URL_SCHEME = "localstorage://"),
            t
          );
        })(),
        kh = function (t) {
          return d().getBool("IS_BROWSER") &&
            !Array.isArray(t) &&
            t.startsWith(Ih.URL_SCHEME)
            ? ((e = t.slice(Ih.URL_SCHEME.length)), new Ih(e))
            : null;
          var e;
        };
      ih.registerSaveRouter(kh), ih.registerLoadRouter(kh);
      var Nh = (function () {
        function t() {
          S(d().getBool("IS_BROWSER"), function () {
            return "Current environment is not a web browser";
          }),
            S(
              "undefined" == typeof window || void 0 !== window.localStorage,
              function () {
                return "Current browser does not appear to support localStorage";
              }
            ),
            (this.LS = window.localStorage);
        }
        return (
          (t.prototype.listModels = function () {
            return u(this, void 0, void 0, function () {
              var t, e, n, r, a, i;
              return c(this, function (o) {
                for (
                  t = {}, e = vh + bh, n = bh + yh, r = 0;
                  r < this.LS.length;
                  ++r
                )
                  (a = this.LS.key(r)).startsWith(e) &&
                    a.endsWith(n) &&
                    ((i = Sh(a)), (t[i] = JSON.parse(this.LS.getItem(a))));
                return [2, t];
              });
            });
          }),
          (t.prototype.removeModel = function (t) {
            return u(this, void 0, void 0, function () {
              var e, n;
              return c(this, function (r) {
                var a;
                if (
                  ((t = (a = t).startsWith(Ih.URL_SCHEME)
                    ? a.slice(Ih.URL_SCHEME.length)
                    : a),
                  (e = Eh(t)),
                  null == this.LS.getItem(e.info))
                )
                  throw new Error("Cannot find model at path '" + t + "'");
                return (
                  (n = JSON.parse(this.LS.getItem(e.info))),
                  this.LS.removeItem(e.info),
                  this.LS.removeItem(e.topology),
                  this.LS.removeItem(e.weightSpecs),
                  this.LS.removeItem(e.weightData),
                  [2, n]
                );
              });
            });
          }),
          t
        );
      })();
      if (d().getBool("IS_BROWSER"))
        try {
          sh.registerManager(Ih.URL_SCHEME, new Nh());
        } catch (o) {}
      function Rh(t) {
        return new Promise(function (t) {
          return setTimeout(t);
        }).then(t);
      }
      var Ah = (function () {
          function t(e) {
            if (!d().getBool("IS_BROWSER"))
              throw new Error(
                "browserDownloads() cannot proceed because the current environment is not a browser."
              );
            e.startsWith(t.URL_SCHEME) && (e = e.slice(t.URL_SCHEME.length)),
              (null != e && 0 !== e.length) || (e = "model"),
              (this.modelTopologyFileName = e + ".json"),
              (this.weightDataFileName = e + ".weights.bin");
          }
          return (
            (t.prototype.save = function (t) {
              return u(this, void 0, void 0, function () {
                var e, n, r, a, i, o;
                return c(this, function (s) {
                  switch (s.label) {
                    case 0:
                      if ("undefined" == typeof document)
                        throw new Error(
                          "Browser downloads are not supported in this environment since `document` is not present"
                        );
                      if (
                        ((e = window.URL.createObjectURL(
                          new Blob([t.weightData], {
                            type: "application/octet-stream",
                          })
                        )),
                        !(t.modelTopology instanceof ArrayBuffer))
                      )
                        return [3, 1];
                      throw new Error(
                        "BrowserDownloads.save() does not support saving model topology in binary formats yet."
                      );
                    case 1:
                      return (
                        (n = [
                          {
                            paths: ["./" + this.weightDataFileName],
                            weights: t.weightSpecs,
                          },
                        ]),
                        (r = {
                          modelTopology: t.modelTopology,
                          format: t.format,
                          generatedBy: t.generatedBy,
                          convertedBy: t.convertedBy,
                          weightsManifest: n,
                        }),
                        (a = window.URL.createObjectURL(
                          new Blob([JSON.stringify(r)], {
                            type: "application/json",
                          })
                        )),
                        ((i =
                          null == this.jsonAnchor
                            ? document.createElement("a")
                            : this
                                .jsonAnchor).download = this.modelTopologyFileName),
                        (i.href = a),
                        [
                          4,
                          Rh(function () {
                            return i.dispatchEvent(new MouseEvent("click"));
                          }),
                        ]
                      );
                    case 2:
                      return (
                        s.sent(),
                        null == t.weightData
                          ? [3, 4]
                          : (((o =
                              null == this.weightDataAnchor
                                ? document.createElement("a")
                                : this
                                    .weightDataAnchor).download = this.weightDataFileName),
                            (o.href = e),
                            [
                              4,
                              Rh(function () {
                                return o.dispatchEvent(new MouseEvent("click"));
                              }),
                            ])
                      );
                    case 3:
                      s.sent(), (s.label = 4);
                    case 4:
                      return [2, { modelArtifactsInfo: ah(t) }];
                  }
                });
              });
            }),
            (t.URL_SCHEME = "downloads://"),
            t
          );
        })(),
        Th = (function () {
          function t(t) {
            if (null == t || t.length < 1)
              throw new Error(
                "When calling browserFiles, at least 1 file is required, but received " +
                  t
              );
            this.files = t;
          }
          return (
            (t.prototype.load = function () {
              return u(this, void 0, void 0, function () {
                var t,
                  e,
                  n = this;
                return c(this, function (r) {
                  return (
                    (t = this.files[0]),
                    (e = this.files.slice(1)),
                    [
                      2,
                      new Promise(function (r, a) {
                        var i = new FileReader();
                        (i.onload = function (i) {
                          var o = JSON.parse(i.target.result),
                            s = o.modelTopology;
                          if (null != s) {
                            0 === e.length && r({ modelTopology: s });
                            var u = o.weightsManifest;
                            if (null != u) {
                              var c;
                              try {
                                c = n.checkManifestAndWeightFiles(u, e);
                              } catch (t) {
                                return void a(t);
                              }
                              var l = [],
                                h = [],
                                d = [];
                              u.forEach(function (t) {
                                t.paths.forEach(function (t) {
                                  h.push(t), d.push(null);
                                }),
                                  l.push.apply(l, t.weights);
                              }),
                                u.forEach(function (t) {
                                  t.paths.forEach(function (t) {
                                    var e = new FileReader();
                                    (e.onload = function (e) {
                                      var n = e.target.result,
                                        a = h.indexOf(t);
                                      (d[a] = n),
                                        -1 === d.indexOf(null) &&
                                          r({
                                            modelTopology: s,
                                            weightSpecs: l,
                                            weightData: nh(d),
                                            format: o.format,
                                            generatedBy: o.generatedBy,
                                            convertedBy: o.convertedBy,
                                            userDefinedMetadata:
                                              o.userDefinedMetadata,
                                          });
                                    }),
                                      (e.onerror = function (e) {
                                        return a(
                                          "Failed to weights data from file of path '" +
                                            t +
                                            "'."
                                        );
                                      }),
                                      e.readAsArrayBuffer(c[t]);
                                  });
                                });
                            } else
                              a(
                                new Error(
                                  "weightManifest field is missing from file " +
                                    t.name
                                )
                              );
                          } else
                            a(
                              new Error(
                                "modelTopology field is missing from file " +
                                  t.name
                              )
                            );
                        }),
                          (i.onerror = function (e) {
                            return a(
                              "Failed to read model topology and weights manifest JSON from file '" +
                                t.name +
                                "'. BrowserFiles supports loading Keras-style tf.Model artifacts only."
                            );
                          }),
                          i.readAsText(t);
                      }),
                    ]
                  );
                });
              });
            }),
            (t.prototype.checkManifestAndWeightFiles = function (t, e) {
              for (
                var n = [],
                  r = e.map(function (t) {
                    return rh(t.name);
                  }),
                  a = {},
                  i = 0,
                  o = t;
                i < o.length;
                i++
              )
                o[i].paths.forEach(function (t) {
                  var i = rh(t);
                  if (-1 !== n.indexOf(i))
                    throw new Error(
                      "Duplicate file basename found in weights manifest: '" +
                        i +
                        "'"
                    );
                  if ((n.push(i), -1 === r.indexOf(i)))
                    throw new Error(
                      "Weight file with basename '" + i + "' is not provided."
                    );
                  a[t] = e[r.indexOf(i)];
                });
              if (n.length !== e.length)
                throw new Error(
                  "Mismatch in the number of files in weights manifest (" +
                    n.length +
                    ") and the number of weight files provided (" +
                    e.length +
                    ")."
                );
              return a;
            }),
            t
          );
        })();
      function _h(t, e, n, r) {
        !(function (t) {
          S(null != t && Array.isArray(t) && t.length > 0, function () {
            return "promises must be a none empty array";
          });
        })(t),
          (function (t, e) {
            S(t >= 0 && t <= 1, function () {
              return (
                "Progress fraction must be in range [0, 1], but got startFraction " +
                t
              );
            }),
              S(e >= 0 && e <= 1, function () {
                return (
                  "Progress fraction must be in range [0, 1], but got endFraction " +
                  e
                );
              }),
              S(e >= t, function () {
                return (
                  "startFraction must be no more than endFraction, but got startFraction " +
                  t +
                  " and endFraction " +
                  e
                );
              });
          })((n = null == n ? 0 : n), (r = null == r ? 1 : r));
        var a = 0;
        return Promise.all(
          t.map(function (i) {
            return (
              i.then(function (i) {
                var o = n + (++a / t.length) * (r - n);
                return e(o), i;
              }),
              i
            );
          })
        );
      }
      function Dh(t, e) {
        return u(this, void 0, void 0, function () {
          var n, r, a, i, o, s, u, l, h;
          return c(this, function (c) {
            switch (c.label) {
              case 0:
                return (
                  null == e && (e = {}),
                  (n = null == e.fetchFunc ? d().platform.fetch : e.fetchFunc),
                  (r = t.map(function (t) {
                    return n(t, e.requestInit, { isBinary: !0 });
                  })),
                  (a = 0),
                  (i = 0.5),
                  null != e.onProgress ? [3, 2] : [4, Promise.all(r)]
                );
              case 1:
                return (o = c.sent()), [3, 4];
              case 2:
                return [4, _h(r, e.onProgress, a, i)];
              case 3:
                (o = c.sent()), (c.label = 4);
              case 4:
                return (
                  (s = o.map(function (t) {
                    return t.arrayBuffer();
                  })),
                  (u = 0.5),
                  (l = 1),
                  null != e.onProgress ? [3, 6] : [4, Promise.all(s)]
                );
              case 5:
                return (h = c.sent()), [3, 8];
              case 6:
                return [4, _h(s, e.onProgress, u, l)];
              case 7:
                (h = c.sent()), (c.label = 8);
              case 8:
                return [2, h];
            }
          });
        });
      }
      function Fh(t) {
        var e = this;
        return function (n, r, a) {
          return (
            void 0 === r && (r = ""),
            u(e, void 0, void 0, function () {
              var e, i, o, s, u, l, h, d, p, f;
              return c(this, function (c) {
                switch (c.label) {
                  case 0:
                    if (
                      ((e = n.map(function () {
                        return !1;
                      })),
                      (i = {}),
                      (o =
                        null != a
                          ? a.map(function () {
                              return !1;
                            })
                          : []),
                      (s = []),
                      n.forEach(function (t, n) {
                        var r = 0;
                        t.weights.forEach(function (t) {
                          var u =
                              "quantization" in t
                                ? t.quantization.dtype
                                : t.dtype,
                            c = Jl[u] * R(t.shape),
                            l = function () {
                              (e[n] = !0),
                                null == i[n] && (i[n] = []),
                                i[n].push({
                                  manifestEntry: t,
                                  groupOffset: r,
                                  sizeBytes: c,
                                });
                            };
                          null != a
                            ? a.forEach(function (e, n) {
                                e === t.name && (l(), (o[n] = !0));
                              })
                            : l(),
                            s.push(t.name),
                            (r += c);
                        });
                      }),
                      !o.every(function (t) {
                        return t;
                      }))
                    )
                      throw (
                        ((u = a.filter(function (t, e) {
                          return !o[e];
                        })),
                        new Error(
                          "Could not find weights in manifest with names: " +
                            u.join(", ") +
                            ". \nManifest JSON has weights with names: " +
                            s.join(", ") +
                            "."
                        ))
                      );
                    return (
                      (l = e.reduce(function (t, e, n) {
                        return e && t.push(n), t;
                      }, [])),
                      (h = []),
                      l.forEach(function (t) {
                        n[t].paths.forEach(function (t) {
                          var e = r + (r.endsWith("/") ? "" : "/") + t;
                          h.push(e);
                        });
                      }),
                      [4, t(h)]
                    );
                  case 1:
                    return (
                      (d = c.sent()),
                      (p = {}),
                      (f = 0),
                      l.forEach(function (t) {
                        for (
                          var e = n[t].paths.length, r = 0, a = 0;
                          a < e;
                          a++
                        )
                          r += d[f + a].byteLength;
                        for (
                          var o = new ArrayBuffer(r),
                            s = new Uint8Array(o),
                            u = 0,
                            c = 0;
                          c < e;
                          c++
                        ) {
                          var l = new Uint8Array(d[f + c]);
                          s.set(l, u), (u += l.byteLength);
                        }
                        i[t].forEach(function (t) {
                          var e = Ql(
                            o.slice(t.groupOffset, t.groupOffset + t.sizeBytes),
                            [t.manifestEntry]
                          );
                          for (var n in e) p[n] = e[n];
                        }),
                          (f += e);
                      }),
                      [2, p]
                    );
                }
              });
            })
          );
        };
      }
      ih.registerSaveRouter(function (t) {
        return d().getBool("IS_BROWSER") &&
          !Array.isArray(t) &&
          t.startsWith(Ah.URL_SCHEME)
          ? (function (t) {
              return void 0 === t && (t = "model"), new Ah(t);
            })(t.slice(Ah.URL_SCHEME.length))
          : null;
      });
      var Mh = (function () {
        function t(t, e) {
          if (
            ((this.DEFAULT_METHOD = "POST"),
            null == e && (e = {}),
            (this.weightPathPrefix = e.weightPathPrefix),
            (this.onProgress = e.onProgress),
            null != e.fetchFunc
              ? (S("function" == typeof e.fetchFunc, function () {
                  return "Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)";
                }),
                (this.fetch = e.fetchFunc))
              : (this.fetch = d().platform.fetch),
            S(null != t && t.length > 0, function () {
              return "URL path for http must not be null, undefined or empty.";
            }),
            Array.isArray(t) &&
              S(2 === t.length, function () {
                return (
                  "URL paths for http must have a length of 2, (actual length is " +
                  t.length +
                  ")."
                );
              }),
            (this.path = t),
            null != e.requestInit && null != e.requestInit.body)
          )
            throw new Error(
              "requestInit is expected to have no pre-existing body, but has one."
            );
          this.requestInit = e.requestInit || {};
        }
        return (
          (t.prototype.save = function (t) {
            return u(this, void 0, void 0, function () {
              var e, n, r, a;
              return c(this, function (i) {
                switch (i.label) {
                  case 0:
                    if (t.modelTopology instanceof ArrayBuffer)
                      throw new Error(
                        "BrowserHTTPRequest.save() does not support saving model topology in binary formats yet."
                      );
                    return (
                      ((e = Object.assign(
                        { method: this.DEFAULT_METHOD },
                        this.requestInit
                      )).body = new FormData()),
                      (n = [
                        {
                          paths: ["./model.weights.bin"],
                          weights: t.weightSpecs,
                        },
                      ]),
                      (r = {
                        modelTopology: t.modelTopology,
                        format: t.format,
                        generatedBy: t.generatedBy,
                        convertedBy: t.convertedBy,
                        userDefinedMetadata: t.userDefinedMetadata,
                        weightsManifest: n,
                      }),
                      e.body.append(
                        "model.json",
                        new Blob([JSON.stringify(r)], {
                          type: "application/json",
                        }),
                        "model.json"
                      ),
                      null != t.weightData &&
                        e.body.append(
                          "model.weights.bin",
                          new Blob([t.weightData], {
                            type: "application/octet-stream",
                          }),
                          "model.weights.bin"
                        ),
                      [4, this.fetch(this.path, e)]
                    );
                  case 1:
                    if ((a = i.sent()).ok)
                      return [2, { modelArtifactsInfo: ah(t), responses: [a] }];
                    throw new Error(
                      "BrowserHTTPRequest.save() failed due to HTTP response status " +
                        a.status +
                        "."
                    );
                }
              });
            });
          }),
          (t.prototype.load = function () {
            return u(this, void 0, void 0, function () {
              var t, e, n, r, a, i, o, s, u, l, h, d;
              return c(this, function (c) {
                switch (c.label) {
                  case 0:
                    return [4, this.fetch(this.path, this.requestInit)];
                  case 1:
                    if (!(t = c.sent()).ok)
                      throw new Error(
                        "Request to " +
                          this.path +
                          " failed with status code " +
                          t.status +
                          ". Please verify this URL points to the model JSON of the model to load."
                      );
                    c.label = 2;
                  case 2:
                    return c.trys.push([2, 4, , 5]), [4, t.json()];
                  case 3:
                    return (e = c.sent()), [3, 5];
                  case 4:
                    throw (
                      (c.sent(),
                      (n =
                        "Failed to parse model JSON of response from " +
                        this.path +
                        "."),
                      this.path.endsWith(".pb")
                        ? (n +=
                            " Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.")
                        : (n +=
                            " Please make sure the server is serving valid JSON for this request."),
                      new Error(n))
                    );
                  case 5:
                    if (
                      ((r = e.modelTopology),
                      (a = e.weightsManifest),
                      (i = e.generatedBy),
                      (o = e.convertedBy),
                      (s = e.format),
                      (u = e.userDefinedMetadata),
                      null == r && null == a)
                    )
                      throw new Error(
                        "The JSON from HTTP path " +
                          this.path +
                          " contains neither model topology or manifest for weights."
                      );
                    return null == a ? [3, 7] : [4, this.loadWeights(a)];
                  case 6:
                    (d = c.sent()), (l = d[0]), (h = d[1]), (c.label = 7);
                  case 7:
                    return [
                      2,
                      {
                        modelTopology: r,
                        weightSpecs: l,
                        weightData: h,
                        userDefinedMetadata: u,
                        generatedBy: i,
                        convertedBy: o,
                        format: s,
                      },
                    ];
                }
              });
            });
          }),
          (t.prototype.loadWeights = function (t) {
            return u(this, void 0, void 0, function () {
              var e, n, r, a, i, o, s, u, l, h, d;
              return c(this, function (c) {
                switch (c.label) {
                  case 0:
                    for (
                      e = Array.isArray(this.path) ? this.path[1] : this.path,
                        n = (function (t) {
                          var e = t.lastIndexOf("/"),
                            n = t.lastIndexOf("?");
                          return [
                            t.substring(0, e) + "/",
                            n > e ? t.substring(n) : "",
                          ];
                        })(e),
                        r = n[0],
                        a = n[1],
                        i = this.weightPathPrefix || r,
                        o = [],
                        s = 0,
                        u = t;
                      s < u.length;
                      s++
                    )
                      (l = u[s]), o.push.apply(o, l.weights);
                    return (
                      (h = []),
                      t.forEach(function (t) {
                        t.paths.forEach(function (t) {
                          h.push(i + t + a);
                        });
                      }),
                      [
                        4,
                        Dh(h, {
                          requestInit: this.requestInit,
                          fetchFunc: this.fetch,
                          onProgress: this.onProgress,
                        }),
                      ]
                    );
                  case 1:
                    return (d = c.sent()), [2, [o, nh(d)]];
                }
              });
            });
          }),
          (t.URL_SCHEME_REGEX = /^https?:\/\//),
          t
        );
      })();
      function jh(t) {
        return null != t.match(Mh.URL_SCHEME_REGEX);
      }
      var $h = function (t, e) {
        return "undefined" == typeof fetch
          ? null
          : (
              Array.isArray(t)
                ? t.every(function (t) {
                    return jh(t);
                  })
                : jh(t)
            )
          ? Bh(t, { onProgress: e })
          : null;
      };
      function Bh(t, e) {
        return new Mh(t, e);
      }
      ih.registerSaveRouter($h), ih.registerLoadRouter($h);
      var Ph,
        Lh = (function () {
          function t(t) {
            this.modelArtifacts = t;
          }
          return (
            (t.prototype.load = function () {
              return u(this, void 0, void 0, function () {
                return c(this, function (t) {
                  return [2, this.modelArtifacts];
                });
              });
            }),
            t
          );
        })(),
        zh = (function () {
          function t(t) {
            this.saveHandler = t;
          }
          return (
            (t.prototype.save = function (t) {
              return u(this, void 0, void 0, function () {
                return c(this, function (e) {
                  return [2, this.saveHandler(t)];
                });
              });
            }),
            t
          );
        })(),
        Wh = Object.freeze({
          browserFiles: function (t) {
            return new Th(t);
          },
          browserHTTPRequest: function (t, e) {
            return Bh(t, e);
          },
          concatenateArrayBuffers: nh,
          decodeWeights: Ql,
          encodeWeights: function (t, e) {
            return u(this, void 0, void 0, function () {
              var n,
                r,
                a,
                i,
                o,
                s = this;
              return c(this, function (l) {
                switch (l.label) {
                  case 0:
                    for (
                      n = [],
                        r = [],
                        a = Array.isArray(t)
                          ? t.map(function (t) {
                              return t.name;
                            })
                          : Object.keys(t),
                        i = function (i) {
                          var o = a[i],
                            l = Array.isArray(t) ? t[i].tensor : t[o];
                          if (
                            "float32" !== l.dtype &&
                            "int32" !== l.dtype &&
                            "bool" !== l.dtype &&
                            "string" !== l.dtype
                          )
                            throw new Error(
                              "Unsupported dtype in weight '" +
                                o +
                                "': " +
                                l.dtype
                            );
                          var h = { name: o, shape: l.shape, dtype: l.dtype };
                          if ("string" === l.dtype) {
                            var d = new Promise(function (t) {
                              return u(s, void 0, void 0, function () {
                                var e, n, r, a, i, o, s;
                                return c(this, function (u) {
                                  switch (u.label) {
                                    case 0:
                                      return [4, l.bytes()];
                                    case 1:
                                      for (
                                        e = u.sent(),
                                          n =
                                            e.reduce(function (t, e) {
                                              return t + e.length;
                                            }, 0) +
                                            4 * e.length,
                                          r = new Uint8Array(n),
                                          a = 0,
                                          i = 0;
                                        i < e.length;
                                        i++
                                      )
                                        (o = e[i]),
                                          (s = new Uint8Array(
                                            new Uint32Array([o.length]).buffer
                                          )),
                                          r.set(s, a),
                                          (a += 4),
                                          r.set(o, a),
                                          (a += o.length);
                                      return t(r), [2];
                                  }
                                });
                              });
                            });
                            r.push(d);
                          } else r.push(l.data());
                          null != e && (h.group = e), n.push(h);
                        },
                        o = 0;
                      o < a.length;
                      ++o
                    )
                      i(o);
                    return [4, Promise.all(r)];
                  case 1:
                    return [2, { data: Zl(l.sent()), specs: n }];
                }
              });
            });
          },
          fromMemory: function (t, e, n, r) {
            return 1 === arguments.length
              ? null != t.modelTopology || null != t.weightSpecs
                ? new Lh(t)
                : (console.warn(
                    "Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."
                  ),
                  new Lh({ modelTopology: t }))
              : (console.warn(
                  "Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."
                ),
                new Lh({
                  modelTopology: t,
                  weightSpecs: e,
                  weightData: n,
                  trainingConfig: r,
                }));
          },
          getLoadHandlers: function (t, e) {
            return ih.getLoadHandlers(t, e);
          },
          getModelArtifactsInfoForJSON: ah,
          getSaveHandlers: function (t) {
            return ih.getSaveHandlers(t);
          },
          http: Bh,
          isHTTPScheme: jh,
          loadWeights: function (t, e, n, r) {
            return (
              void 0 === e && (e = ""),
              u(this, void 0, void 0, function () {
                return c(this, function (a) {
                  return [
                    2,
                    Fh(function (t) {
                      return Dh(t, { requestInit: r });
                    })(t, e, n),
                  ];
                });
              })
            );
          },
          registerLoadRouter: function (t) {
            return ih.registerLoadRouter(t);
          },
          registerSaveRouter: function (t) {
            return ih.registerSaveRouter(t);
          },
          weightsLoaderFactory: Fh,
          withSaveHandler: function (t) {
            return new zh(t);
          },
          copyModel: function (t, e) {
            return u(this, void 0, void 0, function () {
              return c(this, function (n) {
                return [2, ch(t, e, !1)];
              });
            });
          },
          listModels: function () {
            return u(this, void 0, void 0, function () {
              var t, e, n, r, a, i, o;
              return c(this, function (s) {
                switch (s.label) {
                  case 0:
                    (t = sh.getSchemes()),
                      (e = {}),
                      (n = 0),
                      (r = t),
                      (s.label = 1);
                  case 1:
                    return n < r.length
                      ? ((a = r[n]), [4, sh.getManager(a).listModels()])
                      : [3, 4];
                  case 2:
                    for (o in (i = s.sent())) e[a + oh + o] = i[o];
                    s.label = 3;
                  case 3:
                    return n++, [3, 1];
                  case 4:
                    return [2, e];
                }
              });
            });
          },
          moveModel: function (t, e) {
            return u(this, void 0, void 0, function () {
              return c(this, function (n) {
                return [2, ch(t, e, !0)];
              });
            });
          },
          removeModel: function (t) {
            return u(this, void 0, void 0, function () {
              var e;
              return c(this, function (n) {
                return (
                  (e = uh(t)), [2, sh.getManager(e.scheme).removeModel(e.path)]
                );
              });
            });
          },
        }),
        Vh = an({
          confusionMatrix_: function (t, e, n) {
            var r = He(t, "labels", "confusionMatrix"),
              a = He(e, "predictions", "confusionMatrix");
            S(null == n || (n > 0 && Number.isInteger(n)), function () {
              return (
                "If provided, numClasses must be a positive integer, but got " +
                n
              );
            }),
              S(1 === r.rank, function () {
                return "Expected the rank of labels to be 1, but got " + r.rank;
              }),
              S(1 === a.rank, function () {
                return (
                  "Expected the rank of predictions to be 1, but got " + a.rank
                );
              }),
              S(r.shape[0] === a.shape[0], function () {
                return (
                  "Mismatch in the number of examples: " +
                  r.shape[0] +
                  " vs. " +
                  a.shape[0] +
                  ". Labels and predictions should have the same number of elements."
                );
              }),
              S(n > 0 && Number.isInteger(n), function () {
                return (
                  "numClasses is required to be a positive integer, but got " +
                  n
                );
              });
            var i = Yn(r.asType("int32"), n),
              o = Yn(a.asType("int32"), n);
            return i.transpose().matMul(o).asType("int32");
          },
        }),
        Uh =
          (Object.freeze({ confusionMatrix: Vh }),
          an({
            fromPixels_: function (t, e) {
              if ((void 0 === e && (e = 3), e > 4))
                throw new Error(
                  "Cannot construct Tensor with more than 4 channels from pixels."
                );
              if (null == t)
                throw new Error(
                  "pixels passed to tf.browser.fromPixels() can not be null"
                );
              var n = !1,
                r = !1,
                a = !1,
                i = !1,
                o = !1;
              if (t.data instanceof Uint8Array) n = !0;
              else if (
                "undefined" != typeof ImageData &&
                t instanceof ImageData
              )
                r = !0;
              else if (
                "undefined" != typeof HTMLVideoElement &&
                t instanceof HTMLVideoElement
              )
                a = !0;
              else if (
                "undefined" != typeof HTMLImageElement &&
                t instanceof HTMLImageElement
              )
                i = !0;
              else {
                if (null == t.getContext)
                  throw new Error(
                    "pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was " +
                      t.constructor.name
                  );
                o = !0;
              }
              if (a && a && t.readyState < 2)
                throw new Error(
                  "The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element."
                );
              if (null != g("FromPixels", Mt.backendName))
                return Mt.runKernel(
                  "FromPixels",
                  { pixels: t },
                  { numChannels: e }
                );
              var s,
                u,
                c = a ? [t.videoWidth, t.videoHeight] : [t.width, t.height],
                l = c[0],
                h = c[1];
              if (
                (o
                  ? (s = t.getContext("2d").getImageData(0, 0, l, h).data)
                  : r || n
                  ? (s = t.data)
                  : (i || a) &&
                    (null == Ph &&
                      (Ph = document.createElement("canvas").getContext("2d")),
                    (Ph.canvas.width = l),
                    (Ph.canvas.height = h),
                    Ph.drawImage(t, 0, 0, l, h),
                    (s = Ph.getImageData(0, 0, l, h).data)),
                4 === e)
              )
                u = new Int32Array(s);
              else {
                var d = l * h;
                u = new Int32Array(d * e);
                for (var p = 0; p < d; p++)
                  for (var f = 0; f < e; ++f) u[p * e + f] = s[4 * p + f];
              }
              return fn(u, [h, l, e], "int32");
            },
          })),
        Gh = Object.freeze({
          toPixels: function (t, e) {
            return u(this, void 0, void 0, function () {
              var n,
                r,
                a,
                i,
                o,
                s,
                u,
                l,
                h,
                d,
                p,
                f,
                m,
                g,
                b,
                v,
                y,
                x,
                w,
                C,
                O,
                E,
                S;
              return c(this, function (c) {
                switch (c.label) {
                  case 0:
                    if (
                      ((n = He(t, "img", "toPixels")),
                      t instanceof yt || (n = n.toInt()),
                      2 !== n.rank && 3 !== n.rank)
                    )
                      throw new Error(
                        "toPixels only supports rank 2 or 3 tensors, got rank " +
                          n.rank +
                          "."
                      );
                    if (
                      ((r = n.shape.slice(0, 2)),
                      (a = r[0]),
                      (i = r[1]),
                      (o = 2 === n.rank ? 1 : n.shape[2]) > 4 || 2 === o)
                    )
                      throw new Error(
                        "toPixels only supports depth of size 1, 3 or 4 but got " +
                          o
                      );
                    return [4, n.data()];
                  case 1:
                    return (
                      (s = c.sent()),
                      (u = n.min()),
                      (l = n.max()),
                      [4, Promise.all([u.data(), l.data()])]
                    );
                  case 2:
                    if (
                      ((h = c.sent()),
                      (d = h[0]),
                      (p = h[1]),
                      (f = d[0]),
                      (m = p[0]),
                      u.dispose(),
                      l.dispose(),
                      "float32" === n.dtype)
                    ) {
                      if (f < 0 || m > 1)
                        throw new Error(
                          "Tensor values for a float32 Tensor must be in the range [0 - 1] but got range [" +
                            f +
                            " - " +
                            m +
                            "]."
                        );
                    } else {
                      if ("int32" !== n.dtype)
                        throw new Error(
                          "Unsupported type for toPixels: " +
                            n.dtype +
                            ". Please use float32 or int32 tensors."
                        );
                      if (f < 0 || m > 255)
                        throw new Error(
                          "Tensor values for a int32 Tensor must be in the range [0 - 255] but got range [" +
                            f +
                            " - " +
                            m +
                            "]."
                        );
                    }
                    for (
                      g = "float32" === n.dtype ? 255 : 1,
                        b = new Uint8ClampedArray(i * a * 4),
                        v = 0;
                      v < a * i;
                      ++v
                    )
                      (y = void 0),
                        (x = void 0),
                        (w = void 0),
                        (C = void 0),
                        1 === o
                          ? ((y = s[v] * g),
                            (x = s[v] * g),
                            (w = s[v] * g),
                            (C = 255))
                          : 3 === o
                          ? ((y = s[3 * v] * g),
                            (x = s[3 * v + 1] * g),
                            (w = s[3 * v + 2] * g),
                            (C = 255))
                          : 4 === o &&
                            ((y = s[4 * v] * g),
                            (x = s[4 * v + 1] * g),
                            (w = s[4 * v + 2] * g),
                            (C = s[4 * v + 3] * g)),
                        (b[0 + (O = 4 * v)] = Math.round(y)),
                        (b[O + 1] = Math.round(x)),
                        (b[O + 2] = Math.round(w)),
                        (b[O + 3] = Math.round(C));
                    return (
                      null != e &&
                        ((e.width = i),
                        (e.height = a),
                        (E = e.getContext("2d")),
                        (S = new ImageData(b, i, a)),
                        E.putImageData(S, 0, 0)),
                      n !== t && n.dispose(),
                      [2, b]
                    );
                }
              });
            });
          },
          fromPixels: Uh,
        }),
        Hh = (function () {
          function t() {}
          return (
            (t.prototype.getClassName = function () {
              return this.constructor.className;
            }),
            (t.fromConfig = function (t, e) {
              return new t(e);
            }),
            t
          );
        })(),
        qh = (function () {
          function t() {
            this.classNameMap = {};
          }
          return (
            (t.getMap = function () {
              return null == t.instance && (t.instance = new t()), t.instance;
            }),
            (t.register = function (e) {
              t.getMap().classNameMap[e.className] = [e, e.fromConfig];
            }),
            t
          );
        })();
      function Kh(t) {
        S(null != t.className, function () {
          return "Class being registered does not have the static className property defined.";
        }),
          S("string" == typeof t.className, function () {
            return (
              "className is required to be a string, but got type " +
              typeof t.className
            );
          }),
          S(t.className.length > 0, function () {
            return "Class being registered has an empty-string as its className, which is disallowed.";
          }),
          qh.register(t);
      }
      Object.freeze({
        Serializable: Hh,
        SerializationMap: qh,
        registerClass: Kh,
      });
      function Xh() {
        return 32 === Mt.backend.floatPrecision() ? 0.001 : 0.1;
      }
      function Yh(t, e, n) {
        var r = !0;
        if (((U(t) || U(e)) && (r = !1), U(t) && U(e) && (r = !0), r)) {
          var a = t.constructor.name,
            i = e.constructor.name;
          if (a !== i)
            throw new Error(
              "Arrays are of different type. Actual: " + a + ". Expected: " + i
            );
        }
        if (Array.isArray(t) && Array.isArray(e)) {
          var o = Ue(t),
            s = Ue(e);
          if (!A(o, s))
            throw new Error(
              "Arrays have different shapes. Actual: [" +
                o +
                "]. Expected: [" +
                s +
                "]"
            );
        }
        var u = U(t) ? t : N(t),
          c = U(e) ? e : N(e);
        if (u.length !== c.length)
          throw new Error(
            "Arrays have different lengths actual: " +
              u.length +
              " vs expected: " +
              c.length +
              ".\nActual:   " +
              u +
              ".\nExpected: " +
              c +
              "."
          );
        for (var l = 0; l < c.length; ++l) {
          var h = u[l],
            d = c[l];
          if (!n(h, d))
            throw new Error(
              "Arrays differ: actual[" +
                l +
                "] = " +
                h +
                ", expected[" +
                l +
                "] = " +
                d +
                ".\nActual:   " +
                u +
                ".\nExpected: " +
                c +
                "."
            );
        }
      }
      function Jh(t, e, n) {
        return (
          (!isFinite(t) && !isFinite(e)) ||
          !(isNaN(t) || isNaN(e) || Math.abs(t - e) > n)
        );
      }
      Object.freeze({
        TEST_EPSILON_FLOAT16: 0.1,
        expectArraysClose: function (t, e, n) {
          return (
            null == n && (n = Xh()),
            Yh(t, e, function (t, e) {
              return Jh(t, e, n);
            })
          );
        },
        testEpsilon: Xh,
        expectPromiseToFail: function (t, e) {
          t().then(
            function () {
              return e.fail();
            },
            function () {
              return e();
            }
          );
        },
        expectArraysEqual: function (t, e) {
          var n =
            "string" == typeof e ||
            "number" == typeof e ||
            "boolean" == typeof e
              ? [e]
              : e;
          return q(t) || q(t[0]) || q(e) || q(e[0])
            ? Yh(t, n, function (t, e) {
                return t == e;
              })
            : Yh(t, e, function (t, e) {
                return Jh(t, e, 0);
              });
        },
        expectNumbersClose: function (t, e, n) {
          if ((null == n && (n = Xh()), !Jh(t, e, n)))
            throw new Error(
              "Numbers differ: actual === " + t + ", expected === " + e
            );
        },
        expectValuesInRange: function (t, e, n) {
          for (var r = 0; r < t.length; r++)
            if (t[r] < e || t[r] > n)
              throw new Error(
                "Value out of range:" + t[r] + " low: " + e + ", high: " + n
              );
        },
        expectArrayBuffersEqual: function (t, e) {
          expect(new Float32Array(t)).toEqual(new Float32Array(e));
        },
      }),
        Object.freeze({
          gpgpu_util: Wi,
          webgl_util: Be,
          forceHalfFloat: function () {
            d().set("WEBGL_FORCE_F16_TEXTURES", !0);
          },
          MathBackendWebGL: Xo,
          setWebGLContext: Vt,
          GPGPUContext: Vi,
        });
      var Qh = (function (t) {
        function e() {
          return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
          s(e, t),
          (e.prototype.minimize = function (t, e, n) {
            void 0 === e && (e = !1);
            var r = this.computeGradients(t, n),
              a = r.value,
              i = r.grads;
            if (null != n) {
              var o = n.map(function (t) {
                return { name: t.name, tensor: i[t.name] };
              });
              this.applyGradients(o);
            } else this.applyGradients(i);
            return We(i), e ? a : (a.dispose(), null);
          }),
          Object.defineProperty(e.prototype, "iterations", {
            get: function () {
              return (
                null == this.iterations_ && (this.iterations_ = 0),
                this.iterations_
              );
            },
            enumerable: !0,
            configurable: !0,
          }),
          (e.prototype.incrementIterations = function () {
            this.iterations_ = this.iterations + 1;
          }),
          (e.prototype.computeGradients = function (t, e) {
            return (function (t, e) {
              S(J(t), function () {
                return "The f passed in variableGrads(f) must be a function";
              }),
                S(
                  null == e ||
                    (Array.isArray(e) &&
                      e.every(function (t) {
                        return t instanceof St;
                      })),
                  function () {
                    return "The varList passed in variableGrads(f, varList) must be an array of variables";
                  }
                );
              var n = null != e;
              if (!n)
                for (var r in ((e = []), Mt.registeredVariables))
                  e.push(Mt.registeredVariables[r]);
              var a = n
                  ? e.filter(function (t) {
                      return !t.trainable;
                    })
                  : null,
                i = e.length;
              S(
                (e = e.filter(function (t) {
                  return t.trainable;
                })).length > 0,
                function () {
                  return (
                    "variableGrads() expects at least one of the input variables to be trainable, but none of the " +
                    i +
                    " variables is trainable."
                  );
                }
              );
              var o = Mt.gradients(t, e, null, !0),
                s = o.value,
                u = o.grads;
              S(
                u.some(function (t) {
                  return null != t;
                }),
                function () {
                  return "Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().";
                }
              ),
                S(0 === s.rank, function () {
                  return (
                    "The f passed in variableGrads(f) must return a scalar, but it returned a rank-" +
                    s.rank +
                    " tensor"
                  );
                });
              var c = {};
              return (
                e.forEach(function (t, e) {
                  null != u[e] && (c[t.name] = u[e]);
                }),
                null != a &&
                  a.forEach(function (t) {
                    return (c[t.name] = null);
                  }),
                { value: s, grads: c }
              );
            })(t, e);
          }),
          (e.prototype.dispose = function () {
            null != this.iterations_ && We(this.iterations_);
          }),
          (e.prototype.saveIterations = function () {
            return u(this, void 0, void 0, function () {
              return c(this, function (t) {
                return (
                  null == this.iterations_ && (this.iterations_ = 0),
                  [2, { name: "iter", tensor: hn(this.iterations_, "int32") }]
                );
              });
            });
          }),
          (e.prototype.getWeights = function () {
            return u(this, void 0, void 0, function () {
              return c(this, function (t) {
                throw new Error(
                  "getWeights() is not implemented for this optimizer yet."
                );
              });
            });
          }),
          (e.prototype.setWeights = function (t) {
            return u(this, void 0, void 0, function () {
              return c(this, function (t) {
                throw new Error(
                  "setWeights() is not implemented for this optimizer class " +
                    this.getClassName()
                );
              });
            });
          }),
          (e.prototype.extractIterations = function (t) {
            return u(this, void 0, void 0, function () {
              var e;
              return c(this, function (n) {
                switch (n.label) {
                  case 0:
                    return (e = this), [4, t[0].tensor.data()];
                  case 1:
                    return (e.iterations_ = n.sent()[0]), [2, t.slice(1)];
                }
              });
            });
          }),
          e
        );
      })(Hh);
      Object.defineProperty(Qh, Symbol.hasInstance, {
        value: function (t) {
          return (
            null != t.minimize &&
            null != t.computeGradients &&
            null != t.applyGradients
          );
        },
      });
      var Zh = (function (t) {
        function e(e, n, r) {
          void 0 === r && (r = null);
          var a = t.call(this) || this;
          return (
            (a.learningRate = e),
            (a.rho = n),
            (a.epsilon = r),
            (a.accumulatedGrads = []),
            (a.accumulatedUpdates = []),
            null == r && (a.epsilon = Mt.backend.epsilon()),
            a
          );
        }
        return (
          s(e, t),
          (e.prototype.applyGradients = function (t) {
            var e = this;
            (Array.isArray(t)
              ? t.map(function (t) {
                  return t.name;
                })
              : Object.keys(t)
            ).forEach(function (n, r) {
              var a = Mt.registeredVariables[n];
              null == e.accumulatedGrads[r] &&
                (e.accumulatedGrads[r] = {
                  originalName: n + "/accum_grad",
                  variable: ze(function () {
                    return wn(a).variable(!1);
                  }),
                }),
                null == e.accumulatedUpdates[r] &&
                  (e.accumulatedUpdates[r] = {
                    originalName: n + "/accum_var",
                    variable: ze(function () {
                      return wn(a).variable(!1);
                    }),
                  });
              var i = Array.isArray(t) ? t[r].tensor : t[n];
              if (null != i) {
                var o = e.accumulatedGrads[r].variable,
                  s = e.accumulatedUpdates[r].variable;
                ze(function () {
                  var t = o.mul(e.rho).add(i.square().mul(1 - e.rho)),
                    n = s
                      .add(e.epsilon)
                      .sqrt()
                      .div(o.add(e.epsilon).sqrt())
                      .mul(i),
                    r = s.mul(e.rho).add(n.square().mul(1 - e.rho));
                  o.assign(t), s.assign(r);
                  var u = n.mul(-e.learningRate).add(a);
                  a.assign(u);
                });
              }
            }),
              this.incrementIterations();
          }),
          (e.prototype.dispose = function () {
            null != this.accumulatedUpdates &&
              (We(
                this.accumulatedGrads.map(function (t) {
                  return t.variable;
                })
              ),
              We(
                this.accumulatedUpdates.map(function (t) {
                  return t.variable;
                })
              ));
          }),
          (e.prototype.getWeights = function () {
            return u(this, void 0, void 0, function () {
              var t;
              return c(this, function (e) {
                switch (e.label) {
                  case 0:
                    return (
                      (t = this.accumulatedGrads.concat(
                        this.accumulatedUpdates
                      )),
                      [4, this.saveIterations()]
                    );
                  case 1:
                    return [
                      2,
                      [e.sent()].concat(
                        t.map(function (t) {
                          return { name: t.originalName, tensor: t.variable };
                        })
                      ),
                    ];
                }
              });
            });
          }),
          (e.prototype.setWeights = function (t) {
            return u(this, void 0, void 0, function () {
              var e;
              return c(this, function (n) {
                switch (n.label) {
                  case 0:
                    return [4, this.extractIterations(t)];
                  case 1:
                    return (
                      (t = n.sent()),
                      (e = t.length / 2),
                      (this.accumulatedGrads = t.slice(0, e).map(function (t) {
                        return {
                          originalName: t.name,
                          variable: t.tensor.variable(!1),
                        };
                      })),
                      (this.accumulatedUpdates = t
                        .slice(e, 2 * e)
                        .map(function (t) {
                          return {
                            originalName: t.name,
                            variable: t.tensor.variable(!1),
                          };
                        })),
                      [2]
                    );
                }
              });
            });
          }),
          (e.prototype.getConfig = function () {
            return {
              learningRate: this.learningRate,
              rho: this.rho,
              epsilon: this.epsilon,
            };
          }),
          (e.fromConfig = function (t, e) {
            return new t(e.learningRate, e.rho, e.epsilon);
          }),
          (e.className = "Adadelta"),
          e
        );
      })(Qh);
      Kh(Zh);
      var td = (function (t) {
        function e(e, n) {
          void 0 === n && (n = 0.1);
          var r = t.call(this) || this;
          return (
            (r.learningRate = e),
            (r.initialAccumulatorValue = n),
            (r.accumulatedGrads = []),
            r
          );
        }
        return (
          s(e, t),
          (e.prototype.applyGradients = function (t) {
            var e = this;
            (Array.isArray(t)
              ? t.map(function (t) {
                  return t.name;
                })
              : Object.keys(t)
            ).forEach(function (n, r) {
              var a = Mt.registeredVariables[n];
              null == e.accumulatedGrads[r] &&
                (e.accumulatedGrads[r] = {
                  originalName: n + "/accumulator",
                  variable: ze(function () {
                    return vn(a.shape, e.initialAccumulatorValue).variable(!1);
                  }),
                });
              var i = Array.isArray(t) ? t[r].tensor : t[n];
              if (null != i) {
                var o = e.accumulatedGrads[r].variable;
                ze(function () {
                  var t = o.add(i.square());
                  o.assign(t);
                  var n = i
                    .div(t.add(Mt.backend.epsilon()).sqrt())
                    .mul(-e.learningRate)
                    .add(a);
                  a.assign(n);
                });
              }
            }),
              this.incrementIterations();
          }),
          (e.prototype.dispose = function () {
            null != this.accumulatedGrads &&
              We(
                this.accumulatedGrads.map(function (t) {
                  return t.variable;
                })
              );
          }),
          (e.prototype.getWeights = function () {
            return u(this, void 0, void 0, function () {
              return c(this, function (t) {
                switch (t.label) {
                  case 0:
                    return [4, this.saveIterations()];
                  case 1:
                    return [
                      2,
                      [t.sent()].concat(
                        this.accumulatedGrads.map(function (t) {
                          return { name: t.originalName, tensor: t.variable };
                        })
                      ),
                    ];
                }
              });
            });
          }),
          (e.prototype.setWeights = function (t) {
            return u(this, void 0, void 0, function () {
              return c(this, function (e) {
                switch (e.label) {
                  case 0:
                    return [4, this.extractIterations(t)];
                  case 1:
                    return (
                      (t = e.sent()),
                      (this.accumulatedGrads = t.map(function (t) {
                        return {
                          originalName: t.name,
                          variable: t.tensor.variable(!1),
                        };
                      })),
                      [2]
                    );
                }
              });
            });
          }),
          (e.prototype.getConfig = function () {
            return {
              learningRate: this.learningRate,
              initialAccumulatorValue: this.initialAccumulatorValue,
            };
          }),
          (e.fromConfig = function (t, e) {
            return new t(e.learningRate, e.initialAccumulatorValue);
          }),
          (e.className = "Adagrad"),
          e
        );
      })(Qh);
      Kh(td);
      var ed = (function (t) {
        function e(e, n, r, a) {
          void 0 === a && (a = null);
          var i = t.call(this) || this;
          return (
            (i.learningRate = e),
            (i.beta1 = n),
            (i.beta2 = r),
            (i.epsilon = a),
            (i.accumulatedFirstMoment = []),
            (i.accumulatedSecondMoment = []),
            ze(function () {
              (i.accBeta1 = hn(n).variable()), (i.accBeta2 = hn(r).variable());
            }),
            null == a && (i.epsilon = Mt.backend.epsilon()),
            i
          );
        }
        return (
          s(e, t),
          (e.prototype.applyGradients = function (t) {
            var e = this,
              n = Array.isArray(t)
                ? t.map(function (t) {
                    return t.name;
                  })
                : Object.keys(t);
            ze(function () {
              var r = vu(1, e.accBeta1),
                a = vu(1, e.accBeta2);
              n.forEach(function (n, i) {
                var o = Mt.registeredVariables[n];
                null == e.accumulatedFirstMoment[i] &&
                  (e.accumulatedFirstMoment[i] = {
                    originalName: n + "/m",
                    variable: ze(function () {
                      return wn(o).variable(!1);
                    }),
                  }),
                  null == e.accumulatedSecondMoment[i] &&
                    (e.accumulatedSecondMoment[i] = {
                      originalName: n + "/v",
                      variable: ze(function () {
                        return wn(o).variable(!1);
                      }),
                    });
                var s = Array.isArray(t) ? t[i].tensor : t[n];
                if (null != s) {
                  var u = e.accumulatedFirstMoment[i].variable,
                    c = e.accumulatedSecondMoment[i].variable,
                    l = u.mul(e.beta1).add(s.mul(1 - e.beta1)),
                    h = c.mul(e.beta2).add(s.square().mul(1 - e.beta2)),
                    d = l.div(r),
                    p = h.div(a);
                  u.assign(l), c.assign(h);
                  var f = d
                    .div(p.sqrt().add(e.epsilon))
                    .mul(-e.learningRate)
                    .add(o);
                  o.assign(f);
                }
              }),
                e.accBeta1.assign(e.accBeta1.mul(e.beta1)),
                e.accBeta2.assign(e.accBeta2.mul(e.beta2));
            }),
              this.incrementIterations();
          }),
          (e.prototype.dispose = function () {
            this.accBeta1.dispose(),
              this.accBeta2.dispose(),
              null != this.accumulatedFirstMoment &&
                We(
                  this.accumulatedFirstMoment.map(function (t) {
                    return t.variable;
                  })
                ),
              null != this.accumulatedSecondMoment &&
                We(
                  this.accumulatedSecondMoment.map(function (t) {
                    return t.variable;
                  })
                );
          }),
          (e.prototype.getWeights = function () {
            return u(this, void 0, void 0, function () {
              var t;
              return c(this, function (e) {
                switch (e.label) {
                  case 0:
                    return (
                      (t = this.accumulatedFirstMoment.concat(
                        this.accumulatedSecondMoment
                      )),
                      [4, this.saveIterations()]
                    );
                  case 1:
                    return [
                      2,
                      [e.sent()].concat(
                        t.map(function (t) {
                          return { name: t.originalName, tensor: t.variable };
                        })
                      ),
                    ];
                }
              });
            });
          }),
          (e.prototype.setWeights = function (t) {
            return u(this, void 0, void 0, function () {
              var e,
                n = this;
              return c(this, function (r) {
                switch (r.label) {
                  case 0:
                    return [4, this.extractIterations(t)];
                  case 1:
                    return (
                      (t = r.sent()),
                      ze(function () {
                        n.accBeta1.assign(mu(n.beta1, n.iterations_ + 1)),
                          n.accBeta2.assign(mu(n.beta2, n.iterations_ + 1));
                      }),
                      (e = t.length / 2),
                      (this.accumulatedFirstMoment = t
                        .slice(0, e)
                        .map(function (t) {
                          return {
                            originalName: t.name,
                            variable: t.tensor.variable(!1),
                          };
                        })),
                      (this.accumulatedSecondMoment = t
                        .slice(e, 2 * e)
                        .map(function (t) {
                          return {
                            originalName: t.name,
                            variable: t.tensor.variable(!1),
                          };
                        })),
                      [2]
                    );
                }
              });
            });
          }),
          (e.prototype.getConfig = function () {
            return {
              learningRate: this.learningRate,
              beta1: this.beta1,
              beta2: this.beta2,
              epsilon: this.epsilon,
            };
          }),
          (e.fromConfig = function (t, e) {
            return new t(e.learningRate, e.beta1, e.beta2, e.epsilon);
          }),
          (e.className = "Adam"),
          e
        );
      })(Qh);
      Kh(ed);
      var nd = (function (t) {
        function e(e, n, r, a, i) {
          void 0 === a && (a = null), void 0 === i && (i = 0);
          var o = t.call(this) || this;
          return (
            (o.learningRate = e),
            (o.beta1 = n),
            (o.beta2 = r),
            (o.epsilon = a),
            (o.decay = i),
            (o.accumulatedFirstMoment = []),
            (o.accumulatedWeightedInfNorm = []),
            ze(function () {
              (o.iteration = hn(0).variable()), (o.accBeta1 = hn(n).variable());
            }),
            null == a && (o.epsilon = Mt.backend.epsilon()),
            o
          );
        }
        return (
          s(e, t),
          (e.prototype.applyGradients = function (t) {
            var e = this,
              n = Array.isArray(t)
                ? t.map(function (t) {
                    return t.name;
                  })
                : Object.keys(t);
            ze(function () {
              var r = vu(1, e.accBeta1),
                a = ru(-e.learningRate, e.iteration.mul(e.decay).add(1));
              n.forEach(function (n, i) {
                var o = Mt.registeredVariables[n];
                null == e.accumulatedFirstMoment[i] &&
                  (e.accumulatedFirstMoment[i] = {
                    originalName: n + "/m",
                    variable: wn(o).variable(!1),
                  }),
                  null == e.accumulatedWeightedInfNorm[i] &&
                    (e.accumulatedWeightedInfNorm[i] = {
                      originalName: n + "/v",
                      variable: wn(o).variable(!1),
                    });
                var s = Array.isArray(t) ? t[i].tensor : t[n];
                if (null != s) {
                  var u = e.accumulatedFirstMoment[i].variable,
                    c = e.accumulatedWeightedInfNorm[i].variable,
                    l = u.mul(e.beta1).add(s.mul(1 - e.beta1)),
                    h = c.mul(e.beta2),
                    d = s.abs(),
                    p = h.maximum(d);
                  u.assign(l), c.assign(p);
                  var f = a
                    .div(r)
                    .mul(l.div(p.add(e.epsilon)))
                    .add(o);
                  o.assign(f);
                }
              }),
                e.iteration.assign(e.iteration.add(1)),
                e.accBeta1.assign(e.accBeta1.mul(e.beta1));
            }),
              this.incrementIterations();
          }),
          (e.prototype.dispose = function () {
            this.accBeta1.dispose(),
              this.iteration.dispose(),
              null != this.accumulatedFirstMoment &&
                We(
                  this.accumulatedFirstMoment.map(function (t) {
                    return t.variable;
                  })
                ),
              null != this.accumulatedWeightedInfNorm &&
                We(
                  this.accumulatedWeightedInfNorm.map(function (t) {
                    return t.variable;
                  })
                );
          }),
          (e.prototype.getWeights = function () {
            return u(this, void 0, void 0, function () {
              return c(this, function (t) {
                throw new Error(
                  "getWeights() is not implemented for Adamax yet."
                );
              });
            });
          }),
          (e.prototype.setWeights = function (t) {
            return u(this, void 0, void 0, function () {
              return c(this, function (t) {
                throw new Error(
                  "setWeights() is not implemented for Adamax yet."
                );
              });
            });
          }),
          (e.prototype.getConfig = function () {
            return {
              learningRate: this.learningRate,
              beta1: this.beta1,
              beta2: this.beta2,
              epsilon: this.epsilon,
              decay: this.decay,
            };
          }),
          (e.fromConfig = function (t, e) {
            return new t(e.learningRate, e.beta1, e.beta2, e.epsilon, e.decay);
          }),
          (e.className = "Adamax"),
          e
        );
      })(Qh);
      Kh(nd);
      var rd = (function (t) {
        function e(e) {
          var n = t.call(this) || this;
          return (n.learningRate = e), n.setLearningRate(e), n;
        }
        return (
          s(e, t),
          (e.prototype.applyGradients = function (t) {
            var e = this;
            (Array.isArray(t)
              ? t.map(function (t) {
                  return t.name;
                })
              : Object.keys(t)
            ).forEach(function (n, r) {
              var a = Array.isArray(t) ? t[r].tensor : t[n];
              if (null != a) {
                var i = Mt.registeredVariables[n];
                ze(function () {
                  var t = e.c.mul(a).add(i);
                  i.assign(t);
                });
              }
            }),
              this.incrementIterations();
          }),
          (e.prototype.setLearningRate = function (t) {
            (this.learningRate = t),
              null != this.c && this.c.dispose(),
              (this.c = (function (t) {
                return Mt.keep(t);
              })(hn(-t)));
          }),
          (e.prototype.dispose = function () {
            this.c.dispose();
          }),
          (e.prototype.getWeights = function () {
            return u(this, void 0, void 0, function () {
              return c(this, function (t) {
                switch (t.label) {
                  case 0:
                    return [4, this.saveIterations()];
                  case 1:
                    return [2, [t.sent()]];
                }
              });
            });
          }),
          (e.prototype.setWeights = function (t) {
            return u(this, void 0, void 0, function () {
              return c(this, function (e) {
                switch (e.label) {
                  case 0:
                    return [4, this.extractIterations(t)];
                  case 1:
                    if (0 !== (t = e.sent()).length)
                      throw new Error(
                        "SGD optimizer does not have settable weights."
                      );
                    return [2];
                }
              });
            });
          }),
          (e.prototype.getConfig = function () {
            return { learningRate: this.learningRate };
          }),
          (e.fromConfig = function (t, e) {
            return new t(e.learningRate);
          }),
          (e.className = "SGD"),
          e
        );
      })(Qh);
      Kh(rd);
      var ad = (function (t) {
        function e(e, n, r) {
          void 0 === r && (r = !1);
          var a = t.call(this, e) || this;
          return (
            (a.learningRate = e),
            (a.momentum = n),
            (a.useNesterov = r),
            (a.accumulations = []),
            (a.m = hn(a.momentum)),
            a
          );
        }
        return (
          s(e, t),
          (e.prototype.applyGradients = function (t) {
            var e = this;
            (Array.isArray(t)
              ? t.map(function (t) {
                  return t.name;
                })
              : Object.keys(t)
            ).forEach(function (n, r) {
              var a = Mt.registeredVariables[n];
              null == e.accumulations[r] &&
                (e.accumulations[r] = {
                  originalName: n + "/momentum",
                  variable: ze(function () {
                    return wn(a).variable(!1);
                  }),
                });
              var i = e.accumulations[r].variable,
                o = Array.isArray(t) ? t[r].tensor : t[n];
              null != o &&
                ze(function () {
                  var t,
                    n = e.m.mul(i).add(o);
                  (t = e.useNesterov
                    ? e.c.mul(o.add(n.mul(e.m))).add(a)
                    : e.c.mul(n).add(a)),
                    i.assign(n),
                    a.assign(t);
                });
            }),
              this.incrementIterations();
          }),
          (e.prototype.dispose = function () {
            this.m.dispose(),
              null != this.accumulations &&
                We(
                  this.accumulations.map(function (t) {
                    return t.variable;
                  })
                );
          }),
          (e.prototype.setMomentum = function (t) {
            this.momentum = t;
          }),
          (e.prototype.getWeights = function () {
            return u(this, void 0, void 0, function () {
              return c(this, function (t) {
                switch (t.label) {
                  case 0:
                    return [4, this.saveIterations()];
                  case 1:
                    return [
                      2,
                      [t.sent()].concat(
                        this.accumulations.map(function (t) {
                          return { name: t.originalName, tensor: t.variable };
                        })
                      ),
                    ];
                }
              });
            });
          }),
          (e.prototype.setWeights = function (t) {
            return u(this, void 0, void 0, function () {
              return c(this, function (e) {
                switch (e.label) {
                  case 0:
                    return [4, this.extractIterations(t)];
                  case 1:
                    return (
                      (t = e.sent()),
                      (this.accumulations = t.map(function (t) {
                        return {
                          originalName: t.name,
                          variable: t.tensor.variable(!1),
                        };
                      })),
                      [2]
                    );
                }
              });
            });
          }),
          (e.prototype.getConfig = function () {
            return {
              learningRate: this.learningRate,
              momentum: this.momentum,
              useNesterov: this.useNesterov,
            };
          }),
          (e.fromConfig = function (t, e) {
            return new t(e.learningRate, e.momentum, e.useNesterov);
          }),
          (e.className = "Momentum"),
          e
        );
      })(rd);
      Kh(ad);
      var id = (function (t) {
        function e(e, n, r, a, i) {
          void 0 === n && (n = 0.9),
            void 0 === r && (r = 0),
            void 0 === a && (a = null),
            void 0 === i && (i = !1);
          var o = t.call(this) || this;
          if (
            ((o.learningRate = e),
            (o.decay = n),
            (o.momentum = r),
            (o.epsilon = a),
            (o.accumulatedMeanSquares = []),
            (o.accumulatedMoments = []),
            (o.accumulatedMeanGrads = []),
            (o.centered = i),
            null == a && (o.epsilon = Mt.backend.epsilon()),
            null == e)
          )
            throw new Error(
              "learningRate for RMSPropOptimizer must be defined."
            );
          return o;
        }
        return (
          s(e, t),
          (e.prototype.applyGradients = function (t) {
            var e = this;
            (Array.isArray(t)
              ? t.map(function (t) {
                  return t.name;
                })
              : Object.keys(t)
            ).forEach(function (n, r) {
              var a = Mt.registeredVariables[n];
              null == e.accumulatedMeanSquares[r] &&
                (e.accumulatedMeanSquares[r] = {
                  originalName: n + "/rms",
                  variable: ze(function () {
                    return wn(a).variable(!1);
                  }),
                }),
                null == e.accumulatedMoments[r] &&
                  (e.accumulatedMoments[r] = {
                    originalName: n + "/momentum",
                    variable: ze(function () {
                      return wn(a).variable(!1);
                    }),
                  }),
                null == e.accumulatedMeanGrads[r] &&
                  e.centered &&
                  (e.accumulatedMeanGrads[r] = {
                    originalName: n + "/mg",
                    variable: ze(function () {
                      return wn(a).variable(!1);
                    }),
                  });
              var i = Array.isArray(t) ? t[r].tensor : t[n];
              if (null != i) {
                var o = e.accumulatedMeanSquares[r].variable,
                  s = e.accumulatedMoments[r].variable;
                ze(function () {
                  var t = o.mul(e.decay).add(i.square().mul(1 - e.decay));
                  if (e.centered) {
                    var n = e.accumulatedMeanGrads[r].variable,
                      u = n.mul(e.decay).add(i.mul(1 - e.decay)),
                      c = s
                        .mul(e.momentum)
                        .add(
                          i
                            .mul(e.learningRate)
                            .div(t.sub(u.square().add(e.epsilon)).sqrt())
                        );
                    o.assign(t), n.assign(u), s.assign(c);
                    var l = a.sub(c);
                    a.assign(l);
                  } else {
                    var h = o.mul(e.decay).add(i.square().mul(1 - e.decay));
                    (c = s
                      .mul(e.momentum)
                      .add(i.mul(e.learningRate).div(h.add(e.epsilon).sqrt()))),
                      o.assign(h),
                      s.assign(c),
                      (l = a.sub(c)),
                      a.assign(l);
                  }
                });
              }
            }),
              this.incrementIterations();
          }),
          (e.prototype.dispose = function () {
            null != this.accumulatedMeanSquares &&
              We(
                this.accumulatedMeanSquares.map(function (t) {
                  return t.variable;
                })
              ),
              null != this.accumulatedMeanGrads &&
                this.centered &&
                We(
                  this.accumulatedMeanGrads.map(function (t) {
                    return t.variable;
                  })
                ),
              null != this.accumulatedMoments &&
                We(
                  this.accumulatedMoments.map(function (t) {
                    return t.variable;
                  })
                );
          }),
          (e.prototype.getWeights = function () {
            return u(this, void 0, void 0, function () {
              var t;
              return c(this, function (e) {
                switch (e.label) {
                  case 0:
                    return (
                      (t = this.accumulatedMeanSquares.concat(
                        this.accumulatedMoments
                      )),
                      this.centered &&
                        t.push.apply(t, this.accumulatedMeanGrads),
                      [4, this.saveIterations()]
                    );
                  case 1:
                    return [
                      2,
                      [e.sent()].concat(
                        t.map(function (t) {
                          return { name: t.originalName, tensor: t.variable };
                        })
                      ),
                    ];
                }
              });
            });
          }),
          (e.prototype.setWeights = function (t) {
            return u(this, void 0, void 0, function () {
              var e;
              return c(this, function (n) {
                switch (n.label) {
                  case 0:
                    return [4, this.extractIterations(t)];
                  case 1:
                    return (
                      (t = n.sent()),
                      (e = this.centered ? t.length / 3 : t.length / 2),
                      (this.accumulatedMeanSquares = t
                        .slice(0, e)
                        .map(function (t) {
                          return {
                            originalName: t.name,
                            variable: t.tensor.variable(!1),
                          };
                        })),
                      (this.accumulatedMoments = t
                        .slice(e, 2 * e)
                        .map(function (t) {
                          return {
                            originalName: t.name,
                            variable: t.tensor.variable(!1),
                          };
                        })),
                      this.centered &&
                        (this.accumulatedMeanGrads = t
                          .slice(2 * e, 3 * e)
                          .map(function (t) {
                            return {
                              originalName: t.name,
                              variable: t.tensor.variable(!1),
                            };
                          })),
                      [2]
                    );
                }
              });
            });
          }),
          (e.prototype.getConfig = function () {
            return {
              learningRate: this.learningRate,
              decay: this.decay,
              momentum: this.momentum,
              epsilon: this.epsilon,
              centered: this.centered,
            };
          }),
          (e.fromConfig = function (t, e) {
            return new t(
              e.learningRate,
              e.decay,
              e.momentum,
              e.epsilon,
              e.centered
            );
          }),
          (e.className = "RMSProp"),
          e
        );
      })(Qh);
      Kh(id);
      var od = (function () {
        function t() {}
        return (
          (t.sgd = function (t) {
            return new rd(t);
          }),
          (t.momentum = function (t, e, n) {
            return void 0 === n && (n = !1), new ad(t, e, n);
          }),
          (t.rmsprop = function (t, e, n, r, a) {
            return (
              void 0 === e && (e = 0.9),
              void 0 === n && (n = 0),
              void 0 === r && (r = null),
              void 0 === a && (a = !1),
              new id(t, e, n, r, a)
            );
          }),
          (t.adam = function (t, e, n, r) {
            return (
              void 0 === t && (t = 0.001),
              void 0 === e && (e = 0.9),
              void 0 === n && (n = 0.999),
              void 0 === r && (r = null),
              new ed(t, e, n, r)
            );
          }),
          (t.adadelta = function (t, e, n) {
            return (
              void 0 === t && (t = 0.001),
              void 0 === e && (e = 0.95),
              void 0 === n && (n = null),
              new Zh(t, e, n)
            );
          }),
          (t.adamax = function (t, e, n, r, a) {
            return (
              void 0 === t && (t = 0.002),
              void 0 === e && (e = 0.9),
              void 0 === n && (n = 0.999),
              void 0 === r && (r = null),
              void 0 === a && (a = 0),
              new nd(t, e, n, r, a)
            );
          }),
          (t.adagrad = function (t, e) {
            return void 0 === e && (e = 0.1), new td(t, e);
          }),
          t
        );
      })();
      od.sgd,
        od.momentum,
        od.adadelta,
        od.adagrad,
        od.rmsprop,
        od.adamax,
        od.adam,
        "undefined" != typeof requestAnimationFrame && requestAnimationFrame;
      (yt.prototype.squaredDifference = function (t) {
        return Qo(this, t);
      }),
        (bt = Ml);
    }.call(this, n(24), n(27), n(32).Buffer, n(37).setImmediate));
  },
  function (t, e, n) {
    "use strict";
    n.d(e, "a", function () {
      return a;
    });
    var r = n(6);
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function a(t) {
      const e = Object.keys(t);
      if (1 !== e.length)
        throw new Error(
          "Please provide an object with a single key (operation name) mapping to a function. Got an object with " +
            e.length +
            " keys."
        );
      let n = e[0];
      const a = t[n];
      n.endsWith("_") && (n = n.substring(0, n.length - 1));
      const i = (...t) => {
        r.a.startScope(n);
        try {
          const e = a(...t);
          return (
            e instanceof Promise &&
              console.error("Cannot return a Promise inside of tidy."),
            r.a.endScope(e),
            e
          );
        } catch (t) {
          throw (r.a.endScope(null), t);
        }
      };
      return (
        Object.defineProperty(i, "name", { value: n, configurable: !0 }), i
      );
    }
  },
  function (t, e, n) {
    "use strict";
    n.d(e, "a", function () {
      return p;
    });
    var r = n(11),
      a = n(30),
      i = n(17),
      o = n(1);
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class s {
      constructor(t, e) {
        (this.backendTimer = t),
          (this.logger = e),
          null == e && (this.logger = new u());
      }
      profileKernel(t, e, n) {
        let r;
        const a = this.backendTimer.time(() => {
          r = n();
        });
        return (
          r.forEach((n) => {
            n.data().then((r) => {
              !(function (t, e, n) {
                if ("float32" !== e) return !1;
                for (let e = 0; e < t.length; e++) {
                  const r = t[e];
                  if (isNaN(r) || !isFinite(r))
                    return (
                      console.warn(`Found ${r} in the result of '${n}'`), !0
                    );
                }
              })(r, n.dtype, t),
                a.then((a) => {
                  let i = "";
                  null != a.getExtraProfileInfo &&
                    (i = a.getExtraProfileInfo()),
                    this.logger.logKernelProfile(t, n, r, a.kernelMs, e, i);
                });
            });
          }),
          r
        );
      }
    }
    class u {
      logKernelProfile(t, e, n, r, a, i) {
        const s = "number" == typeof r ? o.rightPad(r + "ms", 9) : r.error,
          u = o.rightPad(t, 25),
          c = e.rank,
          l = e.size,
          h = o.rightPad(e.shape.toString(), 14);
        let d = "";
        for (const t in a) {
          const n = a[t].shape || e.shape,
            r = n.length;
          d += `${t}: ${r}D ${r > 0 ? n : ""} `;
        }
        console.log(
          `%c${u}\t%c${s}\t%c${c}D ${h}\t%c${l}\t%c${d}\t%c${i}`,
          "font-weight:bold",
          "color:red",
          "color:blue",
          "color: orange",
          "color: green",
          "color: steelblue"
        );
      }
    }
    /**
     * @license
     * Copyright 2017 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ var c = n(9),
      l = n(12);
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class h {
      constructor() {
        (this.registeredVariables = {}),
          (this.nextTapeNodeId = 0),
          (this.numBytes = 0),
          (this.numTensors = 0),
          (this.numStringTensors = 0),
          (this.numDataBuffers = 0),
          (this.gradientDepth = 0),
          (this.kernelDepth = 0),
          (this.scopeStack = []),
          (this.numDataMovesStack = []),
          (this.nextScopeId = 0),
          (this.tensorInfo = new WeakMap()),
          (this.profiling = !1),
          (this.activeProfile = {
            newBytes: 0,
            newTensors: 0,
            peakBytes: 0,
            kernels: [],
            result: null,
          });
      }
      dispose() {
        for (const t in this.registeredVariables)
          this.registeredVariables[t].dispose();
      }
    }
    class d {
      constructor(t) {
        (this.ENV = t),
          (this.registry = {}),
          (this.registryFactory = {}),
          (this.pendingBackendInitId = 0),
          (this.state = new h());
      }
      async ready() {
        if (null != this.pendingBackendInit)
          return this.pendingBackendInit.then(() => {});
        if (null != this.backendInstance) return;
        const t = this.getSortedBackends();
        for (let e = 0; e < t.length; e++) {
          const n = t[e];
          if (await this.initializeBackend(n).success)
            return void (await this.setBackend(n));
        }
        throw new Error(
          "Could not initialize any backends, all backend initializations failed."
        );
      }
      get backend() {
        if (null != this.pendingBackendInit)
          throw new Error(
            `Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`
          );
        if (null == this.backendInstance) {
          const {
            name: t,
            asyncInit: e,
          } = this.initializeBackendsAndReturnBest();
          if (e)
            throw new Error(
              `The highest priority backend '${t}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`
            );
          this.setBackend(t);
        }
        return this.backendInstance;
      }
      backendNames() {
        return Object.keys(this.registryFactory);
      }
      findBackend(t) {
        if (!(t in this.registry)) {
          if (!(t in this.registryFactory)) return null;
          {
            const { asyncInit: e } = this.initializeBackend(t);
            if (e) return null;
          }
        }
        return this.registry[t];
      }
      findBackendFactory(t) {
        return t in this.registryFactory
          ? this.registryFactory[t].factory
          : null;
      }
      registerBackend(t, e, n = 1) {
        return t in this.registryFactory
          ? (console.warn(
              t +
                " backend was already registered. Reusing existing backend factory."
            ),
            !1)
          : ((this.registryFactory[t] = { factory: e, priority: n }), !0);
      }
      async setBackend(t) {
        if (null == this.registryFactory[t])
          throw new Error(`Backend name '${t}' not found in registry`);
        if (((this.backendName = t), null == this.registry[t])) {
          this.backendInstance = null;
          const { success: e, asyncInit: n } = this.initializeBackend(t);
          if (!(n ? await e : e)) return !1;
        }
        return (
          (this.backendInstance = this.registry[t]),
          this.setupRegisteredKernels(),
          (this.profiler = new s(this.backendInstance)),
          !0
        );
      }
      setupRegisteredKernels() {
        Object(i.c)(this.backendName).forEach((t) => {
          null != t.setupFunc && t.setupFunc(this.backendInstance);
        });
      }
      disposeRegisteredKernels(t) {
        Object(i.c)(t).forEach((e) => {
          null != e.disposeFunc && e.disposeFunc(this.registry[t]);
        });
      }
      initializeBackend(t) {
        const e = this.registryFactory[t];
        if (null == e)
          throw new Error(
            `Cannot initialize backend ${t}, no registration found.`
          );
        try {
          const n = e.factory();
          if (Promise.resolve(n) === n) {
            const e = ++this.pendingBackendInitId,
              r = n
                .then(
                  (n) =>
                    !(e < this.pendingBackendInitId) &&
                    ((this.registry[t] = n),
                    (this.pendingBackendInit = null),
                    !0)
                )
                .catch(
                  (n) => (
                    e < this.pendingBackendInitId ||
                      ((this.pendingBackendInit = null),
                      console.warn(`Initialization of backend ${t} failed`),
                      console.warn(n.stack || n.message)),
                    !1
                  )
                );
            return (this.pendingBackendInit = r), { success: r, asyncInit: !0 };
          }
          return (this.registry[t] = n), { success: !0, asyncInit: !1 };
        } catch (e) {
          return (
            console.warn(`Initialization of backend ${t} failed`),
            console.warn(e.stack || e.message),
            { success: !1, asyncInit: !1 }
          );
        }
      }
      removeBackend(t) {
        if (!(t in this.registryFactory))
          throw new Error(t + " backend not found in registry");
        this.backendName === t &&
          null != this.pendingBackendInit &&
          this.pendingBackendInitId++,
          t in this.registry &&
            (this.disposeRegisteredKernels(t),
            this.registry[t].dispose(),
            delete this.registry[t]),
          delete this.registryFactory[t],
          this.backendName === t &&
            ((this.pendingBackendInit = null),
            (this.backendName = null),
            (this.backendInstance = null));
      }
      getSortedBackends() {
        if (0 === Object.keys(this.registryFactory).length)
          throw new Error("No backend found in registry.");
        return Object.keys(this.registryFactory).sort(
          (t, e) =>
            this.registryFactory[e].priority - this.registryFactory[t].priority
        );
      }
      initializeBackendsAndReturnBest() {
        const t = this.getSortedBackends();
        for (let e = 0; e < t.length; e++) {
          const n = t[e],
            { success: r, asyncInit: a } = this.initializeBackend(n);
          if (a || r) return { name: n, asyncInit: a };
        }
        throw new Error(
          "Could not initialize any backends, all backend initializations failed."
        );
      }
      moveData(t, e) {
        const n = this.state.tensorInfo.get(e),
          r = n.backend,
          a = this.readSync(e);
        r.disposeData(e),
          (n.backend = t),
          t.move(e, a, n.shape, n.dtype),
          this.shouldCheckForMemLeaks() &&
            this.state.numDataMovesStack[
              this.state.numDataMovesStack.length - 1
            ]++;
      }
      tidy(t, e) {
        let n,
          r = null;
        if (null == e) {
          if ("function" != typeof t)
            throw new Error("Please provide a function to tidy()");
          e = t;
        } else {
          if ("string" != typeof t && !(t instanceof String))
            throw new Error(
              "When calling with two arguments, the first argument to tidy() must be a string"
            );
          if ("function" != typeof e)
            throw new Error(
              "When calling with two arguments, the 2nd argument to tidy() must be a function"
            );
          r = t;
        }
        return this.scopedRun(
          () => this.startScope(r),
          () => this.endScope(n),
          () => (
            (n = e()),
            n instanceof Promise &&
              console.error("Cannot return a Promise inside of tidy."),
            n
          )
        );
      }
      scopedRun(t, e, n) {
        t();
        try {
          const t = n();
          return e(), t;
        } catch (t) {
          throw (e(), t);
        }
      }
      nextTensorId() {
        return d.nextTensorId++;
      }
      nextVariableId() {
        return d.nextVariableId++;
      }
      clone(t) {
        const e = this.makeTensorFromDataId(t.dataId, t.shape, t.dtype),
          n = { x: t };
        return (
          this.addTapeNode(
            this.state.activeScope.name,
            n,
            [e],
            (t) => ({ x: () => t.toFloat() }),
            [],
            {}
          ),
          e
        );
      }
      runKernel(t, e, n, r, a) {
        return this.runKernelFunc(null, e, null, t, n, r, a);
      }
      shouldCheckForMemLeaks() {
        return this.ENV.getBool("IS_TEST");
      }
      checkKernelForMemLeak(t, e, n) {
        const r = this.backend.numDataIds();
        let a = 0;
        n.forEach((t) => {
          a += "complex64" === t.dtype ? 3 : 1;
        });
        const i = this.state.numDataMovesStack[
            this.state.numDataMovesStack.length - 1
          ],
          o = r - e - a - i;
        if (o > 0)
          throw new Error(
            `Backend '${this.backendName}' has an internal memory leak (${o} data ids) after running '${t}'`
          );
      }
      runKernelFunc(t, e, n, r, a, o, s) {
        let u,
          c = [];
        const l = this.isTapeOn();
        null == r &&
          (r =
            null != this.state.activeScope ? this.state.activeScope.name : "");
        const h = this.state.numBytes,
          d = this.state.numTensors;
        let p;
        this.shouldCheckForMemLeaks() && this.state.numDataMovesStack.push(0);
        const f = Object(i.b)(r, this.backendName);
        let m;
        if (null != f)
          p = () => {
            const t = this.backend.numDataIds();
            m = f.kernelFunc({ inputs: e, attrs: a, backend: this.backend });
            const n = Array.isArray(m) ? m : [m];
            this.shouldCheckForMemLeaks() &&
              this.checkKernelForMemLeak(r, t, n);
            const i = n.map(({ dataId: t, shape: e, dtype: n }) =>
              this.makeTensorFromDataId(t, e, n)
            );
            if (l) {
              let t = this.getTensorsForGradient(r, e, i);
              if (null == t) {
                null == s && (s = []);
                const e = i.filter((t, e) => s[e]);
                t = (o || []).slice().concat(e);
              }
              c = this.saveTensorsForBackwardMode(t);
            }
            return i;
          };
        else {
          const e = (t) => {
            l && (c = t.map((t) => this.keep(this.clone(t))));
          };
          p = () => {
            const n = this.backend.numDataIds();
            m = this.tidy(() => t(this.backend, e));
            const a = Array.isArray(m) ? m : [m];
            return (
              this.shouldCheckForMemLeaks() &&
                this.checkKernelForMemLeak(r, n, a),
              a
            );
          };
        }
        return (
          this.scopedRun(
            () => this.state.kernelDepth++,
            () => this.state.kernelDepth--,
            () => {
              u = this.ENV.getBool("DEBUG")
                ? this.profiler.profileKernel(r, e, () => p())
                : p();
            }
          ),
          l && this.addTapeNode(r, e, u, n, c, a),
          this.state.profiling &&
            this.state.activeProfile.kernels.push({
              name: r,
              bytesAdded: this.state.numBytes - h,
              totalBytesSnapshot: this.state.numBytes,
              tensorsAdded: this.state.numTensors - d,
              totalTensorsSnapshot: this.state.numTensors,
              inputShapes: Object.keys(e).map((t) => e[t].shape),
              outputShapes: u.map((t) => t.shape),
            }),
          Array.isArray(m) ? u : u[0]
        );
      }
      saveTensorsForBackwardMode(t) {
        return t.map((t) => this.keep(this.clone(t)));
      }
      getTensorsForGradient(t, e, n) {
        const r = Object(i.a)(t);
        if (null != r) {
          const t = r.inputsToSave || [],
            a = r.outputsToSave || [];
          let i;
          r.saveAllInputs
            ? (o.assert(
                Array.isArray(e),
                () => "saveAllInputs is true, expected inputs to be an array."
              ),
              (i = Object.keys(e).map((t) => e[t])))
            : (i = t.map((t) => e[t]));
          const s = n.filter((t, e) => a[e]);
          return i.concat(s);
        }
        return null;
      }
      makeTensor(t, e, n, r) {
        if (null == t)
          throw new Error("Values passed to engine.makeTensor() are null");
        (n = n || "float32"), (r = r || this.backend);
        let a = t;
        "string" === n &&
          o.isString(t[0]) &&
          (a = t.map((t) => o.encodeString(t)));
        const i = r.write(a, e, n),
          s = new c.a(e, n, i, this.nextTensorId());
        if ((this.incRef(s, r), "string" === n)) {
          const t = this.state.tensorInfo.get(i),
            e = Object(o.bytesFromStringArray)(a);
          (this.state.numBytes += e - t.bytes), (t.bytes = e);
        }
        return s;
      }
      makeTensorFromDataId(t, e, n, r) {
        n = n || "float32";
        const a = new c.a(e, n, t, this.nextTensorId());
        return this.incRef(a, r), a;
      }
      makeVariable(t, e = !0, n, r) {
        (n = n || this.nextVariableId().toString()),
          null != r && r !== t.dtype && (t = t.asType(r));
        const a = new c.c(t, e, n, this.nextTensorId());
        if (null != this.state.registeredVariables[a.name])
          throw new Error(
            `Variable with name ${a.name} was already registered`
          );
        return (
          (this.state.registeredVariables[a.name] = a),
          this.incRef(a, this.backend),
          a
        );
      }
      incRef(t, e) {
        const n = this.state.tensorInfo.has(t.dataId)
          ? this.state.tensorInfo.get(t.dataId).refCount
          : 0;
        if (
          (this.state.numTensors++,
          "string" === t.dtype && this.state.numStringTensors++,
          0 === n)
        ) {
          this.state.numDataBuffers++;
          let n = 0;
          "complex64" !== t.dtype &&
            "string" !== t.dtype &&
            (n = t.size * o.bytesPerElement(t.dtype)),
            this.state.tensorInfo.set(t.dataId, {
              backend: e || this.backend,
              dtype: t.dtype,
              shape: t.shape,
              bytes: n,
              refCount: 0,
            }),
            (this.state.numBytes += n);
        }
        this.state.tensorInfo.get(t.dataId).refCount++,
          t instanceof c.c || this.track(t);
      }
      disposeTensor(t) {
        if (!this.state.tensorInfo.has(t.dataId)) return;
        this.state.numTensors--,
          "string" === t.dtype && this.state.numStringTensors--;
        const e = this.state.tensorInfo.get(t.dataId);
        e.refCount <= 1
          ? ("complex64" !== t.dtype && (this.state.numBytes -= e.bytes),
            this.state.numDataBuffers--,
            e.backend.disposeData(t.dataId),
            this.state.tensorInfo.delete(t.dataId))
          : this.state.tensorInfo.get(t.dataId).refCount--;
      }
      disposeVariables() {
        for (const t in this.state.registeredVariables) {
          const e = this.state.registeredVariables[t];
          this.disposeVariable(e);
        }
      }
      disposeVariable(t) {
        this.disposeTensor(t),
          null != this.state.registeredVariables[t.name] &&
            delete this.state.registeredVariables[t.name];
      }
      memory() {
        const t = this.backend.memory();
        return (
          (t.numTensors = this.state.numTensors),
          (t.numDataBuffers = this.state.numDataBuffers),
          (t.numBytes = this.state.numBytes),
          this.state.numStringTensors > 0 &&
            ((t.unreliable = !0),
            null == t.reasons && (t.reasons = []),
            t.reasons.push(
              "Memory usage by string tensors is approximate (2 bytes per character)"
            )),
          t
        );
      }
      async profile(t) {
        this.state.profiling = !0;
        const e = this.state.numBytes,
          n = this.state.numTensors;
        return (
          (this.state.activeProfile.kernels = []),
          (this.state.activeProfile.result = t()),
          (this.state.profiling = !1),
          (this.state.activeProfile.peakBytes = Math.max(
            ...this.state.activeProfile.kernels.map((t) => t.totalBytesSnapshot)
          )),
          (this.state.activeProfile.newBytes = this.state.numBytes - e),
          (this.state.activeProfile.newTensors = this.state.numTensors - n),
          this.state.activeProfile
        );
      }
      isTapeOn() {
        return this.state.gradientDepth > 0 && 0 === this.state.kernelDepth;
      }
      addTapeNode(t, e, n, r, a, s) {
        const u = {
            id: this.state.nextTapeNodeId++,
            kernelName: t,
            inputs: e,
            outputs: n,
            saved: a,
          },
          c = Object(i.a)(t);
        null != c && (r = c.gradFunc),
          null != r &&
            (u.gradient = (t) => (
              (t = t.map((t, e) => {
                if (null == t) {
                  const t = n[e],
                    r = o.makeZerosTypedArray(t.size, t.dtype);
                  return this.makeTensor(r, t.shape, t.dtype);
                }
                return t;
              })),
              r(t.length > 1 ? t : t[0], a, s)
            )),
          this.state.activeTape.push(u);
      }
      keep(t) {
        return (t.kept = !0), t;
      }
      startTape() {
        0 === this.state.gradientDepth && (this.state.activeTape = []),
          this.state.gradientDepth++;
      }
      endTape() {
        this.state.gradientDepth--;
      }
      startScope(t) {
        const e = {
          track: [],
          name: "unnamed scope",
          id: this.state.nextScopeId++,
        };
        t && (e.name = t),
          this.state.scopeStack.push(e),
          (this.state.activeScope = e);
      }
      endScope(t) {
        const e = Object(l.getTensorsInContainer)(t),
          n = new Set(e.map((t) => t.id));
        for (let t = 0; t < this.state.activeScope.track.length; t++) {
          const e = this.state.activeScope.track[t];
          e.kept || n.has(e.id) || e.dispose();
        }
        const r = this.state.scopeStack.pop();
        (this.state.activeScope =
          0 === this.state.scopeStack.length
            ? null
            : this.state.scopeStack[this.state.scopeStack.length - 1]),
          e.forEach((t) => {
            t.kept || t.scopeId !== r.id || this.track(t);
          });
      }
      gradients(t, e, n, r = !1) {
        if (
          (o.assert(
            e.length > 0,
            () => "gradients() received an empty list of xs."
          ),
          null != n && "float32" !== n.dtype)
        )
          throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);
        const a = this.scopedRun(
          () => this.startTape(),
          () => this.endTape(),
          () => this.tidy("forward", t)
        );
        o.assert(
          a instanceof c.a,
          () => "The result y returned by f() must be a tensor."
        );
        const i = (function (t, e, n) {
          const r = {},
            a = {};
          for (let t = 0; t < e.length; t++) r[e[t].id] = !0;
          for (let n = 0; n < t.length; n++) {
            const i = t[n],
              o = i.inputs;
            for (const t in o) {
              const n = o[t];
              let s = !1;
              for (let t = 0; t < e.length; t++)
                if (r[n.id]) {
                  i.outputs.forEach((t) => (r[t.id] = !0)),
                    (s = !0),
                    (a[i.id] = !0);
                  break;
                }
              if (s) break;
            }
          }
          const i = {};
          i[n.id] = !0;
          const o = {};
          for (let e = t.length - 1; e >= 0; e--) {
            const n = t[e],
              r = n.inputs;
            for (let t = 0; t < n.outputs.length; t++)
              if (i[n.outputs[t].id]) {
                for (const t in r) (i[r[t].id] = !0), (o[n.id] = !0);
                break;
              }
          }
          const s = [];
          for (let e = 0; e < t.length; e++) {
            const n = t[e];
            if (a[n.id] && o[n.id]) {
              const t = {};
              for (const e in n.inputs) {
                const a = n.inputs[e];
                r[a.id] && (t[e] = a);
              }
              const e = Object.assign({}, n);
              (e.inputs = t), (e.outputs = n.outputs), s.push(e);
            }
          }
          return s;
        })(this.state.activeTape, e, a);
        if (!r && 0 === i.length && e.length > 0)
          throw new Error(
            "Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y."
          );
        return this.tidy("backward", () => {
          const t = {};
          (t[a.id] =
            null == n
              ? (function (t) {
                  const e = Object(o.makeOnesTypedArray)(
                    Object(o.sizeFromShape)(t),
                    "float32"
                  );
                  return p.makeTensor(e, t, "float32");
                })(a.shape)
              : n),
            (function (t, e, n) {
              for (let r = e.length - 1; r >= 0; r--) {
                const a = e[r],
                  i = [];
                if (
                  (a.outputs.forEach((e) => {
                    const n = t[e.id];
                    null != n ? i.push(n) : i.push(null);
                  }),
                  null == a.gradient)
                )
                  throw new Error(
                    `Cannot compute gradient: gradient function not found for ${a.kernelName}.`
                  );
                const s = a.gradient(i);
                for (const e in a.inputs) {
                  if (!(e in s))
                    throw new Error(
                      `Cannot backprop through input ${e}. Available gradients found: ${Object.keys(
                        s
                      )}.`
                    );
                  const r = n(() => s[e]());
                  if ("float32" !== r.dtype)
                    throw new Error(
                      `Error in gradient for op ${a.kernelName}. The gradient of input ${e} must have 'float32' dtype, but has '${r.dtype}'`
                    );
                  const i = a.inputs[e];
                  if (!o.arraysEqual(r.shape, i.shape))
                    throw new Error(
                      `Error in gradient for op ${a.kernelName}. The gradient of input '${e}' has shape '${r.shape}', which does not match the shape of the input '${i.shape}'`
                    );
                  if (null == t[i.id]) t[i.id] = r;
                  else {
                    const e = t[i.id];
                    (t[i.id] = e.add(r)), e.dispose();
                  }
                }
              }
            })(t, i, (t) => this.tidy(t));
          const r = e.map((e) => t[e.id]);
          return (
            0 === this.state.gradientDepth &&
              (this.state.activeTape.forEach((t) => {
                for (const e of t.saved) e.dispose();
              }),
              (this.state.activeTape = null)),
            { value: a, grads: r }
          );
        });
      }
      customGrad(t) {
        return (
          o.assert(
            o.isFunction(t),
            () => "The f passed in customGrad(f) must be a function."
          ),
          (...e) => {
            let n;
            o.assert(
              e.every((t) => t instanceof c.a),
              () =>
                "The args passed in customGrad(f)(x1, x2,...) must all be tensors"
            );
            const r = {};
            return (
              e.forEach((t, e) => {
                r[e] = t;
              }),
              this.runKernelFunc(
                (r, a) => (
                  (n = t(...e, a)),
                  o.assert(
                    n.value instanceof c.a,
                    () =>
                      "The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"
                  ),
                  o.assert(
                    o.isFunction(n.gradFunc),
                    () =>
                      "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."
                  ),
                  n.value
                ),
                r,
                (t, r) => {
                  const a = n.gradFunc(t, r),
                    i = Array.isArray(a) ? a : [a];
                  o.assert(
                    i.length === e.length,
                    () =>
                      "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."
                  ),
                    o.assert(
                      i.every((t) => t instanceof c.a),
                      () =>
                        "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."
                    );
                  const s = {};
                  return (
                    i.forEach((t, e) => {
                      s[e] = () => t;
                    }),
                    s
                  );
                }
              )
            );
          }
        );
      }
      readSync(t) {
        return this.state.tensorInfo.get(t).backend.readSync(t);
      }
      read(t) {
        return this.state.tensorInfo.get(t).backend.read(t);
      }
      async time(t) {
        const e = Object(o.now)(),
          n = await this.backend.time(t);
        return (n.wallMs = Object(o.now)() - e), n;
      }
      track(t) {
        return (
          null != this.state.activeScope &&
            ((t.scopeId = this.state.activeScope.id),
            this.state.activeScope.track.push(t)),
          t
        );
      }
      get registeredVariables() {
        return this.state.registeredVariables;
      }
      reset() {
        this.pendingBackendInitId++,
          this.state.dispose(),
          this.ENV.reset(),
          (this.state = new h());
        for (const t in this.registry)
          this.disposeRegisteredKernels(t),
            this.registry[t].dispose(),
            delete this.registry[t];
        (this.backendName = null),
          (this.backendInstance = null),
          (this.pendingBackendInit = null);
      }
    }
    (d.nextTensorId = 0), (d.nextVariableId = 0);
    const p = (function () {
      const t = Object(a.b)();
      if (null == t._tfengine) {
        const e = new r.a(t);
        t._tfengine = new d(e);
      }
      return (
        Object(r.c)(t._tfengine.ENV),
        Object(c.f)(() => t._tfengine),
        t._tfengine
      );
    })();
  },
  function (t, e, n) {
    "use strict";
    n.d(e, "c", function () {
      return a;
    }),
      n.d(e, "a", function () {
        return i;
      }),
      n.d(e, "b", function () {
        return o;
      }),
      n.d(e, "d", function () {
        return s;
      }),
      n.d(e, "e", function () {
        return u;
      });
    /*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
    var r = function (t, e) {
      return (r =
        Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array &&
          function (t, e) {
            t.__proto__ = e;
          }) ||
        function (t, e) {
          for (var n in e) e.hasOwnProperty(n) && (t[n] = e[n]);
        })(t, e);
    };
    function a(t, e) {
      function n() {
        this.constructor = t;
      }
      r(t, e),
        (t.prototype =
          null === e
            ? Object.create(e)
            : ((n.prototype = e.prototype), new n()));
    }
    var i = function () {
      return (i =
        Object.assign ||
        function (t) {
          for (var e, n = 1, r = arguments.length; n < r; n++)
            for (var a in (e = arguments[n]))
              Object.prototype.hasOwnProperty.call(e, a) && (t[a] = e[a]);
          return t;
        }).apply(this, arguments);
    };
    function o(t, e, n, r) {
      return new (n || (n = Promise))(function (a, i) {
        function o(t) {
          try {
            u(r.next(t));
          } catch (t) {
            i(t);
          }
        }
        function s(t) {
          try {
            u(r.throw(t));
          } catch (t) {
            i(t);
          }
        }
        function u(t) {
          var e;
          t.done
            ? a(t.value)
            : ((e = t.value),
              e instanceof n
                ? e
                : new n(function (t) {
                    t(e);
                  })).then(o, s);
        }
        u((r = r.apply(t, e || [])).next());
      });
    }
    function s(t, e) {
      var n,
        r,
        a,
        i,
        o = {
          label: 0,
          sent: function () {
            if (1 & a[0]) throw a[1];
            return a[1];
          },
          trys: [],
          ops: [],
        };
      return (
        (i = { next: s(0), throw: s(1), return: s(2) }),
        "function" == typeof Symbol &&
          (i[Symbol.iterator] = function () {
            return this;
          }),
        i
      );
      function s(i) {
        return function (s) {
          return (function (i) {
            if (n) throw new TypeError("Generator is already executing.");
            for (; o; )
              try {
                if (
                  ((n = 1),
                  r &&
                    (a =
                      2 & i[0]
                        ? r.return
                        : i[0]
                        ? r.throw || ((a = r.return) && a.call(r), 0)
                        : r.next) &&
                    !(a = a.call(r, i[1])).done)
                )
                  return a;
                switch (((r = 0), a && (i = [2 & i[0], a.value]), i[0])) {
                  case 0:
                  case 1:
                    a = i;
                    break;
                  case 4:
                    return o.label++, { value: i[1], done: !1 };
                  case 5:
                    o.label++, (r = i[1]), (i = [0]);
                    continue;
                  case 7:
                    (i = o.ops.pop()), o.trys.pop();
                    continue;
                  default:
                    if (
                      !((a = o.trys),
                      (a = a.length > 0 && a[a.length - 1]) ||
                        (6 !== i[0] && 2 !== i[0]))
                    ) {
                      o = 0;
                      continue;
                    }
                    if (3 === i[0] && (!a || (i[1] > a[0] && i[1] < a[3]))) {
                      o.label = i[1];
                      break;
                    }
                    if (6 === i[0] && o.label < a[1]) {
                      (o.label = a[1]), (a = i);
                      break;
                    }
                    if (a && o.label < a[2]) {
                      (o.label = a[2]), o.ops.push(i);
                      break;
                    }
                    a[2] && o.ops.pop(), o.trys.pop();
                    continue;
                }
                i = e.call(t, o);
              } catch (t) {
                (i = [6, t]), (r = 0);
              } finally {
                n = a = 0;
              }
            if (5 & i[0]) throw i[1];
            return { value: i[0] ? i[1] : void 0, done: !0 };
          })([i, s]);
        };
      }
    }
    function u() {
      for (var t = 0, e = 0, n = arguments.length; e < n; e++)
        t += arguments[e].length;
      var r = Array(t),
        a = 0;
      for (e = 0; e < n; e++)
        for (var i = arguments[e], o = 0, s = i.length; o < s; o++, a++)
          r[a] = i[o];
      return r;
    }
  },
  function (t, e, n) {
    "use strict";
    n.d(e, "a", function () {
      return r;
    }),
      n.d(e, "b", function () {
        return a;
      }),
      n.d(e, "c", function () {
        return i;
      }),
      n.d(e, "d", function () {
        return o;
      }),
      n.d(e, "g", function () {
        return s;
      }),
      n.d(e, "e", function () {
        return u;
      }),
      n.d(e, "f", function () {
        return c;
      }),
      n.d(e, "h", function () {
        return l;
      }),
      n.d(e, "i", function () {
        return h;
      }),
      n.d(e, "j", function () {
        return d;
      }),
      n.d(e, "k", function () {
        return p;
      }),
      n.d(e, "l", function () {
        return f;
      }),
      n.d(e, "m", function () {
        return m;
      }),
      n.d(e, "n", function () {
        return g;
      }),
      n.d(e, "o", function () {
        return b;
      }),
      n.d(e, "p", function () {
        return v;
      }),
      n.d(e, "q", function () {
        return y;
      }),
      n.d(e, "r", function () {
        return x;
      }),
      n.d(e, "s", function () {
        return w;
      }),
      n.d(e, "t", function () {
        return C;
      }),
      n.d(e, "u", function () {
        return O;
      }),
      n.d(e, "v", function () {
        return E;
      }),
      n.d(e, "w", function () {
        return S;
      }),
      n.d(e, "x", function () {
        return I;
      }),
      n.d(e, "y", function () {
        return k;
      }),
      n.d(e, "z", function () {
        return N;
      }),
      n.d(e, "A", function () {
        return R;
      }),
      n.d(e, "B", function () {
        return A;
      }),
      n.d(e, "D", function () {
        return T;
      }),
      n.d(e, "C", function () {
        return _;
      }),
      n.d(e, "F", function () {
        return D;
      }),
      n.d(e, "G", function () {
        return F;
      }),
      n.d(e, "H", function () {
        return M;
      }),
      n.d(e, "I", function () {
        return j;
      }),
      n.d(e, "J", function () {
        return $;
      }),
      n.d(e, "K", function () {
        return B;
      }),
      n.d(e, "N", function () {
        return P;
      }),
      n.d(e, "O", function () {
        return L;
      }),
      n.d(e, "L", function () {
        return z;
      }),
      n.d(e, "M", function () {
        return W;
      }),
      n.d(e, "P", function () {
        return V;
      }),
      n.d(e, "V", function () {
        return U;
      }),
      n.d(e, "Q", function () {
        return G;
      }),
      n.d(e, "T", function () {
        return H;
      }),
      n.d(e, "R", function () {
        return q;
      }),
      n.d(e, "S", function () {
        return K;
      }),
      n.d(e, "U", function () {
        return X;
      }),
      n.d(e, "W", function () {
        return Y;
      }),
      n.d(e, "X", function () {
        return J;
      }),
      n.d(e, "Y", function () {
        return Q;
      }),
      n.d(e, "bb", function () {
        return Z;
      }),
      n.d(e, "Z", function () {
        return tt;
      }),
      n.d(e, "ab", function () {
        return et;
      }),
      n.d(e, "cb", function () {
        return nt;
      }),
      n.d(e, "db", function () {
        return rt;
      }),
      n.d(e, "eb", function () {
        return at;
      }),
      n.d(e, "fb", function () {
        return it;
      }),
      n.d(e, "gb", function () {
        return ot;
      }),
      n.d(e, "hb", function () {
        return st;
      }),
      n.d(e, "ib", function () {
        return ut;
      }),
      n.d(e, "jb", function () {
        return ct;
      }),
      n.d(e, "kb", function () {
        return lt;
      }),
      n.d(e, "lb", function () {
        return ht;
      }),
      n.d(e, "mb", function () {
        return dt;
      }),
      n.d(e, "ob", function () {
        return pt;
      }),
      n.d(e, "nb", function () {
        return ft;
      }),
      n.d(e, "pb", function () {
        return mt;
      }),
      n.d(e, "qb", function () {
        return gt;
      }),
      n.d(e, "rb", function () {
        return bt;
      }),
      n.d(e, "E", function () {
        return vt;
      });
    const r = "Add",
      a = "AddN",
      i = "Atan2",
      o = "AvgPool",
      s = "AvgPoolBackprop",
      u = "AvgPool3D",
      c = "AvgPool3DBackprop",
      l = "BatchMatMul",
      h = "BatchToSpaceND",
      d = "BroadcastTo",
      p = "Complex",
      f = "Concat",
      m = "Conv2D",
      g = "Conv2DBackpropFilter",
      b = "Conv2DBackpropInput",
      v = "Conv3D",
      y = "Conv3DBackpropFilterV2",
      x = "Conv3DBackpropInputV2",
      w = "Cumsum",
      C = "DepthToSpace",
      O = "DepthwiseConv2dNative",
      E = "DepthwiseConv2dNativeBackpropFilter",
      S = "DepthwiseConv2dNativeBackpropInput",
      I = "Diag",
      k = "Div",
      N = "Elu",
      R = "EluGrad",
      A = "Equal",
      T = "FloorDiv",
      _ = "Fill",
      D = "FusedBatchNorm",
      F = "GatherNd",
      M = "Greater",
      j = "GreaterEqual",
      $ = "Identity",
      B = "Imag",
      P = "Less",
      L = "LessEqual",
      z = "LRN",
      W = "LRNBackprop",
      V = "Max",
      U = "Maximum",
      G = "MaxPool",
      H = "MaxPoolBackprop",
      q = "MaxPool3D",
      K = "MaxPool3DBackprop",
      X = "MaxPoolWithArgmax",
      Y = "Minimum",
      J = "Mod",
      Q = "Multiply",
      Z = "NotEqual",
      tt = "NonMaxSuppressionV3",
      et = "NonMaxSuppressionV5",
      nt = "OneHot",
      rt = "PadV2",
      at = "Pow",
      it = "Prelu",
      ot = "Real",
      st = "Relu",
      ut = "Relu6",
      ct = "SelectV2",
      lt = "Selu",
      ht = "SpaceToBatchND",
      dt = "SplitV",
      pt = "SquaredDifference",
      ft = "Square",
      mt = "Sub",
      gt = "Tile",
      bt = "Transpose",
      vt = "FromPixels";
  },
  function (t, e, n) {
    "use strict";
    n.d(e, "b", function () {
      return u;
    }),
      n.d(e, "f", function () {
        return d;
      }),
      n.d(e, "e", function () {
        return p;
      }),
      n.d(e, "d", function () {
        return f;
      }),
      n.d(e, "a", function () {
        return m;
      }),
      n.d(e, "c", function () {
        return g;
      });
    var r = n(1);
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function a(t, e, n, a) {
      const u = Object(r.computeStrides)(e),
        c = (function (t, e, n, a) {
          const o = Object(r.sizeFromShape)(e),
            u = a[a.length - 1],
            c = new Array(u).fill(0),
            l = e.length,
            h = "complex64" === n ? s(t) : t;
          if (l > 1)
            for (let t = 0; t < o / u; t++) {
              const e = t * u;
              for (let t = 0; t < u; t++)
                c[t] = Math.max(c[t], i(h[e + t], 0, n).length);
            }
          return c;
        })(t, e, n, u),
        l = e.length,
        h = (function t(e, n, r, a, u, c = !0) {
          const l = "complex64" === r ? 2 : 1,
            h = n[0],
            d = n.length;
          if (0 === d) {
            if ("complex64" === r) {
              return [i(s(e)[0], 0, r)];
            }
            return "bool" === r ? [o(e[0])] : [e[0].toString()];
          }
          if (1 === d) {
            if (h > 20) {
              const t = 3 * l;
              let n = Array.from(e.slice(0, t)),
                a = Array.from(e.slice((h - 3) * l, h * l));
              return (
                "complex64" === r && ((n = s(n)), (a = s(a))),
                [
                  "[" +
                    n.map((t, e) => i(t, u[e], r)).join(", ") +
                    ", ..., " +
                    a.map((t, e) => i(t, u[h - 3 + e], r)).join(", ") +
                    "]",
                ]
              );
            }
            return [
              "[" +
                ("complex64" === r ? s(e) : Array.from(e))
                  .map((t, e) => i(t, u[e], r))
                  .join(", ") +
                "]",
            ];
          }
          const p = n.slice(1),
            f = a.slice(1),
            m = a[0] * l,
            g = [];
          if (h > 20) {
            for (let n = 0; n < 3; n++) {
              const a = n * m,
                i = a + m;
              g.push(...t(e.slice(a, i), p, r, f, u, !1));
            }
            g.push("...");
            for (let n = h - 3; n < h; n++) {
              const a = n * m,
                i = a + m;
              g.push(...t(e.slice(a, i), p, r, f, u, n === h - 1));
            }
          } else
            for (let n = 0; n < h; n++) {
              const a = n * m,
                i = a + m;
              g.push(...t(e.slice(a, i), p, r, f, u, n === h - 1));
            }
          const b = 2 === d ? "," : "";
          g[0] = "[" + g[0] + b;
          for (let t = 1; t < g.length - 1; t++) g[t] = " " + g[t] + b;
          let v = ",\n";
          for (let t = 2; t < d; t++) v += "\n";
          return (
            (g[g.length - 1] = " " + g[g.length - 1] + "]" + (c ? "" : v)), g
          );
        })(t, e, n, u, c),
        d = ["Tensor"];
      return (
        a &&
          (d.push("  dtype: " + n),
          d.push("  rank: " + l),
          d.push(`  shape: [${e}]`),
          d.push("  values:")),
        d.push(h.map((t) => "    " + t).join("\n")),
        d.join("\n")
      );
    }
    function i(t, e, n) {
      let a;
      return (
        (a = Array.isArray(t)
          ? parseFloat(t[0].toFixed(7)) +
            " + " +
            parseFloat(t[1].toFixed(7)) +
            "j"
          : Object(r.isString)(t)
          ? `'${t}'`
          : "bool" === n
          ? o(t)
          : parseFloat(t.toFixed(7)).toString()),
        Object(r.rightPad)(a, e)
      );
    }
    function o(t) {
      return 0 === t ? "false" : "true";
    }
    function s(t) {
      const e = [];
      for (let n = 0; n < t.length; n += 2) e.push([t[n], t[n + 1]]);
      return e;
    }
    /**
     * @license
     * Copyright 2017 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class u {
      constructor(t, e, n) {
        if (
          ((this.dtype = e),
          (this.shape = t.slice()),
          (this.size = r.sizeFromShape(t)),
          null != n)
        ) {
          const t = n.length;
          r.assert(
            t === this.size,
            () =>
              `Length of values '${t}' does not match the size inferred by the shape '${this.size}'.`
          );
        }
        if ("complex64" === e)
          throw new Error(
            "complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag)."
          );
        (this.values = n || r.getArrayFromDType(e, this.size)),
          (this.strides = Object(r.computeStrides)(t));
      }
      set(t, ...e) {
        0 === e.length && (e = [0]),
          r.assert(
            e.length === this.rank,
            () =>
              `The number of provided coordinates (${e.length}) must match the rank (${this.rank})`
          );
        const n = this.locToIndex(e);
        this.values[n] = t;
      }
      get(...t) {
        0 === t.length && (t = [0]);
        let e = 0;
        for (const n of t) {
          if (n < 0 || n >= this.shape[e]) {
            const e =
              `Requested out of range element at ${t}.   Buffer shape=` +
              this.shape;
            throw new Error(e);
          }
          e++;
        }
        let n = t[t.length - 1];
        for (let e = 0; e < t.length - 1; ++e) n += this.strides[e] * t[e];
        return this.values[n];
      }
      locToIndex(t) {
        if (0 === this.rank) return 0;
        if (1 === this.rank) return t[0];
        let e = t[t.length - 1];
        for (let n = 0; n < t.length - 1; ++n) e += this.strides[n] * t[n];
        return e;
      }
      indexToLoc(t) {
        if (0 === this.rank) return [];
        if (1 === this.rank) return [t];
        const e = new Array(this.shape.length);
        for (let n = 0; n < e.length - 1; ++n)
          (e[n] = Math.floor(t / this.strides[n])),
            (t -= e[n] * this.strides[n]);
        return (e[e.length - 1] = t), e;
      }
      get rank() {
        return this.shape.length;
      }
      toTensor() {
        return c().makeTensor(this.values, this.shape, this.dtype);
      }
    }
    let c = null,
      l = null,
      h = null;
    function d(t) {
      c = t;
    }
    function p(t) {
      l = t;
    }
    function f(t) {
      h = t;
    }
    class m {
      constructor(t, e, n, a) {
        (this.kept = !1),
          (this.isDisposedInternal = !1),
          (this.shape = t.slice()),
          (this.dtype = e || "float32"),
          (this.size = r.sizeFromShape(t)),
          (this.strides = Object(r.computeStrides)(t)),
          (this.dataId = n),
          (this.id = a),
          (this.rankType = this.rank < 5 ? this.rank.toString() : "higher");
      }
      flatten() {
        return this.throwIfDisposed(), this.as1D();
      }
      asScalar() {
        return (
          this.throwIfDisposed(),
          r.assert(
            1 === this.size,
            () => "The array must have only 1 element."
          ),
          this.reshape([])
        );
      }
      as1D() {
        return this.throwIfDisposed(), this.reshape([this.size]);
      }
      as2D(t, e) {
        return this.throwIfDisposed(), this.reshape([t, e]);
      }
      as3D(t, e, n) {
        return this.throwIfDisposed(), this.reshape([t, e, n]);
      }
      as4D(t, e, n, r) {
        return this.throwIfDisposed(), this.reshape([t, e, n, r]);
      }
      as5D(t, e, n, r, a) {
        return this.throwIfDisposed(), this.reshape([t, e, n, r, a]);
      }
      asType(t) {
        return this.throwIfDisposed(), l.cast(this, t);
      }
      get rank() {
        return this.shape.length;
      }
      async buffer() {
        const t = await this.data();
        return l.buffer(this.shape, this.dtype, t);
      }
      bufferSync() {
        return l.buffer(this.shape, this.dtype, this.dataSync());
      }
      async array() {
        const t = await this.data();
        return Object(r.toNestedArray)(this.shape, t);
      }
      arraySync() {
        return Object(r.toNestedArray)(this.shape, this.dataSync());
      }
      async data() {
        this.throwIfDisposed();
        const t = c().read(this.dataId);
        if ("string" === this.dtype) {
          const e = await t;
          try {
            return e.map((t) => r.decodeString(t));
          } catch (t) {
            throw new Error(
              "Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes()."
            );
          }
        }
        return t;
      }
      dataSync() {
        this.throwIfDisposed();
        const t = c().readSync(this.dataId);
        if ("string" === this.dtype)
          try {
            return t.map((t) => r.decodeString(t));
          } catch (t) {
            throw new Error(
              "Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes()."
            );
          }
        return t;
      }
      async bytes() {
        this.throwIfDisposed();
        const t = await c().read(this.dataId);
        return "string" === this.dtype ? t : new Uint8Array(t.buffer);
      }
      dispose() {
        this.isDisposed ||
          (c().disposeTensor(this), (this.isDisposedInternal = !0));
      }
      get isDisposed() {
        return this.isDisposedInternal;
      }
      throwIfDisposed() {
        if (this.isDisposed) throw new Error("Tensor is disposed.");
      }
      toFloat() {
        return this.asType("float32");
      }
      toInt() {
        return this.asType("int32");
      }
      toBool() {
        return this.asType("bool");
      }
      print(t = !1) {
        return l.print(this, t);
      }
      reshape(t) {
        return this.throwIfDisposed(), l.reshape(this, t);
      }
      reshapeAs(t) {
        return this.throwIfDisposed(), this.reshape(t.shape);
      }
      expandDims(t = 0) {
        return l.expandDims(this, t);
      }
      squeeze(t) {
        return this.throwIfDisposed(), l.squeeze(this, t);
      }
      clone() {
        return this.throwIfDisposed(), l.clone(this);
      }
      toString(t = !1) {
        return a(this.dataSync(), this.shape, this.dtype, t);
      }
      gather(t, e = 0) {
        return this.throwIfDisposed(), l.gather(this, t, e);
      }
      norm(t = "euclidean", e = null, n = !1) {
        return this.throwIfDisposed(), l.norm(this, t, e, n);
      }
      slice(t, e) {
        return this.throwIfDisposed(), l.slice(this, t, e);
      }
      reverse(t) {
        return this.throwIfDisposed(), l.reverse(this, t);
      }
      stack(t, e = 0) {
        return l.stack([this, t], e);
      }
      unstack(t = 0) {
        return l.unstack(this, t);
      }
      all(t = null, e = !1) {
        return this.throwIfDisposed(), l.all(this, t, e);
      }
      any(t = null, e = !1) {
        return this.throwIfDisposed(), l.any(this, t, e);
      }
      logSumExp(t = null, e = !1) {
        return this.throwIfDisposed(), l.logSumExp(this, t, e);
      }
      sum(t = null, e = !1) {
        return this.throwIfDisposed(), l.sum(this, t, e);
      }
      prod(t = null, e = !1) {
        return this.throwIfDisposed(), l.prod(this, t, e);
      }
      mean(t = null, e = !1) {
        return this.throwIfDisposed(), l.mean(this, t, e);
      }
      min(t = null, e = !1) {
        return this.throwIfDisposed(), l.min(this, t, e);
      }
      argMin(t = null) {
        return this.throwIfDisposed(), l.argMin(this, t);
      }
      argMax(t = null) {
        return this.throwIfDisposed(), l.argMax(this, t);
      }
      cast(t) {
        return this.throwIfDisposed(), l.cast(this, t);
      }
      addStrict(t) {
        return this.throwIfDisposed(), l.addStrict(this, t);
      }
      subStrict(t) {
        return this.throwIfDisposed(), l.subStrict(this, t);
      }
      powStrict(t) {
        return this.throwIfDisposed(), l.powStrict(this, t);
      }
      mulStrict(t) {
        return this.throwIfDisposed(), l.mulStrict(this, t);
      }
      divStrict(t) {
        return this.throwIfDisposed(), l.divStrict(this, t);
      }
      minimumStrict(t) {
        return this.throwIfDisposed(), l.minimumStrict(this, t);
      }
      maximumStrict(t) {
        return this.throwIfDisposed(), l.maximumStrict(this, t);
      }
      modStrict(t) {
        return this.throwIfDisposed(), l.modStrict(this, t);
      }
      squaredDifferenceStrict(t) {
        return this.throwIfDisposed(), l.squaredDifferenceStrict(this, t);
      }
      notEqualStrict(t) {
        return this.throwIfDisposed(), l.notEqualStrict(this, t);
      }
      lessStrict(t) {
        return this.throwIfDisposed(), l.lessStrict(this, t);
      }
      equalStrict(t) {
        return this.throwIfDisposed(), l.equalStrict(this, t);
      }
      lessEqualStrict(t) {
        return this.throwIfDisposed(), l.lessEqualStrict(this, t);
      }
      greaterStrict(t) {
        return this.throwIfDisposed(), l.greaterStrict(this, t);
      }
      greaterEqualStrict(t) {
        return this.throwIfDisposed(), l.greaterEqualStrict(this, t);
      }
      logicalAnd(t) {
        return this.throwIfDisposed(), l.logicalAnd(this, t);
      }
      logicalOr(t) {
        return this.throwIfDisposed(), l.logicalOr(this, t);
      }
      logicalNot() {
        return this.throwIfDisposed(), l.logicalNot(this);
      }
      logicalXor(t) {
        return this.throwIfDisposed(), l.logicalXor(this, t);
      }
      where(t, e) {
        return this.throwIfDisposed(), l.where(t, this, e);
      }
      neg() {
        return this.throwIfDisposed(), l.neg(this);
      }
      ceil() {
        return this.throwIfDisposed(), l.ceil(this);
      }
      floor() {
        return this.throwIfDisposed(), l.floor(this);
      }
      sign() {
        return this.throwIfDisposed(), l.sign(this);
      }
      isNaN() {
        return this.throwIfDisposed(), l.isNaN(this);
      }
      isInf() {
        return this.throwIfDisposed(), l.isInf(this);
      }
      isFinite() {
        return this.throwIfDisposed(), l.isFinite(this);
      }
      exp() {
        return this.throwIfDisposed(), l.exp(this);
      }
      expm1() {
        return this.throwIfDisposed(), l.expm1(this);
      }
      log() {
        return this.throwIfDisposed(), l.log(this);
      }
      log1p() {
        return this.throwIfDisposed(), l.log1p(this);
      }
      sqrt() {
        return this.throwIfDisposed(), l.sqrt(this);
      }
      rsqrt() {
        return this.throwIfDisposed(), l.rsqrt(this);
      }
      square() {
        return this.throwIfDisposed(), l.square(this);
      }
      reciprocal() {
        return this.throwIfDisposed(), l.reciprocal(this);
      }
      abs() {
        return this.throwIfDisposed(), l.abs(this);
      }
      clipByValue(t, e) {
        return this.throwIfDisposed(), l.clipByValue(this, t, e);
      }
      sigmoid() {
        return this.throwIfDisposed(), l.sigmoid(this);
      }
      logSigmoid() {
        return this.throwIfDisposed(), l.logSigmoid(this);
      }
      softplus() {
        return this.throwIfDisposed(), l.softplus(this);
      }
      zerosLike() {
        return this.throwIfDisposed(), l.zerosLike(this);
      }
      onesLike() {
        return this.throwIfDisposed(), l.onesLike(this);
      }
      sin() {
        return this.throwIfDisposed(), l.sin(this);
      }
      cos() {
        return this.throwIfDisposed(), l.cos(this);
      }
      tan() {
        return this.throwIfDisposed(), l.tan(this);
      }
      asin() {
        return this.throwIfDisposed(), l.asin(this);
      }
      acos() {
        return this.throwIfDisposed(), l.acos(this);
      }
      atan() {
        return this.throwIfDisposed(), l.atan(this);
      }
      sinh() {
        return this.throwIfDisposed(), l.sinh(this);
      }
      cosh() {
        return this.throwIfDisposed(), l.cosh(this);
      }
      tanh() {
        return this.throwIfDisposed(), l.tanh(this);
      }
      asinh() {
        return this.throwIfDisposed(), l.asinh(this);
      }
      acosh() {
        return this.throwIfDisposed(), l.acosh(this);
      }
      atanh() {
        return this.throwIfDisposed(), l.atanh(this);
      }
      erf() {
        return this.throwIfDisposed(), l.erf(this);
      }
      round() {
        return this.throwIfDisposed(), l.round(this);
      }
      step(t = 0) {
        return this.throwIfDisposed(), l.step(this, t);
      }
      softmax(t = -1) {
        return this.throwIfDisposed(), l.softmax(this, t);
      }
      logSoftmax(t = -1) {
        return this.throwIfDisposed(), l.logSoftmax(this, t);
      }
      resizeBilinear(t, e = !1) {
        return this.throwIfDisposed(), l.image.resizeBilinear(this, t, e);
      }
      resizeNearestNeighbor(t, e = !1) {
        return (
          this.throwIfDisposed(), l.image.resizeNearestNeighbor(this, t, e)
        );
      }
      variable(t = !0, e, n) {
        return this.throwIfDisposed(), c().makeVariable(this, t, e, n);
      }
      unsortedSegmentSum(t, e) {
        return this.throwIfDisposed(), l.unsortedSegmentSum(this, t, e);
      }
      topk(t = 1, e = !0) {
        return this.throwIfDisposed(), l.topk(this, t, e);
      }
      stridedSlice(t, e, n, r = 0, a = 0, i = 0, o = 0, s = 0) {
        return (
          this.throwIfDisposed(), l.stridedSlice(this, t, e, n, r, a, i, o, s)
        );
      }
      fft() {
        return this.throwIfDisposed(), l.spectral.fft(this);
      }
      ifft() {
        return this.throwIfDisposed(), l.spectral.ifft(this);
      }
      rfft() {
        return this.throwIfDisposed(), l.spectral.rfft(this);
      }
      irfft() {
        return this.throwIfDisposed(), l.spectral.irfft(this);
      }
    }
    Object.defineProperty(m, Symbol.hasInstance, {
      value: (t) =>
        !!t && null != t.dataId && null != t.shape && null != t.dtype,
    });
    class g extends m {
      constructor(t, e, n, r) {
        super(t.shape, t.dtype, t.dataId, r),
          (this.trainable = e),
          (this.name = n);
      }
      assign(t) {
        if (t.dtype !== this.dtype)
          throw new Error(
            `dtype of the new value (${t.dtype}) and previous value (${this.dtype}) must match`
          );
        if (!r.arraysEqual(t.shape, this.shape))
          throw new Error(
            `shape of the new value (${t.shape}) and previous value (${this.shape}) must match`
          );
        c().disposeTensor(this),
          (this.dataId = t.dataId),
          c().incRef(this, null);
      }
      dispose() {
        c().disposeVariable(this), (this.isDisposedInternal = !0);
      }
    }
    Object.defineProperty(g, Symbol.hasInstance, {
      value: (t) =>
        t instanceof m && null != t.assign && t.assign instanceof Function,
    });
  },
  function (t, e, n) {
    "use strict";
    n.d(e, "a", function () {
      return O;
    }),
      n.d(e, "b", function () {
        return w;
      }),
      n.d(e, "d", function () {
        return E;
      }),
      n.d(e, "e", function () {
        return p;
      }),
      n.d(e, "f", function () {
        return h;
      }),
      n.d(e, "g", function () {
        return f;
      }),
      n.d(e, "h", function () {
        return m;
      }),
      n.d(e, "i", function () {
        return g;
      }),
      n.d(e, "j", function () {
        return b;
      }),
      n.d(e, "k", function () {
        return v;
      }),
      n.d(e, "l", function () {
        return y;
      }),
      n.d(e, "m", function () {
        return x;
      }),
      n.d(e, "n", function () {
        return C;
      }),
      n.d(e, "c", function () {
        return S;
      }),
      n.d(e, "o", function () {
        return I;
      });
    var r = n(6),
      a = n(11),
      i = n(3),
      o = n(1),
      s = n(18),
      u = n(26),
      c = n(5),
      l = n(22);
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function h(t, e, n) {
      return d(t, e, Object(i.c)(t, n), n);
    }
    function d(t, e, n, i) {
      if ((null == i && (i = Object(o.inferDtype)(t)), "complex64" === i))
        throw new Error(
          "Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag)."
        );
      if (
        !Object(o.isTypedArray)(t) &&
        !Array.isArray(t) &&
        "number" != typeof t &&
        "boolean" != typeof t &&
        "string" != typeof t
      )
        throw new Error(
          "values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray"
        );
      if (null != e) {
        Object(o.assertNonNegativeIntegerDimensions)(e);
        const t = Object(o.sizeFromShape)(e),
          r = Object(o.sizeFromShape)(n);
        Object(o.assert)(
          t === r,
          () =>
            `Based on the provided shape, [${e}], the tensor should have ${t} values but has ${r}`
        );
        for (let t = 0; t < n.length; ++t) {
          const r = n[t],
            a = t !== n.length - 1 || r !== Object(o.sizeFromShape)(e.slice(t));
          Object(o.assert)(
            n[t] === e[t] || !a,
            () =>
              `Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${e}). `
          );
        }
      }
      return (
        Object(o.isTypedArray)(t) || Array.isArray(t) || (t = [t]),
        (e = e || n),
        (t =
          "string" !== i
            ? Object(o.toTypedArray)(t, i, Object(a.b)().getBool("DEBUG"))
            : Object(o.flatten)(t, [], !0)),
        r.a.makeTensor(t, e, i)
      );
    }
    function p(t, e) {
      if (
        ((Object(o.isTypedArray)(t) && "string" !== e) || Array.isArray(t)) &&
        "complex64" !== e
      )
        throw new Error(
          "Error creating a new Scalar: value must be a primitive (number|boolean|string)"
        );
      if (
        "string" === e &&
        Object(o.isTypedArray)(t) &&
        !(t instanceof Uint8Array)
      )
        throw new Error(
          "When making a scalar from encoded string, the value must be `Uint8Array`."
        );
      return d(t, [], [], e);
    }
    function f(t, e) {
      Object(o.assertNonNull)(t);
      const n = Object(i.c)(t, e);
      if (1 !== n.length)
        throw new Error("tensor1d() requires values to be a flat/TypedArray");
      return d(t, null, n, e);
    }
    function m(t, e, n) {
      if ((Object(o.assertNonNull)(t), null != e && 2 !== e.length))
        throw new Error("tensor2d() requires shape to have two numbers");
      const r = Object(i.c)(t, n);
      if (2 !== r.length && 1 !== r.length)
        throw new Error(
          "tensor2d() requires values to be number[][] or flat/TypedArray"
        );
      if (1 === r.length && null == e)
        throw new Error(
          "tensor2d() requires shape to be provided when `values` are a flat/TypedArray"
        );
      return d(t, e, r, n);
    }
    function g(t, e, n) {
      if ((Object(o.assertNonNull)(t), null != e && 3 !== e.length))
        throw new Error("tensor3d() requires shape to have three numbers");
      const r = Object(i.c)(t, n);
      if (3 !== r.length && 1 !== r.length)
        throw new Error(
          "tensor3d() requires values to be number[][][] or flat/TypedArray"
        );
      if (1 === r.length && null == e)
        throw new Error(
          "tensor3d() requires shape to be provided when `values` are a flat array"
        );
      return d(t, e, r, n);
    }
    function b(t, e, n) {
      if ((Object(o.assertNonNull)(t), null != e && 4 !== e.length))
        throw new Error("tensor4d() requires shape to have four numbers");
      const r = Object(i.c)(t, n);
      if (4 !== r.length && 1 !== r.length)
        throw new Error(
          "tensor4d() requires values to be number[][][][] or flat/TypedArray"
        );
      if (1 === r.length && null == e)
        throw new Error(
          "tensor4d() requires shape to be provided when `values` are a flat array"
        );
      return d(t, e, r, n);
    }
    function v(t, e, n) {
      if ((Object(o.assertNonNull)(t), null != e && 5 !== e.length))
        throw new Error("tensor5d() requires shape to have five numbers");
      const r = Object(i.c)(t, n);
      if (5 !== r.length && 1 !== r.length)
        throw new Error(
          "tensor5d() requires values to be number[][][][][] or flat/TypedArray"
        );
      if (1 === r.length && null == e)
        throw new Error(
          "tensor5d() requires shape to be provided when `values` are a flat array"
        );
      return d(t, e, r, n);
    }
    function y(t, e, n) {
      if ((Object(o.assertNonNull)(t), null != e && 6 !== e.length))
        throw new Error("tensor6d() requires shape to have six numbers");
      const r = Object(i.c)(t, n);
      if (6 !== r.length && 1 !== r.length)
        throw new Error(
          "tensor6d() requires values to be number[][][][][][] or flat/TypedArray"
        );
      if (1 === r.length && null == e)
        throw new Error(
          "tensor6d() requires shape to be provided when `values` are a flat array"
        );
      return d(t, (e = e || r), r, n);
    }
    function x(t, e = !0, n, a) {
      return r.a.makeVariable(t, e, n, a);
    }
    function w(t, e = "float32") {
      if ("complex64" === e) {
        const e = w(t, "float32"),
          n = C(t, "float32");
        return Object(s.a)(e, n);
      }
      const n = Object(o.makeOnesTypedArray)(Object(o.sizeFromShape)(t), e);
      return r.a.makeTensor(n, t, e);
    }
    function C(t, e = "float32") {
      if ("complex64" === e) {
        const e = C(t, "float32"),
          n = C(t, "float32");
        return Object(s.a)(e, n);
      }
      const n = Object(o.makeZerosTypedArray)(Object(o.sizeFromShape)(t), e);
      return r.a.makeTensor(n, t, e);
    }
    function O(t, e, n) {
      if (n <= 0) throw new Error("The number of values should be positive.");
      return r.a.runKernelFunc((r) => r.linspace(t, e, n), {});
    }
    function E(t, e, n = 1, r = "float32") {
      if (0 === n) throw new Error("Cannot have a step of zero");
      if (t === e || (t < e && n < 0) || (e < t && n > 1)) return C([0], r);
      const a = Math.abs(Math.ceil((e - t) / n)),
        i = Object(o.makeZerosTypedArray)(a, r);
      e < t && 1 === n && (n = -1), (i[0] = t);
      for (let t = 1; t < i.length; t++) i[t] = i[t - 1] + n;
      return f(i, r);
    }
    const S = Object(c.a)({
        onesLike_: function (t) {
          const e = Object(i.a)(t, "x", "onesLike");
          if ("complex64" === e.dtype) {
            const t = S(Object(l.a)(e)),
              n = I(Object(u.a)(e));
            return Object(s.a)(t, n);
          }
          return r.a.runKernelFunc(
            (t) => t.onesLike(e),
            { x: e },
            (t, e) => ({ x: () => I(t) }),
            "OnesLike"
          );
        },
      }),
      I = Object(c.a)({
        zerosLike_: function (t) {
          const e = Object(i.a)(t, "x", "zerosLike");
          return r.a.runKernelFunc(
            (t) => t.zerosLike(e),
            { x: e },
            (t, e) => ({ x: () => I(t) }),
            "ZerosLike"
          );
        },
      });
  },
  function (t, e, n) {
    "use strict";
    n.d(e, "a", function () {
      return r;
    }),
      n.d(e, "b", function () {
        return a;
      }),
      n.d(e, "c", function () {
        return o;
      });
    class r {
      constructor(t) {
        (this.global = t),
          (this.flags = {}),
          (this.flagRegistry = {}),
          (this.urlFlags = {}),
          this.populateURLFlags();
      }
      setPlatform(t, e) {
        null != this.platform &&
          console.warn(
            `Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`
          ),
          (this.platformName = t),
          (this.platform = e);
      }
      registerFlag(t, e, n) {
        if (
          ((this.flagRegistry[t] = { evaluationFn: e, setHook: n }),
          null != this.urlFlags[t])
        ) {
          const e = this.urlFlags[t];
          console.warn(`Setting feature override from URL ${t}: ${e}.`),
            this.set(t, e);
        }
      }
      async getAsync(t) {
        return (
          t in this.flags || (this.flags[t] = await this.evaluateFlag(t)),
          this.flags[t]
        );
      }
      get(t) {
        if (t in this.flags) return this.flags[t];
        const e = this.evaluateFlag(t);
        if (e instanceof Promise)
          throw new Error(
            `Flag ${t} cannot be synchronously evaluated. Please use getAsync() instead.`
          );
        return (this.flags[t] = e), this.flags[t];
      }
      getNumber(t) {
        return this.get(t);
      }
      getBool(t) {
        return this.get(t);
      }
      getFlags() {
        return this.flags;
      }
      get features() {
        return this.flags;
      }
      set(t, e) {
        if (null == this.flagRegistry[t])
          throw new Error(
            `Cannot set flag ${t} as it has not been registered.`
          );
        (this.flags[t] = e),
          null != this.flagRegistry[t].setHook &&
            this.flagRegistry[t].setHook(e);
      }
      evaluateFlag(t) {
        if (null == this.flagRegistry[t])
          throw new Error(
            `Cannot evaluate flag '${t}': no evaluation function found.`
          );
        return this.flagRegistry[t].evaluationFn();
      }
      setFlags(t) {
        this.flags = Object.assign({}, t);
      }
      reset() {
        (this.flags = {}), (this.urlFlags = {}), this.populateURLFlags();
      }
      populateURLFlags() {
        if (
          void 0 === this.global ||
          void 0 === this.global.location ||
          void 0 === this.global.location.search
        )
          return;
        const t = (function (t) {
          const e = {};
          return (
            t.replace(
              /[?&]([^=?&]+)(?:=([^&]*))?/g,
              (t, ...n) => (
                (function (t, e, n) {
                  t[decodeURIComponent(e)] = decodeURIComponent(n || "");
                })(e, n[0], n[1]),
                n.join("=")
              )
            ),
            e
          );
        })(this.global.location.search);
        if ("tfjsflags" in t) {
          t.tfjsflags.split(",").forEach((t) => {
            const [e, n] = t.split(":");
            this.urlFlags[e] = (function (t, e) {
              if ("true" === (e = e.toLowerCase()) || "false" === e)
                return "true" === e;
              if ("" + +e === e) return +e;
              throw new Error(
                `Could not parse value flag value ${e} for flag ${t}.`
              );
            })(e, n);
          });
        }
      }
    }
    function a() {
      return i;
    }
    let i = null;
    function o(t) {
      i = t;
    }
  },
  function (t, e, n) {
    "use strict";
    n.r(e),
      n.d(e, "makeTypesMatch", function () {
        return o;
      }),
      n.d(e, "assertTypesMatch", function () {
        return s;
      }),
      n.d(e, "isTensorInList", function () {
        return u;
      }),
      n.d(e, "getTensorsInContainer", function () {
        return c;
      });
    var r = n(9),
      a = n(23),
      i = n(1);
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function o(t, e) {
      if (t.dtype === e.dtype) return [t, e];
      const n = Object(a.b)(t.dtype, e.dtype);
      return [t.cast(n), e.cast(n)];
    }
    function s(t, e) {
      Object(i.assert)(
        t.dtype === e.dtype,
        () =>
          `The dtypes of the first(${t.dtype}) and second(${e.dtype}) input must match`
      );
    }
    function u(t, e) {
      return e.some((e) => e.id === t.id);
    }
    function c(t) {
      const e = [];
      return (
        (function t(e, n, a) {
          if (null == e) return;
          if (e instanceof r.a) return void n.push(e);
          if (((i = e), !Array.isArray(i) && "object" != typeof i)) return;
          var i;
          const o = e;
          for (const e in o) {
            const r = o[e];
            a.has(r) || (a.add(r), t(r, n, a));
          }
        })(t, e, new Set()),
        e
      );
    }
  },
  function (t, e, n) {
    "use strict";
    (function (t) {
      n.d(e, "f", function () {
        return s;
      }),
        n.d(e, "e", function () {
          return u;
        }),
        n.d(e, "a", function () {
          return d;
        }),
        n.d(e, "b", function () {
          return p;
        }),
        n.d(e, "d", function () {
          return f;
        }),
        n.d(e, "c", function () {
          return m;
        }),
        n.d(e, "g", function () {
          return g;
        });
      var r = n(18),
        a = n(10),
        i = n(1),
        o = n(31);
      async function s(t, e) {
        const n = [],
          r = [],
          a = Array.isArray(t) ? t.map((t) => t.name) : Object.keys(t);
        for (let i = 0; i < a.length; ++i) {
          const o = a[i],
            s = Array.isArray(t) ? t[i].tensor : t[o];
          if (
            "float32" !== s.dtype &&
            "int32" !== s.dtype &&
            "bool" !== s.dtype &&
            "string" !== s.dtype &&
            "complex64" !== s.dtype
          )
            throw new Error(`Unsupported dtype in weight '${o}': ${s.dtype}`);
          const u = { name: o, shape: s.shape, dtype: s.dtype };
          if ("string" === s.dtype) {
            const t = new Promise(async (t) => {
              const e = await s.bytes(),
                n = e.reduce((t, e) => t + e.length, 0) + 4 * e.length,
                r = new Uint8Array(n);
              let a = 0;
              for (let t = 0; t < e.length; t++) {
                const n = e[t],
                  i = new Uint8Array(new Uint32Array([n.length]).buffer);
                r.set(i, a), (a += 4), r.set(n, a), (a += n.length);
              }
              t(r);
            });
            r.push(t);
          } else r.push(s.data());
          null != e && (u.group = e), n.push(u);
        }
        return { data: c(await Promise.all(r)), specs: n };
      }
      function u(t, e) {
        const n = {};
        let s,
          u = 0;
        for (const c of e) {
          const e = c.name,
            l = c.dtype,
            h = c.shape,
            d = Object(i.sizeFromShape)(h);
          let p;
          if ("quantization" in c) {
            const n = c.quantization;
            if ("uint8" === n.dtype || "uint16" === n.dtype) {
              if (!("min" in n) || !("scale" in n))
                throw new Error(
                  `Weight ${c.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`
                );
            } else {
              if ("float16" !== n.dtype)
                throw new Error(
                  `Weight ${c.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`
                );
              if ("float32" !== l)
                throw new Error(
                  `Weight ${c.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${l}.`
                );
            }
            const r = o.a[n.dtype],
              a = t.slice(u, u + d * r),
              i = "uint8" === n.dtype ? new Uint8Array(a) : new Uint16Array(a);
            if ("float32" === l)
              if ("uint8" === n.dtype || "uint16" === n.dtype) {
                p = new Float32Array(i.length);
                for (let t = 0; t < i.length; t++) {
                  const e = i[t];
                  p[t] = e * n.scale + n.min;
                }
              } else {
                if ("float16" !== n.dtype)
                  throw new Error(
                    `Unsupported quantization type ${n.dtype} for weight type float32.`
                  );
                void 0 === s && (s = b()), (p = s(i));
              }
            else {
              if ("int32" !== l)
                throw new Error(`Unsupported dtype in weight '${e}': ${l}`);
              if ("uint8" !== n.dtype && "uint16" !== n.dtype)
                throw new Error(
                  `Unsupported quantization type ${n.dtype} for weight type int32.`
                );
              p = new Int32Array(i.length);
              for (let t = 0; t < i.length; t++) {
                const e = i[t];
                p[t] = Math.round(e * n.scale + n.min);
              }
            }
            u += d * r;
          } else if ("string" === l) {
            const e = Object(i.sizeFromShape)(c.shape);
            p = [];
            for (let n = 0; n < e; n++) {
              const e = new Uint32Array(t.slice(u, u + 4))[0];
              u += 4;
              const n = new Uint8Array(t.slice(u, u + e));
              p.push(n), (u += e);
            }
          } else {
            const i = o.a[l],
              s = t.slice(u, u + d * i);
            if ("float32" === l) p = new Float32Array(s);
            else if ("int32" === l) p = new Int32Array(s);
            else if ("bool" === l) p = new Uint8Array(s);
            else {
              if ("complex64" !== l)
                throw new Error(`Unsupported dtype in weight '${e}': ${l}`);
              {
                p = new Float32Array(s);
                const t = new Float32Array(p.length / 2),
                  i = new Float32Array(p.length / 2);
                for (let e = 0; e < t.length; e++)
                  (t[e] = p[2 * e]), (i[e] = p[2 * e + 1]);
                const o = Object(a.f)(t, h, "float32"),
                  u = Object(a.f)(i, h, "float32");
                n[e] = Object(r.a)(o, u);
              }
            }
            u += d * i;
          }
          "complex64" !== l && (n[e] = Object(a.f)(p, h, l));
        }
        return n;
      }
      function c(t) {
        if (null === t)
          throw new Error("Invalid input value: " + JSON.stringify(t));
        let e = 0;
        const n = [];
        t.forEach((t) => {
          if (
            ((e += t.byteLength),
            n.push(
              t.byteLength === t.buffer.byteLength ? t : new t.constructor(t)
            ),
            !(
              t instanceof Float32Array ||
              t instanceof Int32Array ||
              t instanceof Uint8Array
            ))
          )
            throw new Error(
              "Unsupported TypedArray subtype: " + t.constructor.name
            );
        });
        const r = new Uint8Array(e);
        let a = 0;
        return (
          n.forEach((t) => {
            r.set(new Uint8Array(t.buffer), a), (a += t.byteLength);
          }),
          r.buffer
        );
      }
      const l =
        void 0 !== t &&
        ("undefined" == typeof Blob ||
          "undefined" == typeof atob ||
          "undefined" == typeof btoa);
      function h(e) {
        return l ? t.byteLength(e) : new Blob([e]).size;
      }
      function d(e) {
        if (l) return t.from(e).toString("base64");
        const n = new Uint8Array(e);
        let r = "";
        for (let t = 0, e = n.length; t < e; t++)
          r += String.fromCharCode(n[t]);
        return btoa(r);
      }
      function p(e) {
        if (l) {
          const n = t.from(e, "base64");
          return n.buffer.slice(n.byteOffset, n.byteOffset + n.byteLength);
        }
        const n = atob(e),
          r = new Uint8Array(n.length);
        for (let t = 0; t < n.length; ++t) r.set([n.charCodeAt(t)], t);
        return r.buffer;
      }
      function f(t) {
        if (1 === t.length) return t[0];
        let e = 0;
        t.forEach((t) => {
          e += t.byteLength;
        });
        const n = new Uint8Array(e);
        let r = 0;
        return (
          t.forEach((t) => {
            n.set(new Uint8Array(t), r), (r += t.byteLength);
          }),
          n.buffer
        );
      }
      function m(t) {
        for (t = t.trim(); t.endsWith("/"); ) t = t.slice(0, t.length - 1);
        const e = t.split("/");
        return e[e.length - 1];
      }
      function g(t) {
        if (t.modelTopology instanceof ArrayBuffer)
          throw new Error(
            "Expected JSON model topology, received ArrayBuffer."
          );
        return {
          dateSaved: new Date(),
          modelTopologyType: "JSON",
          modelTopologyBytes:
            null == t.modelTopology ? 0 : h(JSON.stringify(t.modelTopology)),
          weightSpecsBytes:
            null == t.weightSpecs ? 0 : h(JSON.stringify(t.weightSpecs)),
          weightDataBytes: null == t.weightData ? 0 : t.weightData.byteLength,
        };
      }
      function b() {
        const t = (function () {
            const t = (t) => {
                let e = t << 13,
                  n = 0;
                for (; 0 == (8388608 & e); ) (n -= 8388608), (e <<= 1);
                return (e &= -8388609), (n += 947912704), e | n;
              },
              e = new Uint32Array(2048);
            e[0] = 0;
            for (let n = 1; n < 1024; n++) e[n] = t(n);
            for (let t = 1024; t < 2048; t++)
              e[t] = 939524096 + ((t - 1024) << 13);
            return e;
          })(),
          e = (function () {
            const t = new Uint32Array(64);
            (t[0] = 0),
              (t[31] = 1199570944),
              (t[32] = 2147483648),
              (t[63] = 3347054592);
            for (let e = 1; e < 31; e++) t[e] = e << 23;
            for (let e = 33; e < 63; e++) t[e] = 2147483648 + ((e - 32) << 23);
            return t;
          })(),
          n = (function () {
            const t = new Uint32Array(64);
            for (let e = 0; e < 64; e++) t[e] = 1024;
            return (t[0] = t[32] = 0), t;
          })();
        return (r) => {
          const a = new ArrayBuffer(4 * r.length),
            i = new Uint32Array(a);
          for (let a = 0; a < r.length; a++) {
            const o = r[a],
              s = t[n[o >> 10] + (1023 & o)] + e[o >> 10];
            i[a] = s;
          }
          return new Float32Array(a);
        };
      }
    }.call(this, n(32).Buffer));
  },
  function (t, e, n) {
    "use strict";
    n.d(e, "f", function () {
      return l;
    }),
      n.d(e, "e", function () {
        return h;
      }),
      n.d(e, "d", function () {
        return d;
      }),
      n.d(e, "g", function () {
        return p;
      }),
      n.d(e, "a", function () {
        return f;
      }),
      n.d(e, "b", function () {
        return S;
      }),
      n.d(e, "c", function () {
        return r;
      });
    var r,
      a = n(0),
      i = n(20),
      o = n(19);
    function s(t) {
      return t instanceof a.l
        ? { value: t.clone(), recurse: !1 }
        : Object(o.e)(t)
        ? { value: null, recurse: !0 }
        : { value: t, recurse: !1 };
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     *
     * =============================================================================
     */ class u {
      constructor(t) {
        if (((this.capacity = t), (this.begin = 0), (this.end = 0), null == t))
          throw new RangeError(
            "Can't create a ring buffer of unknown capacity."
          );
        if (t < 1)
          throw new RangeError("Can't create ring buffer of capacity < 1.");
        (this.data = new Array(t)), (this.doubledCapacity = 2 * t);
      }
      wrap(t) {
        for (; t < 0; ) t += this.doubledCapacity;
        return t % this.doubledCapacity;
      }
      get(t) {
        if (t < 0) throw new RangeError("Can't get item at a negative index.");
        return this.data[t % this.capacity];
      }
      set(t, e) {
        if (t < 0) throw new RangeError("Can't set item at a negative index.");
        this.data[t % this.capacity] = e;
      }
      length() {
        let t = this.end - this.begin;
        return t < 0 && (t = this.doubledCapacity + t), t;
      }
      isFull() {
        return this.length() === this.capacity;
      }
      isEmpty() {
        return 0 === this.length();
      }
      push(t) {
        if (this.isFull()) throw new RangeError("Ring buffer is full.");
        this.set(this.end, t), (this.end = this.wrap(this.end + 1));
      }
      pushAll(t) {
        for (const e of t) this.push(e);
      }
      pop() {
        if (this.isEmpty()) throw new RangeError("Ring buffer is empty.");
        this.end = this.wrap(this.end - 1);
        const t = this.get(this.end);
        return this.set(this.end, void 0), t;
      }
      unshift(t) {
        if (this.isFull()) throw new RangeError("Ring buffer is full.");
        (this.begin = this.wrap(this.begin - 1)), this.set(this.begin, t);
      }
      shift() {
        if (this.isEmpty()) throw new RangeError("Ring buffer is empty.");
        const t = this.get(this.begin);
        return (
          this.set(this.begin, void 0),
          (this.begin = this.wrap(this.begin + 1)),
          t
        );
      }
      shuffleExcise(t) {
        if (this.isEmpty()) throw new RangeError("Ring buffer is empty.");
        const e = this.wrap(this.begin + t),
          n = this.get(e);
        return this.set(e, this.pop()), n;
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     *
     * =============================================================================
     */ class c extends u {
      constructor() {
        super(c.INITIAL_CAPACITY);
      }
      isFull() {
        return !1;
      }
      push(t) {
        super.isFull() && this.expand(), super.push(t);
      }
      unshift(t) {
        super.isFull() && this.expand(), super.unshift(t);
      }
      expand() {
        const t = 2 * this.capacity,
          e = new Array(t),
          n = this.length();
        for (let t = 0; t < n; t++) e[t] = this.get(this.wrap(this.begin + t));
        (this.data = e),
          (this.capacity = t),
          (this.doubledCapacity = 2 * this.capacity),
          (this.begin = 0),
          (this.end = n);
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     *
     * =============================================================================
     */
    function l(t) {
      return new m(t);
    }
    function h(t) {
      return new g(t);
    }
    function d(t, e) {
      return new k(t, e);
    }
    function p(t, e = r.FAIL) {
      return new N(t, e);
    }
    c.INITIAL_CAPACITY = 32;
    class f {
      async toArray() {
        const t = [];
        let e = await this.next();
        for (; !e.done; ) t.push(e.value), (e = await this.next());
        return t;
      }
      async toArrayForTest() {
        const t = this.prefetch(100),
          e = [];
        let n = await t.next();
        for (; !n.done; ) e.push(n.value), (n = await t.next());
        return e;
      }
      async resolveFully() {
        let t = await this.next();
        for (; !t.done; ) t = await this.next();
      }
      async resolveWhile(t) {
        let e = await this.next(),
          n = t(e.value);
        for (; !e.done && n; ) (e = await this.next()), (n = t(e.value));
      }
      handleErrors(t) {
        return new O(this, t);
      }
      filter(t) {
        return new w(this, t);
      }
      map(t) {
        return new C(this, t);
      }
      mapAsync(t) {
        return new E(this, t);
      }
      serialMapAsync(t) {
        return new E(this, t).serial();
      }
      flatmap(t) {
        return new I(this, t);
      }
      async forEachAsync(t) {
        return this.map(t).resolveFully();
      }
      async serialForEach(t) {
        return this.serialMapAsync(t).resolveWhile((t) => !0 === t);
      }
      rowMajorBatch(t, e = !0) {
        return new x(this, t, e);
      }
      columnMajorBatch(t, e = !0, n = o.f) {
        return this.rowMajorBatch(t, e).map((t) => Object(o.d)(t, n));
      }
      concatenate(t, e) {
        return new k(l([this, t]), e);
      }
      take(t) {
        return t < 0 || null == t ? this : new y(this, t);
      }
      skip(t) {
        return t < 0 || null == t ? this : new v(this, t);
      }
      prefetch(t) {
        return new R(this, t);
      }
      shuffle(t, e) {
        return new A(this, t, e);
      }
      serial() {
        return new b(this);
      }
    }
    class m extends f {
      constructor(t) {
        super(), (this.items = t), (this.trav = 0);
      }
      summary() {
        return `Array of ${this.items.length} items`;
      }
      async next() {
        if (this.trav >= this.items.length) return { value: null, done: !0 };
        const t = this.items[this.trav];
        return this.trav++, { value: ((e = t), Object(o.b)(e, s)), done: !1 };
        /**
         * @license
         * Copyright 2018 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         *
         * =============================================================================
         */
        var e;
      }
    }
    class g extends f {
      constructor(t) {
        super(), (this.nextFn = t);
      }
      summary() {
        return "Function call";
      }
      async next() {
        try {
          return this.nextFn();
        } catch (t) {
          throw (
            ((t.message =
              "Error thrown while iterating through a dataset: " + t.message),
            t)
          );
        }
      }
    }
    class b extends f {
      constructor(t) {
        super(),
          (this.upstream = t),
          (this.lastRead = Promise.resolve({ value: null, done: !1 }));
      }
      summary() {
        return this.upstream.summary() + " -> Serial";
      }
      async next() {
        return (
          (this.lastRead = this.lastRead.then(() => this.serialNext())),
          this.lastRead
        );
      }
      async serialNext() {
        return this.upstream.next();
      }
    }
    class v extends f {
      constructor(t, e) {
        super(),
          (this.upstream = t),
          (this.maxCount = e),
          (this.count = 0),
          (this.lastRead = Promise.resolve({ value: null, done: !1 }));
      }
      summary() {
        return this.upstream.summary() + " -> Skip";
      }
      async next() {
        return (
          (this.lastRead = this.lastRead.then(() => this.serialNext())),
          this.lastRead
        );
      }
      async serialNext() {
        for (; this.count++ < this.maxCount; ) {
          const t = await this.upstream.next();
          if (t.done) return t;
          a.hb(t.value);
        }
        return this.upstream.next();
      }
    }
    class y extends f {
      constructor(t, e) {
        super(), (this.upstream = t), (this.maxCount = e), (this.count = 0);
      }
      summary() {
        return this.upstream.summary() + " -> Take";
      }
      async next() {
        return this.count++ >= this.maxCount
          ? { value: null, done: !0 }
          : this.upstream.next();
      }
    }
    class x extends f {
      constructor(t, e, n = !0) {
        super(),
          (this.upstream = t),
          (this.batchSize = e),
          (this.enableSmallLastBatch = n),
          (this.lastRead = Promise.resolve({ value: null, done: !1 }));
      }
      summary() {
        return this.upstream.summary() + " -> RowMajorBatch";
      }
      async next() {
        return (
          (this.lastRead = this.lastRead.then(() => this.serialNext())),
          this.lastRead
        );
      }
      async serialNext() {
        const t = [];
        for (; t.length < this.batchSize; ) {
          const e = await this.upstream.next();
          if (e.done)
            return this.enableSmallLastBatch && t.length > 0
              ? { value: t, done: !1 }
              : { value: null, done: !0 };
          t.push(e.value);
        }
        return { value: t, done: !1 };
      }
    }
    class w extends f {
      constructor(t, e) {
        super(),
          (this.upstream = t),
          (this.predicate = e),
          (this.lastRead = Promise.resolve({ value: null, done: !1 }));
      }
      summary() {
        return this.upstream.summary() + " -> Filter";
      }
      async next() {
        return (
          (this.lastRead = this.lastRead.then(() => this.serialNext())),
          this.lastRead
        );
      }
      async serialNext() {
        for (;;) {
          const t = await this.upstream.next();
          if (t.done || this.predicate(t.value)) return t;
          a.hb(t.value);
        }
      }
    }
    class C extends f {
      constructor(t, e) {
        super(), (this.upstream = t), (this.transform = e);
      }
      summary() {
        return this.upstream.summary() + " -> Map";
      }
      async next() {
        const t = await this.upstream.next();
        if (t.done) return { value: null, done: !0 };
        const e = a.td.getTensorsInContainer(t.value),
          n = this.transform(t.value),
          r = a.td.getTensorsInContainer(n);
        for (const t of e) a.td.isTensorInList(t, r) || t.dispose();
        return { value: n, done: !1 };
      }
    }
    class O extends f {
      constructor(t, e) {
        super(),
          (this.upstream = t),
          (this.handler = e),
          (this.count = 0),
          (this.lastRead = Promise.resolve({ value: null, done: !1 }));
      }
      summary() {
        return this.upstream.summary() + " -> handleErrors";
      }
      async next() {
        return (
          (this.lastRead = this.lastRead.then(() => this.serialNext())),
          this.lastRead
        );
      }
      async serialNext() {
        for (;;)
          try {
            return await this.upstream.next();
          } catch (t) {
            if (!this.handler(t)) return { value: null, done: !0 };
          }
      }
    }
    class E extends f {
      constructor(t, e) {
        super(), (this.upstream = t), (this.transform = e);
      }
      summary() {
        return this.upstream.summary() + " -> AsyncMap";
      }
      async next() {
        const t = await this.upstream.next();
        if (t.done) return { value: null, done: !0 };
        const e = a.td.getTensorsInContainer(t.value),
          n = await this.transform(t.value),
          r = a.td.getTensorsInContainer(n);
        for (const t of e) a.td.isTensorInList(t, r) || t.dispose();
        return { value: n, done: !1 };
      }
    }
    class S extends f {
      constructor() {
        super(),
          (this.outputQueue = new c()),
          (this.lastRead = Promise.resolve({ value: null, done: !1 }));
      }
      async next() {
        return (
          (this.lastRead = this.lastRead.then(() => this.serialNext())),
          this.lastRead
        );
      }
      async serialNext() {
        for (; 0 === this.outputQueue.length(); )
          if (!(await this.pump())) return { value: null, done: !0 };
        return { value: this.outputQueue.shift(), done: !1 };
      }
    }
    class I extends S {
      constructor(t, e) {
        super(), (this.upstream = t), (this.transform = e);
      }
      summary() {
        return this.upstream.summary() + " -> Flatmap";
      }
      async pump() {
        const t = await this.upstream.next();
        if (t.done) return !1;
        const e = a.td.getTensorsInContainer(t.value),
          n = this.transform(t.value),
          r = a.td.getTensorsInContainer(n);
        this.outputQueue.pushAll(n);
        for (const t of e) a.td.isTensorInList(t, r) || t.dispose();
        return !0;
      }
    }
    class k extends f {
      constructor(t, e) {
        super(),
          (this.baseErrorHandler = e),
          (this.lastRead = null),
          (this.iterator = null),
          (this.moreIterators = t);
      }
      summary() {
        return "TODO: fill in upstream of chained summaries -> Chained";
      }
      async next() {
        return (
          (this.lastRead = this.readFromChain(this.lastRead)), this.lastRead
        );
      }
      async readFromChain(t) {
        if ((await t, null == this.iterator)) {
          const t = await this.moreIterators.next();
          if (t.done) return { value: null, done: !0 };
          (this.iterator = t.value),
            null != this.baseErrorHandler &&
              (this.iterator = this.iterator.handleErrors(
                this.baseErrorHandler
              ));
        }
        const e = await this.iterator.next();
        return e.done ? ((this.iterator = null), this.readFromChain(t)) : e;
      }
    }
    !(function (t) {
      (t[(t.FAIL = 0)] = "FAIL"),
        (t[(t.SHORTEST = 1)] = "SHORTEST"),
        (t[(t.LONGEST = 2)] = "LONGEST");
    })(r || (r = {}));
    class N extends f {
      constructor(t, e = r.FAIL) {
        super(),
          (this.iterators = t),
          (this.mismatchMode = e),
          (this.count = 0),
          (this.currentPromise = null);
      }
      summary() {
        return "{TODO: fill in upstream of zip summaries} -> Zip";
      }
      async nextState(t) {
        await t;
        let e = 0,
          n = 0;
        const a = await Object(o.c)(this.iterators, function (t) {
          if (t instanceof f) {
            return {
              value: t.next().then((t) => (e++, t.done && n++, t.value)),
              recurse: !1,
            };
          }
          return { value: null, recurse: !0 };
        });
        if (e === n) return { value: null, done: !0 };
        if (n > 0)
          switch (this.mismatchMode) {
            case r.FAIL:
              throw new Error(
                `Zipped streams should have the same length. Mismatched at element ${this.count}.`
              );
            case r.SHORTEST:
              return { value: null, done: !0 };
            case r.LONGEST:
          }
        return this.count++, { value: a, done: !1 };
      }
      async next() {
        return (
          (this.currentPromise = this.nextState(this.currentPromise)),
          this.currentPromise
        );
      }
    }
    class R extends f {
      constructor(t, e) {
        super(),
          (this.upstream = t),
          (this.bufferSize = e),
          (this.buffer = new u(e));
      }
      summary() {
        return this.upstream.summary() + " -> Prefetch";
      }
      refill() {
        for (; !this.buffer.isFull(); ) {
          const t = this.upstream.next();
          this.buffer.push(t);
        }
      }
      next() {
        return this.refill(), this.buffer.shift();
      }
    }
    class A extends R {
      constructor(t, e, n) {
        super(t, e),
          (this.upstream = t),
          (this.windowSize = e),
          (this.upstreamExhausted = !1),
          (this.random = i.alea(n || a.Cd.now().toString())),
          (this.lastRead = Promise.resolve({ value: null, done: !1 }));
      }
      async next() {
        return (
          (this.lastRead = this.lastRead.then(() => this.serialNext())),
          this.lastRead
        );
      }
      randomInt(t) {
        return Math.floor(this.random() * t);
      }
      chooseIndex() {
        return this.randomInt(this.buffer.length());
      }
      async serialNext() {
        for (
          this.upstreamExhausted || this.refill();
          !this.buffer.isEmpty();

        ) {
          const t = this.chooseIndex(),
            e = await this.buffer.shuffleExcise(t);
          if (!e.done) return this.refill(), e;
          this.upstreamExhausted = !0;
        }
        return { value: null, done: !0 };
      }
    }
  },
  function (t, e, n) {
    "use strict";
    (function (t) {
      n.d(e, "a", function () {
        return O;
      }),
        n.d(e, "i", function () {
          return S;
        }),
        n.d(e, "c", function () {
          return I;
        }),
        n.d(e, "f", function () {
          return k;
        }),
        n.d(e, "e", function () {
          return A;
        }),
        n.d(e, "d", function () {
          return T;
        }),
        n.d(e, "k", function () {
          return D;
        }),
        n.d(e, "g", function () {
          return F;
        }),
        n.d(e, "h", function () {
          return M;
        }),
        n.d(e, "j", function () {
          return j;
        }),
        n.d(e, "b", function () {
          return $;
        });
      var r = n(0),
        a = n(21),
        i = n(25),
        o = n(2),
        s = n(40),
        u = n(41),
        c = n(42),
        l = n(43),
        h = n(44),
        d = n(45),
        p = n(46),
        f = n(47),
        m = n(48),
        g = n(49),
        b = n(50),
        v = n(51),
        y = n(52),
        x = n(53),
        w = n(54),
        C = n(55);
      /**
       * @license
       * Copyright 2018 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      class O {
        static get Instance() {
          return this._instance || (this._instance = new this());
        }
        constructor() {
          const t = [].concat(
            ...[s, u, c, l, h, d, p, g, m, f, b, v, y, x, w, C].map(
              (t) => t.json
            )
          );
          this.opMappers = t.reduce((t, e) => ((t[e.tfOpName] = e), t), {});
        }
        transformGraph(t, e = {}) {
          const n = t.node,
            r = [],
            a = [],
            i = n.reduce(
              (t, e) => (
                (t[e.name] = this.mapNode(e)),
                e.op.startsWith("Placeholder") && r.push(t[e.name]),
                "Const" === e.op && a.push(t[e.name]),
                t
              ),
              {}
            );
          let s = [];
          const u = [];
          let c = {},
            l = {};
          null != e &&
            ((c = this.mapSignatureEntries(e.inputs)),
            (l = this.mapSignatureEntries(e.outputs)));
          const h = Object.keys(i);
          h.forEach((t) => {
            const e = i[t];
            e.inputNames.forEach((t) => {
              const [n] = Object(o.a)(t);
              e.inputs.push(i[n]), i[n].children.push(e);
            });
          }),
            0 === Object.keys(l).length
              ? h.forEach((t) => {
                  const e = i[t];
                  0 === e.children.length && u.push(e);
                })
              : Object.keys(l).forEach((t) => {
                  const [e] = Object(o.a)(t),
                    n = i[e];
                  null != n && ((n.signatureKey = l[t]), u.push(n));
                }),
            Object.keys(c).length > 0
              ? Object.keys(c).forEach((t) => {
                  const [e] = Object(o.a)(t),
                    n = i[e];
                  n && ((n.signatureKey = c[t]), s.push(n));
                })
              : (s = r);
          let d = {};
          return (
            null != t.library &&
              null != t.library.function &&
              (d = t.library.function.reduce(
                (t, e) => ((t[e.signature.name] = this.mapFunction(e)), t),
                {}
              )),
            {
              nodes: i,
              inputs: s,
              outputs: u,
              weights: a,
              placeholders: r,
              signature: e,
              functions: d,
            }
          );
        }
        mapSignatureEntries(t) {
          return Object.keys(t || {}).reduce(
            (e, n) => ((e[t[n].name] = n), e),
            {}
          );
        }
        mapNode(t) {
          const e = Object(i.a)(t.op) || this.opMappers[t.op] || {};
          null == t.attr && (t.attr = {});
          const n = {
            name: t.name,
            op: t.op,
            category: e.category,
            inputNames: (t.input || []).map((t) =>
              t.startsWith("^") ? t.substr(1) : t
            ),
            inputs: [],
            children: [],
            inputParams: {},
            attrParams: {},
            rawAttrs: t.attr,
          };
          return (
            null != e.inputs &&
              (n.inputParams = e.inputs.reduce(
                (t, e) => (
                  (t[e.name] = {
                    type: e.type,
                    inputIndexStart: e.start,
                    inputIndexEnd: e.end,
                  }),
                  t
                ),
                {}
              )),
            null != e.attrs &&
              (n.attrParams = e.attrs.reduce((e, n) => {
                const r = n.type;
                let a = void 0;
                switch (n.type) {
                  case "string":
                    (a = S(t.attr, n.tfName, n.defaultValue)),
                      void 0 === a &&
                        n.tfDeprecatedName &&
                        (a = S(t.attr, n.tfDeprecatedName, n.defaultValue));
                    break;
                  case "string[]":
                    (a = M(t.attr, n.tfName, n.defaultValue)),
                      void 0 === a &&
                        n.tfDeprecatedName &&
                        (a = M(t.attr, n.tfDeprecatedName, n.defaultValue));
                    break;
                  case "number":
                    (a = k(t.attr, n.tfName, n.defaultValue || 0)),
                      void 0 === a &&
                        n.tfDeprecatedName &&
                        (a = k(t.attr, n.tfDeprecatedName, n.defaultValue));
                    break;
                  case "number[]":
                    (a = F(t.attr, n.tfName, n.defaultValue)),
                      void 0 === a &&
                        n.tfDeprecatedName &&
                        (a = F(t.attr, n.tfDeprecatedName, n.defaultValue));
                    break;
                  case "bool":
                    (a = I(t.attr, n.tfName, n.defaultValue)),
                      void 0 === a &&
                        n.tfDeprecatedName &&
                        (a = I(t.attr, n.tfDeprecatedName, n.defaultValue));
                    break;
                  case "bool[]":
                    (a = $(t.attr, n.tfName, n.defaultValue)),
                      void 0 === a &&
                        n.tfDeprecatedName &&
                        (a = $(t.attr, n.tfDeprecatedName, n.defaultValue));
                    break;
                  case "shape":
                    (a = D(t.attr, n.tfName, n.defaultValue)),
                      void 0 === a &&
                        n.tfDeprecatedName &&
                        (a = D(t.attr, n.tfDeprecatedName, n.defaultValue));
                    break;
                  case "shape[]":
                    (a = j(t.attr, n.tfName, n.defaultValue)),
                      void 0 === a &&
                        n.tfDeprecatedName &&
                        (a = j(t.attr, n.tfDeprecatedName, n.defaultValue));
                    break;
                  case "dtype":
                    (a = A(t.attr, n.tfName, n.defaultValue)),
                      void 0 === a &&
                        n.tfDeprecatedName &&
                        (a = A(t.attr, n.tfDeprecatedName, n.defaultValue));
                    break;
                  case "dtype[]":
                    (a = T(t.attr, n.tfName, n.defaultValue)),
                      void 0 === a &&
                        n.tfDeprecatedName &&
                        (a = T(t.attr, n.tfDeprecatedName, n.defaultValue));
                    break;
                  case "func":
                    (a = R(t.attr, n.tfName, n.defaultValue)),
                      void 0 === a &&
                        n.tfDeprecatedName &&
                        (a = R(t.attr, n.tfDeprecatedName, n.defaultValue));
                    break;
                  case "tensor":
                  case "tensors":
                    break;
                  default:
                    throw new Error(
                      `Unsupported param type: ${n.type} for op: ${t.op}`
                    );
                }
                return (e[n.name] = { value: a, type: r }), e;
              }, {})),
            n
          );
        }
        mapFunction(t) {
          const e = t.nodeDef,
            n = [];
          let r = {};
          null != e &&
            (r = e.reduce(
              (t, e) => (
                (t[e.name] = this.mapNode(e)),
                "Const" === e.op && n.push(t[e.name]),
                t
              ),
              {}
            ));
          const a = [],
            i = [];
          t.signature.inputArg.forEach((t) => {
            const [e] = Object(o.a)(t.name),
              n = {
                name: e,
                op: "Placeholder",
                inputs: [],
                inputNames: [],
                category: "graph",
                inputParams: {},
                attrParams: { dtype: { value: N(t.type), type: "dtype" } },
                children: [],
              };
            (n.signatureKey = t.name), a.push(n), (r[e] = n);
          });
          Object.keys(r).forEach((t) => {
            const e = r[t];
            e.inputNames.forEach((t) => {
              const [n] = Object(o.a)(t);
              e.inputs.push(r[n]), r[n].children.push(e);
            });
          });
          const s = t.ret;
          t.signature.outputArg.forEach((t) => {
            const [e, n] = Object(o.a)(s[t.name]),
              a = r[e];
            null != a && ((a.defaultOutput = n), i.push(a));
          });
          const u = this.mapArgsToSignature(t);
          return {
            nodes: r,
            inputs: a,
            outputs: i,
            weights: n,
            placeholders: [],
            signature: u,
          };
        }
        mapArgsToSignature(t) {
          return {
            methodName: t.signature.name,
            inputs: t.signature.inputArg.reduce(
              (t, e) => ((t[e.name] = this.mapArgToTensorInfo(e)), t),
              {}
            ),
            outputs: t.signature.outputArg.reduce(
              (e, n) => ((e[n.name] = this.mapArgToTensorInfo(n, t.ret)), e),
              {}
            ),
          };
        }
        mapArgToTensorInfo(t, e) {
          let n = t.name;
          return null != e && (n = e[n]), { name: n, dtype: t.type };
        }
      }
      function E(e, n) {
        const a = Array.isArray(e)
          ? String.fromCharCode.apply(null, e)
          : (function (e) {
              const n = Object(r.ob)().global;
              if (void 0 !== n.atob) return n.atob(e);
              if (void 0 !== t) return new t(e, "base64").toString();
              throw new Error(
                "Unable to decode base64 in this environment. Missing built-in atob() or Buffer()"
              );
            })(e);
        return n ? a : a.toLowerCase();
      }
      function S(t, e, n, r = !1) {
        const a = t[e];
        return null != a ? E(a.s, r) : n;
      }
      function I(t, e, n) {
        const r = t[e];
        return r ? r.b : n;
      }
      function k(t, e, n) {
        const r = t[e] || {},
          a = null != r.i ? r.i : null != r.f ? r.f : n;
        return "number" == typeof a ? a : parseInt(a, 10);
      }
      function N(t) {
        switch (("string" == typeof t && (t = a.a[t]), t)) {
          case a.a.DT_FLOAT:
            return "float32";
          case a.a.DT_INT32:
          case a.a.DT_INT64:
          case a.a.DT_INT8:
          case a.a.DT_UINT8:
            return "int32";
          case a.a.DT_BOOL:
            return "bool";
          case a.a.DT_DOUBLE:
            return "float32";
          case a.a.DT_STRING:
            return "string";
          default:
            return null;
        }
      }
      function R(t, e, n) {
        const r = t[e];
        return r && r.func ? r.func.name : n;
      }
      function A(t, e, n) {
        const r = t[e];
        return r && r.type ? N(r.type) : n;
      }
      function T(t, e, n) {
        const r = t[e];
        return r && r.list && r.list.type ? r.list.type.map((t) => N(t)) : n;
      }
      function _(t) {
        if (!t.unknownRank)
          return null != t.dim
            ? t.dim.map((t) =>
                "number" == typeof t.size ? t.size : parseInt(t.size, 10)
              )
            : [];
      }
      function D(t, e, n) {
        const r = t[e];
        return r && r.shape ? _(r.shape) : n;
      }
      function F(t, e, n) {
        const r = t[e];
        return r
          ? (
              (r.list.f && r.list.f.length ? r.list.f : r.list.i) || []
            ).map((t) => ("number" == typeof t ? t : parseInt(t, 10)))
          : n;
      }
      function M(t, e, n, r = !1) {
        const a = t[e];
        return a && a.list && a.list.s ? a.list.s.map((t) => E(t, r)) : n;
      }
      function j(t, e, n) {
        const r = t[e];
        return r && r.list && r.list.shape ? r.list.shape.map((t) => _(t)) : n;
      }
      function $(t, e, n) {
        const r = t[e];
        return r && r.list && r.list.b ? r.list.b : n;
      }
    }.call(this, n(32).Buffer));
  },
  function (t, e) {
    t.exports = function () {
      throw new Error("define cannot be used indirect");
    };
  },
  function (t, e, n) {
    "use strict";
    n.d(e, "b", function () {
      return o;
    }),
      n.d(e, "a", function () {
        return s;
      }),
      n.d(e, "c", function () {
        return u;
      }),
      n.d(e, "e", function () {
        return c;
      }),
      n.d(e, "d", function () {
        return l;
      });
    var r = n(30);
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const a = Object(r.a)("kernelRegistry", () => new Map()),
      i = Object(r.a)("gradRegistry", () => new Map());
    function o(t, e) {
      const n = h(t, e);
      return a.get(n);
    }
    function s(t) {
      return i.get(t);
    }
    function u(t) {
      const e = a.entries(),
        n = [];
      for (;;) {
        const { done: r, value: a } = e.next();
        if (r) break;
        const [i, o] = a,
          [s] = i.split("_");
        s === t && n.push(o);
      }
      return n;
    }
    function c(t) {
      const { kernelName: e, backendName: n } = t,
        r = h(e, n);
      a.has(r) &&
        console.warn(
          `The kernel '${e}' for backend '${n}' is already registered`
        ),
        a.set(r, t);
    }
    function l(t) {
      const { kernelName: e } = t;
      i.has(e) && console.warn(`Overriding the gradient for '${e}'`),
        i.set(e, t);
    }
    function h(t, e) {
      return `${e}_${t}`;
    }
  },
  function (t, e, n) {
    "use strict";
    n.d(e, "a", function () {
      return u;
    });
    var r = n(6),
      a = n(8),
      i = n(3),
      o = n(1),
      s = n(5);
    const u = Object(s.a)({
      complex_:
        /**
         * @license
         * Copyright 2020 Google Inc. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (t, e) {
          const n = Object(i.a)(t, "real", "complex"),
            s = Object(i.a)(e, "imag", "complex");
          o.assertShapesMatch(
            n.shape,
            s.shape,
            `real and imag shapes, ${n.shape} and ${s.shape}, must match in call to tf.complex().`
          );
          const u = { real: n, imag: s };
          return r.a.runKernelFunc((t) => t.complex(n, s), u, null, a.k);
        },
    });
  },
  function (t, e, n) {
    "use strict";
    n.d(e, "b", function () {
      return a;
    }),
      n.d(e, "d", function () {
        return o;
      }),
      n.d(e, "f", function () {
        return s;
      }),
      n.d(e, "c", function () {
        return u;
      }),
      n.d(e, "e", function () {
        return c;
      }),
      n.d(e, "a", function () {
        return l;
      });
    var r = n(0);
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     *
     * =============================================================================
     */ function a(t, e) {
      return i(t, e);
    }
    function i(t, e, n = new Map(), r = new Set()) {
      if (null == t) return null;
      if (r.has(t)) throw new Error("Circular references are not supported.");
      if (n.has(t)) return n.get(t);
      const a = e(t);
      if (a.recurse && null !== a.value)
        throw new Error(
          "A deep map function may not return both a value and recurse=true."
        );
      if (a.recurse) {
        if (c(t)) {
          const a = Array.isArray(t) ? [] : {};
          r.add(t);
          for (const o in t) {
            const s = i(t[o], e, n, r);
            a[o] = s;
          }
          return r.delete(t), a;
        }
        throw new Error("Can't recurse into non-iterable type: " + t);
      }
      return n.set(t, a.value), a.value;
    }
    function o(t, e = s) {
      return (function t(e, n, r = new Set()) {
        const a = e[0];
        if (r.has(a)) throw new Error("Circular references are not supported.");
        const i = n(e);
        if (i.recurse && null !== i.value)
          throw new Error(
            "A deep zip function may not return both a value and recurse=true."
          );
        if (i.recurse) {
          if (c(a)) {
            const i = Array.isArray(a) ? [] : {};
            r.add(a);
            for (const o in a) {
              const a = e.map((t) => t[o]),
                s = t(a, n, r);
              i[o] = s;
            }
            return r.delete(a), i;
          }
          throw new Error("Can't recurse into non-iterable type: " + a);
        }
        return i.value;
      })(t, e);
    }
    function s(t) {
      return null === t
        ? null
        : c(t[0])
        ? { value: null, recurse: !0 }
        : { value: t, recurse: !1 };
    }
    async function u(t, e) {
      const n = new Map();
      i(t, e, n);
      for (const t of Array.from(n.keys())) {
        const e = n.get(t);
        if (e instanceof Promise) {
          const r = await e;
          n.set(t, r);
        }
      }
      return i(t, e, n);
    }
    function c(t) {
      return (
        null != t &&
        !ArrayBuffer.isView(t) &&
        (Array.isArray(t) || ("object" == typeof t && !(t instanceof r.l)))
      );
    }
    function l(t) {
      return (
        null == t ||
        null === (e = t) ||
        ("object" != typeof e && "function" != typeof e) ||
        Array.isArray(t) ||
        ("object" == typeof t && t instanceof r.l) ||
        r.Cd.isTypedArray(t)
      );
      var e;
    }
  },
  function (t, e, n) {
    var r = n(71),
      a = n(72),
      i = n(73),
      o = n(74),
      s = n(75),
      u = n(76),
      c = n(77);
    (c.alea = r),
      (c.xor128 = a),
      (c.xorwow = i),
      (c.xorshift7 = o),
      (c.xor4096 = s),
      (c.tychei = u),
      (t.exports = c);
  },
  function (t, e, n) {
    "use strict";
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     *
     * =============================================================================
     */
    var r, a;
    n.d(e, "a", function () {
      return r;
    }),
      (function (t) {
        (t[(t.DT_INVALID = 0)] = "DT_INVALID"),
          (t[(t.DT_FLOAT = 1)] = "DT_FLOAT"),
          (t[(t.DT_DOUBLE = 2)] = "DT_DOUBLE"),
          (t[(t.DT_INT32 = 3)] = "DT_INT32"),
          (t[(t.DT_UINT8 = 4)] = "DT_UINT8"),
          (t[(t.DT_INT16 = 5)] = "DT_INT16"),
          (t[(t.DT_INT8 = 6)] = "DT_INT8"),
          (t[(t.DT_STRING = 7)] = "DT_STRING"),
          (t[(t.DT_COMPLEX64 = 8)] = "DT_COMPLEX64"),
          (t[(t.DT_INT64 = 9)] = "DT_INT64"),
          (t[(t.DT_BOOL = 10)] = "DT_BOOL"),
          (t[(t.DT_QINT8 = 11)] = "DT_QINT8"),
          (t[(t.DT_QUINT8 = 12)] = "DT_QUINT8"),
          (t[(t.DT_QINT32 = 13)] = "DT_QINT32"),
          (t[(t.DT_BFLOAT16 = 14)] = "DT_BFLOAT16"),
          (t[(t.DT_FLOAT_REF = 101)] = "DT_FLOAT_REF"),
          (t[(t.DT_DOUBLE_REF = 102)] = "DT_DOUBLE_REF"),
          (t[(t.DT_INT32_REF = 103)] = "DT_INT32_REF"),
          (t[(t.DT_UINT8_REF = 104)] = "DT_UINT8_REF"),
          (t[(t.DT_INT16_REF = 105)] = "DT_INT16_REF"),
          (t[(t.DT_INT8_REF = 106)] = "DT_INT8_REF"),
          (t[(t.DT_STRING_REF = 107)] = "DT_STRING_REF"),
          (t[(t.DT_COMPLEX64_REF = 108)] = "DT_COMPLEX64_REF"),
          (t[(t.DT_INT64_REF = 109)] = "DT_INT64_REF"),
          (t[(t.DT_BOOL_REF = 110)] = "DT_BOOL_REF"),
          (t[(t.DT_QINT8_REF = 111)] = "DT_QINT8_REF"),
          (t[(t.DT_QUINT8_REF = 112)] = "DT_QUINT8_REF"),
          (t[(t.DT_QINT32_REF = 113)] = "DT_QINT32_REF"),
          (t[(t.DT_BFLOAT16_REF = 114)] = "DT_BFLOAT16_REF");
      })(r || (r = {})),
      (function (t) {
        let e;
        !(function (t) {
          (t[(t.LEGACY = 0)] = "LEGACY"),
            (t[(t.V1 = 1)] = "V1"),
            (t[(t.V2 = 2)] = "V2");
        })((e = t.CheckpointFormatVersion || (t.CheckpointFormatVersion = {})));
      })(a || (a = {}));
  },
  function (t, e, n) {
    "use strict";
    n.d(e, "a", function () {
      return s;
    });
    var r = n(6),
      a = n(8),
      i = n(3),
      o = n(5);
    const s = Object(o.a)({
      real_:
        /**
         * @license
         * Copyright 2020 Google Inc. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (t) {
          const e = Object(i.a)(t, "input", "real"),
            n = { input: e };
          return r.a.runKernelFunc((t) => t.real(e), n, null, a.gb);
        },
    });
  },
  function (t, e, n) {
    "use strict";
    /**
     * @license
     * Copyright 2017 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    var r, a, i, o, s;
    n.d(e, "b", function () {
      return c;
    }),
      n.d(e, "a", function () {
        return l;
      }),
      (function (t) {
        (t.R0 = "R0"),
          (t.R1 = "R1"),
          (t.R2 = "R2"),
          (t.R3 = "R3"),
          (t.R4 = "R4"),
          (t.R5 = "R5"),
          (t.R6 = "R6");
      })(r || (r = {})),
      (function (t) {
        (t.float32 = "float32"),
          (t.int32 = "int32"),
          (t.bool = "int32"),
          (t.complex64 = "complex64");
      })(a || (a = {})),
      (function (t) {
        (t.float32 = "float32"),
          (t.int32 = "int32"),
          (t.bool = "bool"),
          (t.complex64 = "complex64");
      })(i || (i = {})),
      (function (t) {
        (t.float32 = "float32"),
          (t.int32 = "float32"),
          (t.bool = "float32"),
          (t.complex64 = "complex64");
      })(o || (o = {})),
      (function (t) {
        (t.float32 = "complex64"),
          (t.int32 = "complex64"),
          (t.bool = "complex64"),
          (t.complex64 = "complex64");
      })(s || (s = {}));
    const u = { float32: o, int32: a, bool: i, complex64: s };
    function c(t, e) {
      if ("string" === t || "string" === e) {
        if ("string" === t && "string" === e) return "string";
        throw new Error(`Can not upcast ${t} with ${e}`);
      }
      return u[t][e];
    }
    function l(t) {
      return c(t, "int32");
    }
  },
  function (t, e) {
    var n;
    n = (function () {
      return this;
    })();
    try {
      n = n || new Function("return this")();
    } catch (t) {
      "object" == typeof window && (n = window);
    }
    t.exports = n;
  },
  function (t, e, n) {
    "use strict";
    n.d(e, "a", function () {
      return a;
    });
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const r = {};
    function a(t) {
      return r[t];
    }
  },
  function (t, e, n) {
    "use strict";
    n.d(e, "a", function () {
      return s;
    });
    var r = n(6),
      a = n(8),
      i = n(3),
      o = n(5);
    const s = Object(o.a)({
      imag_:
        /**
         * @license
         * Copyright 2020 Google Inc. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (t) {
          const e = Object(i.a)(t, "input", "imag"),
            n = { input: e };
          return r.a.runKernelFunc((t) => t.imag(e), n, null, a.K);
        },
    });
  },
  function (t, e) {
    var n,
      r,
      a = (t.exports = {});
    function i() {
      throw new Error("setTimeout has not been defined");
    }
    function o() {
      throw new Error("clearTimeout has not been defined");
    }
    function s(t) {
      if (n === setTimeout) return setTimeout(t, 0);
      if ((n === i || !n) && setTimeout)
        return (n = setTimeout), setTimeout(t, 0);
      try {
        return n(t, 0);
      } catch (e) {
        try {
          return n.call(null, t, 0);
        } catch (e) {
          return n.call(this, t, 0);
        }
      }
    }
    !(function () {
      try {
        n = "function" == typeof setTimeout ? setTimeout : i;
      } catch (t) {
        n = i;
      }
      try {
        r = "function" == typeof clearTimeout ? clearTimeout : o;
      } catch (t) {
        r = o;
      }
    })();
    var u,
      c = [],
      l = !1,
      h = -1;
    function d() {
      l &&
        u &&
        ((l = !1), u.length ? (c = u.concat(c)) : (h = -1), c.length && p());
    }
    function p() {
      if (!l) {
        var t = s(d);
        l = !0;
        for (var e = c.length; e; ) {
          for (u = c, c = []; ++h < e; ) u && u[h].run();
          (h = -1), (e = c.length);
        }
        (u = null),
          (l = !1),
          (function (t) {
            if (r === clearTimeout) return clearTimeout(t);
            if ((r === o || !r) && clearTimeout)
              return (r = clearTimeout), clearTimeout(t);
            try {
              r(t);
            } catch (e) {
              try {
                return r.call(null, t);
              } catch (e) {
                return r.call(this, t);
              }
            }
          })(t);
      }
    }
    function f(t, e) {
      (this.fun = t), (this.array = e);
    }
    function m() {}
    (a.nextTick = function (t) {
      var e = new Array(arguments.length - 1);
      if (arguments.length > 1)
        for (var n = 1; n < arguments.length; n++) e[n - 1] = arguments[n];
      c.push(new f(t, e)), 1 !== c.length || l || s(p);
    }),
      (f.prototype.run = function () {
        this.fun.apply(null, this.array);
      }),
      (a.title = "browser"),
      (a.browser = !0),
      (a.env = {}),
      (a.argv = []),
      (a.version = ""),
      (a.versions = {}),
      (a.on = m),
      (a.addListener = m),
      (a.once = m),
      (a.off = m),
      (a.removeListener = m),
      (a.removeAllListeners = m),
      (a.emit = m),
      (a.prependListener = m),
      (a.prependOnceListener = m),
      (a.listeners = function (t) {
        return [];
      }),
      (a.binding = function (t) {
        throw new Error("process.binding is not supported");
      }),
      (a.cwd = function () {
        return "/";
      }),
      (a.chdir = function (t) {
        throw new Error("process.chdir is not supported");
      }),
      (a.umask = function () {
        return 0;
      });
  },
  function (t, e) {
    t.exports = function (t) {
      return (
        t.webpackPolyfill ||
          ((t.deprecate = function () {}),
          (t.paths = []),
          t.children || (t.children = []),
          Object.defineProperty(t, "loaded", {
            enumerable: !0,
            get: function () {
              return t.l;
            },
          }),
          Object.defineProperty(t, "id", {
            enumerable: !0,
            get: function () {
              return t.i;
            },
          }),
          (t.webpackPolyfill = 1)),
        t
      );
    };
  },
  function (t, e) {
    (function (e) {
      t.exports = e;
    }.call(this, {}));
  },
  function (t, e, n) {
    "use strict";
    (function (t, r) {
      /**
       * @license
       * Copyright 2020 Google Inc. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      let a;
      function i() {
        if (null == a) {
          let e;
          if ("undefined" != typeof window) e = window;
          else if (void 0 !== t) e = t;
          else if (void 0 !== r) e = r;
          else {
            if ("undefined" == typeof self)
              throw new Error("Could not find a global object");
            e = self;
          }
          a = e;
        }
        return a;
      }
      function o(t, e) {
        const n = (function () {
          const t = i();
          return (
            null == t._tfGlobals && (t._tfGlobals = new Map()), t._tfGlobals
          );
        })();
        if (n.has(t)) return n.get(t);
        {
          const r = e();
          return n.set(t, r), n.get(t);
        }
      }
      n.d(e, "b", function () {
        return i;
      }),
        n.d(e, "a", function () {
          return o;
        });
    }.call(this, n(24), n(27)));
  },
  function (t, e, n) {
    "use strict";
    n.d(e, "a", function () {
      return r;
    });
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const r = {
      float32: 4,
      float16: 2,
      int32: 4,
      uint16: 2,
      uint8: 1,
      bool: 1,
      complex64: 8,
    };
  },
  function (t, e, n) {
    "use strict";
    (function (t) {
      /*!
       * The buffer module from node.js, for the browser.
       *
       * @author   Feross Aboukhadijeh <http://feross.org>
       * @license  MIT
       */
      var r = n(59),
        a = n(60),
        i = n(61);
      function o() {
        return u.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
      }
      function s(t, e) {
        if (o() < e) throw new RangeError("Invalid typed array length");
        return (
          u.TYPED_ARRAY_SUPPORT
            ? ((t = new Uint8Array(e)).__proto__ = u.prototype)
            : (null === t && (t = new u(e)), (t.length = e)),
          t
        );
      }
      function u(t, e, n) {
        if (!(u.TYPED_ARRAY_SUPPORT || this instanceof u))
          return new u(t, e, n);
        if ("number" == typeof t) {
          if ("string" == typeof e)
            throw new Error(
              "If encoding is specified then the first argument must be a string"
            );
          return h(this, t);
        }
        return c(this, t, e, n);
      }
      function c(t, e, n, r) {
        if ("number" == typeof e)
          throw new TypeError('"value" argument must not be a number');
        return "undefined" != typeof ArrayBuffer && e instanceof ArrayBuffer
          ? (function (t, e, n, r) {
              if ((e.byteLength, n < 0 || e.byteLength < n))
                throw new RangeError("'offset' is out of bounds");
              if (e.byteLength < n + (r || 0))
                throw new RangeError("'length' is out of bounds");
              e =
                void 0 === n && void 0 === r
                  ? new Uint8Array(e)
                  : void 0 === r
                  ? new Uint8Array(e, n)
                  : new Uint8Array(e, n, r);
              u.TYPED_ARRAY_SUPPORT
                ? ((t = e).__proto__ = u.prototype)
                : (t = d(t, e));
              return t;
            })(t, e, n, r)
          : "string" == typeof e
          ? (function (t, e, n) {
              ("string" == typeof n && "" !== n) || (n = "utf8");
              if (!u.isEncoding(n))
                throw new TypeError(
                  '"encoding" must be a valid string encoding'
                );
              var r = 0 | f(e, n),
                a = (t = s(t, r)).write(e, n);
              a !== r && (t = t.slice(0, a));
              return t;
            })(t, e, n)
          : (function (t, e) {
              if (u.isBuffer(e)) {
                var n = 0 | p(e.length);
                return 0 === (t = s(t, n)).length || e.copy(t, 0, 0, n), t;
              }
              if (e) {
                if (
                  ("undefined" != typeof ArrayBuffer &&
                    e.buffer instanceof ArrayBuffer) ||
                  "length" in e
                )
                  return "number" != typeof e.length || (r = e.length) != r
                    ? s(t, 0)
                    : d(t, e);
                if ("Buffer" === e.type && i(e.data)) return d(t, e.data);
              }
              var r;
              throw new TypeError(
                "First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object."
              );
            })(t, e);
      }
      function l(t) {
        if ("number" != typeof t)
          throw new TypeError('"size" argument must be a number');
        if (t < 0) throw new RangeError('"size" argument must not be negative');
      }
      function h(t, e) {
        if ((l(e), (t = s(t, e < 0 ? 0 : 0 | p(e))), !u.TYPED_ARRAY_SUPPORT))
          for (var n = 0; n < e; ++n) t[n] = 0;
        return t;
      }
      function d(t, e) {
        var n = e.length < 0 ? 0 : 0 | p(e.length);
        t = s(t, n);
        for (var r = 0; r < n; r += 1) t[r] = 255 & e[r];
        return t;
      }
      function p(t) {
        if (t >= o())
          throw new RangeError(
            "Attempt to allocate Buffer larger than maximum size: 0x" +
              o().toString(16) +
              " bytes"
          );
        return 0 | t;
      }
      function f(t, e) {
        if (u.isBuffer(t)) return t.length;
        if (
          "undefined" != typeof ArrayBuffer &&
          "function" == typeof ArrayBuffer.isView &&
          (ArrayBuffer.isView(t) || t instanceof ArrayBuffer)
        )
          return t.byteLength;
        "string" != typeof t && (t = "" + t);
        var n = t.length;
        if (0 === n) return 0;
        for (var r = !1; ; )
          switch (e) {
            case "ascii":
            case "latin1":
            case "binary":
              return n;
            case "utf8":
            case "utf-8":
            case void 0:
              return L(t).length;
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return 2 * n;
            case "hex":
              return n >>> 1;
            case "base64":
              return z(t).length;
            default:
              if (r) return L(t).length;
              (e = ("" + e).toLowerCase()), (r = !0);
          }
      }
      function m(t, e, n) {
        var r = !1;
        if (((void 0 === e || e < 0) && (e = 0), e > this.length)) return "";
        if (((void 0 === n || n > this.length) && (n = this.length), n <= 0))
          return "";
        if ((n >>>= 0) <= (e >>>= 0)) return "";
        for (t || (t = "utf8"); ; )
          switch (t) {
            case "hex":
              return R(this, e, n);
            case "utf8":
            case "utf-8":
              return I(this, e, n);
            case "ascii":
              return k(this, e, n);
            case "latin1":
            case "binary":
              return N(this, e, n);
            case "base64":
              return S(this, e, n);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return A(this, e, n);
            default:
              if (r) throw new TypeError("Unknown encoding: " + t);
              (t = (t + "").toLowerCase()), (r = !0);
          }
      }
      function g(t, e, n) {
        var r = t[e];
        (t[e] = t[n]), (t[n] = r);
      }
      function b(t, e, n, r, a) {
        if (0 === t.length) return -1;
        if (
          ("string" == typeof n
            ? ((r = n), (n = 0))
            : n > 2147483647
            ? (n = 2147483647)
            : n < -2147483648 && (n = -2147483648),
          (n = +n),
          isNaN(n) && (n = a ? 0 : t.length - 1),
          n < 0 && (n = t.length + n),
          n >= t.length)
        ) {
          if (a) return -1;
          n = t.length - 1;
        } else if (n < 0) {
          if (!a) return -1;
          n = 0;
        }
        if (("string" == typeof e && (e = u.from(e, r)), u.isBuffer(e)))
          return 0 === e.length ? -1 : v(t, e, n, r, a);
        if ("number" == typeof e)
          return (
            (e &= 255),
            u.TYPED_ARRAY_SUPPORT &&
            "function" == typeof Uint8Array.prototype.indexOf
              ? a
                ? Uint8Array.prototype.indexOf.call(t, e, n)
                : Uint8Array.prototype.lastIndexOf.call(t, e, n)
              : v(t, [e], n, r, a)
          );
        throw new TypeError("val must be string, number or Buffer");
      }
      function v(t, e, n, r, a) {
        var i,
          o = 1,
          s = t.length,
          u = e.length;
        if (
          void 0 !== r &&
          ("ucs2" === (r = String(r).toLowerCase()) ||
            "ucs-2" === r ||
            "utf16le" === r ||
            "utf-16le" === r)
        ) {
          if (t.length < 2 || e.length < 2) return -1;
          (o = 2), (s /= 2), (u /= 2), (n /= 2);
        }
        function c(t, e) {
          return 1 === o ? t[e] : t.readUInt16BE(e * o);
        }
        if (a) {
          var l = -1;
          for (i = n; i < s; i++)
            if (c(t, i) === c(e, -1 === l ? 0 : i - l)) {
              if ((-1 === l && (l = i), i - l + 1 === u)) return l * o;
            } else -1 !== l && (i -= i - l), (l = -1);
        } else
          for (n + u > s && (n = s - u), i = n; i >= 0; i--) {
            for (var h = !0, d = 0; d < u; d++)
              if (c(t, i + d) !== c(e, d)) {
                h = !1;
                break;
              }
            if (h) return i;
          }
        return -1;
      }
      function y(t, e, n, r) {
        n = Number(n) || 0;
        var a = t.length - n;
        r ? (r = Number(r)) > a && (r = a) : (r = a);
        var i = e.length;
        if (i % 2 != 0) throw new TypeError("Invalid hex string");
        r > i / 2 && (r = i / 2);
        for (var o = 0; o < r; ++o) {
          var s = parseInt(e.substr(2 * o, 2), 16);
          if (isNaN(s)) return o;
          t[n + o] = s;
        }
        return o;
      }
      function x(t, e, n, r) {
        return W(L(e, t.length - n), t, n, r);
      }
      function w(t, e, n, r) {
        return W(
          (function (t) {
            for (var e = [], n = 0; n < t.length; ++n)
              e.push(255 & t.charCodeAt(n));
            return e;
          })(e),
          t,
          n,
          r
        );
      }
      function C(t, e, n, r) {
        return w(t, e, n, r);
      }
      function O(t, e, n, r) {
        return W(z(e), t, n, r);
      }
      function E(t, e, n, r) {
        return W(
          (function (t, e) {
            for (
              var n, r, a, i = [], o = 0;
              o < t.length && !((e -= 2) < 0);
              ++o
            )
              (n = t.charCodeAt(o)),
                (r = n >> 8),
                (a = n % 256),
                i.push(a),
                i.push(r);
            return i;
          })(e, t.length - n),
          t,
          n,
          r
        );
      }
      function S(t, e, n) {
        return 0 === e && n === t.length
          ? r.fromByteArray(t)
          : r.fromByteArray(t.slice(e, n));
      }
      function I(t, e, n) {
        n = Math.min(t.length, n);
        for (var r = [], a = e; a < n; ) {
          var i,
            o,
            s,
            u,
            c = t[a],
            l = null,
            h = c > 239 ? 4 : c > 223 ? 3 : c > 191 ? 2 : 1;
          if (a + h <= n)
            switch (h) {
              case 1:
                c < 128 && (l = c);
                break;
              case 2:
                128 == (192 & (i = t[a + 1])) &&
                  (u = ((31 & c) << 6) | (63 & i)) > 127 &&
                  (l = u);
                break;
              case 3:
                (i = t[a + 1]),
                  (o = t[a + 2]),
                  128 == (192 & i) &&
                    128 == (192 & o) &&
                    (u = ((15 & c) << 12) | ((63 & i) << 6) | (63 & o)) >
                      2047 &&
                    (u < 55296 || u > 57343) &&
                    (l = u);
                break;
              case 4:
                (i = t[a + 1]),
                  (o = t[a + 2]),
                  (s = t[a + 3]),
                  128 == (192 & i) &&
                    128 == (192 & o) &&
                    128 == (192 & s) &&
                    (u =
                      ((15 & c) << 18) |
                      ((63 & i) << 12) |
                      ((63 & o) << 6) |
                      (63 & s)) > 65535 &&
                    u < 1114112 &&
                    (l = u);
            }
          null === l
            ? ((l = 65533), (h = 1))
            : l > 65535 &&
              ((l -= 65536),
              r.push(((l >>> 10) & 1023) | 55296),
              (l = 56320 | (1023 & l))),
            r.push(l),
            (a += h);
        }
        return (function (t) {
          var e = t.length;
          if (e <= 4096) return String.fromCharCode.apply(String, t);
          var n = "",
            r = 0;
          for (; r < e; )
            n += String.fromCharCode.apply(String, t.slice(r, (r += 4096)));
          return n;
        })(r);
      }
      (e.Buffer = u),
        (e.SlowBuffer = function (t) {
          +t != t && (t = 0);
          return u.alloc(+t);
        }),
        (e.INSPECT_MAX_BYTES = 50),
        (u.TYPED_ARRAY_SUPPORT =
          void 0 !== t.TYPED_ARRAY_SUPPORT
            ? t.TYPED_ARRAY_SUPPORT
            : (function () {
                try {
                  var t = new Uint8Array(1);
                  return (
                    (t.__proto__ = {
                      __proto__: Uint8Array.prototype,
                      foo: function () {
                        return 42;
                      },
                    }),
                    42 === t.foo() &&
                      "function" == typeof t.subarray &&
                      0 === t.subarray(1, 1).byteLength
                  );
                } catch (t) {
                  return !1;
                }
              })()),
        (e.kMaxLength = o()),
        (u.poolSize = 8192),
        (u._augment = function (t) {
          return (t.__proto__ = u.prototype), t;
        }),
        (u.from = function (t, e, n) {
          return c(null, t, e, n);
        }),
        u.TYPED_ARRAY_SUPPORT &&
          ((u.prototype.__proto__ = Uint8Array.prototype),
          (u.__proto__ = Uint8Array),
          "undefined" != typeof Symbol &&
            Symbol.species &&
            u[Symbol.species] === u &&
            Object.defineProperty(u, Symbol.species, {
              value: null,
              configurable: !0,
            })),
        (u.alloc = function (t, e, n) {
          return (function (t, e, n, r) {
            return (
              l(e),
              e <= 0
                ? s(t, e)
                : void 0 !== n
                ? "string" == typeof r
                  ? s(t, e).fill(n, r)
                  : s(t, e).fill(n)
                : s(t, e)
            );
          })(null, t, e, n);
        }),
        (u.allocUnsafe = function (t) {
          return h(null, t);
        }),
        (u.allocUnsafeSlow = function (t) {
          return h(null, t);
        }),
        (u.isBuffer = function (t) {
          return !(null == t || !t._isBuffer);
        }),
        (u.compare = function (t, e) {
          if (!u.isBuffer(t) || !u.isBuffer(e))
            throw new TypeError("Arguments must be Buffers");
          if (t === e) return 0;
          for (
            var n = t.length, r = e.length, a = 0, i = Math.min(n, r);
            a < i;
            ++a
          )
            if (t[a] !== e[a]) {
              (n = t[a]), (r = e[a]);
              break;
            }
          return n < r ? -1 : r < n ? 1 : 0;
        }),
        (u.isEncoding = function (t) {
          switch (String(t).toLowerCase()) {
            case "hex":
            case "utf8":
            case "utf-8":
            case "ascii":
            case "latin1":
            case "binary":
            case "base64":
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return !0;
            default:
              return !1;
          }
        }),
        (u.concat = function (t, e) {
          if (!i(t))
            throw new TypeError('"list" argument must be an Array of Buffers');
          if (0 === t.length) return u.alloc(0);
          var n;
          if (void 0 === e)
            for (e = 0, n = 0; n < t.length; ++n) e += t[n].length;
          var r = u.allocUnsafe(e),
            a = 0;
          for (n = 0; n < t.length; ++n) {
            var o = t[n];
            if (!u.isBuffer(o))
              throw new TypeError(
                '"list" argument must be an Array of Buffers'
              );
            o.copy(r, a), (a += o.length);
          }
          return r;
        }),
        (u.byteLength = f),
        (u.prototype._isBuffer = !0),
        (u.prototype.swap16 = function () {
          var t = this.length;
          if (t % 2 != 0)
            throw new RangeError("Buffer size must be a multiple of 16-bits");
          for (var e = 0; e < t; e += 2) g(this, e, e + 1);
          return this;
        }),
        (u.prototype.swap32 = function () {
          var t = this.length;
          if (t % 4 != 0)
            throw new RangeError("Buffer size must be a multiple of 32-bits");
          for (var e = 0; e < t; e += 4)
            g(this, e, e + 3), g(this, e + 1, e + 2);
          return this;
        }),
        (u.prototype.swap64 = function () {
          var t = this.length;
          if (t % 8 != 0)
            throw new RangeError("Buffer size must be a multiple of 64-bits");
          for (var e = 0; e < t; e += 8)
            g(this, e, e + 7),
              g(this, e + 1, e + 6),
              g(this, e + 2, e + 5),
              g(this, e + 3, e + 4);
          return this;
        }),
        (u.prototype.toString = function () {
          var t = 0 | this.length;
          return 0 === t
            ? ""
            : 0 === arguments.length
            ? I(this, 0, t)
            : m.apply(this, arguments);
        }),
        (u.prototype.equals = function (t) {
          if (!u.isBuffer(t)) throw new TypeError("Argument must be a Buffer");
          return this === t || 0 === u.compare(this, t);
        }),
        (u.prototype.inspect = function () {
          var t = "",
            n = e.INSPECT_MAX_BYTES;
          return (
            this.length > 0 &&
              ((t = this.toString("hex", 0, n).match(/.{2}/g).join(" ")),
              this.length > n && (t += " ... ")),
            "<Buffer " + t + ">"
          );
        }),
        (u.prototype.compare = function (t, e, n, r, a) {
          if (!u.isBuffer(t)) throw new TypeError("Argument must be a Buffer");
          if (
            (void 0 === e && (e = 0),
            void 0 === n && (n = t ? t.length : 0),
            void 0 === r && (r = 0),
            void 0 === a && (a = this.length),
            e < 0 || n > t.length || r < 0 || a > this.length)
          )
            throw new RangeError("out of range index");
          if (r >= a && e >= n) return 0;
          if (r >= a) return -1;
          if (e >= n) return 1;
          if (this === t) return 0;
          for (
            var i = (a >>>= 0) - (r >>>= 0),
              o = (n >>>= 0) - (e >>>= 0),
              s = Math.min(i, o),
              c = this.slice(r, a),
              l = t.slice(e, n),
              h = 0;
            h < s;
            ++h
          )
            if (c[h] !== l[h]) {
              (i = c[h]), (o = l[h]);
              break;
            }
          return i < o ? -1 : o < i ? 1 : 0;
        }),
        (u.prototype.includes = function (t, e, n) {
          return -1 !== this.indexOf(t, e, n);
        }),
        (u.prototype.indexOf = function (t, e, n) {
          return b(this, t, e, n, !0);
        }),
        (u.prototype.lastIndexOf = function (t, e, n) {
          return b(this, t, e, n, !1);
        }),
        (u.prototype.write = function (t, e, n, r) {
          if (void 0 === e) (r = "utf8"), (n = this.length), (e = 0);
          else if (void 0 === n && "string" == typeof e)
            (r = e), (n = this.length), (e = 0);
          else {
            if (!isFinite(e))
              throw new Error(
                "Buffer.write(string, encoding, offset[, length]) is no longer supported"
              );
            (e |= 0),
              isFinite(n)
                ? ((n |= 0), void 0 === r && (r = "utf8"))
                : ((r = n), (n = void 0));
          }
          var a = this.length - e;
          if (
            ((void 0 === n || n > a) && (n = a),
            (t.length > 0 && (n < 0 || e < 0)) || e > this.length)
          )
            throw new RangeError("Attempt to write outside buffer bounds");
          r || (r = "utf8");
          for (var i = !1; ; )
            switch (r) {
              case "hex":
                return y(this, t, e, n);
              case "utf8":
              case "utf-8":
                return x(this, t, e, n);
              case "ascii":
                return w(this, t, e, n);
              case "latin1":
              case "binary":
                return C(this, t, e, n);
              case "base64":
                return O(this, t, e, n);
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return E(this, t, e, n);
              default:
                if (i) throw new TypeError("Unknown encoding: " + r);
                (r = ("" + r).toLowerCase()), (i = !0);
            }
        }),
        (u.prototype.toJSON = function () {
          return {
            type: "Buffer",
            data: Array.prototype.slice.call(this._arr || this, 0),
          };
        });
      function k(t, e, n) {
        var r = "";
        n = Math.min(t.length, n);
        for (var a = e; a < n; ++a) r += String.fromCharCode(127 & t[a]);
        return r;
      }
      function N(t, e, n) {
        var r = "";
        n = Math.min(t.length, n);
        for (var a = e; a < n; ++a) r += String.fromCharCode(t[a]);
        return r;
      }
      function R(t, e, n) {
        var r = t.length;
        (!e || e < 0) && (e = 0), (!n || n < 0 || n > r) && (n = r);
        for (var a = "", i = e; i < n; ++i) a += P(t[i]);
        return a;
      }
      function A(t, e, n) {
        for (var r = t.slice(e, n), a = "", i = 0; i < r.length; i += 2)
          a += String.fromCharCode(r[i] + 256 * r[i + 1]);
        return a;
      }
      function T(t, e, n) {
        if (t % 1 != 0 || t < 0) throw new RangeError("offset is not uint");
        if (t + e > n)
          throw new RangeError("Trying to access beyond buffer length");
      }
      function _(t, e, n, r, a, i) {
        if (!u.isBuffer(t))
          throw new TypeError('"buffer" argument must be a Buffer instance');
        if (e > a || e < i)
          throw new RangeError('"value" argument is out of bounds');
        if (n + r > t.length) throw new RangeError("Index out of range");
      }
      function D(t, e, n, r) {
        e < 0 && (e = 65535 + e + 1);
        for (var a = 0, i = Math.min(t.length - n, 2); a < i; ++a)
          t[n + a] =
            (e & (255 << (8 * (r ? a : 1 - a)))) >>> (8 * (r ? a : 1 - a));
      }
      function F(t, e, n, r) {
        e < 0 && (e = 4294967295 + e + 1);
        for (var a = 0, i = Math.min(t.length - n, 4); a < i; ++a)
          t[n + a] = (e >>> (8 * (r ? a : 3 - a))) & 255;
      }
      function M(t, e, n, r, a, i) {
        if (n + r > t.length) throw new RangeError("Index out of range");
        if (n < 0) throw new RangeError("Index out of range");
      }
      function j(t, e, n, r, i) {
        return i || M(t, 0, n, 4), a.write(t, e, n, r, 23, 4), n + 4;
      }
      function $(t, e, n, r, i) {
        return i || M(t, 0, n, 8), a.write(t, e, n, r, 52, 8), n + 8;
      }
      (u.prototype.slice = function (t, e) {
        var n,
          r = this.length;
        if (
          ((t = ~~t) < 0 ? (t += r) < 0 && (t = 0) : t > r && (t = r),
          (e = void 0 === e ? r : ~~e) < 0
            ? (e += r) < 0 && (e = 0)
            : e > r && (e = r),
          e < t && (e = t),
          u.TYPED_ARRAY_SUPPORT)
        )
          (n = this.subarray(t, e)).__proto__ = u.prototype;
        else {
          var a = e - t;
          n = new u(a, void 0);
          for (var i = 0; i < a; ++i) n[i] = this[i + t];
        }
        return n;
      }),
        (u.prototype.readUIntLE = function (t, e, n) {
          (t |= 0), (e |= 0), n || T(t, e, this.length);
          for (var r = this[t], a = 1, i = 0; ++i < e && (a *= 256); )
            r += this[t + i] * a;
          return r;
        }),
        (u.prototype.readUIntBE = function (t, e, n) {
          (t |= 0), (e |= 0), n || T(t, e, this.length);
          for (var r = this[t + --e], a = 1; e > 0 && (a *= 256); )
            r += this[t + --e] * a;
          return r;
        }),
        (u.prototype.readUInt8 = function (t, e) {
          return e || T(t, 1, this.length), this[t];
        }),
        (u.prototype.readUInt16LE = function (t, e) {
          return e || T(t, 2, this.length), this[t] | (this[t + 1] << 8);
        }),
        (u.prototype.readUInt16BE = function (t, e) {
          return e || T(t, 2, this.length), (this[t] << 8) | this[t + 1];
        }),
        (u.prototype.readUInt32LE = function (t, e) {
          return (
            e || T(t, 4, this.length),
            (this[t] | (this[t + 1] << 8) | (this[t + 2] << 16)) +
              16777216 * this[t + 3]
          );
        }),
        (u.prototype.readUInt32BE = function (t, e) {
          return (
            e || T(t, 4, this.length),
            16777216 * this[t] +
              ((this[t + 1] << 16) | (this[t + 2] << 8) | this[t + 3])
          );
        }),
        (u.prototype.readIntLE = function (t, e, n) {
          (t |= 0), (e |= 0), n || T(t, e, this.length);
          for (var r = this[t], a = 1, i = 0; ++i < e && (a *= 256); )
            r += this[t + i] * a;
          return r >= (a *= 128) && (r -= Math.pow(2, 8 * e)), r;
        }),
        (u.prototype.readIntBE = function (t, e, n) {
          (t |= 0), (e |= 0), n || T(t, e, this.length);
          for (var r = e, a = 1, i = this[t + --r]; r > 0 && (a *= 256); )
            i += this[t + --r] * a;
          return i >= (a *= 128) && (i -= Math.pow(2, 8 * e)), i;
        }),
        (u.prototype.readInt8 = function (t, e) {
          return (
            e || T(t, 1, this.length),
            128 & this[t] ? -1 * (255 - this[t] + 1) : this[t]
          );
        }),
        (u.prototype.readInt16LE = function (t, e) {
          e || T(t, 2, this.length);
          var n = this[t] | (this[t + 1] << 8);
          return 32768 & n ? 4294901760 | n : n;
        }),
        (u.prototype.readInt16BE = function (t, e) {
          e || T(t, 2, this.length);
          var n = this[t + 1] | (this[t] << 8);
          return 32768 & n ? 4294901760 | n : n;
        }),
        (u.prototype.readInt32LE = function (t, e) {
          return (
            e || T(t, 4, this.length),
            this[t] |
              (this[t + 1] << 8) |
              (this[t + 2] << 16) |
              (this[t + 3] << 24)
          );
        }),
        (u.prototype.readInt32BE = function (t, e) {
          return (
            e || T(t, 4, this.length),
            (this[t] << 24) |
              (this[t + 1] << 16) |
              (this[t + 2] << 8) |
              this[t + 3]
          );
        }),
        (u.prototype.readFloatLE = function (t, e) {
          return e || T(t, 4, this.length), a.read(this, t, !0, 23, 4);
        }),
        (u.prototype.readFloatBE = function (t, e) {
          return e || T(t, 4, this.length), a.read(this, t, !1, 23, 4);
        }),
        (u.prototype.readDoubleLE = function (t, e) {
          return e || T(t, 8, this.length), a.read(this, t, !0, 52, 8);
        }),
        (u.prototype.readDoubleBE = function (t, e) {
          return e || T(t, 8, this.length), a.read(this, t, !1, 52, 8);
        }),
        (u.prototype.writeUIntLE = function (t, e, n, r) {
          ((t = +t), (e |= 0), (n |= 0), r) ||
            _(this, t, e, n, Math.pow(2, 8 * n) - 1, 0);
          var a = 1,
            i = 0;
          for (this[e] = 255 & t; ++i < n && (a *= 256); )
            this[e + i] = (t / a) & 255;
          return e + n;
        }),
        (u.prototype.writeUIntBE = function (t, e, n, r) {
          ((t = +t), (e |= 0), (n |= 0), r) ||
            _(this, t, e, n, Math.pow(2, 8 * n) - 1, 0);
          var a = n - 1,
            i = 1;
          for (this[e + a] = 255 & t; --a >= 0 && (i *= 256); )
            this[e + a] = (t / i) & 255;
          return e + n;
        }),
        (u.prototype.writeUInt8 = function (t, e, n) {
          return (
            (t = +t),
            (e |= 0),
            n || _(this, t, e, 1, 255, 0),
            u.TYPED_ARRAY_SUPPORT || (t = Math.floor(t)),
            (this[e] = 255 & t),
            e + 1
          );
        }),
        (u.prototype.writeUInt16LE = function (t, e, n) {
          return (
            (t = +t),
            (e |= 0),
            n || _(this, t, e, 2, 65535, 0),
            u.TYPED_ARRAY_SUPPORT
              ? ((this[e] = 255 & t), (this[e + 1] = t >>> 8))
              : D(this, t, e, !0),
            e + 2
          );
        }),
        (u.prototype.writeUInt16BE = function (t, e, n) {
          return (
            (t = +t),
            (e |= 0),
            n || _(this, t, e, 2, 65535, 0),
            u.TYPED_ARRAY_SUPPORT
              ? ((this[e] = t >>> 8), (this[e + 1] = 255 & t))
              : D(this, t, e, !1),
            e + 2
          );
        }),
        (u.prototype.writeUInt32LE = function (t, e, n) {
          return (
            (t = +t),
            (e |= 0),
            n || _(this, t, e, 4, 4294967295, 0),
            u.TYPED_ARRAY_SUPPORT
              ? ((this[e + 3] = t >>> 24),
                (this[e + 2] = t >>> 16),
                (this[e + 1] = t >>> 8),
                (this[e] = 255 & t))
              : F(this, t, e, !0),
            e + 4
          );
        }),
        (u.prototype.writeUInt32BE = function (t, e, n) {
          return (
            (t = +t),
            (e |= 0),
            n || _(this, t, e, 4, 4294967295, 0),
            u.TYPED_ARRAY_SUPPORT
              ? ((this[e] = t >>> 24),
                (this[e + 1] = t >>> 16),
                (this[e + 2] = t >>> 8),
                (this[e + 3] = 255 & t))
              : F(this, t, e, !1),
            e + 4
          );
        }),
        (u.prototype.writeIntLE = function (t, e, n, r) {
          if (((t = +t), (e |= 0), !r)) {
            var a = Math.pow(2, 8 * n - 1);
            _(this, t, e, n, a - 1, -a);
          }
          var i = 0,
            o = 1,
            s = 0;
          for (this[e] = 255 & t; ++i < n && (o *= 256); )
            t < 0 && 0 === s && 0 !== this[e + i - 1] && (s = 1),
              (this[e + i] = (((t / o) >> 0) - s) & 255);
          return e + n;
        }),
        (u.prototype.writeIntBE = function (t, e, n, r) {
          if (((t = +t), (e |= 0), !r)) {
            var a = Math.pow(2, 8 * n - 1);
            _(this, t, e, n, a - 1, -a);
          }
          var i = n - 1,
            o = 1,
            s = 0;
          for (this[e + i] = 255 & t; --i >= 0 && (o *= 256); )
            t < 0 && 0 === s && 0 !== this[e + i + 1] && (s = 1),
              (this[e + i] = (((t / o) >> 0) - s) & 255);
          return e + n;
        }),
        (u.prototype.writeInt8 = function (t, e, n) {
          return (
            (t = +t),
            (e |= 0),
            n || _(this, t, e, 1, 127, -128),
            u.TYPED_ARRAY_SUPPORT || (t = Math.floor(t)),
            t < 0 && (t = 255 + t + 1),
            (this[e] = 255 & t),
            e + 1
          );
        }),
        (u.prototype.writeInt16LE = function (t, e, n) {
          return (
            (t = +t),
            (e |= 0),
            n || _(this, t, e, 2, 32767, -32768),
            u.TYPED_ARRAY_SUPPORT
              ? ((this[e] = 255 & t), (this[e + 1] = t >>> 8))
              : D(this, t, e, !0),
            e + 2
          );
        }),
        (u.prototype.writeInt16BE = function (t, e, n) {
          return (
            (t = +t),
            (e |= 0),
            n || _(this, t, e, 2, 32767, -32768),
            u.TYPED_ARRAY_SUPPORT
              ? ((this[e] = t >>> 8), (this[e + 1] = 255 & t))
              : D(this, t, e, !1),
            e + 2
          );
        }),
        (u.prototype.writeInt32LE = function (t, e, n) {
          return (
            (t = +t),
            (e |= 0),
            n || _(this, t, e, 4, 2147483647, -2147483648),
            u.TYPED_ARRAY_SUPPORT
              ? ((this[e] = 255 & t),
                (this[e + 1] = t >>> 8),
                (this[e + 2] = t >>> 16),
                (this[e + 3] = t >>> 24))
              : F(this, t, e, !0),
            e + 4
          );
        }),
        (u.prototype.writeInt32BE = function (t, e, n) {
          return (
            (t = +t),
            (e |= 0),
            n || _(this, t, e, 4, 2147483647, -2147483648),
            t < 0 && (t = 4294967295 + t + 1),
            u.TYPED_ARRAY_SUPPORT
              ? ((this[e] = t >>> 24),
                (this[e + 1] = t >>> 16),
                (this[e + 2] = t >>> 8),
                (this[e + 3] = 255 & t))
              : F(this, t, e, !1),
            e + 4
          );
        }),
        (u.prototype.writeFloatLE = function (t, e, n) {
          return j(this, t, e, !0, n);
        }),
        (u.prototype.writeFloatBE = function (t, e, n) {
          return j(this, t, e, !1, n);
        }),
        (u.prototype.writeDoubleLE = function (t, e, n) {
          return $(this, t, e, !0, n);
        }),
        (u.prototype.writeDoubleBE = function (t, e, n) {
          return $(this, t, e, !1, n);
        }),
        (u.prototype.copy = function (t, e, n, r) {
          if (
            (n || (n = 0),
            r || 0 === r || (r = this.length),
            e >= t.length && (e = t.length),
            e || (e = 0),
            r > 0 && r < n && (r = n),
            r === n)
          )
            return 0;
          if (0 === t.length || 0 === this.length) return 0;
          if (e < 0) throw new RangeError("targetStart out of bounds");
          if (n < 0 || n >= this.length)
            throw new RangeError("sourceStart out of bounds");
          if (r < 0) throw new RangeError("sourceEnd out of bounds");
          r > this.length && (r = this.length),
            t.length - e < r - n && (r = t.length - e + n);
          var a,
            i = r - n;
          if (this === t && n < e && e < r)
            for (a = i - 1; a >= 0; --a) t[a + e] = this[a + n];
          else if (i < 1e3 || !u.TYPED_ARRAY_SUPPORT)
            for (a = 0; a < i; ++a) t[a + e] = this[a + n];
          else Uint8Array.prototype.set.call(t, this.subarray(n, n + i), e);
          return i;
        }),
        (u.prototype.fill = function (t, e, n, r) {
          if ("string" == typeof t) {
            if (
              ("string" == typeof e
                ? ((r = e), (e = 0), (n = this.length))
                : "string" == typeof n && ((r = n), (n = this.length)),
              1 === t.length)
            ) {
              var a = t.charCodeAt(0);
              a < 256 && (t = a);
            }
            if (void 0 !== r && "string" != typeof r)
              throw new TypeError("encoding must be a string");
            if ("string" == typeof r && !u.isEncoding(r))
              throw new TypeError("Unknown encoding: " + r);
          } else "number" == typeof t && (t &= 255);
          if (e < 0 || this.length < e || this.length < n)
            throw new RangeError("Out of range index");
          if (n <= e) return this;
          var i;
          if (
            ((e >>>= 0),
            (n = void 0 === n ? this.length : n >>> 0),
            t || (t = 0),
            "number" == typeof t)
          )
            for (i = e; i < n; ++i) this[i] = t;
          else {
            var o = u.isBuffer(t) ? t : L(new u(t, r).toString()),
              s = o.length;
            for (i = 0; i < n - e; ++i) this[i + e] = o[i % s];
          }
          return this;
        });
      var B = /[^+\/0-9A-Za-z-_]/g;
      function P(t) {
        return t < 16 ? "0" + t.toString(16) : t.toString(16);
      }
      function L(t, e) {
        var n;
        e = e || 1 / 0;
        for (var r = t.length, a = null, i = [], o = 0; o < r; ++o) {
          if ((n = t.charCodeAt(o)) > 55295 && n < 57344) {
            if (!a) {
              if (n > 56319) {
                (e -= 3) > -1 && i.push(239, 191, 189);
                continue;
              }
              if (o + 1 === r) {
                (e -= 3) > -1 && i.push(239, 191, 189);
                continue;
              }
              a = n;
              continue;
            }
            if (n < 56320) {
              (e -= 3) > -1 && i.push(239, 191, 189), (a = n);
              continue;
            }
            n = 65536 + (((a - 55296) << 10) | (n - 56320));
          } else a && (e -= 3) > -1 && i.push(239, 191, 189);
          if (((a = null), n < 128)) {
            if ((e -= 1) < 0) break;
            i.push(n);
          } else if (n < 2048) {
            if ((e -= 2) < 0) break;
            i.push((n >> 6) | 192, (63 & n) | 128);
          } else if (n < 65536) {
            if ((e -= 3) < 0) break;
            i.push((n >> 12) | 224, ((n >> 6) & 63) | 128, (63 & n) | 128);
          } else {
            if (!(n < 1114112)) throw new Error("Invalid code point");
            if ((e -= 4) < 0) break;
            i.push(
              (n >> 18) | 240,
              ((n >> 12) & 63) | 128,
              ((n >> 6) & 63) | 128,
              (63 & n) | 128
            );
          }
        }
        return i;
      }
      function z(t) {
        return r.toByteArray(
          (function (t) {
            if (
              (t = (function (t) {
                return t.trim ? t.trim() : t.replace(/^\s+|\s+$/g, "");
              })(t).replace(B, "")).length < 2
            )
              return "";
            for (; t.length % 4 != 0; ) t += "=";
            return t;
          })(t)
        );
      }
      function W(t, e, n, r) {
        for (var a = 0; a < r && !(a + n >= e.length || a >= t.length); ++a)
          e[a + n] = t[a];
        return a;
      }
    }.call(this, n(24)));
  },
  function (t, e, n) {
    "use strict";
    function r() {
      if ("undefined" != typeof navigator && null != navigator) {
        const t = navigator.userAgent || navigator.vendor || window.opera;
        return (
          /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(
            t
          ) ||
          /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(
            t.substr(0, 4)
          )
        );
      }
      return !1;
    }
    function a() {
      return (
        ("undefined" != typeof window && null != window.document) ||
        "undefined" != typeof WorkerGlobalScope
      );
    }
    n.r(e),
      n.d(e, "isMobile", function () {
        return r;
      }),
      n.d(e, "isBrowser", function () {
        return a;
      });
  },
  function (t, e, n) {
    "use strict";
    function r(t) {
      var e = "";
      if (!t)
        try {
          t = n(66);
        } catch (t) {
          e = t.toString();
        }
      return {
        readFile: t
          ? function (e) {
              return new Promise(function (n, r) {
                t.readFile(e, function (t, e) {
                  return t ? r(t) : n(e);
                });
              });
            }
          : function () {
              throw new Error(
                "readFile - failed to require fs in nodejs environment with error: " +
                  e
              );
            },
      };
    }
    n.d(e, "a", function () {
      return r;
    });
  },
  function (t, e, n) {
    "use strict";
    (function (t) {
      n.d(e, "a", function () {
        return i;
      });
      var r = n(7),
        a = n(34);
      function i() {
        var e = t.Canvas || t.HTMLCanvasElement,
          n = t.Image || t.HTMLImageElement,
          i =
            t.fetch ||
            function () {
              throw new Error(
                "fetch - missing fetch implementation for nodejs environment"
              );
            },
          o = Object(a.a)();
        return Object(r.a)(
          {
            Canvas: e || function () {},
            CanvasRenderingContext2D:
              t.CanvasRenderingContext2D || function () {},
            Image: n || function () {},
            ImageData: t.ImageData || function () {},
            Video: t.HTMLVideoElement || function () {},
            createCanvasElement: function () {
              if (e) return new e();
              throw new Error(
                "createCanvasElement - missing Canvas implementation for nodejs environment"
              );
            },
            createImageElement: function () {
              if (n) return new n();
              throw new Error(
                "createImageElement - missing Image implementation for nodejs environment"
              );
            },
            fetch: i,
          },
          o
        );
      }
    }.call(this, n(24)));
  },
  function (t, e, n) {
    "use strict";
    (function (r, a) {
      function i() {
        return (
          "object" == typeof r && void 0 !== t && void 0 !== a && !!a.version
        );
      }
      n.d(e, "a", function () {
        return i;
      });
    }.call(this, n(24), n(27)));
  },
  function (t, e, n) {
    (function (t) {
      var r =
          (void 0 !== t && t) || ("undefined" != typeof self && self) || window,
        a = Function.prototype.apply;
      function i(t, e) {
        (this._id = t), (this._clearFn = e);
      }
      (e.setTimeout = function () {
        return new i(a.call(setTimeout, r, arguments), clearTimeout);
      }),
        (e.setInterval = function () {
          return new i(a.call(setInterval, r, arguments), clearInterval);
        }),
        (e.clearTimeout = e.clearInterval = function (t) {
          t && t.close();
        }),
        (i.prototype.unref = i.prototype.ref = function () {}),
        (i.prototype.close = function () {
          this._clearFn.call(r, this._id);
        }),
        (e.enroll = function (t, e) {
          clearTimeout(t._idleTimeoutId), (t._idleTimeout = e);
        }),
        (e.unenroll = function (t) {
          clearTimeout(t._idleTimeoutId), (t._idleTimeout = -1);
        }),
        (e._unrefActive = e.active = function (t) {
          clearTimeout(t._idleTimeoutId);
          var e = t._idleTimeout;
          e >= 0 &&
            (t._idleTimeoutId = setTimeout(function () {
              t._onTimeout && t._onTimeout();
            }, e));
        }),
        n(62),
        (e.setImmediate =
          ("undefined" != typeof self && self.setImmediate) ||
          (void 0 !== t && t.setImmediate) ||
          (this && this.setImmediate)),
        (e.clearImmediate =
          ("undefined" != typeof self && self.clearImmediate) ||
          (void 0 !== t && t.clearImmediate) ||
          (this && this.clearImmediate));
    }.call(this, n(24)));
  },
  function (t, e, n) {
    "use strict";
    (function (t) {
      n.d(e, "a", function () {
        return a;
      });
      /**
       * @license
       * Copyright 2017 Google Inc. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      const r =
        "undefined" != typeof requestAnimationFrame
          ? requestAnimationFrame
          : void 0 !== t
          ? t
          : (t) => t();
      function a() {
        return new Promise((t) => r(() => t()));
      }
    }.call(this, n(37).setImmediate));
  },
  function (t, e, n) {
    const r = n(58);
    (e.parseFont = r),
      (e.createCanvas = function (t, e) {
        return Object.assign(document.createElement("canvas"), {
          width: t,
          height: e,
        });
      }),
      (e.createImageData = function (t, e, n) {
        switch (arguments.length) {
          case 0:
            return new ImageData();
          case 1:
            return new ImageData(t);
          case 2:
            return new ImageData(t, e);
          default:
            return new ImageData(t, e, n);
        }
      }),
      (e.loadImage = function (t, e) {
        return new Promise(function (n, r) {
          const a = Object.assign(document.createElement("img"), e);
          function i() {
            (a.onload = null), (a.onerror = null);
          }
          (a.onload = function () {
            i(), n(a);
          }),
            (a.onerror = function () {
              i(), r(new Error('Failed to load the image "' + t + '"'));
            }),
            (a.src = t);
        });
      });
  },
  function (t, e, n) {
    "use strict";
    n.r(e),
      n.d(e, "json", function () {
        return r;
      });
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const r = [
      {
        tfOpName: "Add",
        category: "arithmetic",
        inputs: [
          { start: 0, name: "a", type: "tensor" },
          { start: 1, name: "b", type: "tensor" },
        ],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "AddV2",
        category: "arithmetic",
        inputs: [
          { start: 0, name: "a", type: "tensor" },
          { start: 1, name: "b", type: "tensor" },
        ],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "AddN",
        category: "arithmetic",
        inputs: [{ start: 0, end: 0, name: "tensors", type: "tensors" }],
      },
      {
        tfOpName: "BiasAdd",
        category: "arithmetic",
        inputs: [
          { start: 0, name: "a", type: "tensor" },
          { start: 1, name: "b", type: "tensor" },
        ],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Sub",
        category: "arithmetic",
        inputs: [
          { start: 0, name: "a", type: "tensor" },
          { start: 1, name: "b", type: "tensor" },
        ],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "RealDiv",
        category: "arithmetic",
        inputs: [
          { start: 0, name: "a", type: "tensor" },
          { start: 1, name: "b", type: "tensor" },
        ],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Div",
        category: "arithmetic",
        inputs: [
          { start: 0, name: "a", type: "tensor" },
          { start: 1, name: "b", type: "tensor" },
        ],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "DivNoNan",
        category: "arithmetic",
        inputs: [
          { start: 0, name: "a", type: "tensor" },
          { start: 1, name: "b", type: "tensor" },
        ],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "FloorDiv",
        category: "arithmetic",
        inputs: [
          { start: 0, name: "a", type: "tensor" },
          { start: 1, name: "b", type: "tensor" },
        ],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Mul",
        category: "arithmetic",
        inputs: [
          { start: 0, name: "a", type: "tensor" },
          { start: 1, name: "b", type: "tensor" },
        ],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Maximum",
        category: "arithmetic",
        inputs: [
          { start: 0, name: "a", type: "tensor" },
          { start: 1, name: "b", type: "tensor" },
        ],
      },
      {
        tfOpName: "Minimum",
        category: "arithmetic",
        inputs: [
          { start: 0, name: "a", type: "tensor" },
          { start: 1, name: "b", type: "tensor" },
        ],
      },
      {
        tfOpName: "Pow",
        category: "arithmetic",
        inputs: [
          { start: 0, name: "a", type: "tensor" },
          { start: 1, name: "b", type: "tensor" },
        ],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "SquaredDifference",
        category: "arithmetic",
        inputs: [
          { start: 0, name: "a", type: "tensor" },
          { start: 1, name: "b", type: "tensor" },
        ],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Mod",
        category: "arithmetic",
        inputs: [
          { start: 0, name: "a", type: "tensor" },
          { start: 1, name: "b", type: "tensor" },
        ],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "FloorMod",
        category: "arithmetic",
        inputs: [
          { start: 0, name: "a", type: "tensor" },
          { start: 1, name: "b", type: "tensor" },
        ],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
    ];
  },
  function (t, e, n) {
    "use strict";
    n.r(e),
      n.d(e, "json", function () {
        return r;
      });
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const r = [
      {
        tfOpName: "Abs",
        category: "basic_math",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Acos",
        category: "basic_math",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Asin",
        category: "basic_math",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Atan",
        category: "basic_math",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Atan2",
        category: "basic_math",
        inputs: [
          { start: 0, name: "x", type: "tensor" },
          { start: 1, name: "y", type: "tensor" },
        ],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Ceil",
        category: "basic_math",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "ClipByValue",
        category: "basic_math",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "clip_value_min", name: "clipValueMin", type: "number" },
          { tfName: "clip_value_max", name: "clipValueMax", type: "number" },
        ],
      },
      {
        tfOpName: "Complex",
        category: "basic_math",
        inputs: [
          { start: 0, name: "real", type: "tensor" },
          { start: 1, name: "imag", type: "tensor" },
        ],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "ComplexAbs",
        category: "basic_math",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Cos",
        category: "basic_math",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Cosh",
        category: "basic_math",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Elu",
        category: "basic_math",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Exp",
        category: "basic_math",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Floor",
        category: "basic_math",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Log",
        category: "basic_math",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Imag",
        category: "basic_math",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
          {
            tfName: "Tout",
            name: "outputType",
            type: "dtype",
            notSupported: !0,
          },
        ],
      },
      {
        tfOpName: "Neg",
        category: "basic_math",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Real",
        category: "basic_math",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
          {
            tfName: "Tout",
            name: "outputType",
            type: "dtype",
            notSupported: !0,
          },
        ],
      },
      {
        tfOpName: "Prelu",
        category: "basic_math",
        inputs: [
          { start: 0, name: "x", type: "tensor" },
          { start: 1, name: "alpha", type: "tensor" },
        ],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Relu",
        category: "basic_math",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Relu6",
        category: "basic_math",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
          {
            tfName: "clipValueMin",
            name: "clipValueMin",
            type: "number",
            defaultValue: 0,
          },
          {
            tfName: "clipValueMax",
            name: "clipValueMax",
            type: "number",
            defaultValue: 6,
          },
        ],
      },
      {
        tfOpName: "Selu",
        category: "basic_math",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Sigmoid",
        category: "basic_math",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Sin",
        category: "basic_math",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Sinh",
        category: "basic_math",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Sqrt",
        category: "basic_math",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Rsqrt",
        category: "basic_math",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Square",
        category: "basic_math",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Tan",
        category: "basic_math",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Tanh",
        category: "basic_math",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Sign",
        category: "basic_math",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Round",
        category: "basic_math",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Expm1",
        category: "basic_math",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Log1p",
        category: "basic_math",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Reciprocal",
        category: "basic_math",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Softplus",
        category: "basic_math",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Asinh",
        category: "basic_math",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Acosh",
        category: "basic_math",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Atanh",
        category: "basic_math",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Erf",
        category: "basic_math",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Prod",
        category: "basic_math",
        inputs: [
          { start: 0, name: "x", type: "tensor" },
          { start: 1, name: "axes", type: "number[]" },
        ],
        attrs: [
          {
            tfName: "keep_dims",
            name: "keepDims",
            type: "bool",
            notSupported: !0,
          },
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "LeakyRelu",
        category: "basic_math",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "alpha", name: "alpha", type: "number", defaultValue: 0.2 },
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
    ];
  },
  function (t, e, n) {
    "use strict";
    n.r(e),
      n.d(e, "json", function () {
        return r;
      });
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const r = [
      {
        tfOpName: "LoopCond",
        category: "control",
        inputs: [{ start: 0, name: "pred", type: "tensor" }],
      },
      {
        tfOpName: "Switch",
        category: "control",
        inputs: [
          { start: 0, name: "data", type: "tensor" },
          { start: 1, name: "pred", type: "tensor" },
        ],
      },
      {
        tfOpName: "Merge",
        category: "control",
        inputs: [{ start: 0, end: 0, name: "tensors", type: "tensors" }],
      },
      {
        tfOpName: "Enter",
        category: "control",
        inputs: [{ start: 0, name: "tensor", type: "tensor" }],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
          { tfName: "frame_name", name: "frameName", type: "string" },
          { tfName: "is_constant", name: "isConstant", type: "bool" },
        ],
      },
      {
        tfOpName: "Exit",
        category: "control",
        inputs: [{ start: 0, name: "tensor", type: "tensor" }],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "NextIteration",
        category: "control",
        inputs: [{ start: 0, name: "tensor", type: "tensor" }],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "TensorArrayV3",
        category: "control",
        inputs: [{ start: 0, name: "size", type: "number" }],
        attrs: [
          { tfName: "dtype", name: "dtype", type: "dtype" },
          { tfName: "element_shape", name: "elementShape", type: "shape" },
          { tfName: "dynamic_size", name: "dynamicSize", type: "bool" },
          { tfName: "clear_after_read", name: "clearAfterRead", type: "bool" },
          {
            tfName: "identical_element_shapes",
            name: "identicalElementShapes",
            type: "bool",
          },
          { tfName: "tensor_array_name", name: "name", type: "string" },
        ],
      },
      {
        tfOpName: "TensorArrayWriteV3",
        category: "control",
        inputs: [
          { start: 0, name: "tensorArrayId", type: "number" },
          { start: 1, name: "index", type: "number" },
          { start: 2, name: "tensor", type: "tensor" },
          { start: 3, name: "flowIn", type: "number" },
        ],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "TensorArrayReadV3",
        category: "control",
        inputs: [
          { start: 0, name: "tensorArrayId", type: "number" },
          { start: 1, name: "index", type: "number" },
          { start: 2, name: "flowIn", type: "number" },
        ],
        attrs: [
          { tfName: "dtype", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "TensorArrayGatherV3",
        category: "control",
        inputs: [
          { start: 0, name: "tensorArrayId", type: "number" },
          { start: 1, name: "indices", type: "number[]" },
          { start: 2, name: "flowIn", type: "number" },
        ],
        attrs: [
          { tfName: "dtype", name: "dtype", type: "dtype" },
          { tfName: "element_shape", name: "elementShape", type: "shape" },
        ],
      },
      {
        tfOpName: "TensorArrayScatterV3",
        category: "control",
        inputs: [
          { start: 0, name: "tensorArrayId", type: "number" },
          { start: 1, name: "indices", type: "number[]" },
          { start: 2, name: "tensor", type: "tensor" },
          { start: 3, name: "flowIn", type: "number" },
        ],
        attrs: [{ tfName: "T", name: "dtype", type: "dtype" }],
      },
      {
        tfOpName: "TensorArrayConcatV3",
        category: "control",
        inputs: [
          { start: 0, name: "tensorArrayId", type: "number" },
          { start: 1, name: "flowIn", type: "number" },
        ],
        attrs: [
          { tfName: "dtype", name: "dtype", type: "dtype" },
          {
            tfName: "element_shape_except0",
            name: "elementShapeExcept0",
            type: "shape",
            notSupported: !0,
          },
        ],
      },
      {
        tfOpName: "TensorArraySplitV3",
        category: "control",
        inputs: [
          { start: 0, name: "tensorArrayId", type: "number" },
          { start: 1, name: "tensor", type: "tensor" },
          { start: 2, name: "lengths", type: "number[]" },
          { start: 3, name: "flowIn", type: "number" },
        ],
        attrs: [{ tfName: "T", name: "dtype", type: "dtype" }],
      },
      {
        tfOpName: "TensorArraySizeV3",
        category: "control",
        inputs: [
          { start: 0, name: "tensorArrayId", type: "number" },
          { start: 1, name: "flowIn", type: "number" },
        ],
      },
      {
        tfOpName: "TensorArrayCloseV3",
        category: "control",
        inputs: [{ start: 0, name: "tensorArrayId", type: "number" }],
      },
      {
        tfOpName: "StatelessIf",
        category: "control",
        inputs: [
          { start: 0, name: "cond", type: "tensor" },
          { start: 1, end: 0, name: "args", type: "tensors" },
        ],
        attrs: [
          { tfName: "then_branch", name: "thenBranch", type: "func" },
          { tfName: "else_branch", name: "elseBranch", type: "func" },
        ],
      },
      {
        tfOpName: "If",
        category: "control",
        inputs: [
          { start: 0, name: "cond", type: "tensor" },
          { start: 1, end: 0, name: "args", type: "tensors" },
        ],
        attrs: [
          { tfName: "then_branch", name: "thenBranch", type: "func" },
          { tfName: "else_branch", name: "elseBranch", type: "func" },
        ],
      },
      {
        tfOpName: "StatelessWhile",
        category: "control",
        inputs: [{ start: 0, end: 0, name: "args", type: "tensors" }],
        attrs: [
          { tfName: "cond", name: "cond", type: "func" },
          { tfName: "body", name: "body", type: "func" },
        ],
      },
      {
        tfOpName: "While",
        category: "control",
        inputs: [{ start: 0, end: 0, name: "args", type: "tensors" }],
        attrs: [
          { tfName: "cond", name: "cond", type: "func" },
          { tfName: "body", name: "body", type: "func" },
        ],
      },
    ];
  },
  function (t, e, n) {
    "use strict";
    n.r(e),
      n.d(e, "json", function () {
        return r;
      });
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const r = [
      {
        tfOpName: "AvgPool",
        category: "convolution",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "strides", name: "strides", type: "number[]" },
          { tfName: "padding", name: "pad", type: "string" },
          {
            tfName: "data_format",
            name: "dataFormat",
            type: "string",
            notSupported: !0,
          },
          { tfName: "ksize", name: "kernelSize", type: "number[]" },
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "MaxPool",
        category: "convolution",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "strides", name: "strides", type: "number[]" },
          { tfName: "padding", name: "pad", type: "string" },
          {
            tfName: "data_format",
            name: "dataFormat",
            type: "string",
            notSupported: !0,
          },
          { tfName: "ksize", name: "kernelSize", type: "number[]" },
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "MaxPoolWithArgmax",
        category: "convolution",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "strides", name: "strides", type: "number[]" },
          { tfName: "padding", name: "pad", type: "string" },
          { tfName: "ksize", name: "kernelSize", type: "number[]" },
          {
            tfName: "include_batch_in_index",
            name: "includeBatchInIndex",
            type: "bool",
          },
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "AvgPool3D",
        category: "convolution",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "strides", name: "strides", type: "number[]" },
          { tfName: "padding", name: "pad", type: "string" },
          {
            tfName: "data_format",
            name: "dataFormat",
            type: "string",
            notSupported: !0,
          },
          { tfName: "ksize", name: "kernelSize", type: "number[]" },
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "MaxPool3D",
        category: "convolution",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "strides", name: "strides", type: "number[]" },
          { tfName: "padding", name: "pad", type: "string" },
          {
            tfName: "data_format",
            name: "dataFormat",
            type: "string",
            notSupported: !0,
          },
          { tfName: "ksize", name: "kernelSize", type: "number[]" },
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Conv1D",
        category: "convolution",
        inputs: [
          { start: 0, name: "x", type: "tensor" },
          { start: 1, name: "filter", type: "tensor" },
        ],
        attrs: [
          { tfName: "stride", name: "stride", type: "number" },
          { tfName: "padding", name: "pad", type: "string" },
          {
            tfName: "data_format",
            name: "dataFormat",
            type: "string",
            defaultValue: "NWC",
          },
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
          {
            tfName: "dilation",
            name: "dilation",
            type: "number",
            defaultValue: 1,
          },
        ],
      },
      {
        tfOpName: "Conv2D",
        category: "convolution",
        inputs: [
          { start: 0, name: "x", type: "tensor" },
          { start: 1, name: "filter", type: "tensor" },
        ],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
          { tfName: "strides", name: "strides", type: "number[]" },
          { tfName: "padding", name: "pad", type: "string" },
          { tfName: "useCudnnOnGpu", name: "useCudnnOnGpu", type: "bool" },
          {
            tfName: "data_format",
            name: "dataFormat",
            type: "string",
            defaultValue: "NHWC",
          },
          {
            tfName: "explicit_paddings",
            name: "explicitPaddings",
            type: "number[]",
            defaultValue: [],
          },
          { tfName: "dilations", name: "dilations", type: "number[]" },
        ],
      },
      {
        tfOpName: "_FusedConv2D",
        category: "convolution",
        inputs: [
          { start: 0, name: "x", type: "tensor" },
          { start: 1, name: "filter", type: "tensor" },
          { start: 2, end: 0, name: "args", type: "tensors" },
        ],
        attrs: [
          { tfName: "num_args", name: "numArgs", type: "number" },
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
          { tfName: "strides", name: "strides", type: "number[]" },
          { tfName: "padding", name: "pad", type: "string" },
          {
            tfName: "explicit_paddings",
            name: "explicitPaddings",
            type: "number[]",
            defaultValue: [],
          },
          {
            tfName: "use_cudnn_on_gpu",
            name: "useCudnnOnGpu",
            type: "bool",
            defaultValue: !0,
          },
          {
            tfName: "data_format",
            name: "dataFormat",
            type: "string",
            defaultValue: "NHWC",
          },
          {
            tfName: "dilations",
            name: "dilations",
            type: "number[]",
            defaultValue: [1, 1, 1, 1],
          },
          {
            tfName: "fused_ops",
            name: "fusedOps",
            type: "string[]",
            defaultValue: [],
          },
          {
            tfName: "epsilon",
            name: "epsilon",
            type: "number",
            defaultValue: 1e-4,
          },
        ],
      },
      {
        tfOpName: "Conv2DBackpropInput",
        category: "convolution",
        inputs: [
          { start: 2, name: "x", type: "tensor" },
          { start: 1, name: "filter", type: "tensor" },
          { start: 0, name: "outputShape", type: "number[]" },
        ],
        attrs: [
          { tfName: "strides", name: "strides", type: "number[]" },
          { tfName: "padding", name: "pad", type: "string" },
          {
            tfName: "data_format",
            name: "dataFormat",
            type: "string",
            notSupported: !0,
          },
          {
            tfName: "explicit_paddings",
            name: "explicitPaddings",
            type: "number[]",
            defaultValue: [],
          },
        ],
      },
      {
        tfOpName: "DepthwiseConv2d",
        category: "convolution",
        inputs: [
          { start: 0, name: "input", type: "tensor" },
          { start: 1, name: "filter", type: "tensor" },
        ],
        attrs: [
          { tfName: "strides", name: "strides", type: "number[]" },
          { tfName: "padding", name: "pad", type: "string" },
          {
            tfName: "data_format",
            name: "dataFormat",
            type: "string",
            defaultValue: "NHWC",
          },
          {
            tfName: "explicit_paddings",
            name: "explicitPaddings",
            type: "number[]",
            defaultValue: [],
          },
          { tfName: "dilations", name: "dilations", type: "number[]" },
        ],
      },
      {
        tfOpName: "DepthwiseConv2dNative",
        category: "convolution",
        inputs: [
          { start: 0, name: "input", type: "tensor" },
          { start: 1, name: "filter", type: "tensor" },
        ],
        attrs: [
          { tfName: "strides", name: "strides", type: "number[]" },
          { tfName: "padding", name: "pad", type: "string" },
          {
            tfName: "data_format",
            name: "dataFormat",
            type: "string",
            defaultValue: "NHWC",
          },
          {
            tfName: "explicit_paddings",
            name: "explicitPaddings",
            type: "number[]",
            defaultValue: [],
          },
          { tfName: "dilations", name: "dilations", type: "number[]" },
        ],
      },
      {
        tfOpName: "FusedDepthwiseConv2dNative",
        category: "convolution",
        inputs: [
          { start: 0, name: "x", type: "tensor" },
          { start: 1, name: "filter", type: "tensor" },
          { start: 2, end: 0, name: "args", type: "tensors" },
        ],
        attrs: [
          { tfName: "num_args", name: "numArgs", type: "number" },
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
          { tfName: "strides", name: "strides", type: "number[]" },
          { tfName: "padding", name: "pad", type: "string" },
          {
            tfName: "data_format",
            name: "dataFormat",
            type: "string",
            defaultValue: "NHWC",
          },
          {
            tfName: "dilations",
            name: "dilations",
            type: "number[]",
            defaultValue: [1, 1, 1, 1],
          },
          {
            tfName: "fused_ops",
            name: "fusedOps",
            type: "string[]",
            defaultValue: [],
          },
        ],
      },
      {
        tfOpName: "Conv3D",
        category: "convolution",
        inputs: [
          { start: 0, name: "x", type: "tensor" },
          { start: 1, name: "filter", type: "tensor" },
        ],
        attrs: [
          { tfName: "strides", name: "strides", type: "number[]" },
          { tfName: "padding", name: "pad", type: "string" },
          {
            tfName: "data_format",
            name: "dataFormat",
            type: "string",
            defaultValue: "NHWC",
          },
          { tfName: "dilations", name: "dilations", type: "number[]" },
        ],
      },
    ];
  },
  function (t, e, n) {
    "use strict";
    n.r(e),
      n.d(e, "json", function () {
        return r;
      });
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const r = [
      {
        tfOpName: "Fill",
        category: "creation",
        inputs: [
          { start: 0, name: "shape", type: "number[]" },
          { start: 1, name: "value", type: "number" },
        ],
        attrs: [{ tfName: "T", name: "dtype", type: "dtype" }],
      },
      {
        tfOpName: "LinSpace",
        category: "creation",
        inputs: [
          { start: 0, name: "start", type: "number" },
          { start: 1, name: "stop", type: "number" },
          { start: 2, name: "num", type: "number" },
        ],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "OneHot",
        category: "creation",
        inputs: [
          { start: 0, name: "indices", type: "tensor" },
          { start: 1, name: "depth", type: "number" },
          { start: 2, name: "onValue", type: "number", defaultValue: 1 },
          { start: 3, name: "offValue", type: "number", defaultValue: 0 },
        ],
        attrs: [
          { tfName: "axis", name: "axis", type: "number", notSupported: !0 },
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Ones",
        category: "creation",
        inputs: [{ start: 0, name: "shape", type: "number[]" }],
        attrs: [{ tfName: "T", name: "dtype", type: "dtype" }],
      },
      {
        tfOpName: "OnesLike",
        category: "creation",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [{ tfName: "dtype", name: "dtype", type: "dtype" }],
      },
      {
        tfOpName: "RandomUniform",
        category: "creation",
        inputs: [{ start: 0, name: "shape", type: "number[]" }],
        attrs: [
          { tfName: "minval", name: "minval", type: "number", defaultValue: 0 },
          { tfName: "maxval", name: "maxval", type: "number", defaultValue: 1 },
          { tfName: "dtype", name: "dtype", type: "dtype" },
          { tfName: "seed", name: "seed", type: "number", defaultValue: 0 },
          {
            tfName: "seed2",
            name: "seed2",
            type: "number",
            defaultValue: 0,
            notSupported: !0,
          },
          { tfName: "T", name: "T", type: "number", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Range",
        category: "creation",
        inputs: [
          { start: 0, name: "start", type: "number" },
          { start: 1, name: "stop", type: "number" },
          { start: 2, name: "step", type: "number", defaultValue: 0 },
        ],
        attrs: [{ tfName: "Tidx", name: "dtype", type: "dtype" }],
      },
      {
        tfOpName: "TruncatedNormal",
        category: "creation",
        inputs: [{ start: 0, name: "shape", type: "number[]" }],
        attrs: [
          { tfName: "means", name: "mean", type: "number", defaultValue: 0 },
          { tfName: "stddev", name: "stdDev", type: "number", defaultValue: 1 },
          { tfName: "seed", name: "seed", type: "number" },
          {
            tfName: "seed2",
            name: "seed2",
            type: "number",
            defaultValue: 0,
            notSupported: !0,
          },
          { tfName: "dtype", name: "dtype", type: "dtype" },
          { tfName: "T", name: "T", type: "number", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Zeros",
        category: "creation",
        inputs: [{ start: 0, name: "shape", type: "number[]" }],
        attrs: [{ tfName: "T", name: "dtype", type: "dtype" }],
      },
      {
        tfOpName: "ZerosLike",
        category: "creation",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [{ tfName: "T", name: "dtype", type: "dtype" }],
      },
      {
        tfOpName: "Multinomial",
        category: "creation",
        inputs: [
          { start: 0, name: "logits", type: "tensor" },
          { start: 1, name: "numSamples", type: "number" },
        ],
        attrs: [
          { tfName: "seed", name: "seed", type: "number" },
          { tfName: "seed2", name: "seed2", type: "number" },
          { tfName: "T", name: "dtype", type: "dtype" },
          { tfName: "output_dtype", name: "output_dtype", type: "dtype" },
        ],
      },
    ];
  },
  function (t, e, n) {
    "use strict";
    n.r(e),
      n.d(e, "json", function () {
        return r;
      });
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const r = [
      {
        tfOpName: "NonMaxSuppressionV2",
        category: "dynamic",
        inputs: [
          { start: 0, name: "boxes", type: "tensor" },
          { start: 1, name: "scores", type: "tensor" },
          { start: 2, name: "maxOutputSize", type: "number" },
          { start: 3, name: "iouThreshold", type: "number" },
        ],
      },
      {
        tfOpName: "NonMaxSuppressionV3",
        category: "dynamic",
        inputs: [
          { start: 0, name: "boxes", type: "tensor" },
          { start: 1, name: "scores", type: "tensor" },
          { start: 2, name: "maxOutputSize", type: "number" },
          { start: 3, name: "iouThreshold", type: "number" },
          { start: 4, name: "scoreThreshold", type: "number" },
        ],
      },
      {
        tfOpName: "NonMaxSuppressionV5",
        category: "dynamic",
        inputs: [
          { start: 0, name: "boxes", type: "tensor" },
          { start: 1, name: "scores", type: "tensor" },
          { start: 2, name: "maxOutputSize", type: "number" },
          { start: 3, name: "iouThreshold", type: "number" },
          { start: 4, name: "scoreThreshold", type: "number" },
          { start: 5, name: "softNmsSigma", type: "number" },
        ],
      },
      {
        tfOpName: "Where",
        category: "dynamic",
        inputs: [{ start: 0, name: "condition", type: "tensor" }],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "ListDiff",
        category: "dynamic",
        inputs: [
          { start: 0, name: "x", type: "tensor" },
          { start: 1, name: "y", type: "tensor" },
        ],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
    ];
  },
  function (t, e, n) {
    "use strict";
    n.r(e),
      n.d(e, "json", function () {
        return r;
      });
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const r = [
      {
        tfOpName: "TopKV2",
        category: "evaluation",
        inputs: [
          { start: 0, name: "x", type: "tensor" },
          { start: 1, name: "k", type: "number" },
        ],
        attrs: [{ tfName: "sorted", name: "sorted", type: "bool" }],
      },
    ];
  },
  function (t, e, n) {
    "use strict";
    n.r(e),
      n.d(e, "json", function () {
        return r;
      });
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const r = [
      {
        tfOpName: "PlaceholderWithDefault",
        category: "graph",
        inputs: [{ start: 0, name: "default", type: "tensor" }],
        attrs: [
          { tfName: "shape", name: "shape", type: "shape" },
          { tfName: "dtype", name: "dtype", type: "dtype" },
        ],
      },
      {
        tfOpName: "Placeholder",
        category: "graph",
        attrs: [
          { tfName: "shape", name: "shape", type: "shape" },
          { tfName: "dtype", name: "dtype", type: "dtype" },
        ],
      },
      { tfOpName: "Const", category: "graph" },
      {
        tfOpName: "Identity",
        category: "graph",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
      },
      {
        tfOpName: "IdentityN",
        category: "graph",
        inputs: [{ start: 0, end: 0, name: "x", type: "tensors" }],
      },
      {
        tfOpName: "Snapshot",
        category: "graph",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
      },
      {
        tfOpName: "Rank",
        category: "graph",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
      },
      {
        tfOpName: "Size",
        category: "graph",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
      },
      {
        tfOpName: "Shape",
        category: "graph",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
      },
      {
        tfOpName: "ShapeN",
        category: "graph",
        inputs: [{ start: 0, end: 0, name: "x", type: "tensors" }],
      },
      {
        tfOpName: "Print",
        category: "graph",
        inputs: [
          { start: 0, name: "x", type: "tensor" },
          { start: 1, name: "data", type: "tensors" },
        ],
        attrs: [
          { tfName: "message", name: "message", type: "string" },
          {
            tfName: "first_n",
            name: "firstN",
            type: "number",
            notSupported: !0,
          },
          {
            tfName: "summarize",
            name: "summarize",
            type: "number",
            defaultValue: 3,
          },
        ],
      },
      { tfOpName: "NoOp", category: "graph", inputs: [] },
      {
        tfOpName: "StopGradient",
        category: "graph",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
      },
      {
        tfOpName: "FakeQuantWithMinMaxVars",
        category: "graph",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "min", name: "min", type: "number" },
          { tfName: "max", name: "max", type: "number" },
        ],
      },
    ];
  },
  function (t, e, n) {
    "use strict";
    n.r(e),
      n.d(e, "json", function () {
        return r;
      });
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const r = [
      {
        tfOpName: "ResizeBilinear",
        category: "image",
        inputs: [
          { start: 0, name: "images", type: "tensor" },
          { start: 1, name: "size", type: "number[]" },
        ],
        attrs: [
          { tfName: "align_corners", name: "alignCorners", type: "bool" },
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "ResizeNearestNeighbor",
        category: "image",
        inputs: [
          { start: 0, name: "images", type: "tensor" },
          { start: 1, name: "size", type: "number[]" },
        ],
        attrs: [
          { tfName: "align_corners", name: "alignCorners", type: "bool" },
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "CropAndResize",
        category: "image",
        inputs: [
          { start: 0, name: "image", type: "tensor" },
          { start: 1, name: "boxes", type: "tensor" },
          { start: 2, name: "boxInd", type: "tensor" },
          { start: 3, name: "cropSize", type: "number[]" },
        ],
        attrs: [
          { tfName: "method", name: "method", type: "string" },
          {
            tfName: "extrapolation_value",
            name: "extrapolationValue",
            type: "number",
          },
        ],
      },
    ];
  },
  function (t, e, n) {
    "use strict";
    n.r(e),
      n.d(e, "json", function () {
        return r;
      });
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const r = [
      {
        tfOpName: "Equal",
        category: "logical",
        inputs: [
          { start: 0, name: "a", type: "tensor" },
          { start: 1, name: "b", type: "tensor" },
        ],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "NotEqual",
        category: "logical",
        inputs: [
          { start: 0, name: "a", type: "tensor" },
          { start: 1, name: "b", type: "tensor" },
        ],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Greater",
        category: "logical",
        inputs: [
          { start: 0, name: "a", type: "tensor" },
          { start: 1, name: "b", type: "tensor" },
        ],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "GreaterEqual",
        category: "logical",
        inputs: [
          { start: 0, name: "a", type: "tensor" },
          { start: 1, name: "b", type: "tensor" },
        ],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Less",
        category: "logical",
        inputs: [
          { start: 0, name: "a", type: "tensor" },
          { start: 1, name: "b", type: "tensor" },
        ],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "LessEqual",
        category: "logical",
        inputs: [
          { start: 0, name: "a", type: "tensor" },
          { start: 1, name: "b", type: "tensor" },
        ],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "LogicalAnd",
        category: "logical",
        inputs: [
          { start: 0, name: "a", type: "tensor" },
          { start: 1, name: "b", type: "tensor" },
        ],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "LogicalNot",
        category: "logical",
        inputs: [{ start: 0, name: "a", type: "tensor" }],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "LogicalOr",
        category: "logical",
        inputs: [
          { start: 0, name: "a", type: "tensor" },
          { start: 1, name: "b", type: "tensor" },
        ],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Select",
        category: "logical",
        inputs: [
          { start: 0, name: "condition", type: "tensor" },
          { start: 1, name: "a", type: "tensor" },
          { start: 2, name: "b", type: "tensor" },
        ],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "SelectV2",
        category: "logical",
        inputs: [
          { start: 0, name: "condition", type: "tensor" },
          { start: 1, name: "a", type: "tensor" },
          { start: 2, name: "b", type: "tensor" },
        ],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
    ];
  },
  function (t, e, n) {
    "use strict";
    n.r(e),
      n.d(e, "json", function () {
        return r;
      });
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const r = [
      {
        tfOpName: "_FusedMatMul",
        category: "matrices",
        inputs: [
          { start: 0, name: "a", type: "tensor" },
          { start: 1, name: "b", type: "tensor" },
          { start: 2, end: 0, name: "args", type: "tensors" },
        ],
        attrs: [
          { tfName: "num_args", name: "numArgs", type: "number" },
          {
            tfName: "fused_ops",
            name: "fusedOps",
            type: "string[]",
            defaultValue: [],
          },
          {
            tfName: "epsilon",
            name: "epsilon",
            type: "number",
            defaultValue: 1e-4,
          },
          {
            tfName: "transpose_a",
            name: "transposeA",
            type: "bool",
            defaultValue: !1,
          },
          {
            tfName: "transpose_b",
            name: "transposeB",
            type: "bool",
            defaultValue: !1,
          },
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "MatMul",
        category: "matrices",
        inputs: [
          { start: 0, name: "a", type: "tensor" },
          { start: 1, name: "b", type: "tensor" },
        ],
        attrs: [
          {
            tfName: "transpose_a",
            name: "transposeA",
            type: "bool",
            defaultValue: !1,
          },
          {
            tfName: "transpose_b",
            name: "transposeB",
            type: "bool",
            defaultValue: !1,
          },
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "BatchMatMul",
        category: "matrices",
        inputs: [
          { start: 0, name: "a", type: "tensor" },
          { start: 1, name: "b", type: "tensor" },
        ],
        attrs: [
          {
            tfName: "adj_x",
            name: "transposeA",
            type: "bool",
            defaultValue: !1,
          },
          {
            tfName: "adj_y",
            name: "transposeB",
            type: "bool",
            defaultValue: !1,
          },
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "BatchMatMulV2",
        category: "matrices",
        inputs: [
          { start: 0, name: "a", type: "tensor" },
          { start: 1, name: "b", type: "tensor" },
        ],
        attrs: [
          {
            tfName: "adj_x",
            name: "transposeA",
            type: "bool",
            defaultValue: !1,
          },
          {
            tfName: "adj_y",
            name: "transposeB",
            type: "bool",
            defaultValue: !1,
          },
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
      {
        tfOpName: "Transpose",
        category: "matrices",
        inputs: [
          { start: 0, name: "x", type: "tensor" },
          { start: 1, name: "perm", type: "number[]" },
        ],
        attrs: [
          { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
        ],
      },
    ];
  },
  function (t, e, n) {
    "use strict";
    n.r(e),
      n.d(e, "json", function () {
        return r;
      });
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const r = [
      {
        tfOpName: "FusedBatchNorm",
        category: "normalization",
        inputs: [
          { start: 0, name: "x", type: "tensor" },
          { start: 1, name: "scale", type: "tensor" },
          { start: 2, name: "offset", type: "tensor" },
          { start: 3, name: "mean", type: "tensor" },
          { start: 4, name: "variance", type: "tensor" },
        ],
        attrs: [
          {
            tfName: "epsilon",
            name: "epsilon",
            type: "number",
            defaultValue: 0.001,
          },
          {
            tfName: "data_format",
            name: "dataFormat",
            type: "string",
            notSupported: !0,
          },
        ],
      },
      {
        tfOpName: "FusedBatchNormV2",
        category: "normalization",
        inputs: [
          { start: 0, name: "x", type: "tensor" },
          { start: 1, name: "scale", type: "tensor" },
          { start: 2, name: "offset", type: "tensor" },
          { start: 3, name: "mean", type: "tensor" },
          { start: 4, name: "variance", type: "tensor" },
        ],
        attrs: [
          {
            tfName: "epsilon",
            name: "epsilon",
            type: "number",
            defaultValue: 0.001,
          },
          {
            tfName: "data_format",
            name: "dataFormat",
            type: "string",
            notSupported: !0,
          },
        ],
      },
      {
        tfOpName: "FusedBatchNormV3",
        category: "normalization",
        inputs: [
          { start: 0, name: "x", type: "tensor" },
          { start: 1, name: "scale", type: "tensor" },
          { start: 2, name: "offset", type: "tensor" },
          { start: 3, name: "mean", type: "tensor" },
          { start: 4, name: "variance", type: "tensor" },
        ],
        attrs: [
          {
            tfName: "epsilon",
            name: "epsilon",
            type: "number",
            defaultValue: 0.001,
          },
          {
            tfName: "data_format",
            name: "dataFormat",
            type: "string",
            notSupported: !0,
          },
        ],
      },
      {
        tfOpName: "LRN",
        category: "normalization",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          {
            tfName: "depth_radius",
            name: "radius",
            type: "number",
            defaultValue: 5,
          },
          { tfName: "bias", name: "bias", type: "number", defaultValue: 1 },
          { tfName: "alpha", name: "alpha", type: "number", defaultValue: 1 },
          { tfName: "beta", name: "beta", type: "number", defaultValue: 0.5 },
        ],
      },
      {
        tfOpName: "Softmax",
        category: "normalization",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
      },
      {
        tfOpName: "LogSoftmax",
        category: "normalization",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
      },
      {
        tfOpName: "SparseToDense",
        category: "normalization",
        inputs: [
          { start: 0, name: "sparseIndices", type: "tensor" },
          { start: 1, name: "outputShape", type: "number[]" },
          { start: 2, name: "sparseValues", type: "tensor" },
          { start: 3, name: "defaultValue", type: "tensor" },
        ],
        attrs: [
          {
            tfName: "validate_indices",
            name: "validateIndices",
            type: "bool",
            defaultValue: !0,
            notSupported: !0,
          },
        ],
      },
    ];
  },
  function (t, e, n) {
    "use strict";
    n.r(e),
      n.d(e, "json", function () {
        return r;
      });
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const r = [
      {
        tfOpName: "Max",
        category: "reduction",
        inputs: [
          { start: 0, name: "x", type: "tensor" },
          { start: 1, name: "axis", type: "number[]" },
        ],
        attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }],
      },
      {
        tfOpName: "Mean",
        category: "reduction",
        inputs: [
          { start: 0, name: "x", type: "tensor" },
          { start: 1, name: "axis", type: "number[]" },
        ],
        attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }],
      },
      {
        tfOpName: "Min",
        category: "reduction",
        inputs: [
          { start: 0, name: "x", type: "tensor" },
          { start: 1, name: "axis", type: "number[]" },
        ],
        attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }],
      },
      {
        tfOpName: "Sum",
        category: "reduction",
        inputs: [
          { start: 0, name: "x", type: "tensor" },
          { start: 1, name: "axis", type: "number[]" },
        ],
        attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }],
      },
      {
        tfOpName: "All",
        category: "reduction",
        inputs: [
          { start: 0, name: "x", type: "tensor" },
          { start: 1, name: "axis", type: "number[]" },
        ],
        attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }],
      },
      {
        tfOpName: "Any",
        category: "reduction",
        inputs: [
          { start: 0, name: "x", type: "tensor" },
          { start: 1, name: "axis", type: "number[]" },
        ],
        attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }],
      },
      {
        tfOpName: "ArgMax",
        category: "reduction",
        inputs: [
          { start: 0, name: "x", type: "tensor" },
          { start: 1, name: "axis", type: "number" },
        ],
      },
      {
        tfOpName: "ArgMin",
        category: "reduction",
        inputs: [
          { start: 0, name: "x", type: "tensor" },
          { start: 1, name: "axis", type: "number" },
        ],
      },
      {
        tfOpName: "Prod",
        category: "reduction",
        inputs: [
          { start: 0, name: "x", type: "tensor" },
          { start: 1, name: "axis", type: "number[]" },
        ],
        attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }],
      },
      {
        tfOpName: "Cumsum",
        category: "reduction",
        inputs: [
          { start: 0, name: "x", type: "tensor" },
          { start: 1, name: "axis", type: "number" },
        ],
        attrs: [
          { tfName: "exclusive", name: "exclusive", type: "bool" },
          { tfName: "reverse", name: "reverse", type: "bool" },
        ],
      },
    ];
  },
  function (t, e, n) {
    "use strict";
    n.r(e),
      n.d(e, "json", function () {
        return r;
      });
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const r = [
      {
        tfOpName: "ConcatV2",
        category: "slice_join",
        inputs: [
          { start: 0, end: -1, name: "tensors", type: "tensors" },
          { start: -1, name: "axis", type: "number" },
        ],
        attrs: [{ tfName: "N", name: "n", type: "number", defaultValue: 2 }],
      },
      {
        tfOpName: "Concat",
        category: "slice_join",
        inputs: [
          { start: 1, end: 0, name: "tensors", type: "tensors" },
          { start: 0, name: "axis", type: "number" },
        ],
        attrs: [{ tfName: "N", name: "n", type: "number", defaultValue: 2 }],
      },
      {
        tfOpName: "GatherV2",
        category: "slice_join",
        inputs: [
          { start: 0, name: "x", type: "tensor" },
          { start: 1, name: "indices", type: "tensor" },
          { start: 2, name: "axis", type: "number", defaultValue: 0 },
        ],
      },
      {
        tfOpName: "Gather",
        category: "slice_join",
        inputs: [
          { start: 0, name: "x", type: "tensor" },
          { start: 1, name: "indices", type: "tensor" },
        ],
        attrs: [
          { tfName: "axis", name: "axis", type: "number", defaultValue: 0 },
          {
            tfName: "validate_indices",
            name: "validateIndices",
            type: "bool",
            notSupported: !0,
          },
        ],
      },
      {
        tfOpName: "Reverse",
        category: "slice_join",
        inputs: [
          { start: 0, name: "x", type: "tensor" },
          { start: 1, name: "dims", type: "bool", notSupported: !0 },
        ],
      },
      {
        tfOpName: "ReverseV2",
        category: "slice_join",
        inputs: [
          { start: 0, name: "x", type: "tensor" },
          { start: 1, name: "axis", type: "number[]" },
        ],
      },
      {
        tfOpName: "Slice",
        category: "slice_join",
        inputs: [
          { start: 0, name: "x", type: "tensor" },
          { start: 1, name: "begin", type: "number[]" },
          { start: 2, name: "size", type: "number[]" },
        ],
      },
      {
        tfOpName: "StridedSlice",
        category: "slice_join",
        inputs: [
          { start: 0, name: "x", type: "tensor" },
          { start: 1, name: "begin", type: "number[]" },
          { start: 2, name: "end", type: "number[]" },
          { start: 3, name: "strides", type: "number[]" },
        ],
        attrs: [
          {
            tfName: "begin_mask",
            name: "beginMask",
            type: "number",
            defaultValue: 0,
          },
          {
            tfName: "end_mask",
            name: "endMask",
            type: "number",
            defaultValue: 0,
          },
          {
            tfName: "new_axis_mask",
            name: "newAxisMask",
            type: "number",
            defaultValue: 0,
          },
          {
            tfName: "ellipsis_mask",
            name: "ellipsisMask",
            type: "number",
            defaultValue: 0,
          },
          {
            tfName: "shrink_axis_mask",
            name: "shrinkAxisMask",
            type: "number",
            defaultValue: 0,
          },
        ],
      },
      {
        tfOpName: "Pack",
        category: "slice_join",
        inputs: [{ start: 0, end: 0, name: "tensors", type: "tensors" }],
        attrs: [
          { tfName: "axis", name: "axis", type: "number", defaultValue: 0 },
        ],
      },
      {
        tfOpName: "Unpack",
        category: "slice_join",
        inputs: [{ start: 0, name: "tensor", type: "tensor" }],
        attrs: [
          { tfName: "axis", name: "axis", type: "number", defaultValue: 0 },
          {
            tfName: "num",
            name: "num",
            type: "number",
            defaultValue: 0,
            notSupported: !0,
          },
        ],
      },
      {
        tfOpName: "Tile",
        category: "slice_join",
        inputs: [
          { start: 0, name: "x", type: "tensor" },
          { start: 1, name: "reps", type: "number[]" },
        ],
      },
      {
        tfOpName: "Split",
        category: "slice_join",
        inputs: [
          { start: 0, name: "axis", type: "number", defaultValue: 0 },
          { start: 1, name: "x", type: "tensor" },
        ],
        attrs: [
          {
            tfName: "num_split",
            name: "numOrSizeSplits",
            type: "number",
            defaultValue: 1,
          },
        ],
      },
      {
        tfOpName: "SplitV",
        category: "slice_join",
        inputs: [
          { start: 0, name: "x", type: "tensor" },
          { start: 1, name: "numOrSizeSplits", type: "number[]" },
          { start: 2, name: "axis", type: "number", defaultValue: 0 },
        ],
      },
      {
        tfOpName: "ScatterNd",
        category: "slice_join",
        inputs: [
          { start: 0, name: "indices", type: "tensor" },
          { start: 1, name: "values", type: "tensor" },
          { start: 2, name: "shape", type: "number[]" },
        ],
      },
      {
        tfOpName: "GatherNd",
        category: "slice_join",
        inputs: [
          { start: 0, name: "x", type: "tensor" },
          { start: 1, name: "indices", type: "tensor" },
        ],
      },
      {
        tfOpName: "SparseToDense",
        category: "slice_join",
        inputs: [
          { start: 0, name: "sparseIndices", type: "tensor" },
          { start: 1, name: "outputShape", type: "number[]" },
          { start: 2, name: "sparseValues", type: "tensor" },
          { start: 3, name: "defaultValue", type: "tensor" },
        ],
        attrs: [
          {
            tfName: "validate_indices",
            name: "validateIndices",
            type: "bool",
            defaultValue: !1,
            notSupported: !0,
          },
        ],
      },
    ];
  },
  function (t, e, n) {
    "use strict";
    n.r(e),
      n.d(e, "json", function () {
        return r;
      });
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const r = [
      {
        tfOpName: "FFT",
        category: "spectral",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
      },
      {
        tfOpName: "IFFT",
        category: "spectral",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
      },
      {
        tfOpName: "RFFT",
        category: "spectral",
        inputs: [
          { start: 0, name: "x", type: "tensor" },
          { start: 1, name: "fft_length", type: "number", notSupported: !0 },
        ],
      },
      {
        tfOpName: "IRFFT",
        category: "spectral",
        inputs: [
          { start: 0, name: "x", type: "tensor" },
          { start: 1, name: "fft_length", type: "number", notSupported: !0 },
        ],
      },
    ];
  },
  function (t, e, n) {
    "use strict";
    n.r(e),
      n.d(e, "json", function () {
        return r;
      });
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const r = [
      {
        tfOpName: "Cast",
        category: "transformation",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "SrcT", name: "sdtype", type: "dtype", notSupported: !0 },
          { tfName: "DstT", name: "dtype", type: "dtype" },
        ],
      },
      {
        tfOpName: "ExpandDims",
        category: "transformation",
        inputs: [
          { start: 0, name: "x", type: "tensor" },
          { start: 1, name: "axis", type: "number" },
        ],
      },
      {
        tfOpName: "Pad",
        category: "transformation",
        inputs: [
          { start: 0, name: "x", type: "tensor" },
          { start: 1, name: "padding", type: "number[]" },
        ],
        attrs: [
          {
            tfName: "constant_value",
            name: "constantValue",
            type: "number",
            defaultValue: 0,
          },
        ],
      },
      {
        tfOpName: "PadV2",
        category: "transformation",
        inputs: [
          { start: 0, name: "x", type: "tensor" },
          { start: 1, name: "padding", type: "number[]" },
          { start: 2, name: "constantValue", type: "number", defaultValue: 0 },
        ],
      },
      {
        tfOpName: "Reshape",
        category: "transformation",
        inputs: [
          { start: 0, name: "x", type: "tensor" },
          { start: 1, name: "shape", type: "number[]" },
        ],
      },
      {
        tfOpName: "Squeeze",
        category: "transformation",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          {
            tfName: "axis",
            tfDeprecatedName: "squeeze_dims",
            name: "axis",
            type: "number[]",
          },
        ],
      },
      {
        tfOpName: "SpaceToBatchND",
        category: "transformation",
        inputs: [
          { start: 0, name: "x", type: "tensor" },
          { start: 1, name: "blockShape", type: "number[]" },
          { start: 2, name: "paddings", type: "number[]" },
        ],
      },
      {
        tfOpName: "BatchToSpaceND",
        category: "transformation",
        inputs: [
          { start: 0, name: "x", type: "tensor" },
          { start: 1, name: "blockShape", type: "number[]" },
          { start: 2, name: "crops", type: "number[]" },
        ],
      },
      {
        tfOpName: "DepthToSpace",
        category: "transformation",
        inputs: [{ start: 0, name: "x", type: "tensor" }],
        attrs: [
          { tfName: "block_size", name: "blockSize", type: "number" },
          { tfName: "data_format", name: "dataFormat", type: "string" },
        ],
      },
      {
        tfOpName: "BroadcastTo",
        category: "transformation",
        inputs: [
          { start: 0, name: "x", type: "tensor" },
          { start: 1, name: "shape", type: "number[]" },
        ],
        attrs: [],
      },
    ];
  },
  function (t, e, n) {
    "use strict";
    (function (t) {
      n.d(e, "a", function () {
        return o;
      });
      var r = n(0),
        a = n(14),
        i = n(57);
      /**
       * @license
       * Copyright 2018 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       *
       * =============================================================================
       */
      class o extends a.a {
        decodeUTF8() {
          return new s(this);
        }
      }
      class s extends i.a {
        constructor(t) {
          super(), (this.upstream = t), (this.impl = new u(t));
        }
        summary() {
          return this.impl.summary();
        }
        async next() {
          return this.impl.next();
        }
      }
      class u extends a.b {
        constructor(t) {
          if ((super(), (this.upstream = t), Object(r.ob)().get("IS_BROWSER")))
            this.decoder = new TextDecoder("utf-8");
          else {
            const { StringDecoder: t } = n(79);
            this.decoder = new t("utf8");
          }
        }
        summary() {
          return this.upstream.summary() + " -> Utf8";
        }
        async pump() {
          const e = await this.upstream.next();
          let n, a;
          return (
            !e.done &&
            ((n = e.value),
            (a = Object(r.ob)().get("IS_BROWSER")
              ? this.decoder.decode(n, { stream: !0 })
              : this.decoder.write(t.from(n.buffer))),
            this.outputQueue.push(a),
            !0)
          );
        }
      }
    }.call(this, n(32).Buffer));
  },
  function (t, e, n) {
    "use strict";
    n.d(e, "a", function () {
      return a;
    });
    var r = n(14);
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     *
     * =============================================================================
     */ class a extends r.a {
      split(t) {
        return new i(this, t);
      }
    }
    class i extends a {
      constructor(t, e) {
        super(), (this.upstream = t), (this.impl = new o(t, e));
      }
      summary() {
        return this.impl.summary();
      }
      async next() {
        return this.impl.next();
      }
    }
    class o extends r.b {
      constructor(t, e) {
        super(),
          (this.upstream = t),
          (this.separator = e),
          (this.carryover = "");
      }
      summary() {
        return `${this.upstream.summary()} -> Split('${this.separator}')`;
      }
      async pump() {
        const t = await this.upstream.next();
        if (t.done)
          return (
            "" !== this.carryover &&
            (this.outputQueue.push(this.carryover), (this.carryover = ""), !0)
          );
        const e = t.value.split(this.separator);
        e[0] = this.carryover + e[0];
        for (const t of e.slice(0, -1)) this.outputQueue.push(t);
        return (this.carryover = e[e.length - 1]), !0;
      }
    }
  },
  function (t, e, n) {
    "use strict";
    const r = "'([^']+)'|\"([^\"]+)\"|[\\w\\s-]+",
      a = new RegExp("(bold|bolder|lighter|[1-9]00) +", "i"),
      i = new RegExp("(italic|oblique) +", "i"),
      o = new RegExp("(small-caps) +", "i"),
      s = new RegExp(
        "(ultra-condensed|extra-condensed|condensed|semi-condensed|semi-expanded|expanded|extra-expanded|ultra-expanded) +",
        "i"
      ),
      u = new RegExp(
        "([\\d\\.]+)(px|pt|pc|in|cm|mm|%|em|ex|ch|rem|q) *((?:" +
          r +
          ")( *, *(?:" +
          r +
          "))*)"
      ),
      c = {};
    t.exports = function (t) {
      if (c[t]) return c[t];
      const e = u.exec(t);
      if (!e) return;
      const n = {
        weight: "normal",
        style: "normal",
        stretch: "normal",
        variant: "normal",
        size: parseFloat(e[1]),
        unit: e[2],
        family: e[3].replace(/["']/g, "").replace(/ *, */g, ","),
      };
      let r,
        l,
        h,
        d,
        p = t.substring(0, e.index);
      switch (
        ((r = a.exec(p)) && (n.weight = r[1]),
        (l = i.exec(p)) && (n.style = l[1]),
        (h = o.exec(p)) && (n.variant = h[1]),
        (d = s.exec(p)) && (n.stretch = d[1]),
        n.unit)
      ) {
        case "pt":
          n.size /= 0.75;
          break;
        case "pc":
          n.size *= 16;
          break;
        case "in":
          n.size *= 96;
          break;
        case "cm":
          n.size *= 96 / 2.54;
          break;
        case "mm":
          n.size *= 96 / 25.4;
          break;
        case "%":
          break;
        case "em":
        case "rem":
          n.size *= 16 / 0.75;
          break;
        case "q":
          n.size *= 96 / 25.4 / 4;
      }
      return (c[t] = n);
    };
  },
  function (t, e, n) {
    "use strict";
    (e.byteLength = function (t) {
      var e = c(t),
        n = e[0],
        r = e[1];
      return (3 * (n + r)) / 4 - r;
    }),
      (e.toByteArray = function (t) {
        var e,
          n,
          r = c(t),
          o = r[0],
          s = r[1],
          u = new i(
            (function (t, e, n) {
              return (3 * (e + n)) / 4 - n;
            })(0, o, s)
          ),
          l = 0,
          h = s > 0 ? o - 4 : o;
        for (n = 0; n < h; n += 4)
          (e =
            (a[t.charCodeAt(n)] << 18) |
            (a[t.charCodeAt(n + 1)] << 12) |
            (a[t.charCodeAt(n + 2)] << 6) |
            a[t.charCodeAt(n + 3)]),
            (u[l++] = (e >> 16) & 255),
            (u[l++] = (e >> 8) & 255),
            (u[l++] = 255 & e);
        2 === s &&
          ((e = (a[t.charCodeAt(n)] << 2) | (a[t.charCodeAt(n + 1)] >> 4)),
          (u[l++] = 255 & e));
        1 === s &&
          ((e =
            (a[t.charCodeAt(n)] << 10) |
            (a[t.charCodeAt(n + 1)] << 4) |
            (a[t.charCodeAt(n + 2)] >> 2)),
          (u[l++] = (e >> 8) & 255),
          (u[l++] = 255 & e));
        return u;
      }),
      (e.fromByteArray = function (t) {
        for (
          var e, n = t.length, a = n % 3, i = [], o = 0, s = n - a;
          o < s;
          o += 16383
        )
          i.push(l(t, o, o + 16383 > s ? s : o + 16383));
        1 === a
          ? ((e = t[n - 1]), i.push(r[e >> 2] + r[(e << 4) & 63] + "=="))
          : 2 === a &&
            ((e = (t[n - 2] << 8) + t[n - 1]),
            i.push(r[e >> 10] + r[(e >> 4) & 63] + r[(e << 2) & 63] + "="));
        return i.join("");
      });
    for (
      var r = [],
        a = [],
        i = "undefined" != typeof Uint8Array ? Uint8Array : Array,
        o = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        s = 0,
        u = o.length;
      s < u;
      ++s
    )
      (r[s] = o[s]), (a[o.charCodeAt(s)] = s);
    function c(t) {
      var e = t.length;
      if (e % 4 > 0)
        throw new Error("Invalid string. Length must be a multiple of 4");
      var n = t.indexOf("=");
      return -1 === n && (n = e), [n, n === e ? 0 : 4 - (n % 4)];
    }
    function l(t, e, n) {
      for (var a, i, o = [], s = e; s < n; s += 3)
        (a =
          ((t[s] << 16) & 16711680) +
          ((t[s + 1] << 8) & 65280) +
          (255 & t[s + 2])),
          o.push(
            r[((i = a) >> 18) & 63] +
              r[(i >> 12) & 63] +
              r[(i >> 6) & 63] +
              r[63 & i]
          );
      return o.join("");
    }
    (a["-".charCodeAt(0)] = 62), (a["_".charCodeAt(0)] = 63);
  },
  function (t, e) {
    (e.read = function (t, e, n, r, a) {
      var i,
        o,
        s = 8 * a - r - 1,
        u = (1 << s) - 1,
        c = u >> 1,
        l = -7,
        h = n ? a - 1 : 0,
        d = n ? -1 : 1,
        p = t[e + h];
      for (
        h += d, i = p & ((1 << -l) - 1), p >>= -l, l += s;
        l > 0;
        i = 256 * i + t[e + h], h += d, l -= 8
      );
      for (
        o = i & ((1 << -l) - 1), i >>= -l, l += r;
        l > 0;
        o = 256 * o + t[e + h], h += d, l -= 8
      );
      if (0 === i) i = 1 - c;
      else {
        if (i === u) return o ? NaN : (1 / 0) * (p ? -1 : 1);
        (o += Math.pow(2, r)), (i -= c);
      }
      return (p ? -1 : 1) * o * Math.pow(2, i - r);
    }),
      (e.write = function (t, e, n, r, a, i) {
        var o,
          s,
          u,
          c = 8 * i - a - 1,
          l = (1 << c) - 1,
          h = l >> 1,
          d = 23 === a ? Math.pow(2, -24) - Math.pow(2, -77) : 0,
          p = r ? 0 : i - 1,
          f = r ? 1 : -1,
          m = e < 0 || (0 === e && 1 / e < 0) ? 1 : 0;
        for (
          e = Math.abs(e),
            isNaN(e) || e === 1 / 0
              ? ((s = isNaN(e) ? 1 : 0), (o = l))
              : ((o = Math.floor(Math.log(e) / Math.LN2)),
                e * (u = Math.pow(2, -o)) < 1 && (o--, (u *= 2)),
                (e += o + h >= 1 ? d / u : d * Math.pow(2, 1 - h)) * u >= 2 &&
                  (o++, (u /= 2)),
                o + h >= l
                  ? ((s = 0), (o = l))
                  : o + h >= 1
                  ? ((s = (e * u - 1) * Math.pow(2, a)), (o += h))
                  : ((s = e * Math.pow(2, h - 1) * Math.pow(2, a)), (o = 0)));
          a >= 8;
          t[n + p] = 255 & s, p += f, s /= 256, a -= 8
        );
        for (
          o = (o << a) | s, c += a;
          c > 0;
          t[n + p] = 255 & o, p += f, o /= 256, c -= 8
        );
        t[n + p - f] |= 128 * m;
      });
  },
  function (t, e) {
    var n = {}.toString;
    t.exports =
      Array.isArray ||
      function (t) {
        return "[object Array]" == n.call(t);
      };
  },
  function (t, e, n) {
    (function (t, e) {
      !(function (t, n) {
        "use strict";
        if (!t.setImmediate) {
          var r,
            a,
            i,
            o,
            s,
            u = 1,
            c = {},
            l = !1,
            h = t.document,
            d = Object.getPrototypeOf && Object.getPrototypeOf(t);
          (d = d && d.setTimeout ? d : t),
            "[object process]" === {}.toString.call(t.process)
              ? (r = function (t) {
                  e.nextTick(function () {
                    f(t);
                  });
                })
              : !(function () {
                  if (t.postMessage && !t.importScripts) {
                    var e = !0,
                      n = t.onmessage;
                    return (
                      (t.onmessage = function () {
                        e = !1;
                      }),
                      t.postMessage("", "*"),
                      (t.onmessage = n),
                      e
                    );
                  }
                })()
              ? t.MessageChannel
                ? (((i = new MessageChannel()).port1.onmessage = function (t) {
                    f(t.data);
                  }),
                  (r = function (t) {
                    i.port2.postMessage(t);
                  }))
                : h && "onreadystatechange" in h.createElement("script")
                ? ((a = h.documentElement),
                  (r = function (t) {
                    var e = h.createElement("script");
                    (e.onreadystatechange = function () {
                      f(t),
                        (e.onreadystatechange = null),
                        a.removeChild(e),
                        (e = null);
                    }),
                      a.appendChild(e);
                  }))
                : (r = function (t) {
                    setTimeout(f, 0, t);
                  })
              : ((o = "setImmediate$" + Math.random() + "$"),
                (s = function (e) {
                  e.source === t &&
                    "string" == typeof e.data &&
                    0 === e.data.indexOf(o) &&
                    f(+e.data.slice(o.length));
                }),
                t.addEventListener
                  ? t.addEventListener("message", s, !1)
                  : t.attachEvent("onmessage", s),
                (r = function (e) {
                  t.postMessage(o + e, "*");
                })),
            (d.setImmediate = function (t) {
              "function" != typeof t && (t = new Function("" + t));
              for (
                var e = new Array(arguments.length - 1), n = 0;
                n < e.length;
                n++
              )
                e[n] = arguments[n + 1];
              var a = { callback: t, args: e };
              return (c[u] = a), r(u), u++;
            }),
            (d.clearImmediate = p);
        }
        function p(t) {
          delete c[t];
        }
        function f(t) {
          if (l) setTimeout(f, 0, t);
          else {
            var e = c[t];
            if (e) {
              l = !0;
              try {
                !(function (t) {
                  var e = t.callback,
                    n = t.args;
                  switch (n.length) {
                    case 0:
                      e();
                      break;
                    case 1:
                      e(n[0]);
                      break;
                    case 2:
                      e(n[0], n[1]);
                      break;
                    case 3:
                      e(n[0], n[1], n[2]);
                      break;
                    default:
                      e.apply(void 0, n);
                  }
                })(e);
              } finally {
                p(t), (l = !1);
              }
            }
          }
        }
      })("undefined" == typeof self ? (void 0 === t ? this : t) : self);
    }.call(this, n(24), n(27)));
  },
  function (t, e) {},
  function (t, e) {},
  function (t, e) {},
  function (t, e) {},
  function (t, e, n) {
    "use strict";
    (function (t) {
      var e = n(33),
        r = n(11);
      /**
       * @license
       * Copyright 2019 Google Inc. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      const a = Object(r.b)();
      a.registerFlag(
        "DEBUG",
        () => !1,
        (t) => {
          t &&
            console.warn(
              "Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance."
            );
        }
      ),
        a.registerFlag("IS_BROWSER", () => e.isBrowser()),
        a.registerFlag(
          "IS_NODE",
          () =>
            void 0 !== t && void 0 !== t.versions && void 0 !== t.versions.node
        ),
        a.registerFlag(
          "IS_CHROME",
          () =>
            "undefined" != typeof navigator &&
            null != navigator &&
            null != navigator.userAgent &&
            /Chrome/.test(navigator.userAgent) &&
            /Google Inc/.test(navigator.vendor)
        ),
        a.registerFlag("PROD", () => !1),
        a.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY", () =>
          a.getBool("DEBUG")
        ),
        a.registerFlag("DEPRECATION_WARNINGS_ENABLED", () => !0),
        a.registerFlag("IS_TEST", () => !1);
    }.call(this, n(27)));
  },
  function (t, e, n) {
    "use strict";
    (function (t) {
      var e = n(11);
      /**
       * @license
       * Copyright 2019 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */ const r = () => n(69);
      let a;
      class i {
        constructor() {
          (this.util = n(70)), (this.textEncoder = new this.util.TextEncoder());
        }
        fetch(t, n) {
          return null != Object(e.b)().global.fetch
            ? Object(e.b)().global.fetch(t, n)
            : (null == a && (a = r()), a(t, n));
        }
        now() {
          const e = t.hrtime();
          return 1e3 * e[0] + e[1] / 1e6;
        }
        encode(t, e) {
          if ("utf-8" !== e && "utf8" !== e)
            throw new Error(
              "Node built-in encoder only supports utf-8, but got " + e
            );
          return this.textEncoder.encode(t);
        }
        decode(t, e) {
          return 0 === t.length ? "" : new this.util.TextDecoder(e).decode(t);
        }
      }
      Object(e.b)().get("IS_NODE") &&
        Object(e.b)().setPlatform("node", new i());
    }.call(this, n(27)));
  },
  function (t, e) {},
  function (t, e) {},
  function (t, e, n) {
    (function (t) {
      var r;
      !(function (t, a, i) {
        function o(t) {
          var e,
            n = this,
            r =
              ((e = 4022871197),
              function (t) {
                t = t.toString();
                for (var n = 0; n < t.length; n++) {
                  var r = 0.02519603282416938 * (e += t.charCodeAt(n));
                  (r -= e = r >>> 0),
                    (e = (r *= e) >>> 0),
                    (e += 4294967296 * (r -= e));
                }
                return 2.3283064365386963e-10 * (e >>> 0);
              });
          (n.next = function () {
            var t = 2091639 * n.s0 + 2.3283064365386963e-10 * n.c;
            return (n.s0 = n.s1), (n.s1 = n.s2), (n.s2 = t - (n.c = 0 | t));
          }),
            (n.c = 1),
            (n.s0 = r(" ")),
            (n.s1 = r(" ")),
            (n.s2 = r(" ")),
            (n.s0 -= r(t)),
            n.s0 < 0 && (n.s0 += 1),
            (n.s1 -= r(t)),
            n.s1 < 0 && (n.s1 += 1),
            (n.s2 -= r(t)),
            n.s2 < 0 && (n.s2 += 1),
            (r = null);
        }
        function s(t, e) {
          return (e.c = t.c), (e.s0 = t.s0), (e.s1 = t.s1), (e.s2 = t.s2), e;
        }
        function u(t, e) {
          var n = new o(t),
            r = e && e.state,
            a = n.next;
          return (
            (a.int32 = function () {
              return (4294967296 * n.next()) | 0;
            }),
            (a.double = function () {
              return a() + 11102230246251565e-32 * ((2097152 * a()) | 0);
            }),
            (a.quick = a),
            r &&
              ("object" == typeof r && s(r, n),
              (a.state = function () {
                return s(n, {});
              })),
            a
          );
        }
        a && a.exports
          ? (a.exports = u)
          : n(16) && n(29)
          ? void 0 ===
              (r = function () {
                return u;
              }.call(e, n, e, a)) || (a.exports = r)
          : (this.alea = u);
      })(0, t, n(16));
    }.call(this, n(28)(t)));
  },
  function (t, e, n) {
    (function (t) {
      var r;
      !(function (t, a, i) {
        function o(t) {
          var e = this,
            n = "";
          (e.x = 0),
            (e.y = 0),
            (e.z = 0),
            (e.w = 0),
            (e.next = function () {
              var t = e.x ^ (e.x << 11);
              return (
                (e.x = e.y),
                (e.y = e.z),
                (e.z = e.w),
                (e.w ^= (e.w >>> 19) ^ t ^ (t >>> 8))
              );
            }),
            t === (0 | t) ? (e.x = t) : (n += t);
          for (var r = 0; r < n.length + 64; r++)
            (e.x ^= 0 | n.charCodeAt(r)), e.next();
        }
        function s(t, e) {
          return (e.x = t.x), (e.y = t.y), (e.z = t.z), (e.w = t.w), e;
        }
        function u(t, e) {
          var n = new o(t),
            r = e && e.state,
            a = function () {
              return (n.next() >>> 0) / 4294967296;
            };
          return (
            (a.double = function () {
              do {
                var t =
                  ((n.next() >>> 11) + (n.next() >>> 0) / 4294967296) /
                  (1 << 21);
              } while (0 === t);
              return t;
            }),
            (a.int32 = n.next),
            (a.quick = a),
            r &&
              ("object" == typeof r && s(r, n),
              (a.state = function () {
                return s(n, {});
              })),
            a
          );
        }
        a && a.exports
          ? (a.exports = u)
          : n(16) && n(29)
          ? void 0 ===
              (r = function () {
                return u;
              }.call(e, n, e, a)) || (a.exports = r)
          : (this.xor128 = u);
      })(0, t, n(16));
    }.call(this, n(28)(t)));
  },
  function (t, e, n) {
    (function (t) {
      var r;
      !(function (t, a, i) {
        function o(t) {
          var e = this,
            n = "";
          (e.next = function () {
            var t = e.x ^ (e.x >>> 2);
            return (
              (e.x = e.y),
              (e.y = e.z),
              (e.z = e.w),
              (e.w = e.v),
              ((e.d = (e.d + 362437) | 0) +
                (e.v = e.v ^ (e.v << 4) ^ t ^ (t << 1))) |
                0
            );
          }),
            (e.x = 0),
            (e.y = 0),
            (e.z = 0),
            (e.w = 0),
            (e.v = 0),
            t === (0 | t) ? (e.x = t) : (n += t);
          for (var r = 0; r < n.length + 64; r++)
            (e.x ^= 0 | n.charCodeAt(r)),
              r == n.length && (e.d = (e.x << 10) ^ (e.x >>> 4)),
              e.next();
        }
        function s(t, e) {
          return (
            (e.x = t.x),
            (e.y = t.y),
            (e.z = t.z),
            (e.w = t.w),
            (e.v = t.v),
            (e.d = t.d),
            e
          );
        }
        function u(t, e) {
          var n = new o(t),
            r = e && e.state,
            a = function () {
              return (n.next() >>> 0) / 4294967296;
            };
          return (
            (a.double = function () {
              do {
                var t =
                  ((n.next() >>> 11) + (n.next() >>> 0) / 4294967296) /
                  (1 << 21);
              } while (0 === t);
              return t;
            }),
            (a.int32 = n.next),
            (a.quick = a),
            r &&
              ("object" == typeof r && s(r, n),
              (a.state = function () {
                return s(n, {});
              })),
            a
          );
        }
        a && a.exports
          ? (a.exports = u)
          : n(16) && n(29)
          ? void 0 ===
              (r = function () {
                return u;
              }.call(e, n, e, a)) || (a.exports = r)
          : (this.xorwow = u);
      })(0, t, n(16));
    }.call(this, n(28)(t)));
  },
  function (t, e, n) {
    (function (t) {
      var r;
      !(function (t, a, i) {
        function o(t) {
          var e = this;
          (e.next = function () {
            var t,
              n,
              r = e.x,
              a = e.i;
            return (
              (t = r[a]),
              (n = (t ^= t >>> 7) ^ (t << 24)),
              (n ^= (t = r[(a + 1) & 7]) ^ (t >>> 10)),
              (n ^= (t = r[(a + 3) & 7]) ^ (t >>> 3)),
              (n ^= (t = r[(a + 4) & 7]) ^ (t << 7)),
              (t = r[(a + 7) & 7]),
              (n ^= (t ^= t << 13) ^ (t << 9)),
              (r[a] = n),
              (e.i = (a + 1) & 7),
              n
            );
          }),
            (function (t, e) {
              var n,
                r = [];
              if (e === (0 | e)) r[0] = e;
              else
                for (e = "" + e, n = 0; n < e.length; ++n)
                  r[7 & n] =
                    (r[7 & n] << 15) ^
                    ((e.charCodeAt(n) + r[(n + 1) & 7]) << 13);
              for (; r.length < 8; ) r.push(0);
              for (n = 0; n < 8 && 0 === r[n]; ++n);
              for (
                8 == n ? (r[7] = -1) : r[n], t.x = r, t.i = 0, n = 256;
                n > 0;
                --n
              )
                t.next();
            })(e, t);
        }
        function s(t, e) {
          return (e.x = t.x.slice()), (e.i = t.i), e;
        }
        function u(t, e) {
          null == t && (t = +new Date());
          var n = new o(t),
            r = e && e.state,
            a = function () {
              return (n.next() >>> 0) / 4294967296;
            };
          return (
            (a.double = function () {
              do {
                var t =
                  ((n.next() >>> 11) + (n.next() >>> 0) / 4294967296) /
                  (1 << 21);
              } while (0 === t);
              return t;
            }),
            (a.int32 = n.next),
            (a.quick = a),
            r &&
              (r.x && s(r, n),
              (a.state = function () {
                return s(n, {});
              })),
            a
          );
        }
        a && a.exports
          ? (a.exports = u)
          : n(16) && n(29)
          ? void 0 ===
              (r = function () {
                return u;
              }.call(e, n, e, a)) || (a.exports = r)
          : (this.xorshift7 = u);
      })(0, t, n(16));
    }.call(this, n(28)(t)));
  },
  function (t, e, n) {
    (function (t) {
      var r;
      !(function (t, a, i) {
        function o(t) {
          var e = this;
          (e.next = function () {
            var t,
              n,
              r = e.w,
              a = e.X,
              i = e.i;
            return (
              (e.w = r = (r + 1640531527) | 0),
              (n = a[(i + 34) & 127]),
              (t = a[(i = (i + 1) & 127)]),
              (n ^= n << 13),
              (t ^= t << 17),
              (n ^= n >>> 15),
              (t ^= t >>> 12),
              (n = a[i] = n ^ t),
              (e.i = i),
              (n + (r ^ (r >>> 16))) | 0
            );
          }),
            (function (t, e) {
              var n,
                r,
                a,
                i,
                o,
                s = [],
                u = 128;
              for (
                e === (0 | e)
                  ? ((r = e), (e = null))
                  : ((e += "\0"), (r = 0), (u = Math.max(u, e.length))),
                  a = 0,
                  i = -32;
                i < u;
                ++i
              )
                e && (r ^= e.charCodeAt((i + 32) % e.length)),
                  0 === i && (o = r),
                  (r ^= r << 10),
                  (r ^= r >>> 15),
                  (r ^= r << 4),
                  (r ^= r >>> 13),
                  i >= 0 &&
                    ((o = (o + 1640531527) | 0),
                    (a = 0 == (n = s[127 & i] ^= r + o) ? a + 1 : 0));
              for (
                a >= 128 && (s[127 & ((e && e.length) || 0)] = -1),
                  a = 127,
                  i = 512;
                i > 0;
                --i
              )
                (r = s[(a + 34) & 127]),
                  (n = s[(a = (a + 1) & 127)]),
                  (r ^= r << 13),
                  (n ^= n << 17),
                  (r ^= r >>> 15),
                  (n ^= n >>> 12),
                  (s[a] = r ^ n);
              (t.w = o), (t.X = s), (t.i = a);
            })(e, t);
        }
        function s(t, e) {
          return (e.i = t.i), (e.w = t.w), (e.X = t.X.slice()), e;
        }
        function u(t, e) {
          null == t && (t = +new Date());
          var n = new o(t),
            r = e && e.state,
            a = function () {
              return (n.next() >>> 0) / 4294967296;
            };
          return (
            (a.double = function () {
              do {
                var t =
                  ((n.next() >>> 11) + (n.next() >>> 0) / 4294967296) /
                  (1 << 21);
              } while (0 === t);
              return t;
            }),
            (a.int32 = n.next),
            (a.quick = a),
            r &&
              (r.X && s(r, n),
              (a.state = function () {
                return s(n, {});
              })),
            a
          );
        }
        a && a.exports
          ? (a.exports = u)
          : n(16) && n(29)
          ? void 0 ===
              (r = function () {
                return u;
              }.call(e, n, e, a)) || (a.exports = r)
          : (this.xor4096 = u);
      })(0, t, n(16));
    }.call(this, n(28)(t)));
  },
  function (t, e, n) {
    (function (t) {
      var r;
      !(function (t, a, i) {
        function o(t) {
          var e = this,
            n = "";
          (e.next = function () {
            var t = e.b,
              n = e.c,
              r = e.d,
              a = e.a;
            return (
              (t = (t << 25) ^ (t >>> 7) ^ n),
              (n = (n - r) | 0),
              (r = (r << 24) ^ (r >>> 8) ^ a),
              (a = (a - t) | 0),
              (e.b = t = (t << 20) ^ (t >>> 12) ^ n),
              (e.c = n = (n - r) | 0),
              (e.d = (r << 16) ^ (n >>> 16) ^ a),
              (e.a = (a - t) | 0)
            );
          }),
            (e.a = 0),
            (e.b = 0),
            (e.c = -1640531527),
            (e.d = 1367130551),
            t === Math.floor(t)
              ? ((e.a = (t / 4294967296) | 0), (e.b = 0 | t))
              : (n += t);
          for (var r = 0; r < n.length + 20; r++)
            (e.b ^= 0 | n.charCodeAt(r)), e.next();
        }
        function s(t, e) {
          return (e.a = t.a), (e.b = t.b), (e.c = t.c), (e.d = t.d), e;
        }
        function u(t, e) {
          var n = new o(t),
            r = e && e.state,
            a = function () {
              return (n.next() >>> 0) / 4294967296;
            };
          return (
            (a.double = function () {
              do {
                var t =
                  ((n.next() >>> 11) + (n.next() >>> 0) / 4294967296) /
                  (1 << 21);
              } while (0 === t);
              return t;
            }),
            (a.int32 = n.next),
            (a.quick = a),
            r &&
              ("object" == typeof r && s(r, n),
              (a.state = function () {
                return s(n, {});
              })),
            a
          );
        }
        a && a.exports
          ? (a.exports = u)
          : n(16) && n(29)
          ? void 0 ===
              (r = function () {
                return u;
              }.call(e, n, e, a)) || (a.exports = r)
          : (this.tychei = u);
      })(0, t, n(16));
    }.call(this, n(28)(t)));
  },
  function (t, e, n) {
    var r;
    !(function (a, i) {
      var o,
        s = this,
        u = i.pow(256, 6),
        c = i.pow(2, 52),
        l = 2 * c;
      function h(t, e, n) {
        var r = [],
          h = f(
            (function t(e, n) {
              var r,
                a = [],
                i = typeof e;
              if (n && "object" == i)
                for (r in e)
                  try {
                    a.push(t(e[r], n - 1));
                  } catch (t) {}
              return a.length ? a : "string" == i ? e : e + "\0";
            })(
              (e = 1 == e ? { entropy: !0 } : e || {}).entropy
                ? [t, m(a)]
                : null == t
                ? (function () {
                    try {
                      var t;
                      return (
                        o && (t = o.randomBytes)
                          ? (t = t(256))
                          : ((t = new Uint8Array(256)),
                            (s.crypto || s.msCrypto).getRandomValues(t)),
                        m(t)
                      );
                    } catch (t) {
                      var e = s.navigator,
                        n = e && e.plugins;
                      return [+new Date(), s, n, s.screen, m(a)];
                    }
                  })()
                : t,
              3
            ),
            r
          ),
          g = new d(r),
          b = function () {
            for (var t = g.g(6), e = u, n = 0; t < c; )
              (t = 256 * (t + n)), (e *= 256), (n = g.g(1));
            for (; t >= l; ) (t /= 2), (e /= 2), (n >>>= 1);
            return (t + n) / e;
          };
        return (
          (b.int32 = function () {
            return 0 | g.g(4);
          }),
          (b.quick = function () {
            return g.g(4) / 4294967296;
          }),
          (b.double = b),
          f(m(g.S), a),
          (
            e.pass ||
            n ||
            function (t, e, n, r) {
              return (
                r &&
                  (r.S && p(r, g),
                  (t.state = function () {
                    return p(g, {});
                  })),
                n ? ((i.random = t), e) : t
              );
            }
          )(b, h, "global" in e ? e.global : this == i, e.state)
        );
      }
      function d(t) {
        var e,
          n = t.length,
          r = this,
          a = 0,
          i = (r.i = r.j = 0),
          o = (r.S = []);
        for (n || (t = [n++]); a < 256; ) o[a] = a++;
        for (a = 0; a < 256; a++)
          (o[a] = o[(i = 255 & (i + t[a % n] + (e = o[a])))]), (o[i] = e);
        (r.g = function (t) {
          for (var e, n = 0, a = r.i, i = r.j, o = r.S; t--; )
            (e = o[(a = 255 & (a + 1))]),
              (n =
                256 * n +
                o[255 & ((o[a] = o[(i = 255 & (i + e))]) + (o[i] = e))]);
          return (r.i = a), (r.j = i), n;
        })(256);
      }
      function p(t, e) {
        return (e.i = t.i), (e.j = t.j), (e.S = t.S.slice()), e;
      }
      function f(t, e) {
        for (var n, r = t + "", a = 0; a < r.length; )
          e[255 & a] = 255 & ((n ^= 19 * e[255 & a]) + r.charCodeAt(a++));
        return m(e);
      }
      function m(t) {
        return String.fromCharCode.apply(0, t);
      }
      if (((i.seedrandom = h), f(i.random(), a), t.exports)) {
        t.exports = h;
        try {
          o = n(78);
        } catch (t) {}
      } else
        void 0 ===
          (r = function () {
            return h;
          }.call(e, n, e, t)) || (t.exports = r);
    })([], Math);
  },
  function (t, e) {},
  function (t, e) {},
  function (t, e) {},
  function (t, e, n) {
    "use strict";
    n.r(e);
    var r = {};
    n.r(r),
      n.d(r, "drawContour", function () {
        return u;
      }),
      n.d(r, "drawDetections", function () {
        return et;
      }),
      n.d(r, "drawFaceExpressions", function () {
        return Lt;
      }),
      n.d(r, "DrawBoxOptions", function () {
        return Z;
      }),
      n.d(r, "DrawBox", function () {
        return tt;
      }),
      n.d(r, "DrawFaceLandmarksOptions", function () {
        return Vt;
      }),
      n.d(r, "DrawFaceLandmarks", function () {
        return Ut;
      }),
      n.d(r, "drawFaceLandmarks", function () {
        return Gt;
      }),
      n.d(r, "AnchorPosition", function () {
        return q;
      }),
      n.d(r, "DrawTextFieldOptions", function () {
        return J;
      }),
      n.d(r, "DrawTextField", function () {
        return Q;
      });
    var a = {};
    n.r(a),
      n.d(a, "array", function () {
        return hu;
      }),
      n.d(a, "Dataset", function () {
        return cu;
      }),
      n.d(a, "zip", function () {
        return du;
      }),
      n.d(a, "CSVDataset", function () {
        return xu;
      }),
      n.d(a, "TextLineDataset", function () {
        return fu;
      }),
      n.d(a, "csv", function () {
        return Au;
      }),
      n.d(a, "func", function () {
        return Tu;
      }),
      n.d(a, "generator", function () {
        return _u;
      }),
      n.d(a, "microphone", function () {
        return Fu;
      }),
      n.d(a, "webcam", function () {
        return Du;
      }),
      n.d(a, "FileDataSource", function () {
        return Nu;
      }),
      n.d(a, "URLDataSource", function () {
        return Ru;
      }),
      n.d(a, "version_data", function () {
        return Mu;
      });
    var i = {};
    n.r(i),
      n.d(i, "maxImpl", function () {
        return ju;
      }),
      n.d(i, "transposeImpl", function () {
        return $u;
      });
    var o = n(39),
      s = n(4);
    function u(t, e, n) {
      if (
        (void 0 === n && (n = !1),
        t.beginPath(),
        e.slice(1).forEach(function (n, r) {
          var a = n.x,
            i = n.y,
            o = e[r];
          t.moveTo(o.x, o.y), t.lineTo(a, i);
        }),
        n)
      ) {
        var r = e[e.length - 1],
          a = e[0];
        if (!r || !a) return;
        t.moveTo(r.x, r.y), t.lineTo(a.x, a.y);
      }
      t.stroke();
    }
    var c = n(7),
      l = (function () {
        function t(t, e) {
          if (!y(t) || !y(e))
            throw new Error(
              "Dimensions.constructor - expected width and height to be valid numbers, instead have " +
                JSON.stringify({ width: t, height: e })
            );
          (this._width = t), (this._height = e);
        }
        return (
          Object.defineProperty(t.prototype, "width", {
            get: function () {
              return this._width;
            },
            enumerable: !0,
            configurable: !0,
          }),
          Object.defineProperty(t.prototype, "height", {
            get: function () {
              return this._height;
            },
            enumerable: !0,
            configurable: !0,
          }),
          (t.prototype.reverse = function () {
            return new t(1 / this.width, 1 / this.height);
          }),
          t
        );
      })();
    function h(t, e) {
      return t instanceof s.a && t.shape.length === e;
    }
    function d(t) {
      return h(t, 3);
    }
    function p(t) {
      return h(t, 4);
    }
    function f(t) {
      return t % 2 == 0;
    }
    function m(t, e) {
      void 0 === e && (e = 2);
      var n = Math.pow(10, e);
      return Math.floor(t * n) / n;
    }
    function g(t) {
      return t && t.width && t.height;
    }
    function b(t) {
      return t
        .reduce(function (t, e) {
          return t.add(e);
        }, new w(0, 0))
        .div(new w(t.length, t.length));
    }
    function v(t, e, n) {
      return Array(t)
        .fill(0)
        .map(function (t, r) {
          return e + r * n;
        });
    }
    function y(t) {
      return (!!t && t !== 1 / 0 && t !== -1 / 0 && !isNaN(t)) || 0 === t;
    }
    function x(t) {
      return y(t) && 0 <= t && t <= 1;
    }
    var w = (function () {
        function t(t, e) {
          (this._x = t), (this._y = e);
        }
        return (
          Object.defineProperty(t.prototype, "x", {
            get: function () {
              return this._x;
            },
            enumerable: !0,
            configurable: !0,
          }),
          Object.defineProperty(t.prototype, "y", {
            get: function () {
              return this._y;
            },
            enumerable: !0,
            configurable: !0,
          }),
          (t.prototype.add = function (e) {
            return new t(this.x + e.x, this.y + e.y);
          }),
          (t.prototype.sub = function (e) {
            return new t(this.x - e.x, this.y - e.y);
          }),
          (t.prototype.mul = function (e) {
            return new t(this.x * e.x, this.y * e.y);
          }),
          (t.prototype.div = function (e) {
            return new t(this.x / e.x, this.y / e.y);
          }),
          (t.prototype.abs = function () {
            return new t(Math.abs(this.x), Math.abs(this.y));
          }),
          (t.prototype.magnitude = function () {
            return Math.sqrt(Math.pow(this.x, 2) + Math.pow(this.y, 2));
          }),
          (t.prototype.floor = function () {
            return new t(Math.floor(this.x), Math.floor(this.y));
          }),
          t
        );
      })(),
      C = (function () {
        function t(e, n) {
          void 0 === n && (n = !0);
          var r = e || {},
            a = [r.left, r.top, r.right, r.bottom].every(y),
            i = [r.x, r.y, r.width, r.height].every(y);
          if (!i && !a)
            throw new Error(
              "Box.constructor - expected box to be IBoundingBox | IRect, instead have " +
                JSON.stringify(r)
            );
          var o = i
              ? [r.x, r.y, r.width, r.height]
              : [r.left, r.top, r.right - r.left, r.bottom - r.top],
            s = o[0],
            u = o[1],
            c = o[2],
            l = o[3];
          t.assertIsValidBox(
            { x: s, y: u, width: c, height: l },
            "Box.constructor",
            n
          ),
            (this._x = s),
            (this._y = u),
            (this._width = c),
            (this._height = l);
        }
        return (
          (t.isRect = function (t) {
            return !!t && [t.x, t.y, t.width, t.height].every(y);
          }),
          (t.assertIsValidBox = function (e, n, r) {
            if ((void 0 === r && (r = !1), !t.isRect(e)))
              throw new Error(
                n +
                  " - invalid box: " +
                  JSON.stringify(e) +
                  ", expected object with properties x, y, width, height"
              );
            if (!r && (e.width < 0 || e.height < 0))
              throw new Error(
                n +
                  " - width (" +
                  e.width +
                  ") and height (" +
                  e.height +
                  ") must be positive numbers"
              );
          }),
          Object.defineProperty(t.prototype, "x", {
            get: function () {
              return this._x;
            },
            enumerable: !0,
            configurable: !0,
          }),
          Object.defineProperty(t.prototype, "y", {
            get: function () {
              return this._y;
            },
            enumerable: !0,
            configurable: !0,
          }),
          Object.defineProperty(t.prototype, "width", {
            get: function () {
              return this._width;
            },
            enumerable: !0,
            configurable: !0,
          }),
          Object.defineProperty(t.prototype, "height", {
            get: function () {
              return this._height;
            },
            enumerable: !0,
            configurable: !0,
          }),
          Object.defineProperty(t.prototype, "left", {
            get: function () {
              return this.x;
            },
            enumerable: !0,
            configurable: !0,
          }),
          Object.defineProperty(t.prototype, "top", {
            get: function () {
              return this.y;
            },
            enumerable: !0,
            configurable: !0,
          }),
          Object.defineProperty(t.prototype, "right", {
            get: function () {
              return this.x + this.width;
            },
            enumerable: !0,
            configurable: !0,
          }),
          Object.defineProperty(t.prototype, "bottom", {
            get: function () {
              return this.y + this.height;
            },
            enumerable: !0,
            configurable: !0,
          }),
          Object.defineProperty(t.prototype, "area", {
            get: function () {
              return this.width * this.height;
            },
            enumerable: !0,
            configurable: !0,
          }),
          Object.defineProperty(t.prototype, "topLeft", {
            get: function () {
              return new w(this.left, this.top);
            },
            enumerable: !0,
            configurable: !0,
          }),
          Object.defineProperty(t.prototype, "topRight", {
            get: function () {
              return new w(this.right, this.top);
            },
            enumerable: !0,
            configurable: !0,
          }),
          Object.defineProperty(t.prototype, "bottomLeft", {
            get: function () {
              return new w(this.left, this.bottom);
            },
            enumerable: !0,
            configurable: !0,
          }),
          Object.defineProperty(t.prototype, "bottomRight", {
            get: function () {
              return new w(this.right, this.bottom);
            },
            enumerable: !0,
            configurable: !0,
          }),
          (t.prototype.round = function () {
            var e = [this.x, this.y, this.width, this.height].map(function (t) {
              return Math.round(t);
            });
            return new t({ x: e[0], y: e[1], width: e[2], height: e[3] });
          }),
          (t.prototype.floor = function () {
            var e = [this.x, this.y, this.width, this.height].map(function (t) {
              return Math.floor(t);
            });
            return new t({ x: e[0], y: e[1], width: e[2], height: e[3] });
          }),
          (t.prototype.toSquare = function () {
            var e = this.x,
              n = this.y,
              r = this.width,
              a = this.height,
              i = Math.abs(r - a);
            return (
              r < a && ((e -= i / 2), (r += i)),
              a < r && ((n -= i / 2), (a += i)),
              new t({ x: e, y: n, width: r, height: a })
            );
          }),
          (t.prototype.rescale = function (e) {
            var n = g(e) ? e.width : e,
              r = g(e) ? e.height : e;
            return new t({
              x: this.x * n,
              y: this.y * r,
              width: this.width * n,
              height: this.height * r,
            });
          }),
          (t.prototype.pad = function (e, n) {
            var r = [
              this.x - e / 2,
              this.y - n / 2,
              this.width + e,
              this.height + n,
            ];
            return new t({ x: r[0], y: r[1], width: r[2], height: r[3] });
          }),
          (t.prototype.clipAtImageBorders = function (e, n) {
            var r = this.x,
              a = this.y,
              i = this.right,
              o = this.bottom,
              s = Math.max(r, 0),
              u = Math.max(a, 0),
              c = i - s,
              l = o - u;
            return new t({
              x: s,
              y: u,
              width: Math.min(c, e - s),
              height: Math.min(l, n - u),
            }).floor();
          }),
          (t.prototype.shift = function (e, n) {
            var r = this.width,
              a = this.height;
            return new t({ x: this.x + e, y: this.y + n, width: r, height: a });
          }),
          (t.prototype.padAtBorders = function (t, e) {
            var n = this.width + 1,
              r = this.height + 1,
              a = n,
              i = r,
              o = this.left,
              s = this.top,
              u = this.right,
              c = this.bottom;
            return (
              u > e && ((a = -u + e + n), (u = e)),
              c > t && ((i = -c + t + r), (c = t)),
              o < 1 && ((i = 2 - o), (o = 1)),
              s < 1 && ((i = 2 - s), (s = 1)),
              {
                dy: 1,
                edy: i,
                dx: 1,
                edx: a,
                y: s,
                ey: c,
                x: o,
                ex: u,
                w: n,
                h: r,
              }
            );
          }),
          (t.prototype.calibrate = function (e) {
            return new t({
              left: this.left + e.left * this.width,
              top: this.top + e.top * this.height,
              right: this.right + e.right * this.width,
              bottom: this.bottom + e.bottom * this.height,
            })
              .toSquare()
              .round();
          }),
          t
        );
      })(),
      O = (function (t) {
        function e(e, n, r, a, i) {
          return (
            void 0 === i && (i = !1),
            t.call(this, { left: e, top: n, right: r, bottom: a }, i) || this
          );
        }
        return Object(c.c)(e, t), e;
      })(C),
      E = (function () {
        function t(t, e, n, r, a) {
          (this._imageDims = new l(a.width, a.height)),
            (this._score = t),
            (this._classScore = e),
            (this._className = n),
            (this._box = new C(r).rescale(this._imageDims));
        }
        return (
          Object.defineProperty(t.prototype, "score", {
            get: function () {
              return this._score;
            },
            enumerable: !0,
            configurable: !0,
          }),
          Object.defineProperty(t.prototype, "classScore", {
            get: function () {
              return this._classScore;
            },
            enumerable: !0,
            configurable: !0,
          }),
          Object.defineProperty(t.prototype, "className", {
            get: function () {
              return this._className;
            },
            enumerable: !0,
            configurable: !0,
          }),
          Object.defineProperty(t.prototype, "box", {
            get: function () {
              return this._box;
            },
            enumerable: !0,
            configurable: !0,
          }),
          Object.defineProperty(t.prototype, "imageDims", {
            get: function () {
              return this._imageDims;
            },
            enumerable: !0,
            configurable: !0,
          }),
          Object.defineProperty(t.prototype, "imageWidth", {
            get: function () {
              return this.imageDims.width;
            },
            enumerable: !0,
            configurable: !0,
          }),
          Object.defineProperty(t.prototype, "imageHeight", {
            get: function () {
              return this.imageDims.height;
            },
            enumerable: !0,
            configurable: !0,
          }),
          Object.defineProperty(t.prototype, "relativeBox", {
            get: function () {
              return new C(this._box).rescale(this.imageDims.reverse());
            },
            enumerable: !0,
            configurable: !0,
          }),
          (t.prototype.forSize = function (e, n) {
            return new t(
              this.score,
              this.classScore,
              this.className,
              this.relativeBox,
              { width: e, height: n }
            );
          }),
          t
        );
      })(),
      S = (function (t) {
        function e(e, n, r) {
          return t.call(this, e, e, "", n, r) || this;
        }
        return (
          Object(c.c)(e, t),
          (e.prototype.forSize = function (n, r) {
            var a = t.prototype.forSize.call(this, n, r);
            return new e(a.score, a.relativeBox, a.imageDims);
          }),
          e
        );
      })(E);
    function I(t, e, n) {
      void 0 === n && (n = !0);
      var r =
        Math.max(0, Math.min(t.right, e.right) - Math.max(t.left, e.left)) *
        Math.max(0, Math.min(t.bottom, e.bottom) - Math.max(t.top, e.top));
      return n ? r / (t.area + e.area - r) : r / Math.min(t.area, e.area);
    }
    function k(t, e, n, r) {
      void 0 === r && (r = !0);
      for (
        var a = e
            .map(function (t, e) {
              return { score: t, boxIndex: e };
            })
            .sort(function (t, e) {
              return t.score - e.score;
            })
            .map(function (t) {
              return t.boxIndex;
            }),
          i = [],
          o = function () {
            var e = a.pop();
            i.push(e);
            for (var o = a, s = [], u = 0; u < o.length; u++) {
              var c = o[u],
                l = t[e],
                h = t[c];
              s.push(I(l, h, r));
            }
            a = a.filter(function (t, e) {
              return s[e] <= n;
            });
          };
        a.length > 0;

      )
        o();
      return i;
    }
    function N(t, e) {
      return s.L(function () {
        var n = e[0],
          r = e[1],
          a = e[2],
          i = s.n(Object(c.e)(t.shape.slice(0, 3), [1]), n),
          o = s.n(Object(c.e)(t.shape.slice(0, 3), [1]), r),
          u = s.n(Object(c.e)(t.shape.slice(0, 3), [1]), a),
          l = s.h([i, o, u], 3);
        return s.F(t, l);
      });
    }
    function R(t) {
      return 1 / (1 + Math.exp(-t));
    }
    var A = (function (t) {
        function e(e, n, r, a, i) {
          return (
            void 0 === i && (i = !1),
            t.call(this, { x: e, y: n, width: r, height: a }, i) || this
          );
        }
        return Object(c.c)(e, t), e;
      })(C),
      T = (function () {
        function t(t, e, n) {
          void 0 === n && (n = new w(0, 0));
          var r = e.width,
            a = e.height;
          (this._imgDims = new l(r, a)),
            (this._shift = n),
            (this._positions = t.map(function (t) {
              return t.mul(new w(r, a)).add(n);
            }));
        }
        return (
          Object.defineProperty(t.prototype, "shift", {
            get: function () {
              return new w(this._shift.x, this._shift.y);
            },
            enumerable: !0,
            configurable: !0,
          }),
          Object.defineProperty(t.prototype, "imageWidth", {
            get: function () {
              return this._imgDims.width;
            },
            enumerable: !0,
            configurable: !0,
          }),
          Object.defineProperty(t.prototype, "imageHeight", {
            get: function () {
              return this._imgDims.height;
            },
            enumerable: !0,
            configurable: !0,
          }),
          Object.defineProperty(t.prototype, "positions", {
            get: function () {
              return this._positions;
            },
            enumerable: !0,
            configurable: !0,
          }),
          Object.defineProperty(t.prototype, "relativePositions", {
            get: function () {
              var t = this;
              return this._positions.map(function (e) {
                return e.sub(t._shift).div(new w(t.imageWidth, t.imageHeight));
              });
            },
            enumerable: !0,
            configurable: !0,
          }),
          (t.prototype.forSize = function (t, e) {
            return new this.constructor(this.relativePositions, {
              width: t,
              height: e,
            });
          }),
          (t.prototype.shiftBy = function (t, e) {
            return new this.constructor(
              this.relativePositions,
              this._imgDims,
              new w(t, e)
            );
          }),
          (t.prototype.shiftByPoint = function (t) {
            return this.shiftBy(t.x, t.y);
          }),
          (t.prototype.align = function (t, e) {
            if ((void 0 === e && (e = {}), t)) {
              var n = t instanceof S ? t.box.floor() : new C(t);
              return this.shiftBy(n.x, n.y).align(null, e);
            }
            var r = Object.assign(
                {},
                { useDlibAlignment: !1, minBoxPadding: 0.2 },
                e
              ),
              a = r.useDlibAlignment,
              i = r.minBoxPadding;
            return a ? this.alignDlib() : this.alignMinBbox(i);
          }),
          (t.prototype.alignDlib = function () {
            var t = this.getRefPointsForAlignment(),
              e = t[0],
              n = t[1],
              r = t[2],
              a = function (t) {
                return r.sub(t).magnitude();
              },
              i = (a(e) + a(n)) / 2,
              o = Math.floor(i / 0.45),
              s = b(t),
              u = Math.floor(Math.max(0, s.x - 0.5 * o)),
              c = Math.floor(Math.max(0, s.y - 0.43 * o));
            return new A(
              u,
              c,
              Math.min(o, this.imageWidth + u),
              Math.min(o, this.imageHeight + c)
            );
          }),
          (t.prototype.alignMinBbox = function (t) {
            var e,
              n,
              r,
              a,
              i,
              o,
              s,
              u =
                ((e = this.positions),
                (n = e.map(function (t) {
                  return t.x;
                })),
                (r = e.map(function (t) {
                  return t.y;
                })),
                (a = n.reduce(function (t, e) {
                  return e < t ? e : t;
                }, 1 / 0)),
                (i = r.reduce(function (t, e) {
                  return e < t ? e : t;
                }, 1 / 0)),
                (o = n.reduce(function (t, e) {
                  return t < e ? e : t;
                }, 0)),
                (s = r.reduce(function (t, e) {
                  return t < e ? e : t;
                }, 0)),
                new O(a, i, o, s));
            return u.pad(u.width * t, u.height * t);
          }),
          (t.prototype.getRefPointsForAlignment = function () {
            throw new Error(
              "getRefPointsForAlignment not implemented by base class"
            );
          }),
          t
        );
      })(),
      _ = (function (t) {
        function e() {
          return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
          Object(c.c)(e, t),
          (e.prototype.getRefPointsForAlignment = function () {
            var t = this.positions;
            return [t[0], t[1], b([t[3], t[4]])];
          }),
          e
        );
      })(T),
      D = (function (t) {
        function e() {
          return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
          Object(c.c)(e, t),
          (e.prototype.getJawOutline = function () {
            return this.positions.slice(0, 17);
          }),
          (e.prototype.getLeftEyeBrow = function () {
            return this.positions.slice(17, 22);
          }),
          (e.prototype.getRightEyeBrow = function () {
            return this.positions.slice(22, 27);
          }),
          (e.prototype.getNose = function () {
            return this.positions.slice(27, 36);
          }),
          (e.prototype.getLeftEye = function () {
            return this.positions.slice(36, 42);
          }),
          (e.prototype.getRightEye = function () {
            return this.positions.slice(42, 48);
          }),
          (e.prototype.getMouth = function () {
            return this.positions.slice(48, 68);
          }),
          (e.prototype.getRefPointsForAlignment = function () {
            return [this.getLeftEye(), this.getRightEye(), this.getMouth()].map(
              b
            );
          }),
          e
        );
      })(T),
      F = (function () {
        function t(t, e) {
          (this._label = t), (this._distance = e);
        }
        return (
          Object.defineProperty(t.prototype, "label", {
            get: function () {
              return this._label;
            },
            enumerable: !0,
            configurable: !0,
          }),
          Object.defineProperty(t.prototype, "distance", {
            get: function () {
              return this._distance;
            },
            enumerable: !0,
            configurable: !0,
          }),
          (t.prototype.toString = function (t) {
            return (
              void 0 === t && (t = !0),
              this.label + (t ? " (" + m(this.distance) + ")" : "")
            );
          }),
          t
        );
      })(),
      M = (function (t) {
        function e(e, n) {
          var r = t.call(this, e) || this;
          return (r._label = n), r;
        }
        return (
          Object(c.c)(e, t),
          (e.assertIsValidLabeledBox = function (t, e) {
            if ((C.assertIsValidBox(t, e), !y(t.label)))
              throw new Error(
                e +
                  " - expected property label (" +
                  t.label +
                  ") to be a number"
              );
          }),
          Object.defineProperty(e.prototype, "label", {
            get: function () {
              return this._label;
            },
            enumerable: !0,
            configurable: !0,
          }),
          e
        );
      })(C),
      j = (function () {
        function t(t, e) {
          if ("string" != typeof t)
            throw new Error(
              "LabeledFaceDescriptors - constructor expected label to be a string"
            );
          if (
            !Array.isArray(e) ||
            e.some(function (t) {
              return !(t instanceof Float32Array);
            })
          )
            throw new Error(
              "LabeledFaceDescriptors - constructor expected descriptors to be an array of Float32Array"
            );
          (this._label = t), (this._descriptors = e);
        }
        return (
          Object.defineProperty(t.prototype, "label", {
            get: function () {
              return this._label;
            },
            enumerable: !0,
            configurable: !0,
          }),
          Object.defineProperty(t.prototype, "descriptors", {
            get: function () {
              return this._descriptors;
            },
            enumerable: !0,
            configurable: !0,
          }),
          (t.prototype.toJSON = function () {
            return {
              label: this.label,
              descriptors: this.descriptors.map(function (t) {
                return Array.from(t);
              }),
            };
          }),
          (t.fromJSON = function (e) {
            var n = e.descriptors.map(function (t) {
              return new Float32Array(t);
            });
            return new t(e.label, n);
          }),
          t
        );
      })();
    !(function (t) {
      function e(e, n, r, a) {
        var i = t.call(this, e, n) || this;
        return (i._score = r), (i._classScore = a), i;
      }
      Object(c.c)(e, t),
        (e.assertIsValidPredictedBox = function (t, e) {
          if (
            (M.assertIsValidLabeledBox(t, e), !x(t.score) || !x(t.classScore))
          )
            throw new Error(
              e +
                " - expected properties score (" +
                t.score +
                ") and (" +
                t.classScore +
                ") to be a number between [0, 1]"
            );
        }),
        Object.defineProperty(e.prototype, "score", {
          get: function () {
            return this._score;
          },
          enumerable: !0,
          configurable: !0,
        }),
        Object.defineProperty(e.prototype, "classScore", {
          get: function () {
            return this._classScore;
          },
          enumerable: !0,
          configurable: !0,
        });
    })(M);
    function $(t) {
      return t.detection instanceof S;
    }
    function B(t, e) {
      var n = { detection: e };
      return Object.assign({}, t, n);
    }
    function P() {
      var t =
        window.fetch ||
        function () {
          throw new Error(
            "fetch - missing fetch implementation for browser environment"
          );
        };
      return {
        Canvas: HTMLCanvasElement,
        CanvasRenderingContext2D: CanvasRenderingContext2D,
        Image: HTMLImageElement,
        ImageData: ImageData,
        Video: HTMLVideoElement,
        createCanvasElement: function () {
          return document.createElement("canvas");
        },
        createImageElement: function () {
          return document.createElement("img");
        },
        fetch: t,
        readFile: function () {
          throw new Error(
            "readFile - filesystem not available for browser environment"
          );
        },
      };
    }
    var L = n(34),
      z = n(35);
    function W() {
      return (
        "object" == typeof window &&
        "undefined" != typeof document &&
        "undefined" != typeof HTMLImageElement &&
        "undefined" != typeof HTMLCanvasElement &&
        "undefined" != typeof HTMLVideoElement &&
        "undefined" != typeof ImageData &&
        "undefined" != typeof CanvasRenderingContext2D
      );
    }
    var V,
      U = n(36);
    function G(t) {
      V = t;
    }
    function H() {
      W() && G(P()), Object(U.a)() && G(Object(z.a)());
    }
    var q,
      K = {
        getEnv: function () {
          if (!V)
            throw new Error(
              "getEnv - environment is not defined, check isNodejs() and isBrowser()"
            );
          return V;
        },
        setEnv: G,
        initialize: H,
        createBrowserEnv: P,
        createFileSystem: L.a,
        createNodejsEnv: z.a,
        monkeyPatch: function (t) {
          if ((V || H(), !V))
            throw new Error(
              "monkeyPatch - environment is not defined, check isNodejs() and isBrowser()"
            );
          var e = t.Canvas,
            n = void 0 === e ? V.Canvas : e,
            r = t.Image,
            a = void 0 === r ? V.Image : r;
          (V.Canvas = n),
            (V.Image = a),
            (V.createCanvasElement =
              t.createCanvasElement ||
              function () {
                return new n();
              }),
            (V.createImageElement =
              t.createImageElement ||
              function () {
                return new a();
              }),
            (V.ImageData = t.ImageData || V.ImageData),
            (V.Video = t.Video || V.Video),
            (V.fetch = t.fetch || V.fetch),
            (V.readFile = t.readFile || V.readFile);
        },
        isBrowser: W,
        isNodejs: U.a,
      };
    function X(t) {
      return K.isNodejs() || "string" != typeof t
        ? t
        : document.getElementById(t);
    }
    function Y(t) {
      var e = K.getEnv(),
        n = e.Canvas;
      if (t instanceof e.CanvasRenderingContext2D) return t;
      var r = X(t);
      if (!(r instanceof n))
        throw new Error(
          "resolveContext2d - expected canvas to be of instance of Canvas"
        );
      var a = r.getContext("2d");
      if (!a) throw new Error("resolveContext2d - canvas 2d context is null");
      return a;
    }
    H(),
      (function (t) {
        (t.TOP_LEFT = "TOP_LEFT"),
          (t.TOP_RIGHT = "TOP_RIGHT"),
          (t.BOTTOM_LEFT = "BOTTOM_LEFT"),
          (t.BOTTOM_RIGHT = "BOTTOM_RIGHT");
      })(q || (q = {}));
    var J = function (t) {
        void 0 === t && (t = {});
        var e = t.anchorPosition,
          n = t.backgroundColor,
          r = t.fontColor,
          a = t.fontSize,
          i = t.fontStyle,
          o = t.padding;
        (this.anchorPosition = e || q.TOP_LEFT),
          (this.backgroundColor = n || "rgba(0, 0, 0, 0.5)"),
          (this.fontColor = r || "rgba(255, 255, 255, 1)"),
          (this.fontSize = a || 14),
          (this.fontStyle = i || "Georgia"),
          (this.padding = o || 4);
      },
      Q = (function () {
        function t(e, n, r) {
          void 0 === r && (r = {}),
            (this.text =
              "string" == typeof e ? [e] : e instanceof t ? e.text : e),
            (this.anchor = n),
            (this.options = new J(r));
        }
        return (
          (t.prototype.measureWidth = function (t) {
            var e = this.options.padding;
            return (
              this.text
                .map(function (e) {
                  return t.measureText(e).width;
                })
                .reduce(function (t, e) {
                  return t < e ? e : t;
                }, 0) +
              2 * e
            );
          }),
          (t.prototype.measureHeight = function () {
            var t = this.options,
              e = t.fontSize,
              n = t.padding;
            return this.text.length * e + 2 * n;
          }),
          (t.prototype.getUpperLeft = function (t, e) {
            var n = this.options.anchorPosition,
              r = n === q.BOTTOM_RIGHT || n === q.TOP_RIGHT,
              a = n === q.BOTTOM_LEFT || n === q.BOTTOM_RIGHT,
              i = this.measureWidth(t),
              o = this.measureHeight(),
              s = r ? this.anchor.x - i : this.anchor.x,
              u = a ? this.anchor.y - o : this.anchor.y;
            if (e) {
              var c = e.width,
                l = e.height;
              return {
                x: Math.max(Math.min(s, c - i), 0),
                y: Math.max(Math.min(u, l - o), 0),
              };
            }
            return { x: s, y: u };
          }),
          (t.prototype.draw = function (t) {
            var e = X(t),
              n = Y(e),
              r = this.options,
              a = r.backgroundColor,
              i = r.fontColor,
              o = r.fontSize,
              s = r.fontStyle,
              u = r.padding;
            n.font = o + "px " + s;
            var c = this.measureWidth(n),
              l = this.measureHeight();
            n.fillStyle = a;
            var h = this.getUpperLeft(n, e);
            n.fillRect(h.x, h.y, c, l),
              (n.fillStyle = i),
              this.text.forEach(function (t, e) {
                var r = u + h.x,
                  a = u + h.y + (e + 1) * o;
                n.fillText(t, r, a);
              });
          }),
          t
        );
      })(),
      Z = function (t) {
        void 0 === t && (t = {});
        var e = t.boxColor,
          n = t.lineWidth,
          r = t.label,
          a = t.drawLabelOptions;
        (this.boxColor = e || "rgba(0, 0, 255, 1)"),
          (this.lineWidth = n || 2),
          (this.label = r);
        var i = {
          anchorPosition: q.BOTTOM_LEFT,
          backgroundColor: this.boxColor,
        };
        this.drawLabelOptions = new J(Object.assign({}, i, a));
      },
      tt = (function () {
        function t(t, e) {
          void 0 === e && (e = {}),
            (this.box = new C(t)),
            (this.options = new Z(e));
        }
        return (
          (t.prototype.draw = function (t) {
            var e = Y(t),
              n = this.options,
              r = n.boxColor,
              a = n.lineWidth,
              i = this.box,
              o = i.x,
              s = i.y,
              u = i.width,
              c = i.height;
            (e.strokeStyle = r), (e.lineWidth = a), e.strokeRect(o, s, u, c);
            var l = this.options.label;
            l &&
              new Q(
                [l],
                { x: o - a / 2, y: s },
                this.options.drawLabelOptions
              ).draw(t);
          }),
          t
        );
      })();
    function et(t, e) {
      (Array.isArray(e) ? e : [e]).forEach(function (e) {
        var n = e instanceof S ? e.score : $(e) ? e.detection.score : void 0,
          r = e instanceof S ? e.box : $(e) ? e.detection.box : new C(e),
          a = n ? "" + m(n) : void 0;
        new tt(r, { label: a }).draw(t);
      });
    }
    function nt(t) {
      var e = K.getEnv(),
        n = e.Image,
        r = e.Video;
      return (
        (t instanceof n && t.complete) || (t instanceof r && t.readyState >= 3)
      );
    }
    function rt(t) {
      var e = K.getEnv(),
        n = e.Image,
        r = e.Video;
      return t instanceof n
        ? new l(t.naturalWidth, t.naturalHeight)
        : t instanceof r
        ? new l(t.videoWidth, t.videoHeight)
        : new l(t.width, t.height);
    }
    function at(t) {
      var e = t.width,
        n = t.height,
        r = (0, K.getEnv().createCanvasElement)();
      return (r.width = e), (r.height = n), r;
    }
    function it(t, e) {
      var n = K.getEnv().ImageData;
      if (!(t instanceof n || nt(t)))
        throw new Error(
          "createCanvasFromMedia - media has not finished loading yet"
        );
      var r = e || rt(t),
        a = r.width,
        i = r.height,
        o = at({ width: a, height: i });
      return (
        t instanceof n
          ? Y(o).putImageData(t, 0, 0)
          : Y(o).drawImage(t, 0, 0, a, i),
        o
      );
    }
    function ot(t, e) {
      return Object(c.b)(this, void 0, void 0, function () {
        var n, r, a, i, o, u;
        return Object(c.d)(this, function (c) {
          switch (c.label) {
            case 0:
              return (
                (n = e || K.getEnv().createCanvasElement()),
                (r = t.shape.slice(p(t) ? 1 : 0)),
                (a = r[0]),
                (i = r[1]),
                (o = r[2]),
                (u = s.L(function () {
                  return t.as3D(a, i, o).toInt();
                })),
                [4, s.f.toPixels(u, n)]
              );
            case 1:
              return c.sent(), u.dispose(), [2, n];
          }
        });
      });
    }
    function st(t) {
      var e = K.getEnv(),
        n = e.Image,
        r = e.Canvas,
        a = e.Video;
      return t instanceof n || t instanceof r || t instanceof a;
    }
    var ut = (function () {
      function t(t, e) {
        var n = this;
        if (
          (void 0 === e && (e = !1),
          (this._imageTensors = []),
          (this._canvases = []),
          (this._treatAsBatchInput = !1),
          (this._inputDimensions = []),
          !Array.isArray(t))
        )
          throw new Error(
            "NetInput.constructor - expected inputs to be an Array of TResolvedNetInput or to be instanceof tf.Tensor4D, instead have " +
              t
          );
        (this._treatAsBatchInput = e),
          (this._batchSize = t.length),
          t.forEach(function (t, e) {
            if (d(t))
              return (
                (n._imageTensors[e] = t), void (n._inputDimensions[e] = t.shape)
              );
            if (p(t)) {
              var r = t.shape[0];
              if (1 !== r)
                throw new Error(
                  "NetInput - tf.Tensor4D with batchSize " +
                    r +
                    " passed, but not supported in input array"
                );
              return (
                (n._imageTensors[e] = t),
                void (n._inputDimensions[e] = t.shape.slice(1))
              );
            }
            var a = t instanceof K.getEnv().Canvas ? t : it(t);
            (n._canvases[e] = a),
              (n._inputDimensions[e] = [a.height, a.width, 3]);
          });
      }
      return (
        Object.defineProperty(t.prototype, "imageTensors", {
          get: function () {
            return this._imageTensors;
          },
          enumerable: !0,
          configurable: !0,
        }),
        Object.defineProperty(t.prototype, "canvases", {
          get: function () {
            return this._canvases;
          },
          enumerable: !0,
          configurable: !0,
        }),
        Object.defineProperty(t.prototype, "isBatchInput", {
          get: function () {
            return this.batchSize > 1 || this._treatAsBatchInput;
          },
          enumerable: !0,
          configurable: !0,
        }),
        Object.defineProperty(t.prototype, "batchSize", {
          get: function () {
            return this._batchSize;
          },
          enumerable: !0,
          configurable: !0,
        }),
        Object.defineProperty(t.prototype, "inputDimensions", {
          get: function () {
            return this._inputDimensions;
          },
          enumerable: !0,
          configurable: !0,
        }),
        Object.defineProperty(t.prototype, "inputSize", {
          get: function () {
            return this._inputSize;
          },
          enumerable: !0,
          configurable: !0,
        }),
        Object.defineProperty(t.prototype, "reshapedInputDimensions", {
          get: function () {
            var t = this;
            return v(this.batchSize, 0, 1).map(function (e, n) {
              return t.getReshapedInputDimensions(n);
            });
          },
          enumerable: !0,
          configurable: !0,
        }),
        (t.prototype.getInput = function (t) {
          return this.canvases[t] || this.imageTensors[t];
        }),
        (t.prototype.getInputDimensions = function (t) {
          return this._inputDimensions[t];
        }),
        (t.prototype.getInputHeight = function (t) {
          return this._inputDimensions[t][0];
        }),
        (t.prototype.getInputWidth = function (t) {
          return this._inputDimensions[t][1];
        }),
        (t.prototype.getReshapedInputDimensions = function (t) {
          if ("number" != typeof this.inputSize)
            throw new Error(
              "getReshapedInputDimensions - inputSize not set, toBatchTensor has not been called yet"
            );
          return (function (t, e) {
            var n = t.width,
              r = t.height,
              a = e / Math.max(r, n);
            return new l(Math.round(n * a), Math.round(r * a));
          })(
            { width: this.getInputWidth(t), height: this.getInputHeight(t) },
            this.inputSize
          );
        }),
        (t.prototype.toBatchTensor = function (t, e) {
          var n = this;
          return (
            void 0 === e && (e = !0),
            (this._inputSize = t),
            s.L(function () {
              var r = v(n.batchSize, 0, 1).map(function (r) {
                var a = n.getInput(r);
                if (a instanceof s.a) {
                  var i = p(a) ? a : a.expandDims();
                  return (
                    ((i = (function (t, e) {
                      return (
                        void 0 === e && (e = !1),
                        s.L(function () {
                          var n = t.shape.slice(1),
                            r = n[0],
                            a = n[1];
                          if (r === a) return t;
                          var i = Math.abs(r - a),
                            o = Math.round(i * (e ? 0.5 : 1)),
                            u = r > a ? 2 : 1,
                            c = function (e) {
                              var n = t.shape.slice();
                              return (n[u] = e), s.n(n, 0);
                            },
                            l = c(o),
                            h = i - l.shape[u],
                            d = [e && h ? c(h) : null, t, l]
                              .filter(function (t) {
                                return !!t;
                              })
                              .map(function (t) {
                                return t.toFloat();
                              });
                          return s.h(d, u);
                        })
                      );
                    })(i, e)).shape[1] === t &&
                      i.shape[2] === t) ||
                      (i = s.o.resizeBilinear(i, [t, t])),
                    i.as3D(t, t, 3)
                  );
                }
                if (a instanceof K.getEnv().Canvas)
                  return s.f.fromPixels(
                    (function (t, e, n) {
                      void 0 === n && (n = !1);
                      var r = K.getEnv(),
                        a = r.Image,
                        i = r.Canvas;
                      if (!(t instanceof a || t instanceof i))
                        throw new Error(
                          "imageToSquare - expected arg0 to be HTMLImageElement | HTMLCanvasElement"
                        );
                      var o = rt(t),
                        s = e / Math.max(o.height, o.width),
                        u = s * o.width,
                        c = s * o.height,
                        l = at({ width: e, height: e }),
                        h = t instanceof i ? t : it(t),
                        d = Math.abs(u - c) / 2,
                        p = n && u < c ? d : 0,
                        f = n && c < u ? d : 0;
                      return Y(l).drawImage(h, p, f, u, c), l;
                    })(a, t, e)
                  );
                throw new Error(
                  "toBatchTensor - at batchIdx " +
                    r +
                    ", expected input to be instanceof tf.Tensor or instanceof HTMLCanvasElement, instead have " +
                    a
                );
              });
              return s
                .E(
                  r.map(function (t) {
                    return t.toFloat();
                  })
                )
                .as4D(n.batchSize, t, t, 3);
            })
          );
        }),
        t
      );
    })();
    function ct(t) {
      return Object(c.b)(this, void 0, void 0, function () {
        var e, n, r;
        return Object(c.d)(this, function (a) {
          switch (a.label) {
            case 0:
              if (t instanceof ut) return [2, t];
              if (!(e = Array.isArray(t) ? t : [t]).length)
                throw new Error("toNetInput - empty array passed as input");
              return (
                (n = function (e) {
                  return Array.isArray(t) ? " at input index " + e + ":" : "";
                }),
                (r = e.map(X)).forEach(function (t, r) {
                  if (!st(t) && !d(t) && !p(t)) {
                    if ("string" == typeof e[r])
                      throw new Error(
                        "toNetInput -" +
                          n(r) +
                          " string passed, but could not resolve HTMLElement for element id " +
                          e[r]
                      );
                    throw new Error(
                      "toNetInput -" +
                        n(r) +
                        " expected media to be of type HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | tf.Tensor3D, or to be an element id"
                    );
                  }
                  if (p(t)) {
                    var a = t.shape[0];
                    if (1 !== a)
                      throw new Error(
                        "toNetInput -" +
                          n(r) +
                          " tf.Tensor4D with batchSize " +
                          a +
                          " passed, but not supported in input array"
                      );
                  }
                }),
                [
                  4,
                  Promise.all(
                    r.map(function (t) {
                      return (
                        st(t) &&
                        ((e = t),
                        new Promise(function (t, n) {
                          if (e instanceof K.getEnv().Canvas || nt(e))
                            return t();
                          function r(e) {
                            e.currentTarget &&
                              (e.currentTarget.removeEventListener("load", r),
                              e.currentTarget.removeEventListener("error", a),
                              t(e));
                          }
                          function a(t) {
                            t.currentTarget &&
                              (t.currentTarget.removeEventListener("load", r),
                              t.currentTarget.removeEventListener("error", a),
                              n(t));
                          }
                          e.addEventListener("load", r),
                            e.addEventListener("error", a);
                        }))
                      );
                      var e;
                    })
                  ),
                ]
              );
            case 1:
              return a.sent(), [2, new ut(r, Array.isArray(t))];
          }
        });
      });
    }
    function lt(t, e) {
      return Object(c.b)(this, void 0, void 0, function () {
        var n, r, a, i, o, s;
        return Object(c.d)(this, function (u) {
          switch (u.label) {
            case 0:
              return (
                (n = K.getEnv().Canvas),
                (r = t),
                t instanceof n ? [3, 5] : [4, ct(t)]
              );
            case 1:
              if ((a = u.sent()).batchSize > 1)
                throw new Error("extractFaces - batchSize > 1 not supported");
              return (i = a.getInput(0)) instanceof n
                ? ((o = i), [3, 4])
                : [3, 2];
            case 2:
              return [4, ot(i)];
            case 3:
              (o = u.sent()), (u.label = 4);
            case 4:
              (r = o), (u.label = 5);
            case 5:
              return (
                (s = Y(r)),
                [
                  2,
                  e
                    .map(function (t) {
                      return t instanceof S
                        ? t.forSize(r.width, r.height).box.floor()
                        : t;
                    })
                    .map(function (t) {
                      return t.clipAtImageBorders(r.width, r.height);
                    })
                    .map(function (t) {
                      var e = t.x,
                        n = t.y,
                        r = t.width,
                        a = t.height,
                        i = at({ width: r, height: a });
                      return (
                        Y(i).putImageData(s.getImageData(e, n, r, a), 0, 0), i
                      );
                    }),
                ]
              );
          }
        });
      });
    }
    function ht(t, e) {
      return Object(c.b)(this, void 0, void 0, function () {
        return Object(c.d)(this, function (n) {
          if (!d(t) && !p(t))
            throw new Error(
              "extractFaceTensors - expected image tensor to be 3D or 4D"
            );
          if (p(t) && t.shape[0] > 1)
            throw new Error("extractFaceTensors - batchSize > 1 not supported");
          return [
            2,
            s.L(function () {
              var n = t.shape.slice(p(t) ? 1 : 0),
                r = n[0],
                a = n[1],
                i = n[2];
              return e
                .map(function (t) {
                  return t instanceof S ? t.forSize(a, r).box : t;
                })
                .map(function (t) {
                  return t.clipAtImageBorders(a, r);
                })
                .map(function (e) {
                  var n = e.x,
                    o = e.y,
                    u = e.width,
                    c = e.height;
                  return s.C(t.as3D(r, a, i), [o, n, 0], [c, u, i]);
                });
            }),
          ];
        });
      });
    }
    function dt(t, e) {
      return Object(c.b)(this, void 0, void 0, function () {
        var n;
        return Object(c.d)(this, function (r) {
          switch (r.label) {
            case 0:
              return [4, (0, K.getEnv().fetch)(t, e)];
            case 1:
              if (!((n = r.sent()).status < 400))
                throw new Error(
                  "failed to fetch: (" +
                    n.status +
                    ") " +
                    n.statusText +
                    ", from url: " +
                    n.url
                );
              return [2, n];
          }
        });
      });
    }
    function pt(t) {
      return Object(c.b)(this, void 0, void 0, function () {
        return Object(c.d)(this, function (e) {
          switch (e.label) {
            case 0:
              return [4, dt(t)];
            case 1:
              return [2, e.sent().json()];
          }
        });
      });
    }
    function ft(t, e) {
      var n = e + "-weights_manifest.json";
      if (!t) return { modelBaseUri: "", manifestUri: n };
      if ("/" === t) return { modelBaseUri: "/", manifestUri: "/" + n };
      var r = t.startsWith("http://")
          ? "http://"
          : t.startsWith("https://")
          ? "https://"
          : "",
        a = (t = t.replace(r, "")).split("/").filter(function (t) {
          return t;
        }),
        i = t.endsWith(".json") ? a[a.length - 1] : n,
        o = r + (t.endsWith(".json") ? a.slice(0, a.length - 1) : a).join("/");
      return {
        modelBaseUri: (o = t.startsWith("/") ? "/" + o : o),
        manifestUri: "/" === o ? "/" + i : o + "/" + i,
      };
    }
    function mt(t, e) {
      return Object(c.b)(this, void 0, void 0, function () {
        var n, r, a, i;
        return Object(c.d)(this, function (o) {
          switch (o.label) {
            case 0:
              return (
                (n = ft(t, e)),
                (r = n.manifestUri),
                (a = n.modelBaseUri),
                [4, pt(r)]
              );
            case 1:
              return (i = o.sent()), [2, s.p.loadWeights(i, a)];
          }
        });
      });
    }
    var gt = (function () {
      function t(t) {
        (this._name = t), (this._params = void 0), (this._paramMappings = []);
      }
      return (
        Object.defineProperty(t.prototype, "params", {
          get: function () {
            return this._params;
          },
          enumerable: !0,
          configurable: !0,
        }),
        Object.defineProperty(t.prototype, "paramMappings", {
          get: function () {
            return this._paramMappings;
          },
          enumerable: !0,
          configurable: !0,
        }),
        Object.defineProperty(t.prototype, "isLoaded", {
          get: function () {
            return !!this.params;
          },
          enumerable: !0,
          configurable: !0,
        }),
        (t.prototype.getParamFromPath = function (t) {
          var e = this.traversePropertyPath(t);
          return e.obj[e.objProp];
        }),
        (t.prototype.reassignParamFromPath = function (t, e) {
          var n = this.traversePropertyPath(t),
            r = n.obj,
            a = n.objProp;
          r[a].dispose(), (r[a] = e);
        }),
        (t.prototype.getParamList = function () {
          var t = this;
          return this._paramMappings.map(function (e) {
            var n = e.paramPath;
            return { path: n, tensor: t.getParamFromPath(n) };
          });
        }),
        (t.prototype.getTrainableParams = function () {
          return this.getParamList().filter(function (t) {
            return t.tensor instanceof s.b;
          });
        }),
        (t.prototype.getFrozenParams = function () {
          return this.getParamList().filter(function (t) {
            return !(t.tensor instanceof s.b);
          });
        }),
        (t.prototype.variable = function () {
          var t = this;
          this.getFrozenParams().forEach(function (e) {
            var n = e.path,
              r = e.tensor;
            t.reassignParamFromPath(n, r.variable());
          });
        }),
        (t.prototype.freeze = function () {
          var t = this;
          this.getTrainableParams().forEach(function (e) {
            var n = e.path,
              r = e.tensor,
              a = s.G(r.dataSync());
            r.dispose(), t.reassignParamFromPath(n, a);
          });
        }),
        (t.prototype.dispose = function (t) {
          void 0 === t && (t = !0),
            this.getParamList().forEach(function (e) {
              if (t && e.tensor.isDisposed)
                throw new Error(
                  "param tensor has already been disposed for path " + e.path
                );
              e.tensor.dispose();
            }),
            (this._params = void 0);
        }),
        (t.prototype.serializeParams = function () {
          return new Float32Array(
            this.getParamList()
              .map(function (t) {
                var e = t.tensor;
                return Array.from(e.dataSync());
              })
              .reduce(function (t, e) {
                return t.concat(e);
              })
          );
        }),
        (t.prototype.load = function (t) {
          return Object(c.b)(this, void 0, void 0, function () {
            return Object(c.d)(this, function (e) {
              switch (e.label) {
                case 0:
                  return t instanceof Float32Array
                    ? (this.extractWeights(t), [2])
                    : [4, this.loadFromUri(t)];
                case 1:
                  return e.sent(), [2];
              }
            });
          });
        }),
        (t.prototype.loadFromUri = function (t) {
          return Object(c.b)(this, void 0, void 0, function () {
            var e;
            return Object(c.d)(this, function (n) {
              switch (n.label) {
                case 0:
                  if (t && "string" != typeof t)
                    throw new Error(
                      this._name + ".loadFromUri - expected model uri"
                    );
                  return [4, mt(t, this.getDefaultModelName())];
                case 1:
                  return (e = n.sent()), this.loadFromWeightMap(e), [2];
              }
            });
          });
        }),
        (t.prototype.loadFromDisk = function (t) {
          return Object(c.b)(this, void 0, void 0, function () {
            var e, n, r, a, i, o, u, l, h, d;
            return Object(c.d)(this, function (c) {
              switch (c.label) {
                case 0:
                  if (t && "string" != typeof t)
                    throw new Error(
                      this._name + ".loadFromDisk - expected model file path"
                    );
                  return (
                    (e = K.getEnv().readFile),
                    (n = ft(t, this.getDefaultModelName())),
                    (r = n.manifestUri),
                    (a = n.modelBaseUri),
                    (i = function (t) {
                      return Promise.all(
                        t.map(function (t) {
                          return e(t).then(function (t) {
                            return t.buffer;
                          });
                        })
                      );
                    }),
                    (o = s.p.weightsLoaderFactory(i)),
                    (h = (l = JSON).parse),
                    [4, e(r)]
                  );
                case 1:
                  return (u = h.apply(l, [c.sent().toString()])), [4, o(u, a)];
                case 2:
                  return (d = c.sent()), this.loadFromWeightMap(d), [2];
              }
            });
          });
        }),
        (t.prototype.loadFromWeightMap = function (t) {
          var e = this.extractParamsFromWeigthMap(t),
            n = e.paramMappings,
            r = e.params;
          (this._paramMappings = n), (this._params = r);
        }),
        (t.prototype.extractWeights = function (t) {
          var e = this.extractParams(t),
            n = e.paramMappings,
            r = e.params;
          (this._paramMappings = n), (this._params = r);
        }),
        (t.prototype.traversePropertyPath = function (t) {
          if (!this.params)
            throw new Error(
              "traversePropertyPath - model has no loaded params"
            );
          var e = t.split("/").reduce(
              function (e, n) {
                if (!e.nextObj.hasOwnProperty(n))
                  throw new Error(
                    "traversePropertyPath - object does not have property " +
                      n +
                      ", for path " +
                      t
                  );
                return { obj: e.nextObj, objProp: n, nextObj: e.nextObj[n] };
              },
              { nextObj: this.params }
            ),
            n = e.obj,
            r = e.objProp;
          if (!(n && r && n[r] instanceof s.a))
            throw new Error(
              "traversePropertyPath - parameter is not a tensor, for path " + t
            );
          return { obj: n, objProp: r };
        }),
        t
      );
    })();
    function bt(t, e, n) {
      return s.L(function () {
        var r = s.z(t, e.depthwise_filter, e.pointwise_filter, n, "same");
        return (r = s.c(r, e.bias));
      });
    }
    function vt(t, e, n) {
      return (
        void 0 === n && (n = !1),
        s.L(function () {
          var r = s.w(
              n
                ? s.c(s.i(t, e.conv0.filters, [2, 2], "same"), e.conv0.bias)
                : bt(t, e.conv0, [2, 2])
            ),
            a = bt(r, e.conv1, [1, 1]),
            i = bt(s.w(s.c(r, a)), e.conv2, [1, 1]);
          return s.w(s.c(r, s.c(a, i)));
        })
      );
    }
    function yt(t, e, n, r) {
      return (
        void 0 === n && (n = !1),
        void 0 === r && (r = !0),
        s.L(function () {
          var a = s.w(
              n
                ? s.c(
                    s.i(t, e.conv0.filters, r ? [2, 2] : [1, 1], "same"),
                    e.conv0.bias
                  )
                : bt(t, e.conv0, r ? [2, 2] : [1, 1])
            ),
            i = bt(a, e.conv1, [1, 1]),
            o = bt(s.w(s.c(a, i)), e.conv2, [1, 1]),
            u = bt(s.w(s.c(a, s.c(i, o))), e.conv3, [1, 1]);
          return s.w(s.c(a, s.c(i, s.c(o, u))));
        })
      );
    }
    function xt(t, e, n, r) {
      return (
        void 0 === n && (n = "same"),
        void 0 === r && (r = !1),
        s.L(function () {
          var a = s.c(s.i(t, e.filters, [1, 1], n), e.bias);
          return r ? s.w(a) : a;
        })
      );
    }
    function wt(t, e) {
      Object.keys(t).forEach(function (n) {
        e.some(function (t) {
          return t.originalPath === n;
        }) || t[n].dispose();
      });
    }
    function Ct(t, e) {
      return function (n, r, a, i) {
        var o = s.K(t(n * r * a * a), [a, a, n, r]),
          u = s.H(t(r));
        return (
          e.push({ paramPath: i + "/filters" }, { paramPath: i + "/bias" }),
          { filters: o, bias: u }
        );
      };
    }
    function Ot(t, e) {
      return function (n, r, a) {
        var i = s.I(t(n * r), [n, r]),
          o = s.H(t(r));
        return (
          e.push({ paramPath: a + "/weights" }, { paramPath: a + "/bias" }),
          { weights: i, bias: o }
        );
      };
    }
    var Et = function (t, e, n) {
      (this.depthwise_filter = t), (this.pointwise_filter = e), (this.bias = n);
    };
    function St(t, e) {
      return function (n, r, a) {
        var i = s.K(t(9 * n), [3, 3, n, 1]),
          o = s.K(t(n * r), [1, 1, n, r]),
          u = s.H(t(r));
        return (
          e.push(
            { paramPath: a + "/depthwise_filter" },
            { paramPath: a + "/pointwise_filter" },
            { paramPath: a + "/bias" }
          ),
          new Et(i, o, u)
        );
      };
    }
    function It(t) {
      return function (e) {
        var n = t(e + "/depthwise_filter", 4),
          r = t(e + "/pointwise_filter", 4),
          a = t(e + "/bias", 1);
        return new Et(n, r, a);
      };
    }
    function kt(t, e) {
      return function (n, r, a) {
        var i = t[n];
        if (!h(i, r))
          throw new Error(
            "expected weightMap[" +
              n +
              "] to be a Tensor" +
              r +
              "D, instead have " +
              i
          );
        return e.push({ originalPath: n, paramPath: a || n }), i;
      };
    }
    function Nt(t) {
      var e = t;
      return {
        extractWeights: function (t) {
          var n = e.slice(0, t);
          return (e = e.slice(t)), n;
        },
        getRemainingWeights: function () {
          return e;
        },
      };
    }
    function Rt(t, e) {
      var n = Ct(t, e),
        r = St(t, e);
      function a(t, e, a, i) {
        return (
          void 0 === i && (i = !1),
          {
            conv0: i ? n(t, e, 3, a + "/conv0") : r(t, e, a + "/conv0"),
            conv1: r(e, e, a + "/conv1"),
            conv2: r(e, e, a + "/conv2"),
          }
        );
      }
      return {
        extractDenseBlock3Params: a,
        extractDenseBlock4Params: function (t, e, n, i) {
          void 0 === i && (i = !1);
          var o = a(t, e, n, i);
          return {
            conv0: o.conv0,
            conv1: o.conv1,
            conv2: o.conv2,
            conv3: r(e, e, n + "/conv3"),
          };
        },
      };
    }
    function At(t) {
      return function (e) {
        return { filters: t(e + "/filters", 4), bias: t(e + "/bias", 1) };
      };
    }
    function Tt(t, e) {
      var n = kt(t, e),
        r = At(n),
        a = It(n);
      return {
        extractDenseBlock3Params: function (t, e) {
          return (
            void 0 === e && (e = !1),
            {
              conv0: e ? r(t + "/conv0") : a(t + "/conv0"),
              conv1: a(t + "/conv1"),
              conv2: a(t + "/conv2"),
            }
          );
        },
        extractDenseBlock4Params: function (t, e) {
          return (
            void 0 === e && (e = !1),
            {
              conv0: e ? r(t + "/conv0") : a(t + "/conv0"),
              conv1: a(t + "/conv1"),
              conv2: a(t + "/conv2"),
              conv3: a(t + "/conv3"),
            }
          );
        },
      };
    }
    var _t = (function (t) {
      function e() {
        return t.call(this, "FaceFeatureExtractor") || this;
      }
      return (
        Object(c.c)(e, t),
        (e.prototype.forwardInput = function (t) {
          var e = this.params;
          if (!e)
            throw new Error(
              "FaceFeatureExtractor - load model before inference"
            );
          return s.L(function () {
            var n = yt(
              N(t.toBatchTensor(112, !0), [122.782, 117.001, 104.298]).div(
                s.y(255)
              ),
              e.dense0,
              !0
            );
            return (
              (n = yt(n, e.dense1)),
              (n = yt(n, e.dense2)),
              (n = yt(n, e.dense3)),
              (n = s.d(n, [7, 7], [2, 2], "valid"))
            );
          });
        }),
        (e.prototype.forward = function (t) {
          return Object(c.b)(this, void 0, void 0, function () {
            var e;
            return Object(c.d)(this, function (n) {
              switch (n.label) {
                case 0:
                  return (e = this.forwardInput), [4, ct(t)];
                case 1:
                  return [2, e.apply(this, [n.sent()])];
              }
            });
          });
        }),
        (e.prototype.getDefaultModelName = function () {
          return "face_feature_extractor_model";
        }),
        (e.prototype.extractParamsFromWeigthMap = function (t) {
          return (function (t) {
            var e = [],
              n = Tt(t, e).extractDenseBlock4Params,
              r = {
                dense0: n("dense0", !0),
                dense1: n("dense1"),
                dense2: n("dense2"),
                dense3: n("dense3"),
              };
            return wt(t, e), { params: r, paramMappings: e };
          })(t);
        }),
        (e.prototype.extractParams = function (t) {
          return (function (t) {
            var e = [],
              n = Nt(t),
              r = n.extractWeights,
              a = n.getRemainingWeights,
              i = Rt(r, e).extractDenseBlock4Params,
              o = i(3, 32, "dense0", !0),
              s = i(32, 64, "dense1"),
              u = i(64, 128, "dense2"),
              c = i(128, 256, "dense3");
            if (0 !== a().length)
              throw new Error("weights remaing after extract: " + a().length);
            return {
              paramMappings: e,
              params: { dense0: o, dense1: s, dense2: u, dense3: c },
            };
          })(t);
        }),
        e
      );
    })(gt);
    function Dt(t, e) {
      return s.L(function () {
        return s.c(s.q(t, e.weights), e.bias);
      });
    }
    function Ft(t) {
      var e = {},
        n = {};
      return (
        Object.keys(t).forEach(function (r) {
          (r.startsWith("fc") ? n : e)[r] = t[r];
        }),
        { featureExtractorMap: e, classifierMap: n }
      );
    }
    var Mt = (function (t) {
        function e(e, n) {
          var r = t.call(this, e) || this;
          return (r._faceFeatureExtractor = n), r;
        }
        return (
          Object(c.c)(e, t),
          Object.defineProperty(e.prototype, "faceFeatureExtractor", {
            get: function () {
              return this._faceFeatureExtractor;
            },
            enumerable: !0,
            configurable: !0,
          }),
          (e.prototype.runNet = function (t) {
            var e = this,
              n = this.params;
            if (!n)
              throw new Error(this._name + " - load model before inference");
            return s.L(function () {
              var r =
                t instanceof ut ? e.faceFeatureExtractor.forwardInput(t) : t;
              return Dt(r.as2D(r.shape[0], -1), n.fc);
            });
          }),
          (e.prototype.dispose = function (e) {
            void 0 === e && (e = !0),
              this.faceFeatureExtractor.dispose(e),
              t.prototype.dispose.call(this, e);
          }),
          (e.prototype.loadClassifierParams = function (t) {
            var e = this.extractClassifierParams(t),
              n = e.params,
              r = e.paramMappings;
            (this._params = n), (this._paramMappings = r);
          }),
          (e.prototype.extractClassifierParams = function (t) {
            return (function (t, e, n) {
              var r = [],
                a = Nt(t),
                i = a.extractWeights,
                o = a.getRemainingWeights,
                s = Ot(i, r)(e, n, "fc");
              if (0 !== o().length)
                throw new Error("weights remaing after extract: " + o().length);
              return { paramMappings: r, params: { fc: s } };
            })(
              t,
              this.getClassifierChannelsIn(),
              this.getClassifierChannelsOut()
            );
          }),
          (e.prototype.extractParamsFromWeigthMap = function (t) {
            var e = Ft(t),
              n = e.featureExtractorMap,
              r = e.classifierMap;
            return (
              this.faceFeatureExtractor.loadFromWeightMap(n),
              (function (t) {
                var e,
                  n = [],
                  r = kt(t, n),
                  a = {
                    fc:
                      ((e = "fc"),
                      {
                        weights: r(e + "/weights", 2),
                        bias: r(e + "/bias", 1),
                      }),
                  };
                return wt(t, n), { params: a, paramMappings: n };
              })(r)
            );
          }),
          (e.prototype.extractParams = function (t) {
            var e = this.getClassifierChannelsIn(),
              n = this.getClassifierChannelsOut(),
              r = n * e + n,
              a = t.slice(0, t.length - r),
              i = t.slice(t.length - r);
            return (
              this.faceFeatureExtractor.extractWeights(a),
              this.extractClassifierParams(i)
            );
          }),
          e
        );
      })(gt),
      jt = [
        "neutral",
        "happy",
        "sad",
        "angry",
        "fearful",
        "disgusted",
        "surprised",
      ],
      $t = (function () {
        function t(t) {
          var e = this;
          if (7 !== t.length)
            throw new Error(
              "FaceExpressions.constructor - expected probabilities.length to be 7, have: " +
                t.length
            );
          jt.forEach(function (n, r) {
            e[n] = t[r];
          });
        }
        return (
          (t.prototype.asSortedArray = function () {
            var t = this;
            return jt
              .map(function (e) {
                return { expression: e, probability: t[e] };
              })
              .sort(function (t, e) {
                return e.probability - t.probability;
              });
          }),
          t
        );
      })(),
      Bt = (function (t) {
        function e(e) {
          return (
            void 0 === e && (e = new _t()),
            t.call(this, "FaceExpressionNet", e) || this
          );
        }
        return (
          Object(c.c)(e, t),
          (e.prototype.forwardInput = function (t) {
            var e = this;
            return s.L(function () {
              return s.D(e.runNet(t));
            });
          }),
          (e.prototype.forward = function (t) {
            return Object(c.b)(this, void 0, void 0, function () {
              var e;
              return Object(c.d)(this, function (n) {
                switch (n.label) {
                  case 0:
                    return (e = this.forwardInput), [4, ct(t)];
                  case 1:
                    return [2, e.apply(this, [n.sent()])];
                }
              });
            });
          }),
          (e.prototype.predictExpressions = function (t) {
            return Object(c.b)(this, void 0, void 0, function () {
              var e,
                n,
                r,
                a,
                i = this;
              return Object(c.d)(this, function (o) {
                switch (o.label) {
                  case 0:
                    return [4, ct(t)];
                  case 1:
                    return (e = o.sent()), [4, this.forwardInput(e)];
                  case 2:
                    return (
                      (n = o.sent()),
                      [
                        4,
                        Promise.all(
                          s.O(n).map(function (t) {
                            return Object(c.b)(i, void 0, void 0, function () {
                              var e;
                              return Object(c.d)(this, function (n) {
                                switch (n.label) {
                                  case 0:
                                    return [4, t.data()];
                                  case 1:
                                    return (e = n.sent()), t.dispose(), [2, e];
                                }
                              });
                            });
                          })
                        ),
                      ]
                    );
                  case 3:
                    return (
                      (r = o.sent()),
                      n.dispose(),
                      (a = r.map(function (t) {
                        return new $t(t);
                      })),
                      [2, e.isBatchInput ? a : a[0]]
                    );
                }
              });
            });
          }),
          (e.prototype.getDefaultModelName = function () {
            return "face_expression_model";
          }),
          (e.prototype.getClassifierChannelsIn = function () {
            return 256;
          }),
          (e.prototype.getClassifierChannelsOut = function () {
            return 7;
          }),
          e
        );
      })(Mt);
    function Pt(t, e) {
      var n = { expressions: e };
      return Object.assign({}, t, n);
    }
    function Lt(t, e, n, r) {
      void 0 === n && (n = 0.1),
        (Array.isArray(e) ? e : [e]).forEach(function (e) {
          var a =
            e instanceof $t
              ? e
              : e.expressions instanceof $t
              ? e.expressions
              : void 0;
          if (!a)
            throw new Error(
              "drawFaceExpressions - expected faceExpressions to be FaceExpressions | WithFaceExpressions<{}> or array thereof"
            );
          var i = a.asSortedArray().filter(function (t) {
              return t.probability > n;
            }),
            o = $(e) ? e.detection.box.bottomLeft : r || new w(0, 0);
          new Q(
            i.map(function (t) {
              return t.expression + " (" + m(t.probability) + ")";
            }),
            o
          ).draw(t);
        });
    }
    function zt(t) {
      return (
        $(t) &&
        t.landmarks instanceof T &&
        t.unshiftedLandmarks instanceof T &&
        t.alignedRect instanceof S
      );
    }
    function Wt(t, e) {
      var n = t.detection.box,
        r = e.shiftBy(n.x, n.y),
        a = r.align(),
        i = t.detection.imageDims,
        o = {
          landmarks: r,
          unshiftedLandmarks: e,
          alignedRect: new S(t.detection.score, a.rescale(i.reverse()), i),
        };
      return Object.assign({}, t, o);
    }
    var Vt = function (t) {
        void 0 === t && (t = {});
        var e = t.drawLines,
          n = void 0 === e || e,
          r = t.drawPoints,
          a = void 0 === r || r,
          i = t.lineWidth,
          o = t.lineColor,
          s = t.pointSize,
          u = t.pointColor;
        (this.drawLines = n),
          (this.drawPoints = a),
          (this.lineWidth = i || 1),
          (this.pointSize = s || 2),
          (this.lineColor = o || "rgba(0, 255, 255, 1)"),
          (this.pointColor = u || "rgba(255, 0, 255, 1)");
      },
      Ut = (function () {
        function t(t, e) {
          void 0 === e && (e = {}),
            (this.faceLandmarks = t),
            (this.options = new Vt(e));
        }
        return (
          (t.prototype.draw = function (t) {
            var e = Y(t),
              n = this.options,
              r = n.drawLines,
              a = n.drawPoints,
              i = n.lineWidth,
              o = n.lineColor,
              s = n.pointSize,
              c = n.pointColor;
            if (
              (r &&
                this.faceLandmarks instanceof D &&
                ((e.strokeStyle = o),
                (e.lineWidth = i),
                u(e, this.faceLandmarks.getJawOutline()),
                u(e, this.faceLandmarks.getLeftEyeBrow()),
                u(e, this.faceLandmarks.getRightEyeBrow()),
                u(e, this.faceLandmarks.getNose()),
                u(e, this.faceLandmarks.getLeftEye(), !0),
                u(e, this.faceLandmarks.getRightEye(), !0),
                u(e, this.faceLandmarks.getMouth(), !0)),
              a)
            ) {
              (e.strokeStyle = c), (e.fillStyle = c);
              this.faceLandmarks.positions.forEach(function (t) {
                e.beginPath(), e.arc(t.x, t.y, s, 0, 2 * Math.PI), e.fill();
              });
            }
          }),
          t
        );
      })();
    function Gt(t, e) {
      (Array.isArray(e) ? e : [e]).forEach(function (e) {
        var n = e instanceof T ? e : zt(e) ? e.landmarks : void 0;
        if (!n)
          throw new Error(
            "drawFaceLandmarks - expected faceExpressions to be FaceLandmarks | WithFaceLandmarks<WithFaceDetection<{}>> or array thereof"
          );
        new Ut(n).draw(t);
      });
    }
    function Ht(t, e) {
      var n = [],
        r = Nt(t),
        a = r.extractWeights,
        i = r.getRemainingWeights,
        o = (function (t, e) {
          var n = Ct(t, e),
            r = St(t, e);
          return {
            extractConvParams: n,
            extractSeparableConvParams: r,
            extractReductionBlockParams: function (t, e, a) {
              return {
                separable_conv0: r(t, e, a + "/separable_conv0"),
                separable_conv1: r(e, e, a + "/separable_conv1"),
                expansion_conv: n(t, e, 1, a + "/expansion_conv"),
              };
            },
            extractMainBlockParams: function (t, e) {
              return {
                separable_conv0: r(t, t, e + "/separable_conv0"),
                separable_conv1: r(t, t, e + "/separable_conv1"),
                separable_conv2: r(t, t, e + "/separable_conv2"),
              };
            },
          };
        })(a, n),
        s = o.extractConvParams,
        u = o.extractSeparableConvParams,
        c = o.extractReductionBlockParams,
        l = o.extractMainBlockParams,
        h = {
          conv_in: s(3, 32, 3, "entry_flow/conv_in"),
          reduction_block_0: c(32, 64, "entry_flow/reduction_block_0"),
          reduction_block_1: c(64, 128, "entry_flow/reduction_block_1"),
        },
        d = {};
      v(e, 0, 1).forEach(function (t) {
        d["main_block_" + t] = l(128, "middle_flow/main_block_" + t);
      });
      var p = {
        reduction_block: c(128, 256, "exit_flow/reduction_block"),
        separable_conv: u(256, 512, "exit_flow/separable_conv"),
      };
      if (0 !== i().length)
        throw new Error("weights remaing after extract: " + i().length);
      return {
        paramMappings: n,
        params: { entry_flow: h, middle_flow: d, exit_flow: p },
      };
    }
    function qt(t, e) {
      var n = [],
        r = (function (t, e) {
          var n = kt(t, e),
            r = At(n),
            a = It(n);
          return {
            extractConvParams: r,
            extractSeparableConvParams: a,
            extractReductionBlockParams: function (t) {
              return {
                separable_conv0: a(t + "/separable_conv0"),
                separable_conv1: a(t + "/separable_conv1"),
                expansion_conv: r(t + "/expansion_conv"),
              };
            },
            extractMainBlockParams: function (t) {
              return {
                separable_conv0: a(t + "/separable_conv0"),
                separable_conv1: a(t + "/separable_conv1"),
                separable_conv2: a(t + "/separable_conv2"),
              };
            },
          };
        })(t, n),
        a = r.extractConvParams,
        i = r.extractSeparableConvParams,
        o = r.extractReductionBlockParams,
        s = r.extractMainBlockParams,
        u = {
          conv_in: a("entry_flow/conv_in"),
          reduction_block_0: o("entry_flow/reduction_block_0"),
          reduction_block_1: o("entry_flow/reduction_block_1"),
        },
        c = {};
      v(e, 0, 1).forEach(function (t) {
        c["main_block_" + t] = s("middle_flow/main_block_" + t);
      });
      var l = {
        reduction_block: o("exit_flow/reduction_block"),
        separable_conv: i("exit_flow/separable_conv"),
      };
      return (
        wt(t, n),
        {
          params: { entry_flow: u, middle_flow: c, exit_flow: l },
          paramMappings: n,
        }
      );
    }
    function Kt(t, e, n) {
      return s.c(s.i(t, e.filters, n, "same"), e.bias);
    }
    function Xt(t, e, n) {
      void 0 === n && (n = !0);
      var r = n ? s.w(t) : t;
      return (
        (r = bt(r, e.separable_conv0, [1, 1])),
        (r = bt(s.w(r), e.separable_conv1, [1, 1])),
        (r = s.s(r, [3, 3], [2, 2], "same")),
        (r = s.c(r, Kt(t, e.expansion_conv, [2, 2])))
      );
    }
    var Yt,
      Jt = (function (t) {
        function e(e) {
          var n = t.call(this, "TinyXception") || this;
          return (n._numMainBlocks = e), n;
        }
        return (
          Object(c.c)(e, t),
          (e.prototype.forwardInput = function (t) {
            var e = this,
              n = this.params;
            if (!n)
              throw new Error("TinyXception - load model before inference");
            return s.L(function () {
              var r = N(t.toBatchTensor(112, !0), [
                  122.782,
                  117.001,
                  104.298,
                ]).div(s.y(256)),
                a = s.w(Kt(r, n.entry_flow.conv_in, [2, 2]));
              return (
                (a = Xt(a, n.entry_flow.reduction_block_0, !1)),
                (a = Xt(a, n.entry_flow.reduction_block_1)),
                v(e._numMainBlocks, 0, 1).forEach(function (t) {
                  a = (function (t, e) {
                    var n = bt(s.w(t), e.separable_conv0, [1, 1]);
                    return (
                      (n = bt(s.w(n), e.separable_conv1, [1, 1])),
                      (n = bt(s.w(n), e.separable_conv2, [1, 1])),
                      (n = s.c(n, t))
                    );
                  })(a, n.middle_flow["main_block_" + t]);
                }),
                (a = Xt(a, n.exit_flow.reduction_block)),
                (a = s.w(bt(a, n.exit_flow.separable_conv, [1, 1])))
              );
            });
          }),
          (e.prototype.forward = function (t) {
            return Object(c.b)(this, void 0, void 0, function () {
              var e;
              return Object(c.d)(this, function (n) {
                switch (n.label) {
                  case 0:
                    return (e = this.forwardInput), [4, ct(t)];
                  case 1:
                    return [2, e.apply(this, [n.sent()])];
                }
              });
            });
          }),
          (e.prototype.getDefaultModelName = function () {
            return "tiny_xception_model";
          }),
          (e.prototype.extractParamsFromWeigthMap = function (t) {
            return qt(t, this._numMainBlocks);
          }),
          (e.prototype.extractParams = function (t) {
            return Ht(t, this._numMainBlocks);
          }),
          e
        );
      })(gt);
    !(function (t) {
      (t.FEMALE = "female"), (t.MALE = "male");
    })(Yt || (Yt = {}));
    var Qt = (function (t) {
        function e(e) {
          void 0 === e && (e = new Jt(2));
          var n = t.call(this, "AgeGenderNet") || this;
          return (n._faceFeatureExtractor = e), n;
        }
        return (
          Object(c.c)(e, t),
          Object.defineProperty(e.prototype, "faceFeatureExtractor", {
            get: function () {
              return this._faceFeatureExtractor;
            },
            enumerable: !0,
            configurable: !0,
          }),
          (e.prototype.runNet = function (t) {
            var e = this,
              n = this.params;
            if (!n)
              throw new Error(this._name + " - load model before inference");
            return s.L(function () {
              var r =
                  t instanceof ut ? e.faceFeatureExtractor.forwardInput(t) : t,
                a = s.d(r, [7, 7], [2, 2], "valid").as2D(r.shape[0], -1);
              return {
                age: Dt(a, n.fc.age).as1D(),
                gender: Dt(a, n.fc.gender),
              };
            });
          }),
          (e.prototype.forwardInput = function (t) {
            var e = this;
            return s.L(function () {
              var n = e.runNet(t),
                r = n.age,
                a = n.gender;
              return { age: r, gender: s.D(a) };
            });
          }),
          (e.prototype.forward = function (t) {
            return Object(c.b)(this, void 0, void 0, function () {
              var e;
              return Object(c.d)(this, function (n) {
                switch (n.label) {
                  case 0:
                    return (e = this.forwardInput), [4, ct(t)];
                  case 1:
                    return [2, e.apply(this, [n.sent()])];
                }
              });
            });
          }),
          (e.prototype.predictAgeAndGender = function (t) {
            return Object(c.b)(this, void 0, void 0, function () {
              var e,
                n,
                r,
                a,
                i,
                o,
                u = this;
              return Object(c.d)(this, function (l) {
                switch (l.label) {
                  case 0:
                    return [4, ct(t)];
                  case 1:
                    return (e = l.sent()), [4, this.forwardInput(e)];
                  case 2:
                    return (
                      (n = l.sent()),
                      (r = s.O(n.age)),
                      (a = s.O(n.gender)),
                      (i = r.map(function (t, e) {
                        return { ageTensor: t, genderTensor: a[e] };
                      })),
                      [
                        4,
                        Promise.all(
                          i.map(function (t) {
                            var e = t.ageTensor,
                              n = t.genderTensor;
                            return Object(c.b)(u, void 0, void 0, function () {
                              var t, r, a, i, o;
                              return Object(c.d)(this, function (s) {
                                switch (s.label) {
                                  case 0:
                                    return [4, e.data()];
                                  case 1:
                                    return (t = s.sent()[0]), [4, n.data()];
                                  case 2:
                                    return (
                                      (r = s.sent()[0]),
                                      (i = (a = r > 0.5) ? Yt.MALE : Yt.FEMALE),
                                      (o = a ? r : 1 - r),
                                      e.dispose(),
                                      n.dispose(),
                                      [
                                        2,
                                        {
                                          age: t,
                                          gender: i,
                                          genderProbability: o,
                                        },
                                      ]
                                    );
                                }
                              });
                            });
                          })
                        ),
                      ]
                    );
                  case 3:
                    return (
                      (o = l.sent()),
                      n.age.dispose(),
                      n.gender.dispose(),
                      [2, e.isBatchInput ? o : o[0]]
                    );
                }
              });
            });
          }),
          (e.prototype.getDefaultModelName = function () {
            return "age_gender_model";
          }),
          (e.prototype.dispose = function (e) {
            void 0 === e && (e = !0),
              this.faceFeatureExtractor.dispose(e),
              t.prototype.dispose.call(this, e);
          }),
          (e.prototype.loadClassifierParams = function (t) {
            var e = this.extractClassifierParams(t),
              n = e.params,
              r = e.paramMappings;
            (this._params = n), (this._paramMappings = r);
          }),
          (e.prototype.extractClassifierParams = function (t) {
            return (function (t) {
              var e = [],
                n = Nt(t),
                r = n.extractWeights,
                a = n.getRemainingWeights,
                i = Ot(r, e),
                o = i(512, 1, "fc/age"),
                s = i(512, 2, "fc/gender");
              if (0 !== a().length)
                throw new Error("weights remaing after extract: " + a().length);
              return {
                paramMappings: e,
                params: { fc: { age: o, gender: s } },
              };
            })(t);
          }),
          (e.prototype.extractParamsFromWeigthMap = function (t) {
            var e = Ft(t),
              n = e.featureExtractorMap,
              r = e.classifierMap;
            return (
              this.faceFeatureExtractor.loadFromWeightMap(n),
              (function (t) {
                var e = [],
                  n = kt(t, e);
                function r(t) {
                  return {
                    weights: n(t + "/weights", 2),
                    bias: n(t + "/bias", 1),
                  };
                }
                var a = { fc: { age: r("fc/age"), gender: r("fc/gender") } };
                return wt(t, e), { params: a, paramMappings: e };
              })(r)
            );
          }),
          (e.prototype.extractParams = function (t) {
            var e = t.slice(0, t.length - 1539),
              n = t.slice(t.length - 1539);
            return (
              this.faceFeatureExtractor.extractWeights(e),
              this.extractClassifierParams(n)
            );
          }),
          e
        );
      })(gt),
      Zt = (function (t) {
        function e() {
          return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
          Object(c.c)(e, t),
          (e.prototype.postProcess = function (t, e, n) {
            var r = n.map(function (t) {
                var n = t.width,
                  r = t.height,
                  a = e / Math.max(r, n);
                return { width: n * a, height: r * a };
              }),
              a = r.length;
            return s.L(function () {
              var n = function (t, e) {
                  return s
                    .E([s.n([68], t), s.n([68], e)], 1)
                    .as2D(1, 136)
                    .as1D();
                },
                i = function (t, e) {
                  var n = r[t],
                    a = n.width,
                    i = n.height;
                  return e(a, i) ? Math.abs(a - i) / 2 : 0;
                };
              return t
                .mul(s.n([a, 136], e))
                .sub(
                  s.E(
                    Array.from(Array(a), function (t, e) {
                      return n(
                        (function (t) {
                          return i(t, function (t, e) {
                            return t < e;
                          });
                        })(e),
                        (function (t) {
                          return i(t, function (t, e) {
                            return e < t;
                          });
                        })(e)
                      );
                    })
                  )
                )
                .div(
                  s.E(
                    Array.from(Array(a), function (t, e) {
                      return n(r[e].width, r[e].height);
                    })
                  )
                );
            });
          }),
          (e.prototype.forwardInput = function (t) {
            var e = this;
            return s.L(function () {
              var n = e.runNet(t);
              return e.postProcess(
                n,
                t.inputSize,
                t.inputDimensions.map(function (t) {
                  return { height: t[0], width: t[1] };
                })
              );
            });
          }),
          (e.prototype.forward = function (t) {
            return Object(c.b)(this, void 0, void 0, function () {
              var e;
              return Object(c.d)(this, function (n) {
                switch (n.label) {
                  case 0:
                    return (e = this.forwardInput), [4, ct(t)];
                  case 1:
                    return [2, e.apply(this, [n.sent()])];
                }
              });
            });
          }),
          (e.prototype.detectLandmarks = function (t) {
            return Object(c.b)(this, void 0, void 0, function () {
              var e,
                n,
                r,
                a = this;
              return Object(c.d)(this, function (i) {
                switch (i.label) {
                  case 0:
                    return [4, ct(t)];
                  case 1:
                    return (
                      (e = i.sent()),
                      (n = s.L(function () {
                        return s.O(a.forwardInput(e));
                      })),
                      [
                        4,
                        Promise.all(
                          n.map(function (t, n) {
                            return Object(c.b)(a, void 0, void 0, function () {
                              var r, a, i, o, s;
                              return Object(c.d)(this, function (u) {
                                switch (u.label) {
                                  case 0:
                                    return (
                                      (i = (a = Array).from), [4, t.data()]
                                    );
                                  case 1:
                                    return (
                                      (r = i.apply(a, [u.sent()])),
                                      (o = r.filter(function (t, e) {
                                        return f(e);
                                      })),
                                      (s = r.filter(function (t, e) {
                                        return !f(e);
                                      })),
                                      [
                                        2,
                                        new D(
                                          Array(68)
                                            .fill(0)
                                            .map(function (t, e) {
                                              return new w(o[e], s[e]);
                                            }),
                                          {
                                            height: e.getInputHeight(n),
                                            width: e.getInputWidth(n),
                                          }
                                        ),
                                      ]
                                    );
                                }
                              });
                            });
                          })
                        ),
                      ]
                    );
                  case 2:
                    return (
                      (r = i.sent()),
                      n.forEach(function (t) {
                        return t.dispose();
                      }),
                      [2, e.isBatchInput ? r : r[0]]
                    );
                }
              });
            });
          }),
          (e.prototype.getClassifierChannelsOut = function () {
            return 136;
          }),
          e
        );
      })(Mt),
      te = (function (t) {
        function e(e) {
          return (
            void 0 === e && (e = new _t()),
            t.call(this, "FaceLandmark68Net", e) || this
          );
        }
        return (
          Object(c.c)(e, t),
          (e.prototype.getDefaultModelName = function () {
            return "face_landmark_68_model";
          }),
          (e.prototype.getClassifierChannelsIn = function () {
            return 256;
          }),
          e
        );
      })(Zt);
    var ee = (function (t) {
        function e() {
          return t.call(this, "TinyFaceFeatureExtractor") || this;
        }
        return (
          Object(c.c)(e, t),
          (e.prototype.forwardInput = function (t) {
            var e = this.params;
            if (!e)
              throw new Error(
                "TinyFaceFeatureExtractor - load model before inference"
              );
            return s.L(function () {
              var n = vt(
                N(t.toBatchTensor(112, !0), [122.782, 117.001, 104.298]).div(
                  s.y(255)
                ),
                e.dense0,
                !0
              );
              return (
                (n = vt(n, e.dense1)),
                (n = vt(n, e.dense2)),
                (n = s.d(n, [14, 14], [2, 2], "valid"))
              );
            });
          }),
          (e.prototype.forward = function (t) {
            return Object(c.b)(this, void 0, void 0, function () {
              var e;
              return Object(c.d)(this, function (n) {
                switch (n.label) {
                  case 0:
                    return (e = this.forwardInput), [4, ct(t)];
                  case 1:
                    return [2, e.apply(this, [n.sent()])];
                }
              });
            });
          }),
          (e.prototype.getDefaultModelName = function () {
            return "face_feature_extractor_tiny_model";
          }),
          (e.prototype.extractParamsFromWeigthMap = function (t) {
            return (function (t) {
              var e = [],
                n = Tt(t, e).extractDenseBlock3Params,
                r = {
                  dense0: n("dense0", !0),
                  dense1: n("dense1"),
                  dense2: n("dense2"),
                };
              return wt(t, e), { params: r, paramMappings: e };
            })(t);
          }),
          (e.prototype.extractParams = function (t) {
            return (function (t) {
              var e = [],
                n = Nt(t),
                r = n.extractWeights,
                a = n.getRemainingWeights,
                i = Rt(r, e).extractDenseBlock3Params,
                o = i(3, 32, "dense0", !0),
                s = i(32, 64, "dense1"),
                u = i(64, 128, "dense2");
              if (0 !== a().length)
                throw new Error("weights remaing after extract: " + a().length);
              return {
                paramMappings: e,
                params: { dense0: o, dense1: s, dense2: u },
              };
            })(t);
          }),
          e
        );
      })(gt),
      ne = (function (t) {
        function e(e) {
          return (
            void 0 === e && (e = new ee()),
            t.call(this, "FaceLandmark68TinyNet", e) || this
          );
        }
        return (
          Object(c.c)(e, t),
          (e.prototype.getDefaultModelName = function () {
            return "face_landmark_68_tiny_model";
          }),
          (e.prototype.getClassifierChannelsIn = function () {
            return 128;
          }),
          e
        );
      })(Zt);
    !(function (t) {
      function e() {
        return (null !== t && t.apply(this, arguments)) || this;
      }
      Object(c.c)(e, t);
    })(te);
    function re(t, e, n, r, a) {
      void 0 === a && (a = "same");
      var i = e.conv,
        o = i.filters,
        u = i.bias,
        c = s.i(t, o, n, a);
      return (
        (c = (function (t, e) {
          return s.c(s.t(t, e.weights), e.biases);
        })((c = s.c(c, u)), e.scale)),
        r ? s.w(c) : c
      );
    }
    function ae(t, e) {
      return re(t, e, [1, 1], !1);
    }
    function ie(t, e) {
      return re(t, e, [2, 2], !0, "valid");
    }
    function oe(t, e) {
      function n(n, r, a, i) {
        var o = (function (e, n, r) {
            var a = t(e),
              i = a.length / (n * r * r);
            if (i % 1 != 0)
              throw new Error(
                "depth has to be an integer: " +
                  i +
                  ", weights.length: " +
                  a.length +
                  ", numFilters: " +
                  n +
                  ", filterSize: " +
                  r
              );
            return s.L(function () {
              return s.N(s.K(a, [n, i, r, r]), [2, 3, 1, 0]);
            });
          })(n, r, a),
          u = s.H(t(r));
        return (
          e.push({ paramPath: i + "/filters" }, { paramPath: i + "/bias" }),
          { filters: o, bias: u }
        );
      }
      function r(r, a, i, o) {
        return {
          conv: n(r, a, i, o + "/conv"),
          scale: (function (n, r) {
            var a = s.H(t(n)),
              i = s.H(t(n));
            return (
              e.push(
                { paramPath: r + "/weights" },
                { paramPath: r + "/biases" }
              ),
              { weights: a, biases: i }
            );
          })(a, o + "/scale"),
        };
      }
      return {
        extractConvLayerParams: r,
        extractResidualLayerParams: function (t, e, n, a, i) {
          return (
            void 0 === i && (i = !1),
            {
              conv1: r((i ? 0.5 : 1) * t, e, n, a + "/conv1"),
              conv2: r(t, e, n, a + "/conv2"),
            }
          );
        },
      };
    }
    function se(t, e) {
      var n = kt(t, e);
      function r(t) {
        return {
          conv: {
            filters: n(t + "/conv/filters", 4),
            bias: n(t + "/conv/bias", 1),
          },
          scale: (function (t) {
            return {
              weights: n(t + "/scale/weights", 1),
              biases: n(t + "/scale/biases", 1),
            };
          })(t),
        };
      }
      return {
        extractConvLayerParams: r,
        extractResidualLayerParams: function (t) {
          return { conv1: r(t + "/conv1"), conv2: r(t + "/conv2") };
        },
      };
    }
    function ue(t) {
      var e = [],
        n = se(t, e),
        r = n.extractConvLayerParams,
        a = n.extractResidualLayerParams,
        i = r("conv32_down"),
        o = a("conv32_1"),
        s = a("conv32_2"),
        u = a("conv32_3"),
        c = a("conv64_down"),
        l = a("conv64_1"),
        d = a("conv64_2"),
        p = a("conv64_3"),
        f = a("conv128_down"),
        m = a("conv128_1"),
        g = a("conv128_2"),
        b = a("conv256_down"),
        v = a("conv256_1"),
        y = a("conv256_2"),
        x = a("conv256_down_out"),
        w = t.fc;
      if ((e.push({ originalPath: "fc", paramPath: "fc" }), !h(w, 2)))
        throw new Error(
          "expected weightMap[fc] to be a Tensor2D, instead have " + w
        );
      var C = {
        conv32_down: i,
        conv32_1: o,
        conv32_2: s,
        conv32_3: u,
        conv64_down: c,
        conv64_1: l,
        conv64_2: d,
        conv64_3: p,
        conv128_down: f,
        conv128_1: m,
        conv128_2: g,
        conv256_down: b,
        conv256_1: v,
        conv256_2: y,
        conv256_down_out: x,
        fc: w,
      };
      return wt(t, e), { params: C, paramMappings: e };
    }
    function ce(t, e) {
      var n = (function (t, e) {
        return re(t, e, [1, 1], !0);
      })(t, e.conv1);
      return (n = ae(n, e.conv2)), (n = s.c(n, t)), (n = s.w(n));
    }
    function le(t, e) {
      var n = ie(t, e.conv1);
      n = ae(n, e.conv2);
      var r = s.d(t, 2, 2, "valid"),
        a = s.P(r.shape),
        i = r.shape[3] !== n.shape[3];
      if (r.shape[1] !== n.shape[1] || r.shape[2] !== n.shape[2]) {
        var o = Object(c.e)(n.shape);
        o[1] = 1;
        var u = s.P(o);
        n = s.h([n, u], 1);
        var l = Object(c.e)(n.shape);
        l[2] = 1;
        var h = s.P(l);
        n = s.h([n, h], 2);
      }
      return (r = i ? s.h([r, a], 3) : r), (n = s.c(r, n)), (n = s.w(n));
    }
    var he = (function (t) {
      function e() {
        return t.call(this, "FaceRecognitionNet") || this;
      }
      return (
        Object(c.c)(e, t),
        (e.prototype.forwardInput = function (t) {
          var e = this.params;
          if (!e)
            throw new Error("FaceRecognitionNet - load model before inference");
          return s.L(function () {
            var n = ie(
              N(t.toBatchTensor(150, !0).toFloat(), [
                122.782,
                117.001,
                104.298,
              ]).div(s.y(256)),
              e.conv32_down
            );
            (n = ce((n = s.s(n, 3, 2, "valid")), e.conv32_1)),
              (n = ce(n, e.conv32_2)),
              (n = ce(n, e.conv32_3)),
              (n = ce((n = le(n, e.conv64_down)), e.conv64_1)),
              (n = ce(n, e.conv64_2)),
              (n = ce(n, e.conv64_3)),
              (n = ce((n = le(n, e.conv128_down)), e.conv128_1)),
              (n = ce(n, e.conv128_2)),
              (n = ce((n = le(n, e.conv256_down)), e.conv256_1));
            var r = (n = le(
              (n = ce(n, e.conv256_2)),
              e.conv256_down_out
            )).mean([1, 2]);
            return s.q(r, e.fc);
          });
        }),
        (e.prototype.forward = function (t) {
          return Object(c.b)(this, void 0, void 0, function () {
            var e;
            return Object(c.d)(this, function (n) {
              switch (n.label) {
                case 0:
                  return (e = this.forwardInput), [4, ct(t)];
                case 1:
                  return [2, e.apply(this, [n.sent()])];
              }
            });
          });
        }),
        (e.prototype.computeFaceDescriptor = function (t) {
          return Object(c.b)(this, void 0, void 0, function () {
            var e,
              n,
              r,
              a = this;
            return Object(c.d)(this, function (i) {
              switch (i.label) {
                case 0:
                  return [4, ct(t)];
                case 1:
                  return (
                    (e = i.sent()),
                    (n = s.L(function () {
                      return s.O(a.forwardInput(e));
                    })),
                    [
                      4,
                      Promise.all(
                        n.map(function (t) {
                          return t.data();
                        })
                      ),
                    ]
                  );
                case 2:
                  return (
                    (r = i.sent()),
                    n.forEach(function (t) {
                      return t.dispose();
                    }),
                    [2, e.isBatchInput ? r : r[0]]
                  );
              }
            });
          });
        }),
        (e.prototype.getDefaultModelName = function () {
          return "face_recognition_model";
        }),
        (e.prototype.extractParamsFromWeigthMap = function (t) {
          return ue(t);
        }),
        (e.prototype.extractParams = function (t) {
          return (function (t) {
            var e = Nt(t),
              n = e.extractWeights,
              r = e.getRemainingWeights,
              a = [],
              i = oe(n, a),
              o = i.extractConvLayerParams,
              u = i.extractResidualLayerParams,
              c = o(4704, 32, 7, "conv32_down"),
              l = u(9216, 32, 3, "conv32_1"),
              h = u(9216, 32, 3, "conv32_2"),
              d = u(9216, 32, 3, "conv32_3"),
              p = u(36864, 64, 3, "conv64_down", !0),
              f = u(36864, 64, 3, "conv64_1"),
              m = u(36864, 64, 3, "conv64_2"),
              g = u(36864, 64, 3, "conv64_3"),
              b = u(147456, 128, 3, "conv128_down", !0),
              v = u(147456, 128, 3, "conv128_1"),
              y = u(147456, 128, 3, "conv128_2"),
              x = u(589824, 256, 3, "conv256_down", !0),
              w = u(589824, 256, 3, "conv256_1"),
              C = u(589824, 256, 3, "conv256_2"),
              O = u(589824, 256, 3, "conv256_down_out"),
              E = s.L(function () {
                return s.N(s.I(n(32768), [128, 256]), [1, 0]);
              });
            if ((a.push({ paramPath: "fc" }), 0 !== r().length))
              throw new Error("weights remaing after extract: " + r().length);
            return {
              params: {
                conv32_down: c,
                conv32_1: l,
                conv32_2: h,
                conv32_3: d,
                conv64_down: p,
                conv64_1: f,
                conv64_2: m,
                conv64_3: g,
                conv128_down: b,
                conv128_1: v,
                conv128_2: y,
                conv256_down: x,
                conv256_1: w,
                conv256_2: C,
                conv256_down_out: O,
                fc: E,
              },
              paramMappings: a,
            };
          })(t);
        }),
        e
      );
    })(gt);
    function de(t, e) {
      var n = { descriptor: e };
      return Object.assign({}, t, n);
    }
    function pe(t, e) {
      var n = { age: e };
      return Object.assign({}, t, n);
    }
    function fe(t, e, n) {
      var r = { gender: e, genderProbability: n };
      return Object.assign({}, t, r);
    }
    var me = (function () {
      function t(t) {
        var e = void 0 === t ? {} : t,
          n = e.minFaceSize,
          r = e.scaleFactor,
          a = e.maxNumScales,
          i = e.scoreThresholds,
          o = e.scaleSteps;
        if (
          ((this._name = "MtcnnOptions"),
          (this._minFaceSize = n || 20),
          (this._scaleFactor = r || 0.709),
          (this._maxNumScales = a || 10),
          (this._scoreThresholds = i || [0.6, 0.7, 0.7]),
          (this._scaleSteps = o),
          "number" != typeof this._minFaceSize || this._minFaceSize < 0)
        )
          throw new Error(
            this._name + " - expected minFaceSize to be a number > 0"
          );
        if (
          "number" != typeof this._scaleFactor ||
          this._scaleFactor <= 0 ||
          this._scaleFactor >= 1
        )
          throw new Error(
            this._name +
              " - expected scaleFactor to be a number between 0 and 1"
          );
        if ("number" != typeof this._maxNumScales || this._maxNumScales < 0)
          throw new Error(
            this._name + " - expected maxNumScales to be a number > 0"
          );
        if (
          !Array.isArray(this._scoreThresholds) ||
          3 !== this._scoreThresholds.length ||
          this._scoreThresholds.some(function (t) {
            return "number" != typeof t;
          })
        )
          throw new Error(
            this._name +
              " - expected scoreThresholds to be an array of numbers of length 3"
          );
        if (
          this._scaleSteps &&
          (!Array.isArray(this._scaleSteps) ||
            this._scaleSteps.some(function (t) {
              return "number" != typeof t;
            }))
        )
          throw new Error(
            this._name + " - expected scaleSteps to be an array of numbers"
          );
      }
      return (
        Object.defineProperty(t.prototype, "minFaceSize", {
          get: function () {
            return this._minFaceSize;
          },
          enumerable: !0,
          configurable: !0,
        }),
        Object.defineProperty(t.prototype, "scaleFactor", {
          get: function () {
            return this._scaleFactor;
          },
          enumerable: !0,
          configurable: !0,
        }),
        Object.defineProperty(t.prototype, "maxNumScales", {
          get: function () {
            return this._maxNumScales;
          },
          enumerable: !0,
          configurable: !0,
        }),
        Object.defineProperty(t.prototype, "scoreThresholds", {
          get: function () {
            return this._scoreThresholds;
          },
          enumerable: !0,
          configurable: !0,
        }),
        Object.defineProperty(t.prototype, "scaleSteps", {
          get: function () {
            return this._scaleSteps;
          },
          enumerable: !0,
          configurable: !0,
        }),
        t
      );
    })();
    function ge(t, e) {
      function n(n, r, a, i, o) {
        var u = s.K(t(n * r * a * a), [a, a, n, r]),
          c = s.H(t(r));
        return (
          e.push(
            { paramPath: i + "/filters" },
            { paramPath: i + "/" + (o ? "batch_norm_offset" : "bias") }
          ),
          { filters: u, bias: c }
        );
      }
      function r(t, e, r, a) {
        var i = n(t, e, r, a, !0);
        return { filters: i.filters, batch_norm_offset: i.bias };
      }
      function a(n, a, i) {
        return {
          depthwise_conv: (function (n, r) {
            var a = s.K(t(9 * n), [3, 3, n, 1]),
              i = s.H(t(n)),
              o = s.H(t(n)),
              u = s.H(t(n)),
              c = s.H(t(n));
            return (
              e.push(
                { paramPath: r + "/filters" },
                { paramPath: r + "/batch_norm_scale" },
                { paramPath: r + "/batch_norm_offset" },
                { paramPath: r + "/batch_norm_mean" },
                { paramPath: r + "/batch_norm_variance" }
              ),
              {
                filters: a,
                batch_norm_scale: i,
                batch_norm_offset: o,
                batch_norm_mean: u,
                batch_norm_variance: c,
              }
            );
          })(n, i + "/depthwise_conv"),
          pointwise_conv: r(n, a, 1, i + "/pointwise_conv"),
        };
      }
      return {
        extractMobilenetV1Params: function () {
          return {
            conv_0: r(3, 32, 3, "mobilenetv1/conv_0"),
            conv_1: a(32, 64, "mobilenetv1/conv_1"),
            conv_2: a(64, 128, "mobilenetv1/conv_2"),
            conv_3: a(128, 128, "mobilenetv1/conv_3"),
            conv_4: a(128, 256, "mobilenetv1/conv_4"),
            conv_5: a(256, 256, "mobilenetv1/conv_5"),
            conv_6: a(256, 512, "mobilenetv1/conv_6"),
            conv_7: a(512, 512, "mobilenetv1/conv_7"),
            conv_8: a(512, 512, "mobilenetv1/conv_8"),
            conv_9: a(512, 512, "mobilenetv1/conv_9"),
            conv_10: a(512, 512, "mobilenetv1/conv_10"),
            conv_11: a(512, 512, "mobilenetv1/conv_11"),
            conv_12: a(512, 1024, "mobilenetv1/conv_12"),
            conv_13: a(1024, 1024, "mobilenetv1/conv_13"),
          };
        },
        extractPredictionLayerParams: function () {
          return {
            conv_0: r(1024, 256, 1, "prediction_layer/conv_0"),
            conv_1: r(256, 512, 3, "prediction_layer/conv_1"),
            conv_2: r(512, 128, 1, "prediction_layer/conv_2"),
            conv_3: r(128, 256, 3, "prediction_layer/conv_3"),
            conv_4: r(256, 128, 1, "prediction_layer/conv_4"),
            conv_5: r(128, 256, 3, "prediction_layer/conv_5"),
            conv_6: r(256, 64, 1, "prediction_layer/conv_6"),
            conv_7: r(64, 128, 3, "prediction_layer/conv_7"),
            box_predictor_0: {
              box_encoding_predictor: n(
                512,
                12,
                1,
                "prediction_layer/box_predictor_0/box_encoding_predictor"
              ),
              class_predictor: n(
                512,
                9,
                1,
                "prediction_layer/box_predictor_0/class_predictor"
              ),
            },
            box_predictor_1: {
              box_encoding_predictor: n(
                1024,
                24,
                1,
                "prediction_layer/box_predictor_1/box_encoding_predictor"
              ),
              class_predictor: n(
                1024,
                18,
                1,
                "prediction_layer/box_predictor_1/class_predictor"
              ),
            },
            box_predictor_2: {
              box_encoding_predictor: n(
                512,
                24,
                1,
                "prediction_layer/box_predictor_2/box_encoding_predictor"
              ),
              class_predictor: n(
                512,
                18,
                1,
                "prediction_layer/box_predictor_2/class_predictor"
              ),
            },
            box_predictor_3: {
              box_encoding_predictor: n(
                256,
                24,
                1,
                "prediction_layer/box_predictor_3/box_encoding_predictor"
              ),
              class_predictor: n(
                256,
                18,
                1,
                "prediction_layer/box_predictor_3/class_predictor"
              ),
            },
            box_predictor_4: {
              box_encoding_predictor: n(
                256,
                24,
                1,
                "prediction_layer/box_predictor_4/box_encoding_predictor"
              ),
              class_predictor: n(
                256,
                18,
                1,
                "prediction_layer/box_predictor_4/class_predictor"
              ),
            },
            box_predictor_5: {
              box_encoding_predictor: n(
                128,
                24,
                1,
                "prediction_layer/box_predictor_5/box_encoding_predictor"
              ),
              class_predictor: n(
                128,
                18,
                1,
                "prediction_layer/box_predictor_5/class_predictor"
              ),
            },
          };
        },
      };
    }
    function be(t) {
      var e = [],
        n = (function (t, e) {
          var n = kt(t, e);
          function r(t, e, r) {
            return {
              filters: n(
                t + "/Conv2d_" + e + "_pointwise/weights",
                4,
                r + "/filters"
              ),
              batch_norm_offset: n(
                t + "/Conv2d_" + e + "_pointwise/convolution_bn_offset",
                1,
                r + "/batch_norm_offset"
              ),
            };
          }
          function a(t) {
            var e = "mobilenetv1/conv_" + t,
              a = "MobilenetV1/Conv2d_" + t + "_depthwise",
              i = e + "/depthwise_conv",
              o = e + "/pointwise_conv";
            return {
              depthwise_conv: {
                filters: n(a + "/depthwise_weights", 4, i + "/filters"),
                batch_norm_scale: n(
                  a + "/BatchNorm/gamma",
                  1,
                  i + "/batch_norm_scale"
                ),
                batch_norm_offset: n(
                  a + "/BatchNorm/beta",
                  1,
                  i + "/batch_norm_offset"
                ),
                batch_norm_mean: n(
                  a + "/BatchNorm/moving_mean",
                  1,
                  i + "/batch_norm_mean"
                ),
                batch_norm_variance: n(
                  a + "/BatchNorm/moving_variance",
                  1,
                  i + "/batch_norm_variance"
                ),
              },
              pointwise_conv: r("MobilenetV1", t, o),
            };
          }
          function i(t, e) {
            return {
              filters: n(t + "/weights", 4, e + "/filters"),
              bias: n(t + "/biases", 1, e + "/bias"),
            };
          }
          function o(t) {
            return {
              box_encoding_predictor: i(
                "Prediction/BoxPredictor_" + t + "/BoxEncodingPredictor",
                "prediction_layer/box_predictor_" +
                  t +
                  "/box_encoding_predictor"
              ),
              class_predictor: i(
                "Prediction/BoxPredictor_" + t + "/ClassPredictor",
                "prediction_layer/box_predictor_" + t + "/class_predictor"
              ),
            };
          }
          return {
            extractMobilenetV1Params: function () {
              return {
                conv_0: r("MobilenetV1", 0, "mobilenetv1/conv_0"),
                conv_1: a(1),
                conv_2: a(2),
                conv_3: a(3),
                conv_4: a(4),
                conv_5: a(5),
                conv_6: a(6),
                conv_7: a(7),
                conv_8: a(8),
                conv_9: a(9),
                conv_10: a(10),
                conv_11: a(11),
                conv_12: a(12),
                conv_13: a(13),
              };
            },
            extractPredictionLayerParams: function () {
              return {
                conv_0: r("Prediction", 0, "prediction_layer/conv_0"),
                conv_1: r("Prediction", 1, "prediction_layer/conv_1"),
                conv_2: r("Prediction", 2, "prediction_layer/conv_2"),
                conv_3: r("Prediction", 3, "prediction_layer/conv_3"),
                conv_4: r("Prediction", 4, "prediction_layer/conv_4"),
                conv_5: r("Prediction", 5, "prediction_layer/conv_5"),
                conv_6: r("Prediction", 6, "prediction_layer/conv_6"),
                conv_7: r("Prediction", 7, "prediction_layer/conv_7"),
                box_predictor_0: o(0),
                box_predictor_1: o(1),
                box_predictor_2: o(2),
                box_predictor_3: o(3),
                box_predictor_4: o(4),
                box_predictor_5: o(5),
              };
            },
          };
        })(t, e),
        r = n.extractMobilenetV1Params,
        a = n.extractPredictionLayerParams,
        i = t["Output/extra_dim"];
      if (
        (e.push({
          originalPath: "Output/extra_dim",
          paramPath: "output_layer/extra_dim",
        }),
        !d(i))
      )
        throw new Error(
          "expected weightMap['Output/extra_dim'] to be a Tensor3D, instead have " +
            i
        );
      var o = {
        mobilenetv1: r(),
        prediction_layer: a(),
        output_layer: { extra_dim: i },
      };
      return wt(t, e), { params: o, paramMappings: e };
    }
    function ve(t, e, n) {
      return s.L(function () {
        var r = s.i(t, e.filters, n, "same");
        return (r = s.c(r, e.batch_norm_offset)), s.g(r, 0, 6);
      });
    }
    function ye(t, e) {
      return s.L(function () {
        var n = null,
          r = ve(t, e.conv_0, [2, 2]);
        if (
          ([
            e.conv_1,
            e.conv_2,
            e.conv_3,
            e.conv_4,
            e.conv_5,
            e.conv_6,
            e.conv_7,
            e.conv_8,
            e.conv_9,
            e.conv_10,
            e.conv_11,
            e.conv_12,
            e.conv_13,
          ].forEach(function (t, e) {
            var a = e + 1,
              i = (function (t) {
                return [2, 4, 6, 12].some(function (e) {
                  return e === t;
                })
                  ? [2, 2]
                  : [1, 1];
              })(a);
            (r = ve(
              (r = (function (t, e, n) {
                return s.L(function () {
                  var r = s.j(t, e.filters, n, "same");
                  return (
                    (r = s.e(
                      r,
                      e.batch_norm_mean,
                      e.batch_norm_variance,
                      e.batch_norm_offset,
                      e.batch_norm_scale,
                      0.0010000000474974513
                    )),
                    s.g(r, 0, 6)
                  );
                });
              })(r, t.depthwise_conv, i)),
              t.pointwise_conv,
              [1, 1]
            )),
              11 === a && (n = r);
          }),
          null === n)
        )
          throw new Error("mobileNetV1 - output of conv layer 11 is null");
        return { out: r, conv11: n };
      });
    }
    function xe(t, e, n) {
      var r = t.arraySync(),
        a = Math.min(r[e][0], r[e][2]),
        i = Math.min(r[e][1], r[e][3]),
        o = Math.max(r[e][0], r[e][2]),
        s = Math.max(r[e][1], r[e][3]),
        u = Math.min(r[n][0], r[n][2]),
        c = Math.min(r[n][1], r[n][3]),
        l = Math.max(r[n][0], r[n][2]),
        h = Math.max(r[n][1], r[n][3]),
        d = (o - a) * (s - i),
        p = (l - u) * (h - c);
      if (d <= 0 || p <= 0) return 0;
      var f = Math.max(a, u),
        m = Math.max(i, c),
        g = Math.min(o, l),
        b = Math.min(s, h),
        v = Math.max(g - f, 0) * Math.max(b - m, 0);
      return v / (d + p - v);
    }
    function we(t, e) {
      var n = (function (t) {
          var e = s.O(s.N(t, [1, 0])),
            n = [s.F(e[2], e[0]), s.F(e[3], e[1])];
          return {
            sizes: n,
            centers: [
              s.c(e[0], s.k(n[0], s.y(2))),
              s.c(e[1], s.k(n[1], s.y(2))),
            ],
          };
        })(t),
        r = n.sizes,
        a = n.centers,
        i = s.O(s.N(e, [1, 0])),
        o = s.k(s.t(s.l(s.k(i[2], s.y(5))), r[0]), s.y(2)),
        u = s.c(s.t(s.k(i[0], s.y(10)), r[0]), a[0]),
        c = s.k(s.t(s.l(s.k(i[3], s.y(5))), r[1]), s.y(2)),
        l = s.c(s.t(s.k(i[1], s.y(10)), r[1]), a[1]);
      return s.N(s.E([s.F(u, o), s.F(l, c), s.c(u, o), s.c(l, c)]), [1, 0]);
    }
    function Ce(t, e) {
      return s.L(function () {
        var n = t.shape[0];
        return {
          boxPredictionEncoding: s.x(xt(t, e.box_encoding_predictor), [
            n,
            -1,
            1,
            4,
          ]),
          classPrediction: s.x(xt(t, e.class_predictor), [n, -1, 3]),
        };
      });
    }
    var Oe = (function () {
        function t(t) {
          var e = void 0 === t ? {} : t,
            n = e.minConfidence,
            r = e.maxResults;
          if (
            ((this._name = "SsdMobilenetv1Options"),
            (this._minConfidence = n || 0.5),
            (this._maxResults = r || 100),
            "number" != typeof this._minConfidence ||
              this._minConfidence <= 0 ||
              this._minConfidence >= 1)
          )
            throw new Error(
              this._name +
                " - expected minConfidence to be a number between 0 and 1"
            );
          if ("number" != typeof this._maxResults)
            throw new Error(
              this._name + " - expected maxResults to be a number"
            );
        }
        return (
          Object.defineProperty(t.prototype, "minConfidence", {
            get: function () {
              return this._minConfidence;
            },
            enumerable: !0,
            configurable: !0,
          }),
          Object.defineProperty(t.prototype, "maxResults", {
            get: function () {
              return this._maxResults;
            },
            enumerable: !0,
            configurable: !0,
          }),
          t
        );
      })(),
      Ee = (function (t) {
        function e() {
          return t.call(this, "SsdMobilenetv1") || this;
        }
        return (
          Object(c.c)(e, t),
          (e.prototype.forwardInput = function (t) {
            var e = this.params;
            if (!e)
              throw new Error("SsdMobilenetv1 - load model before inference");
            return s.L(function () {
              var n = t.toBatchTensor(512, !1).toFloat(),
                r = ye(
                  s.F(s.t(n, s.y(0.007843137718737125)), s.y(1)),
                  e.mobilenetv1
                ),
                a = (function (t, e, n) {
                  return s.L(function () {
                    var r = ve(t, n.conv_0, [1, 1]),
                      a = ve(r, n.conv_1, [2, 2]),
                      i = ve(a, n.conv_2, [1, 1]),
                      o = ve(i, n.conv_3, [2, 2]),
                      u = ve(o, n.conv_4, [1, 1]),
                      c = ve(u, n.conv_5, [2, 2]),
                      l = ve(c, n.conv_6, [1, 1]),
                      h = ve(l, n.conv_7, [2, 2]),
                      d = Ce(e, n.box_predictor_0),
                      p = Ce(t, n.box_predictor_1),
                      f = Ce(a, n.box_predictor_2),
                      m = Ce(o, n.box_predictor_3),
                      g = Ce(c, n.box_predictor_4),
                      b = Ce(h, n.box_predictor_5);
                    return {
                      boxPredictions: s.h(
                        [
                          d.boxPredictionEncoding,
                          p.boxPredictionEncoding,
                          f.boxPredictionEncoding,
                          m.boxPredictionEncoding,
                          g.boxPredictionEncoding,
                          b.boxPredictionEncoding,
                        ],
                        1
                      ),
                      classPredictions: s.h(
                        [
                          d.classPrediction,
                          p.classPrediction,
                          f.classPrediction,
                          m.classPrediction,
                          g.classPrediction,
                          b.classPrediction,
                        ],
                        1
                      ),
                    };
                  });
                })(r.out, r.conv11, e.prediction_layer);
              return (function (t, e, n) {
                return s.L(function () {
                  var r = t.shape[0],
                    a = we(
                      s.x(s.M(n.extra_dim, [r, 1, 1]), [-1, 4]),
                      s.x(t, [-1, 4])
                    );
                  a = s.x(a, [r, a.shape[0] / r, 4]);
                  var i = s.A(s.B(e, [0, 0, 1], [-1, -1, -1])),
                    o = s.B(i, [0, 0, 0], [-1, -1, 1]);
                  return (
                    (o = s.x(o, [r, o.shape[1]])),
                    { boxes: s.O(a), scores: s.O(o) }
                  );
                });
              })(a.boxPredictions, a.classPredictions, e.output_layer);
            });
          }),
          (e.prototype.forward = function (t) {
            return Object(c.b)(this, void 0, void 0, function () {
              var e;
              return Object(c.d)(this, function (n) {
                switch (n.label) {
                  case 0:
                    return (e = this.forwardInput), [4, ct(t)];
                  case 1:
                    return [2, e.apply(this, [n.sent()])];
                }
              });
            });
          }),
          (e.prototype.locateFaces = function (t, e) {
            return (
              void 0 === e && (e = {}),
              Object(c.b)(this, void 0, void 0, function () {
                var n, r, a, i, o, s, u, l, h, d, p, f, m, g, b, v, y, x, w, C;
                return Object(c.d)(this, function (c) {
                  switch (c.label) {
                    case 0:
                      return (
                        (n = new Oe(e)),
                        (r = n.maxResults),
                        (a = n.minConfidence),
                        [4, ct(t)]
                      );
                    case 1:
                      for (
                        i = c.sent(),
                          o = this.forwardInput(i),
                          s = o.boxes,
                          u = o.scores,
                          l = s[0],
                          h = u[0],
                          d = 1;
                        d < s.length;
                        d++
                      )
                        s[d].dispose(), u[d].dispose();
                      return (m = (f = Array).from), [4, h.data()];
                    case 2:
                      return (
                        (p = m.apply(f, [c.sent()])),
                        0.5,
                        (g = (function (t, e, n, r, a) {
                          var i = t.shape[0],
                            o = Math.min(n, i),
                            s = e
                              .map(function (t, e) {
                                return { score: t, boxIndex: e };
                              })
                              .filter(function (t) {
                                return t.score > a;
                              })
                              .sort(function (t, e) {
                                return e.score - t.score;
                              }),
                            u = [];
                          return (
                            s.forEach(function (e) {
                              if (!(u.length >= o)) {
                                for (
                                  var n = e.score, i = u.length - 1;
                                  i >= 0;
                                  --i
                                ) {
                                  var s = xe(t, e.boxIndex, u[i]);
                                  if (
                                    0 !== s &&
                                    ((e.score *= s <= r ? 1 : 0), e.score <= a)
                                  )
                                    break;
                                }
                                n === e.score && u.push(e.boxIndex);
                              }
                            }),
                            u
                          );
                        })(l, p, r, 0.5, a)),
                        (b = i.getReshapedInputDimensions(0)),
                        (v = i.inputSize),
                        (y = v / b.width),
                        (x = v / b.height),
                        (w = l.arraySync()),
                        (C = g.map(function (t) {
                          var e = [
                              Math.max(0, w[t][0]),
                              Math.min(1, w[t][2]),
                            ].map(function (t) {
                              return t * x;
                            }),
                            n = e[0],
                            r = e[1],
                            a = [
                              Math.max(0, w[t][1]),
                              Math.min(1, w[t][3]),
                            ].map(function (t) {
                              return t * y;
                            }),
                            o = a[0],
                            s = a[1];
                          return new S(p[t], new A(o, n, s - o, r - n), {
                            height: i.getInputHeight(0),
                            width: i.getInputWidth(0),
                          });
                        })),
                        l.dispose(),
                        h.dispose(),
                        [2, C]
                      );
                  }
                });
              })
            );
          }),
          (e.prototype.getDefaultModelName = function () {
            return "ssd_mobilenetv1_model";
          }),
          (e.prototype.extractParamsFromWeigthMap = function (t) {
            return be(t);
          }),
          (e.prototype.extractParams = function (t) {
            return (function (t) {
              var e = [],
                n = Nt(t),
                r = n.extractWeights,
                a = n.getRemainingWeights,
                i = ge(r, e),
                o = i.extractMobilenetV1Params,
                u = i.extractPredictionLayerParams,
                c = o(),
                l = u(),
                h = { extra_dim: s.J(r(20472), [1, 5118, 4]) };
              if (
                (e.push({ paramPath: "output_layer/extra_dim" }),
                0 !== a().length)
              )
                throw new Error("weights remaing after extract: " + a().length);
              return {
                params: {
                  mobilenetv1: c,
                  prediction_layer: l,
                  output_layer: h,
                },
                paramMappings: e,
              };
            })(t);
          }),
          e
        );
      })(gt);
    !(function (t) {
      function e() {
        return (null !== t && t.apply(this, arguments)) || this;
      }
      Object(c.c)(e, t);
    })(Ee);
    var Se,
      Ie = [
        new w(0.738768, 0.874946),
        new w(2.42204, 2.65704),
        new w(4.30971, 7.04493),
        new w(10.246, 4.59428),
        new w(12.6868, 11.8741),
      ],
      ke = [
        new w(1.603231, 2.094468),
        new w(6.041143, 7.080126),
        new w(2.882459, 3.518061),
        new w(4.266906, 5.178857),
        new w(9.041765, 10.66308),
      ],
      Ne = [117.001, 114.697, 97.404],
      Re = function (t) {
        return "number" == typeof t;
      };
    function Ae(t) {
      return s.L(function () {
        var e = s.t(t, s.y(0.10000000149011612));
        return s.c(s.w(s.F(t, e)), e);
      });
    }
    function Te(t, e) {
      return s.L(function () {
        var n = s.v(t, [
          [0, 0],
          [1, 1],
          [1, 1],
          [0, 0],
        ]);
        return (
          (n = s.i(n, e.conv.filters, [1, 1], "valid")),
          (n = s.F(n, e.bn.sub)),
          (n = s.t(n, e.bn.truediv)),
          Ae((n = s.c(n, e.conv.bias)))
        );
      });
    }
    function _e(t, e) {
      return s.L(function () {
        var n = s.v(t, [
          [0, 0],
          [1, 1],
          [1, 1],
          [0, 0],
        ]);
        return (
          (n = s.z(n, e.depthwise_filter, e.pointwise_filter, [1, 1], "valid")),
          Ae((n = s.c(n, e.bias)))
        );
      });
    }
    function De(t, e) {
      var n = Ct(t, e);
      var r = St(t, e);
      return {
        extractConvParams: n,
        extractConvWithBatchNormParams: function (r, a, i) {
          return {
            conv: n(r, a, 3, i + "/conv"),
            bn: (function (n, r) {
              var a = s.H(t(n)),
                i = s.H(t(n));
              return (
                e.push(
                  { paramPath: r + "/sub" },
                  { paramPath: r + "/truediv" }
                ),
                { sub: a, truediv: i }
              );
            })(a, i + "/bn"),
          };
        },
        extractSeparableConvParams: r,
      };
    }
    function Fe(t, e) {
      var n = kt(t, e);
      function r(t) {
        return { filters: n(t + "/filters", 4), bias: n(t + "/bias", 1) };
      }
      return {
        extractConvParams: r,
        extractConvWithBatchNormParams: function (t) {
          return {
            conv: r(t + "/conv"),
            bn: (function (t) {
              return { sub: n(t + "/sub", 1), truediv: n(t + "/truediv", 1) };
            })(t + "/bn"),
          };
        },
        extractSeparableConvParams: It(n),
      };
    }
    !(function (t) {
      (t[(t.XS = 224)] = "XS"),
        (t[(t.SM = 320)] = "SM"),
        (t[(t.MD = 416)] = "MD"),
        (t[(t.LG = 608)] = "LG");
    })(Se || (Se = {}));
    var Me = (function () {
        function t(t) {
          var e = void 0 === t ? {} : t,
            n = e.inputSize,
            r = e.scoreThreshold;
          if (
            ((this._name = "TinyYolov2Options"),
            (this._inputSize = n || 416),
            (this._scoreThreshold = r || 0.5),
            "number" != typeof this._inputSize || this._inputSize % 32 != 0)
          )
            throw new Error(
              this._name +
                " - expected inputSize to be a number divisible by 32"
            );
          if (
            "number" != typeof this._scoreThreshold ||
            this._scoreThreshold <= 0 ||
            this._scoreThreshold >= 1
          )
            throw new Error(
              this._name +
                " - expected scoreThreshold to be a number between 0 and 1"
            );
        }
        return (
          Object.defineProperty(t.prototype, "inputSize", {
            get: function () {
              return this._inputSize;
            },
            enumerable: !0,
            configurable: !0,
          }),
          Object.defineProperty(t.prototype, "scoreThreshold", {
            get: function () {
              return this._scoreThreshold;
            },
            enumerable: !0,
            configurable: !0,
          }),
          t
        );
      })(),
      je = (function (t) {
        function e(e) {
          var n = t.call(this, "TinyYolov2") || this;
          return (
            (function (t) {
              if (!t) throw new Error("invalid config: " + t);
              if ("boolean" != typeof t.withSeparableConvs)
                throw new Error(
                  "config.withSeparableConvs has to be a boolean, have: " +
                    t.withSeparableConvs
                );
              if (
                !Re(t.iouThreshold) ||
                t.iouThreshold < 0 ||
                t.iouThreshold > 1
              )
                throw new Error(
                  "config.iouThreshold has to be a number between [0, 1], have: " +
                    t.iouThreshold
                );
              if (
                !Array.isArray(t.classes) ||
                !t.classes.length ||
                !t.classes.every(function (t) {
                  return "string" == typeof t;
                })
              )
                throw new Error(
                  "config.classes has to be an array class names: string[], have: " +
                    JSON.stringify(t.classes)
                );
              if (
                !Array.isArray(t.anchors) ||
                !t.anchors.length ||
                !t.anchors
                  .map(function (t) {
                    return t || {};
                  })
                  .every(function (t) {
                    return Re(t.x) && Re(t.y);
                  })
              )
                throw new Error(
                  "config.anchors has to be an array of { x: number, y: number }, have: " +
                    JSON.stringify(t.anchors)
                );
              if (
                t.meanRgb &&
                (!Array.isArray(t.meanRgb) ||
                  3 !== t.meanRgb.length ||
                  !t.meanRgb.every(Re))
              )
                throw new Error(
                  "config.meanRgb has to be an array of shape [number, number, number], have: " +
                    JSON.stringify(t.meanRgb)
                );
            })(e),
            (n._config = e),
            n
          );
        }
        return (
          Object(c.c)(e, t),
          Object.defineProperty(e.prototype, "config", {
            get: function () {
              return this._config;
            },
            enumerable: !0,
            configurable: !0,
          }),
          Object.defineProperty(e.prototype, "withClassScores", {
            get: function () {
              return (
                this.config.withClassScores || this.config.classes.length > 1
              );
            },
            enumerable: !0,
            configurable: !0,
          }),
          Object.defineProperty(e.prototype, "boxEncodingSize", {
            get: function () {
              return (
                5 + (this.withClassScores ? this.config.classes.length : 0)
              );
            },
            enumerable: !0,
            configurable: !0,
          }),
          (e.prototype.runTinyYolov2 = function (t, e) {
            var n = Te(t, e.conv0);
            return (
              (n = Te((n = s.s(n, [2, 2], [2, 2], "same")), e.conv1)),
              (n = Te((n = s.s(n, [2, 2], [2, 2], "same")), e.conv2)),
              (n = Te((n = s.s(n, [2, 2], [2, 2], "same")), e.conv3)),
              (n = Te((n = s.s(n, [2, 2], [2, 2], "same")), e.conv4)),
              (n = Te((n = s.s(n, [2, 2], [2, 2], "same")), e.conv5)),
              (n = Te((n = s.s(n, [2, 2], [1, 1], "same")), e.conv6)),
              xt((n = Te(n, e.conv7)), e.conv8, "valid", !1)
            );
          }),
          (e.prototype.runMobilenet = function (t, e) {
            var n = this.config.isFirstLayerConv2d
              ? Ae(xt(t, e.conv0, "valid", !1))
              : _e(t, e.conv0);
            return (
              (n = _e((n = s.s(n, [2, 2], [2, 2], "same")), e.conv1)),
              (n = _e((n = s.s(n, [2, 2], [2, 2], "same")), e.conv2)),
              (n = _e((n = s.s(n, [2, 2], [2, 2], "same")), e.conv3)),
              (n = _e((n = s.s(n, [2, 2], [2, 2], "same")), e.conv4)),
              (n = _e((n = s.s(n, [2, 2], [2, 2], "same")), e.conv5)),
              (n = s.s(n, [2, 2], [1, 1], "same")),
              (n = e.conv6 ? _e(n, e.conv6) : n),
              xt((n = e.conv7 ? _e(n, e.conv7) : n), e.conv8, "valid", !1)
            );
          }),
          (e.prototype.forwardInput = function (t, e) {
            var n = this,
              r = this.params;
            if (!r) throw new Error("TinyYolov2 - load model before inference");
            return s.L(function () {
              var a = t.toBatchTensor(e, !1).toFloat();
              return (
                (a = (a = n.config.meanRgb ? N(a, n.config.meanRgb) : a).div(
                  s.y(256)
                )),
                n.config.withSeparableConvs
                  ? n.runMobilenet(a, r)
                  : n.runTinyYolov2(a, r)
              );
            });
          }),
          (e.prototype.forward = function (t, e) {
            return Object(c.b)(this, void 0, void 0, function () {
              var n;
              return Object(c.d)(this, function (r) {
                switch (r.label) {
                  case 0:
                    return (n = this.forwardInput), [4, ct(t)];
                  case 1:
                    return [4, n.apply(this, [r.sent(), e])];
                  case 2:
                    return [2, r.sent()];
                }
              });
            });
          }),
          (e.prototype.detect = function (t, e) {
            return (
              void 0 === e && (e = {}),
              Object(c.b)(this, void 0, void 0, function () {
                var n,
                  r,
                  a,
                  i,
                  o,
                  u,
                  l,
                  h,
                  d,
                  p,
                  f,
                  m,
                  g,
                  b = this;
                return Object(c.d)(this, function (c) {
                  switch (c.label) {
                    case 0:
                      return (
                        (n = new Me(e)),
                        (r = n.inputSize),
                        (a = n.scoreThreshold),
                        [4, ct(t)]
                      );
                    case 1:
                      return (i = c.sent()), [4, this.forwardInput(i, r)];
                    case 2:
                      return (
                        (o = c.sent()),
                        (u = s.L(function () {
                          return s.O(o)[0].expandDims();
                        })),
                        (l = {
                          width: i.getInputWidth(0),
                          height: i.getInputHeight(0),
                        }),
                        [
                          4,
                          this.extractBoxes(
                            u,
                            i.getReshapedInputDimensions(0),
                            a
                          ),
                        ]
                      );
                    case 3:
                      return (
                        (h = c.sent()),
                        o.dispose(),
                        u.dispose(),
                        (d = h.map(function (t) {
                          return t.box;
                        })),
                        (p = h.map(function (t) {
                          return t.score;
                        })),
                        (f = h.map(function (t) {
                          return t.classScore;
                        })),
                        (m = h.map(function (t) {
                          return b.config.classes[t.label];
                        })),
                        (g = k(
                          d.map(function (t) {
                            return t.rescale(r);
                          }),
                          p,
                          this.config.iouThreshold,
                          !0
                        )),
                        [
                          2,
                          g.map(function (t) {
                            return new E(p[t], f[t], m[t], d[t], l);
                          }),
                        ]
                      );
                  }
                });
              })
            );
          }),
          (e.prototype.getDefaultModelName = function () {
            return "";
          }),
          (e.prototype.extractParamsFromWeigthMap = function (t) {
            return (function (t, e) {
              var n,
                r = [],
                a = Fe(t, r),
                i = a.extractConvParams,
                o = a.extractConvWithBatchNormParams,
                s = a.extractSeparableConvParams;
              if (e.withSeparableConvs) {
                var u = (e.filterSizes && e.filterSizes.length) || 9;
                n = {
                  conv0: e.isFirstLayerConv2d ? i("conv0") : s("conv0"),
                  conv1: s("conv1"),
                  conv2: s("conv2"),
                  conv3: s("conv3"),
                  conv4: s("conv4"),
                  conv5: s("conv5"),
                  conv6: u > 7 ? s("conv6") : void 0,
                  conv7: u > 8 ? s("conv7") : void 0,
                  conv8: i("conv8"),
                };
              } else
                n = {
                  conv0: o("conv0"),
                  conv1: o("conv1"),
                  conv2: o("conv2"),
                  conv3: o("conv3"),
                  conv4: o("conv4"),
                  conv5: o("conv5"),
                  conv6: o("conv6"),
                  conv7: o("conv7"),
                  conv8: i("conv8"),
                };
              return wt(t, r), { params: n, paramMappings: r };
            })(t, this.config);
          }),
          (e.prototype.extractParams = function (t) {
            var n = this.config.filterSizes || e.DEFAULT_FILTER_SIZES,
              r = n ? n.length : void 0;
            if (7 !== r && 8 !== r && 9 !== r)
              throw new Error(
                "TinyYolov2 - expected 7 | 8 | 9 convolutional filters, but found " +
                  r +
                  " filterSizes in config"
              );
            return (function (t, e, n, r) {
              var a,
                i = Nt(t),
                o = i.extractWeights,
                s = i.getRemainingWeights,
                u = [],
                c = De(o, u),
                l = c.extractConvParams,
                h = c.extractConvWithBatchNormParams,
                d = c.extractSeparableConvParams;
              if (e.withSeparableConvs) {
                var p = r[0],
                  f = r[1],
                  m = r[2],
                  g = r[3],
                  b = r[4],
                  v = r[5],
                  y = r[6],
                  x = r[7],
                  w = r[8];
                a = {
                  conv0: e.isFirstLayerConv2d
                    ? l(p, f, 3, "conv0")
                    : d(p, f, "conv0"),
                  conv1: d(f, m, "conv1"),
                  conv2: d(m, g, "conv2"),
                  conv3: d(g, b, "conv3"),
                  conv4: d(b, v, "conv4"),
                  conv5: d(v, y, "conv5"),
                  conv6: x ? d(y, x, "conv6") : void 0,
                  conv7: w ? d(x, w, "conv7") : void 0,
                  conv8: l(w || x || y, 5 * n, 1, "conv8"),
                };
              } else {
                (p = r[0]),
                  (f = r[1]),
                  (m = r[2]),
                  (g = r[3]),
                  (b = r[4]),
                  (v = r[5]),
                  (y = r[6]),
                  (x = r[7]),
                  (w = r[8]);
                a = {
                  conv0: h(p, f, "conv0"),
                  conv1: h(f, m, "conv1"),
                  conv2: h(m, g, "conv2"),
                  conv3: h(g, b, "conv3"),
                  conv4: h(b, v, "conv4"),
                  conv5: h(v, y, "conv5"),
                  conv6: h(y, x, "conv6"),
                  conv7: h(x, w, "conv7"),
                  conv8: l(w, 5 * n, 1, "conv8"),
                };
              }
              if (0 !== s().length)
                throw new Error("weights remaing after extract: " + s().length);
              return { params: a, paramMappings: u };
            })(t, this.config, this.boxEncodingSize, n);
          }),
          (e.prototype.extractBoxes = function (t, e, n) {
            return Object(c.b)(this, void 0, void 0, function () {
              var r,
                a,
                i,
                o,
                u,
                l,
                h,
                d,
                p,
                f,
                m,
                g,
                b,
                v,
                y,
                x,
                w,
                C,
                E,
                S,
                I,
                k,
                N,
                A,
                T,
                _,
                D,
                F,
                M,
                j = this;
              return Object(c.d)(this, function ($) {
                switch ($.label) {
                  case 0:
                    return (
                      (r = e.width),
                      (a = e.height),
                      (i = Math.max(r, a)),
                      (o = i / r),
                      (u = i / a),
                      (l = t.shape[1]),
                      (h = this.config.anchors.length),
                      (d = s.L(function () {
                        var e = t.reshape([l, l, h, j.boxEncodingSize]);
                        return [
                          e.slice([0, 0, 0, 0], [l, l, h, 4]),
                          e.slice([0, 0, 0, 4], [l, l, h, 1]),
                          j.withClassScores
                            ? s.D(
                                e.slice(
                                  [0, 0, 0, 5],
                                  [l, l, h, j.config.classes.length]
                                ),
                                3
                              )
                            : s.y(0),
                        ];
                      })),
                      (p = d[0]),
                      (f = d[1]),
                      (m = d[2]),
                      (g = []),
                      [4, f.array()]
                    );
                  case 1:
                    return (b = $.sent()), [4, p.array()];
                  case 2:
                    (v = $.sent()), (y = 0), ($.label = 3);
                  case 3:
                    if (!(y < l)) return [3, 12];
                    (x = 0), ($.label = 4);
                  case 4:
                    if (!(x < l)) return [3, 11];
                    (w = 0), ($.label = 5);
                  case 5:
                    return w < h
                      ? ((C = R(b[y][x][w][0])),
                        !n || C > n
                          ? ((E = ((x + R(v[y][x][w][0])) / l) * o),
                            (S = ((y + R(v[y][x][w][1])) / l) * u),
                            (I =
                              ((Math.exp(v[y][x][w][2]) *
                                this.config.anchors[w].x) /
                                l) *
                              o),
                            (k =
                              ((Math.exp(v[y][x][w][3]) *
                                this.config.anchors[w].y) /
                                l) *
                              u),
                            (N = E - I / 2),
                            (A = S - k / 2),
                            (T = { row: y, col: x, anchor: w }),
                            this.withClassScores
                              ? [4, this.extractPredictedClass(m, T)]
                              : [3, 7])
                          : [3, 9])
                      : [3, 10];
                  case 6:
                    return (M = $.sent()), [3, 8];
                  case 7:
                    (M = { classScore: 1, label: 0 }), ($.label = 8);
                  case 8:
                    (D = (_ = M).classScore),
                      (F = _.label),
                      g.push(
                        Object(c.a)(
                          {
                            box: new O(N, A, N + I, A + k),
                            score: C,
                            classScore: C * D,
                            label: F,
                          },
                          T
                        )
                      ),
                      ($.label = 9);
                  case 9:
                    return w++, [3, 5];
                  case 10:
                    return x++, [3, 4];
                  case 11:
                    return y++, [3, 3];
                  case 12:
                    return p.dispose(), f.dispose(), m.dispose(), [2, g];
                }
              });
            });
          }),
          (e.prototype.extractPredictedClass = function (t, e) {
            return Object(c.b)(this, void 0, void 0, function () {
              var n, r, a, i;
              return Object(c.d)(this, function (o) {
                switch (o.label) {
                  case 0:
                    return (
                      (n = e.row), (r = e.col), (a = e.anchor), [4, t.array()]
                    );
                  case 1:
                    return (
                      (i = o.sent()),
                      [
                        2,
                        Array(this.config.classes.length)
                          .fill(0)
                          .map(function (t, e) {
                            return i[n][r][a][e];
                          })
                          .map(function (t, e) {
                            return { classScore: t, label: e };
                          })
                          .reduce(function (t, e) {
                            return t.classScore > e.classScore ? t : e;
                          }),
                      ]
                    );
                }
              });
            });
          }),
          (e.DEFAULT_FILTER_SIZES = [3, 16, 32, 64, 128, 256, 512, 1024, 1024]),
          e
        );
      })(gt),
      $e = (function (t) {
        function e(e) {
          void 0 === e && (e = !0);
          var n = Object.assign(
            {},
            { withSeparableConvs: e, iouThreshold: 0.4, classes: ["face"] },
            e
              ? { anchors: ke, meanRgb: Ne }
              : { anchors: Ie, withClassScores: !0 }
          );
          return t.call(this, n) || this;
        }
        return (
          Object(c.c)(e, t),
          Object.defineProperty(e.prototype, "withSeparableConvs", {
            get: function () {
              return this.config.withSeparableConvs;
            },
            enumerable: !0,
            configurable: !0,
          }),
          Object.defineProperty(e.prototype, "anchors", {
            get: function () {
              return this.config.anchors;
            },
            enumerable: !0,
            configurable: !0,
          }),
          (e.prototype.locateFaces = function (t, e) {
            return Object(c.b)(this, void 0, void 0, function () {
              return Object(c.d)(this, function (n) {
                switch (n.label) {
                  case 0:
                    return [4, this.detect(t, e)];
                  case 1:
                    return [
                      2,
                      n.sent().map(function (t) {
                        return new S(t.score, t.relativeBox, {
                          width: t.imageWidth,
                          height: t.imageHeight,
                        });
                      }),
                    ];
                }
              });
            });
          }),
          (e.prototype.getDefaultModelName = function () {
            return this.withSeparableConvs
              ? "tiny_yolov2_separable_conv_model"
              : "tiny_yolov2_model";
          }),
          (e.prototype.extractParamsFromWeigthMap = function (e) {
            return t.prototype.extractParamsFromWeigthMap.call(this, e);
          }),
          e
        );
      })(je);
    var Be = (function (t) {
        function e() {
          var e = (null !== t && t.apply(this, arguments)) || this;
          return (e._name = "TinyFaceDetectorOptions"), e;
        }
        return Object(c.c)(e, t), e;
      })(Me),
      Pe = (function () {
        function t() {}
        return (
          (t.prototype.then = function (t) {
            return Object(c.b)(this, void 0, void 0, function () {
              var e;
              return Object(c.d)(this, function (n) {
                switch (n.label) {
                  case 0:
                    return (e = t), [4, this.run()];
                  case 1:
                    return [2, e.apply(void 0, [n.sent()])];
                }
              });
            });
          }),
          (t.prototype.run = function () {
            return Object(c.b)(this, void 0, void 0, function () {
              return Object(c.d)(this, function (t) {
                throw new Error("ComposableTask - run is not implemented");
              });
            });
          }),
          t
        );
      })();
    function Le(t, e, n, r, a) {
      return (
        void 0 === a &&
          (a = function (t) {
            return t.alignedRect;
          }),
        Object(c.b)(this, void 0, void 0, function () {
          var i, o, u, l, h;
          return Object(c.d)(this, function (c) {
            switch (c.label) {
              case 0:
                return (
                  (i = t.map(function (t) {
                    return zt(t) ? a(t) : t.detection;
                  })),
                  (u = r) ? [3, 5] : e instanceof s.a ? [4, ht(e, i)] : [3, 2]
                );
              case 1:
                return (l = c.sent()), [3, 4];
              case 2:
                return [4, lt(e, i)];
              case 3:
                (l = c.sent()), (c.label = 4);
              case 4:
                (u = l), (c.label = 5);
              case 5:
                return [4, n((o = u))];
              case 6:
                return (
                  (h = c.sent()),
                  o.forEach(function (t) {
                    return t instanceof s.a && t.dispose();
                  }),
                  [2, h]
                );
            }
          });
        })
      );
    }
    function ze(t, e, n, r, a) {
      return Object(c.b)(this, void 0, void 0, function () {
        var i = this;
        return Object(c.d)(this, function (o) {
          return [
            2,
            Le(
              [t],
              e,
              function (t) {
                return Object(c.b)(i, void 0, void 0, function () {
                  return Object(c.d)(this, function (e) {
                    return [2, n(t[0])];
                  });
                });
              },
              r,
              a
            ),
          ];
        });
      });
    }
    function We(t) {
      var e = Nt(t),
        n = e.extractWeights,
        r = e.getRemainingWeights,
        a = [],
        i = (function (t, e) {
          var n = Ct(t, e),
            r = Ot(t, e);
          function a(n, r) {
            var a = s.H(t(n));
            return e.push({ paramPath: r }), a;
          }
          function i(t, e, r) {
            return (
              void 0 === r && (r = !1),
              {
                conv1: n(t[0], t[1], 3, e + "/conv1"),
                prelu1_alpha: a(t[1], e + "/prelu1_alpha"),
                conv2: n(t[1], t[2], 3, e + "/conv2"),
                prelu2_alpha: a(t[2], e + "/prelu2_alpha"),
                conv3: n(t[2], t[3], r ? 2 : 3, e + "/conv3"),
                prelu3_alpha: a(t[3], e + "/prelu3_alpha"),
              }
            );
          }
          return {
            extractPNetParams: function () {
              var t = i([3, 10, 16, 32], "pnet"),
                e = n(32, 2, 1, "pnet/conv4_1"),
                r = n(32, 4, 1, "pnet/conv4_2");
              return Object(c.a)(Object(c.a)({}, t), {
                conv4_1: e,
                conv4_2: r,
              });
            },
            extractRNetParams: function () {
              var t = i([3, 28, 48, 64], "rnet", !0),
                e = r(576, 128, "rnet/fc1"),
                n = a(128, "rnet/prelu4_alpha"),
                o = r(128, 2, "rnet/fc2_1"),
                s = r(128, 4, "rnet/fc2_2");
              return Object(c.a)(Object(c.a)({}, t), {
                fc1: e,
                prelu4_alpha: n,
                fc2_1: o,
                fc2_2: s,
              });
            },
            extractONetParams: function () {
              var t = i([3, 32, 64, 64], "onet"),
                e = n(64, 128, 2, "onet/conv4"),
                o = a(128, "onet/prelu4_alpha"),
                s = r(1152, 256, "onet/fc1"),
                u = a(256, "onet/prelu5_alpha"),
                l = r(256, 2, "onet/fc2_1"),
                h = r(256, 4, "onet/fc2_2"),
                d = r(256, 10, "onet/fc2_3");
              return Object(c.a)(Object(c.a)({}, t), {
                conv4: e,
                prelu4_alpha: o,
                fc1: s,
                prelu5_alpha: u,
                fc2_1: l,
                fc2_2: h,
                fc2_3: d,
              });
            },
          };
        })(n, a),
        o = i.extractPNetParams,
        u = i.extractRNetParams,
        l = i.extractONetParams,
        h = o(),
        d = u(),
        p = l();
      if (0 !== r().length)
        throw new Error("weights remaing after extract: " + r().length);
      return { params: { pnet: h, rnet: d, onet: p }, paramMappings: a };
    }
    function Ve(t) {
      var e = [],
        n = (function (t, e) {
          var n = kt(t, e);
          function r(t) {
            return {
              filters: n(t + "/weights", 4, t + "/filters"),
              bias: n(t + "/bias", 1),
            };
          }
          function a(t) {
            return { weights: n(t + "/weights", 2), bias: n(t + "/bias", 1) };
          }
          function i(t) {
            return n(t, 1);
          }
          function o(t) {
            return {
              conv1: r(t + "/conv1"),
              prelu1_alpha: i(t + "/prelu1_alpha"),
              conv2: r(t + "/conv2"),
              prelu2_alpha: i(t + "/prelu2_alpha"),
              conv3: r(t + "/conv3"),
              prelu3_alpha: i(t + "/prelu3_alpha"),
            };
          }
          return {
            extractPNetParams: function () {
              var t = o("pnet"),
                e = r("pnet/conv4_1"),
                n = r("pnet/conv4_2");
              return Object(c.a)(Object(c.a)({}, t), {
                conv4_1: e,
                conv4_2: n,
              });
            },
            extractRNetParams: function () {
              var t = o("rnet"),
                e = a("rnet/fc1"),
                n = i("rnet/prelu4_alpha"),
                r = a("rnet/fc2_1"),
                s = a("rnet/fc2_2");
              return Object(c.a)(Object(c.a)({}, t), {
                fc1: e,
                prelu4_alpha: n,
                fc2_1: r,
                fc2_2: s,
              });
            },
            extractONetParams: function () {
              var t = o("onet"),
                e = r("onet/conv4"),
                n = i("onet/prelu4_alpha"),
                s = a("onet/fc1"),
                u = i("onet/prelu5_alpha"),
                l = a("onet/fc2_1"),
                h = a("onet/fc2_2"),
                d = a("onet/fc2_3");
              return Object(c.a)(Object(c.a)({}, t), {
                conv4: e,
                prelu4_alpha: n,
                fc1: s,
                prelu5_alpha: u,
                fc2_1: l,
                fc2_2: h,
                fc2_3: d,
              });
            },
          };
        })(t, e),
        r = n.extractPNetParams,
        a = n.extractRNetParams,
        i = n.extractONetParams,
        o = r(),
        s = a(),
        u = i();
      return (
        wt(t, e), { params: { pnet: o, rnet: s, onet: u }, paramMappings: e }
      );
    }
    function Ue(t, e) {
      var n = e[0],
        r = e[1];
      return { height: Math.floor(n * t), width: Math.floor(r * t) };
    }
    var Ge = (function (t) {
      function e(e, n, r, a) {
        return (
          t.call(this, { left: e, top: n, right: r, bottom: a }, !0) || this
        );
      }
      return Object(c.c)(e, t), e;
    })(C);
    function He(t) {
      return s.L(function () {
        return s.t(s.F(t, s.y(127.5)), s.y(0.0078125));
      });
    }
    function qe(t, e) {
      return s.L(function () {
        return s.c(s.w(t), s.t(e, s.u(s.w(s.u(t)))));
      });
    }
    function Ke(t, e, n) {
      return (
        void 0 === n && (n = !1),
        s.L(function () {
          var r = xt(t, e.conv1, "valid");
          return (
            (r = qe(r, e.prelu1_alpha)),
            (r = qe(
              (r = xt(
                (r = s.s(r, n ? [2, 2] : [3, 3], [2, 2], "same")),
                e.conv2,
                "valid"
              )),
              e.prelu2_alpha
            )),
            (r = qe(
              (r = xt(
                (r = n ? r : s.s(r, [3, 3], [2, 2], "valid")),
                e.conv3,
                "valid"
              )),
              e.prelu3_alpha
            ))
          );
        })
      );
    }
    function Xe(t, e, n, r, a) {
      a.stage1 = [];
      var i = e
          .map(function (e) {
            return s.L(function () {
              var n = { scale: e },
                a = (function (t, e) {
                  return s.L(function () {
                    var n = Ue(e, t.shape.slice(1)),
                      r = n.height,
                      a = n.width,
                      i = He(s.o.resizeBilinear(t, [r, a]));
                    return s.N(i, [0, 2, 1, 3]);
                  });
                })(t, e),
                i = Date.now(),
                o = (function (t, e) {
                  return s.L(function () {
                    var n = Ke(t, e, !0),
                      r = xt(n, e.conv4_1, "valid"),
                      a = s.m(s.r(r, 3), 3);
                    return {
                      prob: s.D(s.F(r, a), 3),
                      regions: xt(n, e.conv4_2, "valid"),
                    };
                  });
                })(a, r),
                u = o.prob,
                c = o.regions;
              return (
                (n.pnet = Date.now() - i),
                {
                  scoresTensor: s.O(s.O(u, 3)[1])[0],
                  regionsTensor: s.O(c)[0],
                  scale: e,
                  statsForScale: n,
                }
              );
            });
          })
          .map(function (t) {
            var e = t.scoresTensor,
              r = t.regionsTensor,
              i = t.scale,
              o = t.statsForScale,
              s = (function (t, e, n, r) {
                for (var a = [], i = t.arraySync(), o = 0; o < t.shape[0]; o++)
                  for (var s = 0; s < t.shape[1]; s++)
                    i[o][s] >= r && a.push(new w(s, o));
                return a.map(function (t) {
                  var r = new O(
                      Math.round((2 * t.y + 1) / n),
                      Math.round((2 * t.x + 1) / n),
                      Math.round((2 * t.y + 12) / n),
                      Math.round((2 * t.x + 12) / n)
                    ),
                    a = i[t.y][t.x],
                    o = e.arraySync();
                  return {
                    cell: r,
                    score: a,
                    region: new Ge(
                      o[t.y][t.x][0],
                      o[t.y][t.x][1],
                      o[t.y][t.x][2],
                      o[t.y][t.x][3]
                    ),
                  };
                });
              })(e, r, i, n);
            if ((e.dispose(), r.dispose(), !s.length))
              return a.stage1.push(o), [];
            var u = Date.now(),
              c = k(
                s.map(function (t) {
                  return t.cell;
                }),
                s.map(function (t) {
                  return t.score;
                }),
                0.5
              );
            return (
              (o.nms = Date.now() - u),
              (o.numBoxes = c.length),
              a.stage1.push(o),
              c.map(function (t) {
                return s[t];
              })
            );
          })
          .reduce(function (t, e) {
            return t.concat(e);
          }, []),
        o = [],
        u = [];
      if (i.length > 0) {
        var c = Date.now(),
          l = k(
            i.map(function (t) {
              return t.cell;
            }),
            i.map(function (t) {
              return t.score;
            }),
            0.7
          );
        (a.stage1_nms = Date.now() - c),
          (u = l.map(function (t) {
            return i[t].score;
          })),
          (o = l
            .map(function (t) {
              return i[t];
            })
            .map(function (t) {
              var e = t.cell,
                n = t.region;
              return new O(
                e.left + n.left * e.width,
                e.top + n.top * e.height,
                e.right + n.right * e.width,
                e.bottom + n.bottom * e.height
              )
                .toSquare()
                .round();
            }));
      }
      return { boxes: o, scores: u };
    }
    function Ye(t, e, n) {
      var r = n.width,
        a = n.height;
      return Object(c.b)(this, void 0, void 0, function () {
        var n,
          i,
          o,
          u = this;
        return Object(c.d)(this, function (l) {
          switch (l.label) {
            case 0:
              return (
                (n = Y(t)),
                [
                  4,
                  Promise.all(
                    e.map(function (e) {
                      return Object(c.b)(u, void 0, void 0, function () {
                        var r, a, i, o, s, u, l, h;
                        return Object(c.d)(this, function (c) {
                          return (
                            (r = e.padAtBorders(t.height, t.width)),
                            (a = r.y),
                            (i = r.ey),
                            (o = r.x),
                            (s = r.ex),
                            (u = o - 1),
                            (l = a - 1),
                            (h = n.getImageData(u, l, s - u, i - l)),
                            [2, K.isNodejs() ? it(h) : createImageBitmap(h)]
                          );
                        });
                      });
                    })
                  ),
                ]
              );
            case 1:
              return (
                (i = l.sent()),
                (o = []),
                i.forEach(function (t) {
                  var e = Y(at({ width: r, height: a }));
                  e.drawImage(t, 0, 0, r, a);
                  for (
                    var n = e.getImageData(0, 0, r, a).data, i = [], s = 0;
                    s < n.length;
                    s += 4
                  )
                    i.push(n[s + 2]), i.push(n[s + 1]), i.push(n[s]);
                  o.push(i);
                }),
                [
                  2,
                  o.map(function (t) {
                    return s.L(function () {
                      return He(
                        s.N(s.K(t, [1, r, a, 3]), [0, 2, 1, 3]).toFloat()
                      );
                    });
                  }),
                ]
              );
          }
        });
      });
    }
    function Je(t, e, n, r, a) {
      return Object(c.b)(this, void 0, void 0, function () {
        var i, o, u, l, h, d, p, f, m, g, b, v, y, x;
        return Object(c.d)(this, function (c) {
          switch (c.label) {
            case 0:
              return (i = Date.now()), [4, Ye(t, e, { width: 24, height: 24 })];
            case 1:
              return (
                (o = c.sent()),
                (a.stage2_extractImagePatches = Date.now() - i),
                (i = Date.now()),
                (u = o.map(function (t) {
                  var e = (function (t, e) {
                    return s.L(function () {
                      var n = Ke(t, e),
                        r = qe(
                          Dt(
                            s.x(n, [n.shape[0], e.fc1.weights.shape[0]]),
                            e.fc1
                          ),
                          e.prelu4_alpha
                        ),
                        a = Dt(r, e.fc2_1),
                        i = s.m(s.r(a, 1), 1),
                        o = s.D(s.F(a, i), 1),
                        u = Dt(r, e.fc2_2);
                      return { scores: s.O(o, 1)[1], regions: u };
                    });
                  })(t, r);
                  return t.dispose(), e;
                })),
                (a.stage2_rnet = Date.now() - i),
                (l =
                  u.length > 1
                    ? s.h(
                        u.map(function (t) {
                          return t.scores;
                        })
                      )
                    : u[0].scores),
                (p = (d = Array).from),
                [4, l.data()]
              );
            case 2:
              return (
                (h = p.apply(d, [c.sent()])),
                l.dispose(),
                (f = h
                  .map(function (t, e) {
                    return { score: t, idx: e };
                  })
                  .filter(function (t) {
                    return t.score > n;
                  })
                  .map(function (t) {
                    return t.idx;
                  })),
                (m = f.map(function (t) {
                  return e[t];
                })),
                (g = f.map(function (t) {
                  return h[t];
                })),
                (b = []),
                (v = []),
                m.length > 0 &&
                  ((i = Date.now()),
                  (y = k(m, g, 0.7)),
                  (a.stage2_nms = Date.now() - i),
                  (x = y.map(function (t) {
                    var e = u[f[t]].regions.arraySync();
                    return new Ge(e[0][0], e[0][1], e[0][2], e[0][3]);
                  })),
                  (v = y.map(function (t) {
                    return g[t];
                  })),
                  (b = y.map(function (t, e) {
                    return m[t].calibrate(x[e]);
                  }))),
                u.forEach(function (t) {
                  t.regions.dispose(), t.scores.dispose();
                }),
                [2, { boxes: b, scores: v }]
              );
          }
        });
      });
    }
    function Qe(t, e, n, r, a) {
      return Object(c.b)(this, void 0, void 0, function () {
        var i, o, u, l, h, d, p, f, m, g, b, v, y, x, C;
        return Object(c.d)(this, function (c) {
          switch (c.label) {
            case 0:
              return (i = Date.now()), [4, Ye(t, e, { width: 48, height: 48 })];
            case 1:
              return (
                (o = c.sent()),
                (a.stage3_extractImagePatches = Date.now() - i),
                (i = Date.now()),
                (u = o.map(function (t) {
                  var e = (function (t, e) {
                    return s.L(function () {
                      var n = Ke(t, e);
                      n = qe(
                        (n = xt(
                          (n = s.s(n, [2, 2], [2, 2], "same")),
                          e.conv4,
                          "valid"
                        )),
                        e.prelu4_alpha
                      );
                      var r = qe(
                          Dt(
                            s.x(n, [n.shape[0], e.fc1.weights.shape[0]]),
                            e.fc1
                          ),
                          e.prelu5_alpha
                        ),
                        a = Dt(r, e.fc2_1),
                        i = s.m(s.r(a, 1), 1),
                        o = s.D(s.F(a, i), 1),
                        u = Dt(r, e.fc2_2),
                        c = Dt(r, e.fc2_3);
                      return { scores: s.O(o, 1)[1], regions: u, points: c };
                    });
                  })(t, r);
                  return t.dispose(), e;
                })),
                (a.stage3_onet = Date.now() - i),
                (l =
                  u.length > 1
                    ? s.h(
                        u.map(function (t) {
                          return t.scores;
                        })
                      )
                    : u[0].scores),
                (p = (d = Array).from),
                [4, l.data()]
              );
            case 2:
              return (
                (h = p.apply(d, [c.sent()])),
                l.dispose(),
                (f = h
                  .map(function (t, e) {
                    return { score: t, idx: e };
                  })
                  .filter(function (t) {
                    return t.score > n;
                  })
                  .map(function (t) {
                    return t.idx;
                  })),
                (m = f.map(function (t) {
                  var e = u[t].regions.arraySync();
                  return new Ge(e[0][0], e[0][1], e[0][2], e[0][3]);
                })),
                (g = f.map(function (t, n) {
                  return e[t].calibrate(m[n]);
                })),
                (b = f.map(function (t) {
                  return h[t];
                })),
                (v = []),
                (y = []),
                (x = []),
                g.length > 0 &&
                  ((i = Date.now()),
                  (C = k(g, b, 0.7, !1)),
                  (a.stage3_nms = Date.now() - i),
                  (v = C.map(function (t) {
                    return g[t];
                  })),
                  (y = C.map(function (t) {
                    return b[t];
                  })),
                  (x = C.map(function (t, e) {
                    return Array(5)
                      .fill(0)
                      .map(function (n, r) {
                        var a = u[t].points.arraySync();
                        return new w(
                          a[0][r] * (v[e].width + 1) + v[e].left,
                          a[0][r + 5] * (v[e].height + 1) + v[e].top
                        );
                      });
                  }))),
                u.forEach(function (t) {
                  t.regions.dispose(), t.scores.dispose(), t.points.dispose();
                }),
                [2, { boxes: v, scores: y, points: x }]
              );
          }
        });
      });
    }
    var Ze = (function (t) {
        function e() {
          return t.call(this, "Mtcnn") || this;
        }
        return (
          Object(c.c)(e, t),
          (e.prototype.load = function (e) {
            return Object(c.b)(this, void 0, void 0, function () {
              return Object(c.d)(this, function (n) {
                return (
                  console.warn("mtcnn is deprecated and will be removed soon"),
                  [2, t.prototype.load.call(this, e)]
                );
              });
            });
          }),
          (e.prototype.loadFromDisk = function (e) {
            return Object(c.b)(this, void 0, void 0, function () {
              return Object(c.d)(this, function (n) {
                return (
                  console.warn("mtcnn is deprecated and will be removed soon"),
                  [2, t.prototype.loadFromDisk.call(this, e)]
                );
              });
            });
          }),
          (e.prototype.forwardInput = function (t, e) {
            return (
              void 0 === e && (e = {}),
              Object(c.b)(this, void 0, void 0, function () {
                var n,
                  r,
                  a,
                  i,
                  o,
                  u,
                  l,
                  h,
                  d,
                  p,
                  f,
                  m,
                  g,
                  b,
                  v,
                  y,
                  x,
                  C,
                  O,
                  E,
                  I;
                return Object(c.d)(this, function (c) {
                  switch (c.label) {
                    case 0:
                      if (!(n = this.params))
                        throw new Error("Mtcnn - load model before inference");
                      if (!(r = t.canvases[0]))
                        throw new Error(
                          "Mtcnn - inputCanvas is not defined, note that passing tensors into Mtcnn.forwardInput is not supported yet."
                        );
                      return (
                        (a = {}),
                        (i = Date.now()),
                        (o = s.L(function () {
                          return (
                            (t = s.m(s.f.fromPixels(r)).toFloat()),
                            s.L(function () {
                              return s.E(s.O(t, 3).reverse(), 3);
                            })
                          );
                          var t;
                        })),
                        (u = function (t) {
                          return o.dispose(), (a.total = Date.now() - i), t;
                        }),
                        (l = o.shape.slice(1)),
                        (h = l[0]),
                        (d = l[1]),
                        (p = new me(e)),
                        (f = p.minFaceSize),
                        (m = p.scaleFactor),
                        (g = p.maxNumScales),
                        (b = p.scoreThresholds),
                        (v = p.scaleSteps),
                        (y = (
                          v ||
                          (function (t, e, n) {
                            for (
                              var r = n[0],
                                a = n[1],
                                i = 12 / t,
                                o = [],
                                s = Math.min(r, a) * i,
                                u = 0;
                              s >= 12;

                            )
                              o.push(i * Math.pow(e, u)), (s *= e), (u += 1);
                            return o;
                          })(f, m, [h, d])
                        )
                          .filter(function (t) {
                            var e = Ue(t, [h, d]);
                            return Math.min(e.width, e.height) > 12;
                          })
                          .slice(0, g)),
                        (a.scales = y),
                        (a.pyramid = y.map(function (t) {
                          return Ue(t, [h, d]);
                        })),
                        (x = Date.now()),
                        [4, Xe(o, y, b[0], n.pnet, a)]
                      );
                    case 1:
                      return (
                        (C = c.sent()),
                        (a.total_stage1 = Date.now() - x),
                        C.boxes.length
                          ? ((a.stage2_numInputBoxes = C.boxes.length),
                            (x = Date.now()),
                            [4, Je(r, C.boxes, b[1], n.rnet, a)])
                          : [2, u({ results: [], stats: a })]
                      );
                    case 2:
                      return (
                        (O = c.sent()),
                        (a.total_stage2 = Date.now() - x),
                        O.boxes.length
                          ? ((a.stage3_numInputBoxes = O.boxes.length),
                            (x = Date.now()),
                            [4, Qe(r, O.boxes, b[2], n.onet, a)])
                          : [2, u({ results: [], stats: a })]
                      );
                    case 3:
                      return (
                        (E = c.sent()),
                        (a.total_stage3 = Date.now() - x),
                        (I = E.boxes.map(function (t, e) {
                          return Wt(
                            B(
                              {},
                              new S(
                                E.scores[e],
                                new A(
                                  t.left / d,
                                  t.top / h,
                                  t.width / d,
                                  t.height / h
                                ),
                                { height: h, width: d }
                              )
                            ),
                            new _(
                              E.points[e].map(function (e) {
                                return e
                                  .sub(new w(t.left, t.top))
                                  .div(new w(t.width, t.height));
                              }),
                              { width: t.width, height: t.height }
                            )
                          );
                        })),
                        [2, u({ results: I, stats: a })]
                      );
                  }
                });
              })
            );
          }),
          (e.prototype.forward = function (t, e) {
            return (
              void 0 === e && (e = {}),
              Object(c.b)(this, void 0, void 0, function () {
                var n;
                return Object(c.d)(this, function (r) {
                  switch (r.label) {
                    case 0:
                      return (n = this.forwardInput), [4, ct(t)];
                    case 1:
                      return [4, n.apply(this, [r.sent(), e])];
                    case 2:
                      return [2, r.sent().results];
                  }
                });
              })
            );
          }),
          (e.prototype.forwardWithStats = function (t, e) {
            return (
              void 0 === e && (e = {}),
              Object(c.b)(this, void 0, void 0, function () {
                var n;
                return Object(c.d)(this, function (r) {
                  switch (r.label) {
                    case 0:
                      return (n = this.forwardInput), [4, ct(t)];
                    case 1:
                      return [2, n.apply(this, [r.sent(), e])];
                  }
                });
              })
            );
          }),
          (e.prototype.getDefaultModelName = function () {
            return "mtcnn_model";
          }),
          (e.prototype.extractParamsFromWeigthMap = function (t) {
            return Ve(t);
          }),
          (e.prototype.extractParams = function (t) {
            return We(t);
          }),
          e
        );
      })(gt),
      tn = [
        new w(1.603231, 2.094468),
        new w(6.041143, 7.080126),
        new w(2.882459, 3.518061),
        new w(4.266906, 5.178857),
        new w(9.041765, 10.66308),
      ],
      en = [117.001, 114.697, 97.404],
      nn = (function (t) {
        function e() {
          var e = {
            withSeparableConvs: !0,
            iouThreshold: 0.4,
            classes: ["face"],
            anchors: tn,
            meanRgb: en,
            isFirstLayerConv2d: !0,
            filterSizes: [3, 16, 32, 64, 128, 256, 512],
          };
          return t.call(this, e) || this;
        }
        return (
          Object(c.c)(e, t),
          Object.defineProperty(e.prototype, "anchors", {
            get: function () {
              return this.config.anchors;
            },
            enumerable: !0,
            configurable: !0,
          }),
          (e.prototype.locateFaces = function (t, e) {
            return Object(c.b)(this, void 0, void 0, function () {
              return Object(c.d)(this, function (n) {
                switch (n.label) {
                  case 0:
                    return [4, this.detect(t, e)];
                  case 1:
                    return [
                      2,
                      n.sent().map(function (t) {
                        return new S(t.score, t.relativeBox, {
                          width: t.imageWidth,
                          height: t.imageHeight,
                        });
                      }),
                    ];
                }
              });
            });
          }),
          (e.prototype.getDefaultModelName = function () {
            return "tiny_face_detector_model";
          }),
          (e.prototype.extractParamsFromWeigthMap = function (e) {
            return t.prototype.extractParamsFromWeigthMap.call(this, e);
          }),
          e
        );
      })(je),
      rn = {
        ssdMobilenetv1: new Ee(),
        tinyFaceDetector: new nn(),
        tinyYolov2: new $e(),
        mtcnn: new Ze(),
        faceLandmark68Net: new te(),
        faceLandmark68TinyNet: new ne(),
        faceRecognitionNet: new he(),
        faceExpressionNet: new Bt(),
        ageGenderNet: new Qt(),
      },
      an = (function (t) {
        function e(e, n, r) {
          var a = t.call(this) || this;
          return (a.parentTask = e), (a.input = n), (a.extractedFaces = r), a;
        }
        return Object(c.c)(e, t), e;
      })(Pe),
      on = (function (t) {
        function e() {
          return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
          Object(c.c)(e, t),
          (e.prototype.run = function () {
            return Object(c.b)(this, void 0, void 0, function () {
              var t,
                e,
                n = this;
              return Object(c.d)(this, function (r) {
                switch (r.label) {
                  case 0:
                    return [4, this.parentTask];
                  case 1:
                    return [
                      4,
                      Le(
                        (t = r.sent()),
                        this.input,
                        function (t) {
                          return Object(c.b)(n, void 0, void 0, function () {
                            return Object(c.d)(this, function (e) {
                              switch (e.label) {
                                case 0:
                                  return [
                                    4,
                                    Promise.all(
                                      t.map(function (t) {
                                        return rn.faceExpressionNet.predictExpressions(
                                          t
                                        );
                                      })
                                    ),
                                  ];
                                case 1:
                                  return [2, e.sent()];
                              }
                            });
                          });
                        },
                        this.extractedFaces
                      ),
                    ];
                  case 2:
                    return (
                      (e = r.sent()),
                      [
                        2,
                        t.map(function (t, n) {
                          return Pt(t, e[n]);
                        }),
                      ]
                    );
                }
              });
            });
          }),
          (e.prototype.withAgeAndGender = function () {
            return new hn(this, this.input);
          }),
          e
        );
      })(an),
      sn = (function (t) {
        function e() {
          return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
          Object(c.c)(e, t),
          (e.prototype.run = function () {
            return Object(c.b)(this, void 0, void 0, function () {
              var t, e;
              return Object(c.d)(this, function (n) {
                switch (n.label) {
                  case 0:
                    return [4, this.parentTask];
                  case 1:
                    return (t = n.sent())
                      ? [
                          4,
                          ze(
                            t,
                            this.input,
                            function (t) {
                              return rn.faceExpressionNet.predictExpressions(t);
                            },
                            this.extractedFaces
                          ),
                        ]
                      : [2];
                  case 2:
                    return (e = n.sent()), [2, Pt(t, e)];
                }
              });
            });
          }),
          (e.prototype.withAgeAndGender = function () {
            return new dn(this, this.input);
          }),
          e
        );
      })(an),
      un = (function (t) {
        function e() {
          return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
          Object(c.c)(e, t),
          (e.prototype.withAgeAndGender = function () {
            return new pn(this, this.input);
          }),
          (e.prototype.withFaceDescriptors = function () {
            return new gn(this, this.input);
          }),
          e
        );
      })(on),
      cn = (function (t) {
        function e() {
          return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
          Object(c.c)(e, t),
          (e.prototype.withAgeAndGender = function () {
            return new fn(this, this.input);
          }),
          (e.prototype.withFaceDescriptor = function () {
            return new bn(this, this.input);
          }),
          e
        );
      })(sn),
      ln = (function (t) {
        function e(e, n, r) {
          var a = t.call(this) || this;
          return (a.parentTask = e), (a.input = n), (a.extractedFaces = r), a;
        }
        return Object(c.c)(e, t), e;
      })(Pe),
      hn = (function (t) {
        function e() {
          return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
          Object(c.c)(e, t),
          (e.prototype.run = function () {
            return Object(c.b)(this, void 0, void 0, function () {
              var t,
                e,
                n = this;
              return Object(c.d)(this, function (r) {
                switch (r.label) {
                  case 0:
                    return [4, this.parentTask];
                  case 1:
                    return [
                      4,
                      Le(
                        (t = r.sent()),
                        this.input,
                        function (t) {
                          return Object(c.b)(n, void 0, void 0, function () {
                            return Object(c.d)(this, function (e) {
                              switch (e.label) {
                                case 0:
                                  return [
                                    4,
                                    Promise.all(
                                      t.map(function (t) {
                                        return rn.ageGenderNet.predictAgeAndGender(
                                          t
                                        );
                                      })
                                    ),
                                  ];
                                case 1:
                                  return [2, e.sent()];
                              }
                            });
                          });
                        },
                        this.extractedFaces
                      ),
                    ];
                  case 2:
                    return (
                      (e = r.sent()),
                      [
                        2,
                        t.map(function (t, n) {
                          var r = e[n],
                            a = r.age;
                          return pe(fe(t, r.gender, r.genderProbability), a);
                        }),
                      ]
                    );
                }
              });
            });
          }),
          (e.prototype.withFaceExpressions = function () {
            return new on(this, this.input);
          }),
          e
        );
      })(ln),
      dn = (function (t) {
        function e() {
          return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
          Object(c.c)(e, t),
          (e.prototype.run = function () {
            return Object(c.b)(this, void 0, void 0, function () {
              var t, e, n, r, a;
              return Object(c.d)(this, function (i) {
                switch (i.label) {
                  case 0:
                    return [4, this.parentTask];
                  case 1:
                    return (t = i.sent())
                      ? [
                          4,
                          ze(
                            t,
                            this.input,
                            function (t) {
                              return rn.ageGenderNet.predictAgeAndGender(t);
                            },
                            this.extractedFaces
                          ),
                        ]
                      : [2];
                  case 2:
                    return (
                      (e = i.sent()),
                      (n = e.age),
                      (r = e.gender),
                      (a = e.genderProbability),
                      [2, pe(fe(t, r, a), n)]
                    );
                }
              });
            });
          }),
          (e.prototype.withFaceExpressions = function () {
            return new sn(this, this.input);
          }),
          e
        );
      })(ln),
      pn = (function (t) {
        function e() {
          return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
          Object(c.c)(e, t),
          (e.prototype.withFaceExpressions = function () {
            return new un(this, this.input);
          }),
          (e.prototype.withFaceDescriptors = function () {
            return new gn(this, this.input);
          }),
          e
        );
      })(hn),
      fn = (function (t) {
        function e() {
          return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
          Object(c.c)(e, t),
          (e.prototype.withFaceExpressions = function () {
            return new cn(this, this.input);
          }),
          (e.prototype.withFaceDescriptor = function () {
            return new bn(this, this.input);
          }),
          e
        );
      })(dn),
      mn = (function (t) {
        function e(e, n) {
          var r = t.call(this) || this;
          return (r.parentTask = e), (r.input = n), r;
        }
        return Object(c.c)(e, t), e;
      })(Pe),
      gn = (function (t) {
        function e() {
          return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
          Object(c.c)(e, t),
          (e.prototype.run = function () {
            return Object(c.b)(this, void 0, void 0, function () {
              var t;
              return Object(c.d)(this, function (e) {
                switch (e.label) {
                  case 0:
                    return [4, this.parentTask];
                  case 1:
                    return [
                      4,
                      Le(
                        (t = e.sent()),
                        this.input,
                        function (t) {
                          return Promise.all(
                            t.map(function (t) {
                              return rn.faceRecognitionNet.computeFaceDescriptor(
                                t
                              );
                            })
                          );
                        },
                        null,
                        function (t) {
                          return t.landmarks.align(null, {
                            useDlibAlignment: !0,
                          });
                        }
                      ),
                    ];
                  case 2:
                    return [
                      2,
                      e.sent().map(function (e, n) {
                        return de(t[n], e);
                      }),
                    ];
                }
              });
            });
          }),
          (e.prototype.withFaceExpressions = function () {
            return new un(this, this.input);
          }),
          (e.prototype.withAgeAndGender = function () {
            return new pn(this, this.input);
          }),
          e
        );
      })(mn),
      bn = (function (t) {
        function e() {
          return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
          Object(c.c)(e, t),
          (e.prototype.run = function () {
            return Object(c.b)(this, void 0, void 0, function () {
              var t, e;
              return Object(c.d)(this, function (n) {
                switch (n.label) {
                  case 0:
                    return [4, this.parentTask];
                  case 1:
                    return (t = n.sent())
                      ? [
                          4,
                          ze(
                            t,
                            this.input,
                            function (t) {
                              return rn.faceRecognitionNet.computeFaceDescriptor(
                                t
                              );
                            },
                            null,
                            function (t) {
                              return t.landmarks.align(null, {
                                useDlibAlignment: !0,
                              });
                            }
                          ),
                        ]
                      : [2];
                  case 2:
                    return (e = n.sent()), [2, de(t, e)];
                }
              });
            });
          }),
          (e.prototype.withFaceExpressions = function () {
            return new cn(this, this.input);
          }),
          (e.prototype.withAgeAndGender = function () {
            return new fn(this, this.input);
          }),
          e
        );
      })(mn),
      vn = (function (t) {
        function e(e, n, r) {
          var a = t.call(this) || this;
          return (
            (a.parentTask = e), (a.input = n), (a.useTinyLandmarkNet = r), a
          );
        }
        return (
          Object(c.c)(e, t),
          Object.defineProperty(e.prototype, "landmarkNet", {
            get: function () {
              return this.useTinyLandmarkNet
                ? rn.faceLandmark68TinyNet
                : rn.faceLandmark68Net;
            },
            enumerable: !0,
            configurable: !0,
          }),
          e
        );
      })(Pe),
      yn = (function (t) {
        function e() {
          return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
          Object(c.c)(e, t),
          (e.prototype.run = function () {
            return Object(c.b)(this, void 0, void 0, function () {
              var t,
                e,
                n,
                r,
                a,
                i = this;
              return Object(c.d)(this, function (o) {
                switch (o.label) {
                  case 0:
                    return [4, this.parentTask];
                  case 1:
                    return (
                      (t = o.sent()),
                      (e = t.map(function (t) {
                        return t.detection;
                      })),
                      this.input instanceof s.a
                        ? [4, ht(this.input, e)]
                        : [3, 3]
                    );
                  case 2:
                    return (r = o.sent()), [3, 5];
                  case 3:
                    return [4, lt(this.input, e)];
                  case 4:
                    (r = o.sent()), (o.label = 5);
                  case 5:
                    return (
                      (n = r),
                      [
                        4,
                        Promise.all(
                          n.map(function (t) {
                            return i.landmarkNet.detectLandmarks(t);
                          })
                        ),
                      ]
                    );
                  case 6:
                    return (
                      (a = o.sent()),
                      n.forEach(function (t) {
                        return t instanceof s.a && t.dispose();
                      }),
                      [
                        2,
                        t.map(function (t, e) {
                          return Wt(t, a[e]);
                        }),
                      ]
                    );
                }
              });
            });
          }),
          (e.prototype.withFaceExpressions = function () {
            return new un(this, this.input);
          }),
          (e.prototype.withAgeAndGender = function () {
            return new pn(this, this.input);
          }),
          (e.prototype.withFaceDescriptors = function () {
            return new gn(this, this.input);
          }),
          e
        );
      })(vn),
      xn = (function (t) {
        function e() {
          return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
          Object(c.c)(e, t),
          (e.prototype.run = function () {
            return Object(c.b)(this, void 0, void 0, function () {
              var t, e, n, r, a;
              return Object(c.d)(this, function (i) {
                switch (i.label) {
                  case 0:
                    return [4, this.parentTask];
                  case 1:
                    return (t = i.sent())
                      ? ((e = t.detection),
                        this.input instanceof s.a
                          ? [4, ht(this.input, [e])]
                          : [3, 3])
                      : [2];
                  case 2:
                    return (r = i.sent()), [3, 5];
                  case 3:
                    return [4, lt(this.input, [e])];
                  case 4:
                    (r = i.sent()), (i.label = 5);
                  case 5:
                    return (n = r), [4, this.landmarkNet.detectLandmarks(n[0])];
                  case 6:
                    return (
                      (a = i.sent()),
                      n.forEach(function (t) {
                        return t instanceof s.a && t.dispose();
                      }),
                      [2, Wt(t, a)]
                    );
                }
              });
            });
          }),
          (e.prototype.withFaceExpressions = function () {
            return new cn(this, this.input);
          }),
          (e.prototype.withAgeAndGender = function () {
            return new fn(this, this.input);
          }),
          (e.prototype.withFaceDescriptor = function () {
            return new bn(this, this.input);
          }),
          e
        );
      })(vn),
      wn = (function (t) {
        function e(e, n) {
          void 0 === n && (n = new Oe());
          var r = t.call(this) || this;
          return (r.input = e), (r.options = n), r;
        }
        return Object(c.c)(e, t), e;
      })(Pe),
      Cn = (function (t) {
        function e() {
          return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
          Object(c.c)(e, t),
          (e.prototype.run = function () {
            return Object(c.b)(this, void 0, void 0, function () {
              var t, e, n, r;
              return Object(c.d)(this, function (a) {
                switch (a.label) {
                  case 0:
                    return (
                      (e = (t = this).input),
                      (n = t.options) instanceof me
                        ? [4, rn.mtcnn.forward(e, n)]
                        : [3, 2]
                    );
                  case 1:
                    return [
                      2,
                      a.sent().map(function (t) {
                        return t.detection;
                      }),
                    ];
                  case 2:
                    if (
                      !(r =
                        n instanceof Be
                          ? function (t) {
                              return rn.tinyFaceDetector.locateFaces(t, n);
                            }
                          : n instanceof Oe
                          ? function (t) {
                              return rn.ssdMobilenetv1.locateFaces(t, n);
                            }
                          : n instanceof Me
                          ? function (t) {
                              return rn.tinyYolov2.locateFaces(t, n);
                            }
                          : null)
                    )
                      throw new Error(
                        "detectFaces - expected options to be instance of TinyFaceDetectorOptions | SsdMobilenetv1Options | MtcnnOptions | TinyYolov2Options"
                      );
                    return [2, r(e)];
                }
              });
            });
          }),
          (e.prototype.runAndExtendWithFaceDetections = function () {
            var t = this;
            return new Promise(function (e) {
              return Object(c.b)(t, void 0, void 0, function () {
                var t;
                return Object(c.d)(this, function (n) {
                  switch (n.label) {
                    case 0:
                      return [4, this.run()];
                    case 1:
                      return (
                        (t = n.sent()),
                        [
                          2,
                          e(
                            t.map(function (t) {
                              return B({}, t);
                            })
                          ),
                        ]
                      );
                  }
                });
              });
            });
          }),
          (e.prototype.withFaceLandmarks = function (t) {
            return (
              void 0 === t && (t = !1),
              new yn(this.runAndExtendWithFaceDetections(), this.input, t)
            );
          }),
          (e.prototype.withFaceExpressions = function () {
            return new on(this.runAndExtendWithFaceDetections(), this.input);
          }),
          (e.prototype.withAgeAndGender = function () {
            return new hn(this.runAndExtendWithFaceDetections(), this.input);
          }),
          e
        );
      })(wn),
      On = (function (t) {
        function e() {
          return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
          Object(c.c)(e, t),
          (e.prototype.run = function () {
            return Object(c.b)(this, void 0, void 0, function () {
              var t, e;
              return Object(c.d)(this, function (n) {
                switch (n.label) {
                  case 0:
                    return [4, new Cn(this.input, this.options)];
                  case 1:
                    return (
                      (t = n.sent()),
                      (e = t[0]),
                      t.forEach(function (t) {
                        t.score > e.score && (e = t);
                      }),
                      [2, e]
                    );
                }
              });
            });
          }),
          (e.prototype.runAndExtendWithFaceDetection = function () {
            var t = this;
            return new Promise(function (e) {
              return Object(c.b)(t, void 0, void 0, function () {
                var t;
                return Object(c.d)(this, function (n) {
                  switch (n.label) {
                    case 0:
                      return [4, this.run()];
                    case 1:
                      return (t = n.sent()), [2, e(t ? B({}, t) : void 0)];
                  }
                });
              });
            });
          }),
          (e.prototype.withFaceLandmarks = function (t) {
            return (
              void 0 === t && (t = !1),
              new xn(this.runAndExtendWithFaceDetection(), this.input, t)
            );
          }),
          (e.prototype.withFaceExpressions = function () {
            return new sn(this.runAndExtendWithFaceDetection(), this.input);
          }),
          (e.prototype.withAgeAndGender = function () {
            return new dn(this.runAndExtendWithFaceDetection(), this.input);
          }),
          e
        );
      })(wn);
    !(function () {
      function t(t, e) {
        void 0 === e && (e = 0.6), (this._distanceThreshold = e);
        var n = Array.isArray(t) ? t : [t];
        if (!n.length)
          throw new Error(
            "FaceRecognizer.constructor - expected atleast one input"
          );
        var r = 1,
          a = function () {
            return "person " + r++;
          };
        this._labeledDescriptors = n.map(function (t) {
          if (t instanceof j) return t;
          if (t instanceof Float32Array) return new j(a(), [t]);
          if (t.descriptor && t.descriptor instanceof Float32Array)
            return new j(a(), [t.descriptor]);
          throw new Error(
            "FaceRecognizer.constructor - expected inputs to be of type LabeledFaceDescriptors | WithFaceDescriptor<any> | Float32Array | Array<LabeledFaceDescriptors | WithFaceDescriptor<any> | Float32Array>"
          );
        });
      }
      Object.defineProperty(t.prototype, "labeledDescriptors", {
        get: function () {
          return this._labeledDescriptors;
        },
        enumerable: !0,
        configurable: !0,
      }),
        Object.defineProperty(t.prototype, "distanceThreshold", {
          get: function () {
            return this._distanceThreshold;
          },
          enumerable: !0,
          configurable: !0,
        }),
        (t.prototype.computeMeanDistance = function (t, e) {
          return (
            e
              .map(function (e) {
                return (function (t, e) {
                  if (t.length !== e.length)
                    throw new Error(
                      "euclideanDistance: arr1.length !== arr2.length"
                    );
                  var n = Array.from(t),
                    r = Array.from(e);
                  return Math.sqrt(
                    n
                      .map(function (t, e) {
                        return t - r[e];
                      })
                      .reduce(function (t, e) {
                        return t + Math.pow(e, 2);
                      }, 0)
                  );
                })(e, t);
              })
              .reduce(function (t, e) {
                return t + e;
              }, 0) / (e.length || 1)
          );
        }),
        (t.prototype.matchDescriptor = function (t) {
          var e = this;
          return this.labeledDescriptors
            .map(function (n) {
              var r = n.descriptors,
                a = n.label;
              return new F(a, e.computeMeanDistance(t, r));
            })
            .reduce(function (t, e) {
              return t.distance < e.distance ? t : e;
            });
        }),
        (t.prototype.findBestMatch = function (t) {
          var e = this.matchDescriptor(t);
          return e.distance < this.distanceThreshold
            ? e
            : new F("unknown", e.distance);
        }),
        (t.prototype.toJSON = function () {
          return {
            distanceThreshold: this.distanceThreshold,
            labeledDescriptors: this.labeledDescriptors.map(function (t) {
              return t.toJSON();
            }),
          };
        }),
        (t.fromJSON = function (e) {
          return new t(
            e.labeledDescriptors.map(function (t) {
              return j.fromJSON(t);
            }),
            e.distanceThreshold
          );
        });
    })();
    var En = n(0);
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ let Sn;
    function In() {
      return null == Sn && (Sn = Object(En.E)().epsilon()), Sn;
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */
    class kn extends Error {
      constructor(t) {
        super(t), Object.setPrototypeOf(this, kn.prototype);
      }
    }
    class Nn extends Error {
      constructor(t) {
        super(t), Object.setPrototypeOf(this, Nn.prototype);
      }
    }
    class Rn extends Error {
      constructor(t) {
        super(t), Object.setPrototypeOf(this, Rn.prototype);
      }
    }
    class An extends Error {
      constructor(t) {
        super(t), Object.setPrototypeOf(this, An.prototype);
      }
    }
    class Tn extends Error {
      constructor(t) {
        super(t), Object.setPrototypeOf(this, Tn.prototype);
      }
    }
    Error;
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ function _n(t, e) {
      if (Array.isArray(t)) {
        let n = [];
        for (let r = 0; r < e; r++) n = n.concat(t);
        return n;
      }
      {
        const n = new Array(e);
        return n.fill(t), n;
      }
    }
    function Dn(t, e) {
      if (!t) throw new Tn(e);
    }
    function Fn(t, e) {
      let n = 0;
      for (const r of t) r === e && n++;
      return n;
    }
    function Mn(t) {
      return 1 === t.length ? t[0] : t;
    }
    function jn(t) {
      return Array.isArray(t) ? t : [t];
    }
    function $n(t) {
      const e = t
        .replace(/(.)([A-Z][a-z0-9]+)/g, "$1_$2")
        .replace(/([a-z])([A-Z])/g, "$1_$2")
        .toLowerCase();
      return "_" !== e[0] ? e : "private" + e;
    }
    function Bn(t) {
      return t.length <= 1 || -1 === t.indexOf("_")
        ? t
        : t.replace(/[_]+(\w|$)/g, (t, e) => e.toUpperCase());
    }
    let Pn = {};
    function Ln(t) {
      if (null == t) return null;
      const e = {};
      return (e.className = t.getClassName()), (e.config = t.getConfig()), e;
    }
    function zn(t, e = {}, n = {}, r = "object", a = !1) {
      if ("string" == typeof t) {
        const a = t;
        let i;
        if (a in n) i = n[a];
        else if (a in Pn) i = Pn[a];
        else if (((i = e[a]), null == i))
          throw new Rn(
            `Unknown ${r}: ${t}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`
          );
        return i;
      }
      {
        const i = t;
        if (null == i.className || null == i.config)
          throw new Rn(
            r +
              ": Improper config format: " +
              JSON.stringify(i) +
              ".\n'className' and 'config' must set."
          );
        const o = i.className;
        let s, u;
        if (
          (o in n
            ? ([s, u] = n[o])
            : o in Pn
            ? ([s, u] = Pn.className)
            : o in e && ([s, u] = e[o]),
          null == s)
        )
          throw new Rn(
            `Unknown ${r}: ${o}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`
          );
        if (null != u) {
          const t = {};
          for (const e of Object.keys(Pn)) t[e] = Pn[e];
          for (const e of Object.keys(n)) t[e] = n[e];
          i.config.customObjects = t;
          const e = Object.assign({}, Pn);
          for (const t of Object.keys(n)) Pn[t] = n[t];
          !(function t(e) {
            if (null != e && "object" == typeof e)
              if (Array.isArray(e)) e.forEach((e) => t(e));
              else {
                const n = Object.keys(e);
                for (const r of n) {
                  const n = e[r];
                  null != n &&
                    "object" == typeof n &&
                    (Array.isArray(n) ||
                    "ndarray" !== n.type ||
                    "number" != typeof n.value
                      ? t(n)
                      : (e[r] = n.value));
                }
              }
          })(i.config);
          const r = u(s, i.config, n, a);
          return (Pn = Object.assign({}, e)), r;
        }
        {
          const t = Object.assign({}, Pn);
          for (const t of Object.keys(n)) Pn[t] = n[t];
          const e = new s(i.config);
          return (Pn = Object.assign({}, t)), e;
        }
      }
    }
    function Wn(t, e) {
      return (
        -1 *
        (function (t, e) {
          return t < e ? -1 : t > e ? 1 : 0;
        })(t, e)
      );
    }
    function Vn(t) {
      if (null == t) return t;
      const e = [];
      for (const n of t) -1 === e.indexOf(n) && e.push(n);
      return e;
    }
    function Un(t) {
      if (null == t) throw new Rn("Invalid value in obj: " + JSON.stringify(t));
      for (const e in t) if (t.hasOwnProperty(e)) return !1;
      return !0;
    }
    function Gn(t, e, n) {
      if (null != n && t.indexOf(n) < 0)
        throw new Rn(
          `${n} is not a valid ${e}.  Valid values are ${t} or null/undefined.`
        );
    }
    function Hn(t, e, n = 0, r = 1 / 0) {
      return (
        Dn(n >= 0),
        Dn(r >= n),
        Array.isArray(t) &&
          t.length >= n &&
          t.length <= r &&
          t.every((t) => typeof t === e)
      );
    }
    function qn(t, e) {
      Array.isArray(t)
        ? (En.Cd.assert(
            t.length > 0,
            () => e + " is unexpectedly an empty array."
          ),
          t.forEach((t, n) => qn(t, `element ${n + 1} of ${e}`)))
        : En.Cd.assert(
            Number.isInteger(t) && t > 0,
            () =>
              `Expected ${e} to be a positive integer, but got ` +
              (function t(e) {
                return null === e
                  ? "null"
                  : Array.isArray(e)
                  ? "[" + e.map((e) => t(e)).join(",") + "]"
                  : "string" == typeof e
                  ? `"${e}"`
                  : "" + e;
              })(t) +
              "."
          );
    }
    function Kn(t) {
      return "relu" === t
        ? "relu"
        : "linear" === t
        ? "linear"
        : "elu" === t
        ? "elu"
        : null;
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ function Xn(t, e) {
      return Object(En.ud)(() => En.ed(En.ld(En.jc(t, t), e, !0)));
    }
    class Yn extends En.Mc.Serializable {
      getConfig() {
        return {};
      }
    }
    class Jn extends Yn {
      constructor(t) {
        super(),
          (this.defaultMaxValue = 2),
          (this.defaultAxis = 0),
          (this.maxValue =
            null != t.maxValue ? t.maxValue : this.defaultMaxValue),
          (this.axis = null != t.axis ? t.axis : this.defaultAxis);
      }
      apply(t) {
        return Object(En.ud)(() => {
          const e = Xn(t, this.axis),
            n = En.Q(e, 0, this.maxValue);
          return En.jc(t, En.ib(n, En.r(In(), e)));
        });
      }
      getConfig() {
        return { maxValue: this.maxValue, axis: this.axis };
      }
    }
    (Jn.className = "MaxNorm"), En.Mc.registerClass(Jn);
    class Qn extends Yn {
      constructor(t) {
        super(),
          (this.defaultAxis = 0),
          (this.axis = null != t.axis ? t.axis : this.defaultAxis);
      }
      apply(t) {
        return Object(En.ud)(() => En.ib(t, En.r(In(), Xn(t, this.axis))));
      }
      getConfig() {
        return { axis: this.axis };
      }
    }
    (Qn.className = "UnitNorm"), En.Mc.registerClass(Qn);
    class Zn extends Yn {
      apply(t) {
        return En.Cc(t);
      }
    }
    (Zn.className = "NonNeg"), En.Mc.registerClass(Zn);
    class tr extends Yn {
      constructor(t) {
        super(),
          (this.defaultMinValue = 0),
          (this.defaultMaxValue = 1),
          (this.defaultRate = 1),
          (this.defaultAxis = 0),
          (this.minValue =
            null != t.minValue ? t.minValue : this.defaultMinValue),
          (this.maxValue =
            null != t.maxValue ? t.maxValue : this.defaultMaxValue),
          (this.rate = null != t.rate ? t.rate : this.defaultRate),
          (this.axis = null != t.axis ? t.axis : this.defaultAxis);
      }
      apply(t) {
        return Object(En.ud)(() => {
          const e = Xn(t, this.axis),
            n = En.r(
              En.jc(this.rate, En.Q(e, this.minValue, this.maxValue)),
              En.jc(1 - this.rate, e)
            );
          return En.jc(t, En.ib(n, En.r(In(), e)));
        });
      }
      getConfig() {
        return {
          minValue: this.minValue,
          maxValue: this.maxValue,
          rate: this.rate,
          axis: this.axis,
        };
      }
    }
    (tr.className = "MinMaxNorm"), En.Mc.registerClass(tr);
    const er = {
      maxNorm: "MaxNorm",
      minMaxNorm: "MinMaxNorm",
      nonNeg: "NonNeg",
      unitNorm: "UnitNorm",
    };
    function nr(t) {
      return Ln(t);
    }
    function rr(t, e = {}) {
      return zn(
        t,
        En.Mc.SerializationMap.getMap().classNameMap,
        e,
        "constraint"
      );
    }
    function ar(t) {
      if (null == t) return null;
      if ("string" == typeof t) {
        return rr({ className: t in er ? er[t] : t, config: {} });
      }
      return t instanceof Yn ? t : rr(t);
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */
    const ir = ["channelsFirst", "channelsLast"],
      or = ["valid", "same", "causal"],
      sr = ["max", "avg"],
      ur = ["sum", "mul", "concat", "ave"],
      cr = new Map();
    function lr(t) {
      Gn(ir, "DataFormat", t);
    }
    function hr(t) {
      Gn(or, "PaddingMode", t);
    }
    function dr(t) {
      Gn(sr, "PoolMode", t);
    }
    const pr = [];
    function fr(t, e) {
      pr.push(t);
      try {
        const t = e();
        return pr.pop(), t;
      } catch (t) {
        throw (pr.pop(), t);
      }
    }
    function mr(t) {
      if (!vr(t)) throw new Error("Not a valid tensor name: '" + t + "'");
      return (0 === pr.length ? "" : pr.join("/") + "/") + t;
    }
    function gr(t) {
      if (!vr(t)) throw new Error("Not a valid tensor name: '" + t + "'");
      cr.has(t) || cr.set(t, 0);
      const e = cr.get(t);
      if ((cr.set(t, cr.get(t) + 1), e > 0)) {
        const n = `${t}_${e}`;
        return cr.set(n, 1), n;
      }
      return t;
    }
    const br = new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);
    function vr(t) {
      return !!t.match(br);
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ function yr(t, e, n) {
      null == e && (e = 0), null == n && (n = t.length);
      let r = 1;
      for (let a = e; a < n; ++a) r *= t[a];
      return r;
    }
    function xr(t) {
      return (t = Array.isArray(t) ? new Float32Array(t) : t), Object(En.qd)(t);
    }
    function wr(t) {
      return En.fc(xr(t)).dataSync()[0];
    }
    function Cr(t) {
      return En.Yb(xr(t)).dataSync()[0];
    }
    function Or(t, e) {
      if (e < t) throw new Rn(`end (${e}) < begin (${t}) is forbidden.`);
      const n = [];
      for (let r = t; r < e; ++r) n.push(r);
      return n;
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ function Er(t, e) {
      return t.asType(e);
    }
    function Sr(t, e = -1) {
      const n = t.shape.slice();
      return e < 0 && (e = n.length + e + 1), n.splice(e, 0, 1), t.reshape(n);
    }
    function Ir(t, e, n) {
      return Object(En.ud)(() => {
        switch (t.rank) {
          case 1:
            return En.Uc(t, e, n);
          case 2:
            return En.Vc(t, [e, 0], [n, t.shape[1]]);
          case 3:
            return En.Wc(t, [e, 0, 0], [n, t.shape[1], t.shape[2]]);
          case 4:
            return En.Xc(
              t,
              [e, 0, 0, 0],
              [n, t.shape[1], t.shape[2], t.shape[3]]
            );
          case 5:
            return En.Tc(
              t,
              [e, 0, 0, 0, 0],
              [n, t.shape[1], t.shape[2], t.shape[3], t.shape[4]]
            );
          case 6:
            return En.Tc(
              t,
              [e, 0, 0, 0, 0, 0],
              [n, t.shape[1], t.shape[2], t.shape[3], t.shape[4], t.shape[5]]
            );
          default:
            throw new Rn(
              "sliceAlongFirstAxis() received an unsupported tensor rank: " +
                t.rank
            );
        }
      });
    }
    function kr(t, e, n) {
      return Object(En.ud)(() => {
        switch (t.rank) {
          case 1:
            return En.Uc(t, e, n);
          case 2:
            return En.Vc(t, [0, e], [t.shape[0], n]);
          case 3:
            return En.Wc(t, [0, 0, e], [t.shape[0], t.shape[1], n]);
          case 4:
            return En.Xc(
              t,
              [0, 0, 0, e],
              [t.shape[0], t.shape[1], t.shape[2], n]
            );
          default:
            throw new Rn(
              "sliceAlongLastAxis() received an unsupported tensor rank: " +
                t.rank
            );
        }
      });
    }
    function Nr(t, e, n, r) {
      return Object(En.ud)(() => {
        switch (t.rank) {
          case 1:
            return En.Uc(t, e, n);
          case 2:
            switch (r) {
              case 1:
                return Ir(t, e, n);
              case 2:
                return kr(t, e, n);
              default:
                throw new Rn(
                  "The axis is not within the rank of the tensor " + r
                );
            }
          case 3:
            switch (r) {
              case 1:
                return Ir(t, e, n);
              case 2:
                return En.Wc(t, [0, e, 0], [t.shape[0], n, t.shape[2]]);
              case 3:
                return kr(t, e, n);
              default:
                throw new Rn(
                  "The axis is not within the rank of the tensor " + r
                );
            }
          case 4:
            switch (r) {
              case 1:
                return Ir(t, e, n);
              case 2:
                return En.Xc(
                  t,
                  [0, e, 0, 0],
                  [t.shape[0], n, t.shape[2], t.shape[3]]
                );
              case 3:
                return En.Xc(
                  t,
                  [0, 0, e, 0],
                  [t.shape[0], t.shape[1], n, t.shape[3]]
                );
              case 4:
                return kr(t, e, n);
              default:
                throw new Rn(
                  "The axis is not within the rank of the tensor " + r
                );
            }
          default:
            throw new Rn(
              "sliceAlongLastAxis() received an unsupported tensor rank: " +
                t.rank
            );
        }
      });
    }
    function Rr(t, e = -1) {
      let n;
      return (
        e < 0 && ((n = t[0].rank), (e = 0 !== n ? n : 0)),
        e === t[0].rank && (e = -1),
        En.S(t, e)
      );
    }
    function Ar(t, e) {
      switch (t.rank) {
        case 1:
          return En.T([t, e]);
        case 2:
          return En.U([t, e], 0);
        case 3:
          return En.V([t, e], 0);
        case 4:
          return En.W([t, e], 0);
        default:
          throw new Rn(
            "concatAlongFirstAxis() received an unsupported tensor rank: " +
              t.rank
          );
      }
    }
    function Tr(t, e) {
      if ((Array.isArray(e) || (e = [e]), t.rank !== e.length))
        throw new Rn(
          `The length of input n (${e.length}) does not match the number of dimensions in input x (${t.rank})`
        );
      return En.vd(t, e);
    }
    function _r(t, e = 0, n = 1, r, a) {
      return En.vc(t, e, n, r, a);
    }
    function Dr(t, e, n, r) {
      if (t.rank < 2 || e.rank < 2)
        throw new An(
          `dot requires both inputs to be rank >= 2 but got x shape = ${t.shape} and y shape = ${e.shape}`
        );
      if (e.rank >= 3) {
        if (t.shape.slice(-1)[0] !== e.shape.slice(-2)[0])
          throw new An(
            `If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${t.shape} and  y shape = ` +
              e.shape
          );
      }
      if (2 === t.rank && 2 === e.rank) {
        const a = !1,
          i = !1;
        return En.zb.matMul({
          a: t,
          b: e,
          transposeA: a,
          transposeB: i,
          bias: r ? jr(t.rank, r, "channelsLast") : null,
          activation: n,
        });
      }
      {
        const a = t.shape.slice(),
          i = a.pop();
        t = t.reshape([-1, i]);
        const o = e.shape.slice(),
          s = o.pop(),
          u = o.pop(),
          c = [...o, s],
          l = Array.from({ length: e.rank }, (t, n) =>
            0 === n ? e.rank - 2 : n <= e.rank - 2 ? n - 1 : n
          );
        e = e.transpose(l).reshape([u, -1]);
        const h = [...a, ...c],
          d = !1,
          p = !1;
        return En.zb
          .matMul({
            a: t,
            b: e,
            transposeA: d,
            transposeB: p,
            bias: r ? jr(t.rank, r, "channelsLast") : null,
            activation: n,
          })
          .reshape(h);
      }
    }
    function Fr(t, e, n) {
      return Object(En.ud)(
        () => (
          (e = Array.isArray(e) ? Object(En.qd)(e, "int32") : e.toInt()),
          En.Ab(t, e, n)
        )
      );
    }
    function Mr(t) {
      return En.jc(t, t);
    }
    function jr(t, e, n) {
      const r = e.shape;
      if (1 !== e.rank && e.rank !== t)
        throw new Rn(
          "Unexpected bias dimensions: " +
            e.rank +
            "; expected it to be 1 or " +
            t
        );
      if (5 === t) {
        if ("channelsFirst" === n)
          return 1 === r.length
            ? e.reshape([1, r[0], 1, 1, 1])
            : e.reshape([1, r[3], r[0], r[1], r[2]]);
        if ("channelsLast" === n)
          return 1 === r.length
            ? e.reshape([1, 1, 1, 1, r[0]])
            : e.reshape([1].concat(r));
      } else if (4 === t) {
        if ("channelsFirst" === n)
          return 1 === r.length
            ? e.reshape([1, r[0], 1, 1])
            : e.reshape([1, r[2], r[0], r[1]]);
        if ("channelsLast" === n)
          return 1 === r.length
            ? e.reshape([1, 1, 1, r[0]])
            : e.reshape([1].concat(r));
      } else if (3 === t) {
        if ("channelsFirst" === n)
          return 1 === r.length
            ? e.reshape([1, r[0], 1])
            : e.reshape([1, r[1], r[0]]);
        if ("channelsLast" === n)
          return 1 === r.length
            ? e.reshape([1, 1, r[0]])
            : e.reshape([1].concat(r));
      } else if (t < 3) return e;
      throw new Rn("Unsupported input rank by biasAdd: " + e.rank);
    }
    function $r(t, e, n) {
      return Object(En.ud)(
        () => (
          null == n && (n = "channelsLast"), lr(n), t.add(jr(t.rank, e, n))
        )
      );
    }
    function Br(t, e, n, r) {
      return Object(En.ud)(() => En.kb(t, e, n, r));
    }
    function Pr(t, e, n = !1) {
      return n ? t() : e();
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ const Lr = ["fanIn", "fanOut", "fanAvg"],
      zr = ["normal", "uniform", "truncatedNormal"];
    class Wr extends En.Mc.Serializable {
      fromConfigUsesCustomObjects() {
        return !1;
      }
      getConfig() {
        return {};
      }
    }
    class Vr extends Wr {
      apply(t, e) {
        return Object(En.Id)(t, e);
      }
    }
    (Vr.className = "Zeros"), En.Mc.registerClass(Vr);
    class Ur extends Wr {
      apply(t, e) {
        return Object(En.pc)(t, e);
      }
    }
    (Ur.className = "Ones"), En.Mc.registerClass(Ur);
    class Gr extends Wr {
      constructor(t) {
        if ((super(), "object" != typeof t))
          throw new Rn("Expected argument of type ConstantConfig but got " + t);
        if (void 0 === t.value)
          throw new Rn("config must have value set but got " + t);
        this.value = t.value;
      }
      apply(t, e) {
        return Object(En.ud)(() =>
          Object(En.jc)(Object(En.Ic)(this.value), Object(En.pc)(t, e))
        );
      }
      getConfig() {
        return { value: this.value };
      }
    }
    (Gr.className = "Constant"), En.Mc.registerClass(Gr);
    class Hr extends Wr {
      constructor(t) {
        super(),
          (this.DEFAULT_MINVAL = -0.05),
          (this.DEFAULT_MAXVAL = 0.05),
          (this.minval = t.minval || this.DEFAULT_MINVAL),
          (this.maxval = t.maxval || this.DEFAULT_MAXVAL),
          (this.seed = t.seed);
      }
      apply(t, e) {
        return Object(En.wc)(t, this.minval, this.maxval, e);
      }
      getConfig() {
        return { minval: this.minval, maxval: this.maxval, seed: this.seed };
      }
    }
    (Hr.className = "RandomUniform"), En.Mc.registerClass(Hr);
    class qr extends Wr {
      constructor(t) {
        super(),
          (this.DEFAULT_MEAN = 0),
          (this.DEFAULT_STDDEV = 0.05),
          (this.mean = t.mean || this.DEFAULT_MEAN),
          (this.stddev = t.stddev || this.DEFAULT_STDDEV),
          (this.seed = t.seed);
      }
      apply(t, e) {
        if ("float32" !== (e = e || "float32") && "int32" !== e)
          throw new An(`randomNormal does not support dType ${e}.`);
        return _r(t, this.mean, this.stddev, e, this.seed);
      }
      getConfig() {
        return { mean: this.mean, stddev: this.stddev, seed: this.seed };
      }
    }
    (qr.className = "RandomNormal"), En.Mc.registerClass(qr);
    class Kr extends Wr {
      constructor(t) {
        super(),
          (this.DEFAULT_MEAN = 0),
          (this.DEFAULT_STDDEV = 0.05),
          (this.mean = t.mean || this.DEFAULT_MEAN),
          (this.stddev = t.stddev || this.DEFAULT_STDDEV),
          (this.seed = t.seed);
      }
      apply(t, e) {
        if ("float32" !== (e = e || "float32") && "int32" !== e)
          throw new An(`truncatedNormal does not support dType ${e}.`);
        return Object(En.zd)(t, this.mean, this.stddev, e, this.seed);
      }
      getConfig() {
        return { mean: this.mean, stddev: this.stddev, seed: this.seed };
      }
    }
    (Kr.className = "TruncatedNormal"), En.Mc.registerClass(Kr);
    class Xr extends Wr {
      constructor(t) {
        super(), (this.gain = null != t.gain ? t.gain : 1);
      }
      apply(t, e) {
        return Object(En.ud)(() => {
          if (2 !== t.length || t[0] !== t[1])
            throw new Rn(
              "Identity matrix initializer can only be used for 2D square matrices."
            );
          return Object(En.jc)(this.gain, Object(En.ub)(t[0]));
        });
      }
      getConfig() {
        return { gain: this.gain };
      }
    }
    (Xr.className = "Identity"), En.Mc.registerClass(Xr);
    class Yr extends Wr {
      constructor(t) {
        if ((super(), t.scale < 0))
          throw new Rn("scale must be a positive float. Got: " + t.scale);
        /**
         * @license
         * Copyright 2018 Google LLC
         *
         * Use of this source code is governed by an MIT-style
         * license that can be found in the LICENSE file or at
         * https://opensource.org/licenses/MIT.
         * =============================================================================
         */
        var e;
        (this.scale = null == t.scale ? 1 : t.scale),
          (this.mode = null == t.mode ? "fanIn" : t.mode),
          (e = this.mode),
          Gn(Lr, "FanMode", e),
          (this.distribution =
            null == t.distribution ? "normal" : t.distribution),
          (function (t) {
            Gn(zr, "Distribution", t);
          })(this.distribution),
          (this.seed = t.seed);
      }
      apply(t, e) {
        const n = (function (t, e = "channelsLast") {
            let n, r;
            if ((lr(e), 2 === t.length)) (n = t[0]), (r = t[1]);
            else if (-1 !== [3, 4, 5].indexOf(t.length)) {
              if ("channelsFirst" === e) {
                const e = yr(t, 2);
                (n = t[1] * e), (r = t[0] * e);
              } else if ("channelsLast" === e) {
                const e = yr(t, 0, t.length - 2);
                (n = t[t.length - 2] * e), (r = t[t.length - 1] * e);
              }
            } else {
              const e = yr(t);
              (n = Math.sqrt(e)), (r = Math.sqrt(e));
            }
            return [n, r];
          })(t),
          r = n[0],
          a = n[1];
        let i = this.scale;
        if (
          ("fanIn" === this.mode
            ? (i /= Math.max(1, r))
            : "fanOut" === this.mode
            ? (i /= Math.max(1, a))
            : (i /= Math.max(1, (r + a) / 2)),
          "normal" === this.distribution)
        ) {
          const n = Math.sqrt(i);
          if ("float32" !== (e = e || "float32") && "int32" !== e)
            throw new An(`${this.getClassName()} does not support dType ${e}.`);
          return Object(En.zd)(t, 0, n, e, this.seed);
        }
        {
          const n = Math.sqrt(3 * i);
          return Object(En.wc)(t, -n, n, e);
        }
      }
      getConfig() {
        return {
          scale: this.scale,
          mode: this.mode,
          distribution: this.distribution,
          seed: this.seed,
        };
      }
    }
    (Yr.className = "VarianceScaling"), En.Mc.registerClass(Yr);
    class Jr extends Yr {
      constructor(t) {
        super({
          scale: 1,
          mode: "fanAvg",
          distribution: "uniform",
          seed: null == t ? null : t.seed,
        });
      }
      getClassName() {
        return Yr.className;
      }
    }
    (Jr.className = "GlorotUniform"), En.Mc.registerClass(Jr);
    class Qr extends Yr {
      constructor(t) {
        super({
          scale: 1,
          mode: "fanAvg",
          distribution: "normal",
          seed: null == t ? null : t.seed,
        });
      }
      getClassName() {
        return Yr.className;
      }
    }
    (Qr.className = "GlorotNormal"), En.Mc.registerClass(Qr);
    class Zr extends Yr {
      constructor(t) {
        super({
          scale: 2,
          mode: "fanIn",
          distribution: "normal",
          seed: null == t ? null : t.seed,
        });
      }
      getClassName() {
        return Yr.className;
      }
    }
    (Zr.className = "HeNormal"), En.Mc.registerClass(Zr);
    class ta extends Yr {
      constructor(t) {
        super({
          scale: 2,
          mode: "fanIn",
          distribution: "uniform",
          seed: null == t ? null : t.seed,
        });
      }
      getClassName() {
        return Yr.className;
      }
    }
    (ta.className = "HeUniform"), En.Mc.registerClass(ta);
    class ea extends Yr {
      constructor(t) {
        super({
          scale: 1,
          mode: "fanIn",
          distribution: "normal",
          seed: null == t ? null : t.seed,
        });
      }
      getClassName() {
        return Yr.className;
      }
    }
    (ea.className = "LeCunNormal"), En.Mc.registerClass(ea);
    class na extends Yr {
      constructor(t) {
        super({
          scale: 1,
          mode: "fanIn",
          distribution: "uniform",
          seed: null == t ? null : t.seed,
        });
      }
      getClassName() {
        return Yr.className;
      }
    }
    (na.className = "LeCunNormal"), En.Mc.registerClass(na);
    class ra extends Wr {
      constructor(t) {
        if (
          (super(),
          (this.DEFAULT_GAIN = 1),
          (this.gain = null == t.gain ? this.DEFAULT_GAIN : t.gain),
          (this.seed = t.seed),
          null != this.seed)
        )
          throw new An(
            "Random seed is not implemented for Orthogonal Initializer yet."
          );
      }
      apply(t, e) {
        return Object(En.ud)(() => {
          if (2 !== t.length)
            throw new An(
              "The Orthogonal Initializer does not support non-2D shapes yet."
            );
          t[0] * t[1] > 2e3 &&
            console.warn(
              `Orthogonal initializer is being called on a matrix with more than 2000 (${
                t[0] * t[1]
              }) elements: Slowness may result.`
            );
          const e = _r(t[0] > t[1] ? [t[1], t[0]] : t, 0, 1, "float32");
          let n = En.Ob.gramSchmidt(e);
          return (
            t[0] > t[1] && (n = n.transpose()), Object(En.jc)(this.gain, n)
          );
        });
      }
      getConfig() {
        return { gain: this.gain, seed: this.seed };
      }
    }
    (ra.className = "Orthogonal"), En.Mc.registerClass(ra);
    const aa = {
      constant: "Constant",
      glorotNormal: "GlorotNormal",
      glorotUniform: "GlorotUniform",
      heNormal: "HeNormal",
      heUniform: "HeUniform",
      identity: "Identity",
      leCunNormal: "LeCunNormal",
      leCunUniform: "LeCunUniform",
      ones: "Ones",
      orthogonal: "Orthogonal",
      randomNormal: "RandomNormal",
      randomUniform: "RandomUniform",
      truncatedNormal: "TruncatedNormal",
      varianceScaling: "VarianceScaling",
      zeros: "Zeros",
    };
    function ia(t, e = {}) {
      return zn(
        t,
        En.Mc.SerializationMap.getMap().classNameMap,
        e,
        "initializer"
      );
    }
    function oa(t) {
      return Ln(t);
    }
    function sa(t) {
      if ("string" == typeof t) {
        const e = t in aa ? aa[t] : t;
        if ("GlorotNormal" === e) return new Qr();
        if ("GlorotUniform" === e) return new Jr();
        if ("HeNormal" === e) return new Zr();
        if ("HeUniform" === e) return new ta();
        if ("LeCunNormal" === e) return new ea();
        if ("LeCunUniform" === e) return new na();
        {
          const t = {};
          return (t.className = e), (t.config = {}), ia(t);
        }
      }
      return t instanceof Wr ? t : ia(t);
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */
    let ua = 0;
    function ca() {
      return ua++;
    }
    const la = {};
    function ha(t = "") {
      return t in la || (la[t] = 0), (la[t] += 1), t + la[t].toString();
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ function da(t) {
      return Array.isArray(t) && Array.isArray(t[0]);
    }
    function pa(t) {
      return 0 === t.length ? [] : Array.isArray(t[0]) ? t : [t];
    }
    function fa(t) {
      let e;
      if (Array.isArray(t)) {
        if (1 !== t.length)
          throw new Rn("Expected Tensor length to be 1; got " + t.length);
        e = t[0];
      } else e = t;
      return e;
    }
    function ma(t) {
      if (Array.isArray(t) && Array.isArray(t[0])) {
        if (1 === t.length) return (t = t)[0];
        throw new Rn("Expected exactly 1 Shape; got " + t.length);
      }
      return t;
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ function ga(t) {
      let e = 0;
      for (const n of t)
        0 === n.shape.length
          ? (e += 1)
          : (e += n.shape.reduce((t, e) => t * e));
      return e;
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ class ba {
      constructor(t, e = "float32", n = "Variable", r = !0, a = null) {
        (this.dtype = null == e ? "float32" : e),
          (this.shape = t.shape),
          (this.id = ca()),
          (n = null == n ? "Variable" : n),
          (this.originalName = mr(n)),
          (this.name = gr(this.originalName)),
          (this.trainable_ = r),
          (this.constraint = a),
          (this.val = En.Dd(t, this.trainable_, this.name, this.dtype));
      }
      read() {
        return this.assertNotDisposed(), this.val;
      }
      write(t) {
        return (
          this.assertNotDisposed(),
          (function (t, e) {
            if (t.shape.toString() !== e.shape.toString())
              throw new Error(
                "Shape mismatch: " +
                  JSON.stringify(t.shape) +
                  " vs. " +
                  JSON.stringify(e.shape)
              );
          })(this.val, t),
          this.val.id !== t.id &&
            (this.val.assign(t),
            null != this.constraint &&
              this.val.assign(this.constraint.apply(this.val))),
          this
        );
      }
      dispose() {
        this.assertNotDisposed(), this.val.dispose();
      }
      assertNotDisposed() {
        if (this.val.isDisposed)
          throw new Error(`LayersVariable ${this.name} is already disposed.`);
      }
      get trainable() {
        return this.trainable_;
      }
      set trainable(t) {
        (this.trainable_ = t), (this.val.trainable = t);
      }
    }
    function va(t) {
      return t.map((t) => t.read());
    }
    function ya(t) {
      t.forEach((t) => {
        t[0].write(t[1]);
      });
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */
    class xa {
      constructor(t) {
        (this.dtype = t.dtype),
          (this.shape = t.shape),
          null != t.shape ? (this.ndim = t.shape.length) : (this.ndim = t.ndim),
          (this.maxNDim = t.maxNDim),
          (this.minNDim = t.minNDim),
          (this.axes = t.axes || {});
      }
    }
    class wa {
      constructor(t, e, n, r, a, i, o) {
        (this.dtype = t),
          (this.shape = e),
          (this.sourceLayer = n),
          (this.inputs = r),
          (this.callArgs = a),
          (this.outputTensorIndex = o),
          (this.id = ca()),
          null != i &&
            ((this.originalName = mr(i)), (this.name = gr(this.originalName))),
          (this.rank = e.length);
      }
    }
    let Ca = 0;
    class Oa {
      constructor(t, e) {
        (this.callArgs = e),
          (this.id = Ca++),
          (this.outboundLayer = t.outboundLayer),
          (this.inboundLayers = t.inboundLayers),
          (this.nodeIndices = t.nodeIndices),
          (this.tensorIndices = t.tensorIndices),
          (this.inputTensors = t.inputTensors),
          (this.outputTensors = t.outputTensors),
          (this.inputMasks = t.inputMasks),
          (this.outputMasks = t.outputMasks),
          (this.inputShapes = t.inputShapes),
          (this.outputShapes = t.outputShapes);
        for (const e of t.inboundLayers)
          null != e && e.outboundNodes.push(this);
        t.outboundLayer.inboundNodes.push(this);
      }
      getConfig() {
        const t = [];
        for (const e of this.inboundLayers)
          null != e ? t.push(e.name) : t.push(null);
        return {
          outboundLayer: this.outboundLayer ? this.outboundLayer.name : null,
          inboundLayers: t,
          nodeIndices: this.nodeIndices,
          tensorIndices: this.tensorIndices,
        };
      }
    }
    let Ea = 0;
    class Sa extends En.Mc.Serializable {
      constructor(t = {}) {
        super(),
          (this._callHook = null),
          (this._addedWeightNames = []),
          (this._stateful = !1),
          (this.id = Ea++),
          (this.activityRegularizer = null),
          (this.inputSpec = null),
          (this.supportsMasking = !1),
          (this._trainableWeights = []),
          (this._nonTrainableWeights = []),
          (this._losses = []),
          (this._updates = []),
          (this._built = !1),
          (this.inboundNodes = []),
          (this.outboundNodes = []);
        let e = t.name;
        if (!e) {
          const t = this.getClassName();
          e = $n(t) + "_" + ha(t);
        }
        if (
          ((this.name = e),
          (this.trainable_ = null == t.trainable || t.trainable),
          null != t.inputShape || null != t.batchInputShape)
        ) {
          let e;
          if (null != t.batchInputShape) e = t.batchInputShape;
          else if (null != t.inputShape) {
            let n = null;
            null != t.batchSize && (n = t.batchSize),
              (e = [n].concat(t.inputShape));
          }
          this.batchInputShape = e;
          let n = t.dtype;
          null == n && (n = t.inputDType),
            null == n && (n = "float32"),
            (this.dtype = n);
        }
        null != t.weights
          ? (this.initialWeights = t.weights)
          : (this.initialWeights = null),
          (this._refCount = null),
          (this.fastWeightInitDuringBuild = !1);
      }
      static nodeKey(t, e) {
        return t.name + "_ib-" + e.toString();
      }
      getNodeAtIndex(t, e) {
        if (0 === this.inboundNodes.length)
          throw new Nn(
            `The layer has never been called and thus has no defined ${e}.`
          );
        if (this.inboundNodes.length <= t)
          throw new Rn(
            `Asked to get ${e} at node ${t}, but the layer has only ${this.inboundNodes.length} inbound nodes.`
          );
        return this.inboundNodes[t];
      }
      getInputAt(t) {
        return Mn(this.getNodeAtIndex(t, "input").inputTensors);
      }
      getOutputAt(t) {
        return Mn(this.getNodeAtIndex(t, "output").outputTensors);
      }
      get input() {
        if (this.inboundNodes.length > 1)
          throw new kn(
            "Layer " +
              this.name +
              ' has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use `getInputAt(nodeIndex)` instead.'
          );
        if (0 === this.inboundNodes.length)
          throw new kn(
            "Layer " + this.name + " is not connected, no input to return."
          );
        return Mn(this.getNodeAtIndex(0, "input").inputTensors);
      }
      get output() {
        if (0 === this.inboundNodes.length)
          throw new kn("Layer " + this.name + " has no inbound nodes.");
        if (this.inboundNodes.length > 1)
          throw new kn(
            "Layer " +
              this.name +
              ' has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use `getOutputAt(nodeIndex)` instead.'
          );
        return Mn(this.getNodeAtIndex(0, "output").outputTensors);
      }
      get losses() {
        return this._losses;
      }
      calculateLosses() {
        return this.losses.map((t) => t());
      }
      get updates() {
        return this._updates;
      }
      get built() {
        return this._built;
      }
      set built(t) {
        this._built = t;
      }
      get trainable() {
        return this.trainable_;
      }
      set trainable(t) {
        this._trainableWeights.forEach((e) => (e.trainable = t)),
          (this.trainable_ = t);
      }
      get trainableWeights() {
        return this.trainable_
          ? this._trainableWeights.filter((t) => t.trainable)
          : [];
      }
      set trainableWeights(t) {
        this._trainableWeights = t;
      }
      get nonTrainableWeights() {
        return this.trainable
          ? this._trainableWeights
              .filter((t) => !t.trainable)
              .concat(this._nonTrainableWeights)
          : this._trainableWeights.concat(this._nonTrainableWeights);
      }
      set nonTrainableWeights(t) {
        this._nonTrainableWeights = t;
      }
      get weights() {
        return this.trainableWeights.concat(this.nonTrainableWeights);
      }
      get stateful() {
        return this._stateful;
      }
      resetStates() {
        if (!this.stateful)
          throw new Error(
            "Cannot call the resetStates() method of a non-stateful Layer object."
          );
      }
      assertInputCompatibility(t) {
        if (
          ((t = jn(t)), null == this.inputSpec || 0 === this.inputSpec.length)
        )
          return;
        const e = jn(this.inputSpec);
        if (t.length !== e.length)
          throw new Rn(
            `Layer ${this.name} expects ${e.length} inputs, but it received ${t.length} input tensors. Input received: ` +
              t
          );
        for (let n = 0; n < t.length; n++) {
          const r = t[n],
            a = e[n];
          if (null == a) continue;
          const i = r.rank;
          if (null != a.ndim && i !== a.ndim)
            throw new Rn(
              `Input ${n} is incompatible with layer ${this.name}: expected ndim=${a.ndim}, found ndim=${i}`
            );
          if (null != a.maxNDim && i > a.maxNDim)
            throw new Rn(
              `Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${a.maxNDim}, found ndim=${i}`
            );
          if (null != a.minNDim && i < a.minNDim)
            throw new Rn(
              `Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${a.minNDim}, found ndim=${i}.`
            );
          if (null != a.dtype && r.dtype !== a.dtype)
            throw new Rn(
              `Input ${n} is incompatible with layer ${this.name} : expected dtype=${a.dtype}, found dtype=${r.dtype}.`
            );
          if (a.axes) {
            const t = r.shape;
            for (const e in a.axes) {
              const r = Number(e),
                i = a.axes[e],
                o = r >= 0 ? t[r] : t[t.length + r];
              if (null != i && -1 === [i, null].indexOf(o))
                throw new Rn(
                  `Input ${n} is incompatible with layer ${this.name}: expected axis ${r} of input shape to have value ${i} but got shape ${t}.`
                );
            }
          }
          if (null != a.shape)
            for (let t = 0; t < a.shape.length; ++t) {
              const e = a.shape[t],
                i = r.shape[t];
              if (null != e && null != i && e !== i)
                throw new Rn(
                  `Input ${n} is incompatible with layer ${this.name}: expected shape=${a.shape}, found shape=${r.shape}.`
                );
            }
        }
      }
      call(t, e) {
        return t;
      }
      invokeCallHook(t, e) {
        null != this._callHook && this._callHook(t, e);
      }
      setCallHook(t) {
        this._callHook = t;
      }
      clearCallHook() {
        this._callHook = null;
      }
      apply(t, e) {
        (e = e || {}), this.assertNotDisposed();
        const n = jn(t);
        let r = !0;
        for (const t of n)
          if (!(t instanceof wa)) {
            r = !1;
            break;
          }
        let a = !0;
        for (const t of n)
          if (t instanceof wa) {
            a = !1;
            break;
          }
        if (r === a)
          throw new Rn(
            "Arguments to apply() must be all SymbolicTensors or all Tensors"
          );
        return fr(this.name, () => {
          if (!this.built) {
            this.assertInputCompatibility(t);
            const e = [];
            for (const n of jn(t)) e.push(n.shape);
            this.build(Mn(e)),
              (this.built = !0),
              this.initialWeights && this.setWeights(this.initialWeights),
              null === this._refCount && a && (this._refCount = 1);
          }
          if ((this.assertInputCompatibility(t), a)) {
            let r = this.call(t, e);
            const a = jn(r),
              i = [];
            for (let t of a) -1 !== n.indexOf(t) && (t = t.clone()), i.push(t);
            if (((r = Mn(i)), null != this.activityRegularizer))
              throw new An(
                "Layer invocation in the presence of activity regularizer(s) is not supported yet."
              );
            return r;
          }
          {
            const n = (function (t) {
                t = jn(t);
                const e = [];
                for (const n of t) e.push(n.shape);
                return Mn(e);
              })(t),
              r = this.computeOutputShape(n);
            let a;
            const i = "float32";
            if (
              (this.warnOnIncompatibleInputShape(Array.isArray(t) ? n[0] : n),
              (a =
                null != r && r.length > 0 && Array.isArray(r[0])
                  ? r.map((n, r) => new wa(i, n, this, jn(t), e, this.name, r))
                  : new wa(i, r, this, jn(t), e, this.name)),
              this.addInboundNode(t, a, null, null, n, r, e),
              this._refCount++,
              null != this.activityRegularizer)
            )
              throw new An(
                "Layer invocation in the presence of activity regularizer(s) is not supported yet."
              );
            return a;
          }
        });
      }
      warnOnIncompatibleInputShape(t) {
        if (null != this.batchInputShape)
          if (t.length !== this.batchInputShape.length)
            console.warn(
              "The rank of the input tensor provided (shape: " +
                JSON.stringify(t) +
                ") does not match that of the " +
                `batchInputShape (${JSON.stringify(
                  this.batchInputShape
                )}) of the layer ` +
                this.name
            );
          else {
            let e = !1;
            this.batchInputShape.forEach((n, r) => {
              null != n && null != t[r] && t[r] !== n && (e = !0);
            }),
              e &&
                console.warn(
                  `The shape of the input tensor (${JSON.stringify(
                    t
                  )}) does not match the expectation of layer ${this.name}: ` +
                    JSON.stringify(this.batchInputShape)
                );
          }
      }
      get outputShape() {
        if (null == this.inboundNodes || 0 === this.inboundNodes.length)
          throw new kn(
            `The layer ${this.name} has never been called and thus has no defined output shape.`
          );
        const t = [];
        for (const e of this.inboundNodes) {
          const n = JSON.stringify(e.outputShapes);
          -1 === t.indexOf(n) && t.push(n);
        }
        if (1 === t.length) {
          const t = this.inboundNodes[0].outputShapes;
          return Array.isArray(t) && Array.isArray(t[0]) && 1 === t.length
            ? t[0]
            : t;
        }
        throw new kn(
          `The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "outut shape" is ill-defined for the layer.`
        );
      }
      countParams() {
        if (!this.built)
          throw new Nn(
            `You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`
          );
        return ga(this.weights);
      }
      build(t) {
        this.built = !0;
      }
      getWeights(t = !1) {
        return va(t ? this.trainableWeights : this.weights);
      }
      setWeights(t) {
        Object(En.ud)(() => {
          const e = this.weights;
          if (e.length !== t.length)
            throw new Rn(
              `You called setWeights(weights) on layer "${this.name}" with a weight list of length ${t.length}, but the layer was expecting ${e.length} weights. Provided weights: ${t}...`
            );
          if (0 === e.length) return;
          const n = [],
            r = va(e);
          for (let a = 0; a < r.length; ++a) {
            const i = r[a],
              o = e[a],
              s = t[a];
            if (!En.Cd.arraysEqual(i.shape, s.shape))
              throw new Rn(
                `Layer weight shape ${i.shape} not compatible with provided weight shape ` +
                  s.shape
              );
            n.push([o, s]);
          }
          ya(n);
        });
      }
      addWeight(t, e, n, r, a, i, o) {
        if (-1 !== this._addedWeightNames.indexOf(t))
          throw new Rn(`Duplicate weight name ${t} for layer ${this.name}`);
        this._addedWeightNames.push(t),
          null == n && (n = "float32"),
          this.fastWeightInitDuringBuild && (r = sa("zeros"));
        const s = r.apply(e, n),
          u = new ba(s, n, t, i, o);
        return (
          s.dispose(),
          null != a && this.addLoss(() => a.apply(u.read())),
          null == i && (i = !0),
          i
            ? this._trainableWeights.push(u)
            : this._nonTrainableWeights.push(u),
          u
        );
      }
      setFastWeightInitDuringBuild(t) {
        this.fastWeightInitDuringBuild = t;
      }
      addLoss(t) {
        null == t ||
          (Array.isArray(t) && 0 === t.length) ||
          ((t = jn(t)),
          void 0 !== this._losses &&
            null !== this._losses &&
            this.losses.push(...t));
      }
      computeOutputShape(t) {
        return t;
      }
      computeMask(t, e) {
        if (!this.supportsMasking) {
          if (null != e) {
            if (!Array.isArray(e))
              throw new TypeError(
                `Layer ${this.name} does not support masking, but was passed an inputMask.`
              );
            e.forEach((t) => {
              if (null != t)
                throw new TypeError(
                  `Layer ${this.name} does not support masking, but was passed an inputMask.`
                );
            });
          }
          return null;
        }
        return e;
      }
      addInboundNode(t, e, n, r, a, i, o = null) {
        const s = jn(t);
        (e = jn(e)), (n = jn(n)), (r = jn(r)), (a = pa(a)), (i = pa(i));
        const u = [],
          c = [],
          l = [];
        for (const t of s)
          u.push(t.sourceLayer), c.push(t.nodeIndex), l.push(t.tensorIndex);
        new Oa(
          {
            outboundLayer: this,
            inboundLayers: u,
            nodeIndices: c,
            tensorIndices: l,
            inputTensors: s,
            outputTensors: e,
            inputMasks: n,
            outputMasks: r,
            inputShapes: a,
            outputShapes: i,
          },
          o
        );
        for (let t = 0; t < e.length; t++)
          (e[t].sourceLayer = this),
            (e[t].nodeIndex = this.inboundNodes.length - 1),
            (e[t].tensorIndex = t);
      }
      getConfig() {
        const t = { name: this.name, trainable: this.trainable };
        return (
          null != this.batchInputShape &&
            (t.batchInputShape = this.batchInputShape),
          null != this.dtype && (t.dtype = this.dtype),
          t
        );
      }
      disposeWeights() {
        return this.weights.forEach((t) => t.dispose()), this.weights.length;
      }
      assertNotDisposed() {
        if (0 === this._refCount)
          throw new Error(`Layer '${this.name}' is already disposed.`);
      }
      dispose() {
        if (!this.built)
          throw new Error(
            `Cannot dispose Layer ${this.name} because it has not been built yet.`
          );
        if (null === this._refCount)
          throw new Error(
            `Cannot dispose Layer ${this.name} because it has not been used yet.`
          );
        this.assertNotDisposed();
        let t = 0;
        return (
          0 == --this._refCount && (t = this.disposeWeights()),
          { refCountAfterDispose: this._refCount, numDisposedVariables: t }
        );
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */
    class Ia extends Sa {
      constructor(t) {
        if (
          (super({
            dtype: t.dtype,
            name: null != t.name ? t.name : ha("input").toString(),
          }),
          null == t.batchSize && (t.batchSize = null),
          null == t.sparse && (t.sparse = !1),
          (this.trainable = !1),
          (this.built = !0),
          (this.sparse = t.sparse),
          null != t.inputShape && null != t.batchInputShape)
        )
          throw new Rn(
            "Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time."
          );
        let e = t.batchInputShape;
        if (null == e) {
          if (null == t.inputShape)
            throw new Rn(
              "An InputLayer should be passed either a `batchInputShape` or an `inputShape`."
            );
          e = [t.batchSize].concat(t.inputShape);
        } else if (null != t.batchSize)
          throw new Rn(
            "Cannot specify batchSize if batchInputShape is specified when creating an InputLayer."
          );
        const n = t.dtype || "float32";
        (this.batchInputShape = e),
          (this.dtype = n),
          (this.inputSpec = [{ shape: e }]);
        const r = new wa(
          this.dtype,
          this.batchInputShape,
          this,
          [],
          {},
          this.name
        );
        (r.nodeIndex = 0),
          (r.tensorIndex = 0),
          new Oa({
            outboundLayer: this,
            inboundLayers: [],
            nodeIndices: [],
            tensorIndices: [],
            inputTensors: [r],
            outputTensors: [r],
            inputMasks: [null],
            outputMasks: [null],
            inputShapes: [e],
            outputShapes: [e],
          });
      }
      apply(t, e) {
        throw new Rn(
          "Cannot pass any input to an InputLayer's apply() method. InputLayer name: " +
            this.name
        );
      }
      dispose() {
        return {
          refCountAfterDispose: this._refCount,
          numDisposedVariables: 0,
        };
      }
      getConfig() {
        return {
          batchInputShape: this.batchInputShape,
          dtype: this.dtype,
          sparse: this.sparse,
          name: this.name,
        };
      }
    }
    function ka(t) {
      if (null == t.batchShape && null == t.shape)
        throw new Error(
          "Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension."
        );
      if (null != t.batchShape && null != t.shape)
        throw new Rn(
          "Please provide either a `shape` or `batchShape` argument to Input, but not both."
        );
      let e = t.batchShape;
      null != t.shape && null == e && (e = [null].concat(t.shape));
      let n = t.dtype;
      null == n && (n = "float32");
      return new Ia({
        batchInputShape: e,
        name: t.name,
        dtype: n,
        sparse: t.sparse,
      }).inboundNodes[0].outputTensors[0];
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ async function Na(t) {
      if (null == t) return;
      const e = [],
        n = [],
        r = [];
      for (const a in t) {
        const i = t[a];
        if ("number" != typeof i) {
          const t = i;
          e.push(t.data()), n.push(a), r.push(t);
        }
      }
      if (e.length > 0) {
        const a = await Promise.all(e);
        for (let e = 0; e < a.length; ++e) t[n[e]] = a[e][0];
        Object(En.hb)(r);
      }
    }
    function Ra(t) {
      if (null != t)
        for (const e in t) {
          const n = t[e];
          "number" != typeof n && n.dispose();
        }
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ var Aa;
    (Ia.className = "InputLayer"),
      En.Mc.registerClass(Ia),
      (function (t) {
        (t[(t.SILENT = 0)] = "SILENT"), (t[(t.VERBOSE = 1)] = "VERBOSE");
      })(Aa || (Aa = {}));
    class Ta {
      constructor() {
        this.validationData = null;
      }
      setParams(t) {
        this.params = t;
      }
      async onEpochBegin(t, e) {}
      async onEpochEnd(t, e) {}
      async onBatchBegin(t, e) {}
      async onBatchEnd(t, e) {}
      async onTrainBegin(t) {}
      async onTrainEnd(t) {}
      setModel(t) {}
    }
    class _a {
      constructor(t, e = 10) {
        null == t && (t = []), (this.callbacks = t), (this.queueLength = e);
      }
      append(t) {
        this.callbacks.push(t);
      }
      setParams(t) {
        for (const e of this.callbacks) e.setParams(t);
      }
      setModel(t) {
        for (const e of this.callbacks) e.setModel(t);
      }
      async onEpochBegin(t, e) {
        null == e && (e = {});
        for (const n of this.callbacks) await n.onEpochBegin(t, e);
      }
      async onEpochEnd(t, e) {
        null == e && (e = {});
        for (const n of this.callbacks) await n.onEpochEnd(t, e);
      }
      async onBatchBegin(t, e) {
        null == e && (e = {});
        for (const n of this.callbacks) await n.onBatchBegin(t, e);
      }
      async onBatchEnd(t, e) {
        null == e && (e = {});
        for (const n of this.callbacks) await n.onBatchEnd(t, e);
      }
      async onTrainBegin(t) {
        null == t && (t = {});
        for (const e of this.callbacks) await e.onTrainBegin(t);
      }
      async onTrainEnd(t) {
        null == t && (t = {});
        for (const e of this.callbacks) await e.onTrainEnd(t);
      }
    }
    class Da extends Ta {
      constructor() {
        super();
      }
      async onEpochBegin(t) {
        (this.seen = 0), (this.totals = {});
      }
      async onBatchEnd(t, e) {
        null == e && (e = {});
        const n = null == e.size ? 0 : e.size;
        this.seen += n;
        for (const t in e) {
          const r = e[t];
          if ("number" == typeof r)
            this.totals.hasOwnProperty(t) || (this.totals[t] = 0),
              (this.totals[t] = this.totals[t] + r * n);
          else {
            let e;
            t in this.totals ? (e = this.totals[t]) : (this.totals[t] = 0);
            const a = Object(En.ud)(() =>
              Object(En.r)(this.totals[t], Object(En.jc)(r, n))
            );
            (this.totals[t] = a), null != e && e.dispose();
          }
        }
      }
      async onEpochEnd(t, e) {
        if (null != e)
          for (const t of this.params.metrics)
            null != this.totals[t] &&
              ("number" == typeof this.totals[t]
                ? (e[t] = this.totals[t] / this.seen)
                : Object(En.ud)(() => {
                    const n = Object(En.jc)(
                      Object(En.ib)(1, this.seen),
                      this.totals[t]
                    );
                    (e[t] = n), this.totals[t].dispose(), Object(En.Jb)(e[t]);
                  }));
      }
    }
    class Fa extends Ta {
      async onTrainBegin(t) {
        (this.epoch = []), (this.history = {});
      }
      async onEpochEnd(t, e) {
        null == e && (e = {}), this.epoch.push(t);
        for (const t in e)
          null == this.history[t] && (this.history[t] = []),
            this.history[t].push(e[t]);
      }
      async syncData() {
        const t = [],
          e = [],
          n = [];
        for (const r in this.history) {
          const a = this.history[r];
          for (let i = 0; i < a.length; ++i)
            if ("number" != typeof a[i]) {
              const o = a[i];
              t.push(o.data()), e.push(r), n.push(i);
            }
        }
        const r = await Promise.all(t);
        for (let t = 0; t < r.length; ++t) {
          this.history[e[t]][n[t]].dispose(),
            (this.history[e[t]][n[t]] = r[t][0]);
        }
      }
    }
    class Ma extends Ta {
      constructor(t, e) {
        if (
          (super(),
          (this.currentEpoch = 0),
          (this.yieldEvery = e || "auto"),
          "auto" === this.yieldEvery && (this.yieldEvery = 125),
          "never" === this.yieldEvery && null != t.onYield)
        )
          throw new Error(
            "yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback"
          );
        En.Cd.isNumber(this.yieldEvery) &&
          (this.maybeWait = (function (t, e) {
            let n,
              r = En.Cd.now();
            return (...a) => {
              const i = En.Cd.now();
              return i - r < e || ((r = i), (n = t(...a))), n;
            };
          })(this.maybeWait.bind(this), this.yieldEvery)),
          (this.trainBegin = t.onTrainBegin),
          (this.trainEnd = t.onTrainEnd),
          (this.epochBegin = t.onEpochBegin),
          (this.epochEnd = t.onEpochEnd),
          (this.batchBegin = t.onBatchBegin),
          (this.batchEnd = t.onBatchEnd),
          (this.yield = t.onYield);
      }
      async maybeWait(t, e, n) {
        const r = [];
        null != this.yield && (await Na(n), r.push(this.yield(t, e, n))),
          r.push(Object(En.mc)()),
          await Promise.all(r);
      }
      async onEpochBegin(t, e) {
        (this.currentEpoch = t),
          null != this.epochBegin && (await Na(e), await this.epochBegin(t, e));
      }
      async onEpochEnd(t, e) {
        const n = [];
        null != this.epochEnd && (await Na(e), n.push(this.epochEnd(t, e))),
          "epoch" === this.yieldEvery && n.push(Object(En.mc)()),
          await Promise.all(n);
      }
      async onBatchBegin(t, e) {
        null != this.batchBegin && (await Na(e), await this.batchBegin(t, e));
      }
      async onBatchEnd(t, e) {
        const n = [];
        null != this.batchEnd && (await Na(e), n.push(this.batchEnd(t, e))),
          "batch" === this.yieldEvery
            ? n.push(Object(En.mc)())
            : En.Cd.isNumber(this.yieldEvery) &&
              n.push(this.maybeWait(this.currentEpoch, t, e)),
          await Promise.all(n);
      }
      async onTrainBegin(t) {
        null != this.trainBegin && (await Na(t), await this.trainBegin(t));
      }
      async onTrainEnd(t) {
        null != this.trainEnd && (await Na(t), await this.trainEnd(t));
      }
    }
    function ja(t, e) {
      if ((null == t && (t = {}), t instanceof Ta)) return [t];
      if (Array.isArray(t) && t[0] instanceof Ta) return t;
      return jn(t).map((t) => new Ma(t, e));
    }
    class $a {
      constructor() {}
      static registerCallbackConstructor(t, e) {
        En.Cd.assert(
          t >= 0 && Number.isInteger(t),
          () =>
            "Verbosity level is expected to be an integer >= 0, but got " + t
        ),
          $a.checkForDuplicate(e),
          null == $a.constructors[t] && ($a.constructors[t] = []),
          $a.constructors[t].push(e);
      }
      static checkForDuplicate(t) {
        for (const e in $a.constructors) {
          $a.constructors[+e].forEach((e) => {
            if (e === t) throw new Rn("Duplicate callback constructor.");
          });
        }
      }
      static clear() {
        $a.constructors = {};
      }
      static createCallbacks(t) {
        const e = [];
        for (const n in $a.constructors) {
          const r = +n;
          t >= r && e.push(...$a.constructors[r]);
        }
        return e.map((t) => new t());
      }
    }
    function Ba(t, e, n, r, a, i, o, s, u) {
      const c = new Fa(),
        l = [new Da(), ...$a.createCallbacks(e)];
      null != t && l.push(...t), l.push(c);
      const h = new _a(l);
      return (
        h.setParams({
          epochs: n,
          initialEpoch: r,
          samples: a,
          steps: i,
          batchSize: o,
          verbose: e,
          doValidation: s,
          metrics: u,
        }),
        { callbackList: h, history: c }
      );
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ function Pa(t, e = {}, n = !1) {
      return zn(t, En.Mc.SerializationMap.getMap().classNameMap, e, "layer", n);
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ function La(t, e) {
      return Object(En.ud)(() => {
        "float32" !== t.dtype && (t = t.asType("float32"));
        const n = En.ld(Mr(t), e, !0),
          r = En.wb(n.shape, In()),
          a = En.ed(En.cc(n, r));
        return En.ib(t, a);
      });
    }
    function za(t, e) {
      return Object(En.ud)(() => En.dc(Mr(En.kd(e, t)), -1));
    }
    function Wa(t, e) {
      return Object(En.ud)(() => En.dc(En.o(En.kd(e, t)), -1));
    }
    function Va(t, e) {
      return Object(En.ud)(() => {
        const n = En.kd(t, e),
          r = En.Q(En.o(t), In(), Number.MAX_VALUE),
          a = En.o(En.ib(n, r));
        return En.jc(100, En.dc(a, -1));
      });
    }
    function Ua(t, e) {
      return Object(En.ud)(() => {
        const n = En.Q(e, In(), Number.MAX_VALUE),
          r = En.Rb(En.r(1, n)),
          a = En.Q(t, In(), Number.MAX_VALUE),
          i = En.Rb(En.r(1, a));
        return En.dc(Mr(En.kd(r, i)), -1);
      });
    }
    function Ga(t, e, n = !1) {
      return Object(En.ud)(() => {
        if (n) e = En.Zc(e);
        else {
          const t = En.ld(e, e.shape.length - 1, !0);
          e = En.ib(e, t);
        }
        return (
          (e = En.Q(e, In(), 1 - In())),
          En.lc(En.ld(En.jc(t.toFloat(), En.Rb(e)), e.shape.length - 1))
        );
      });
    }
    function Ha(t, e, n = !1) {
      return Object(En.ud)(() => {
        const r = En.xb(
            (function (t) {
              const e = [yr(t.shape)];
              return t.reshape(e);
            })(t)
          ).toInt(),
          a = (e = En.Q(e, In(), 1 - In())).shape;
        return Ga(En.oc(r, a[a.length - 1]).reshape(a), e, n);
      });
    }
    function qa(t, e) {
      return Object(En.ud)(() => {
        let n;
        return (
          (n = En.Q(e, In(), 1 - In())),
          (n = En.Rb(En.ib(n, En.kd(1, n)))),
          En.dc(
            (function (t, e) {
              if (!En.Cd.arraysEqual(t.shape, e.shape))
                throw new Rn(
                  `logits and labels must have the same shape, but got shapes ${JSON.stringify(
                    t.shape
                  )} and ${JSON.stringify(e.shape)}`
                );
              return Object(En.ud)(() => {
                const n = e.relu(),
                  r = e.abs().neg();
                return n.sub(e.mul(t)).add(r.exp().log1p());
              });
            })(t, n),
            -1
          )
        );
      });
    }
    function Ka(t, e) {
      return Object(En.ud)(() => {
        const n = En.Q(t, In(), 1),
          r = En.Q(e, In(), 1);
        return En.ld(En.jc(t, En.Rb(En.ib(n, r))), -1);
      });
    }
    function Xa(t, e) {
      return Object(En.ud)(() => {
        const n = La(t, -1),
          r = La(e, -1),
          a = En.jc(n, r);
        return En.lc(En.ld(a, -1));
      });
    }
    $a.constructors = {};
    const Ya = {
      meanSquaredError: za,
      meanAbsoluteError: Wa,
      meanAbsolutePercentageError: Va,
      meanSquaredLogarithmicError: Ua,
      squaredHinge: function (t, e) {
        return Object(En.ud)(() => {
          const n = En.cc(0, En.kd(1, En.jc(t, e)));
          return En.dc(Mr(n), -1);
        });
      },
      hinge: function (t, e) {
        return Object(En.ud)(() => {
          const n = En.cc(0, En.kd(1, En.jc(t, e)));
          return En.dc(n, -1);
        });
      },
      categoricalHinge: function (t, e) {
        return Object(En.ud)(() => {
          const n = En.ld(En.jc(t, e), -1),
            r = En.Yb(En.jc(En.kd(1, t), e), -1);
          return En.cc(0, En.r(1, En.kd(r, n)));
        });
      },
      logcosh: function (t, e) {
        return Object(En.ud)(() => {
          const n = Math.log(2),
            r = En.kd(e, t),
            a = En.kd(En.r(r, En.ad(En.jc(-2, r))), n);
          return En.dc(a, -1);
        });
      },
      categoricalCrossentropy: Ga,
      sparseCategoricalCrossentropy: Ha,
      binaryCrossentropy: qa,
      kullbackLeiblerDivergence: Ka,
      poisson: function (t, e) {
        return Object(En.ud)(() => {
          const n = En.Rb(En.r(In(), e));
          return En.dc(En.kd(e, En.jc(t, n)), -1);
        });
      },
      cosineProximity: Xa,
    };
    function Ja(t) {
      if ("string" == typeof t) {
        if (t in Ya) return Ya[t];
        let e = "Unknown loss " + t;
        throw (
          (t.toLowerCase().includes("softmaxcrossentropy") &&
            (e = `Unknown loss ${t}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),
          new Rn(e))
        );
      }
      return t;
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ function Qa(t, e) {
      return Object(En.ud)(() => {
        const n = En.jc(0.5, En.qc(e)),
          r = Er(En.Cb(e, n), t.dtype);
        return En.dc(En.pb(t, r), -1);
      });
    }
    function Za(t, e) {
      return Object(En.ud)(() =>
        Er(En.pb(En.v(t, -1), En.v(e, -1)), "float32")
      );
    }
    function ti(t, e) {
      return Object(En.ud)(() =>
        En.Ub(t.equal(1), e.equal(1)).sum().cast("float32")
      );
    }
    function ei(t, e) {
      return Object(En.ud)(() => {
        const n = ti(t, e),
          r = (function (t, e) {
            return Object(En.ud)(() =>
              En.Ub(t.equal(0), e.equal(1)).sum().cast("float32")
            );
          })(t, e),
          a = n.add(r);
        return En.Gd(En.Cb(a, 0), n.div(a), 0).cast("float32");
      });
    }
    function ni(t, e) {
      return qa(t, e);
    }
    function ri(t, e) {
      return (
        t.rank === e.rank && (t = t.squeeze([t.rank - 1])),
        (e = e.argMax(-1)).dtype !== t.dtype && (e = e.asType(t.dtype)),
        En.pb(t, e).asType("float32")
      );
    }
    const ai = Ga,
      ii = Ha,
      oi = {
        binaryAccuracy: Qa,
        categoricalAccuracy: Za,
        precision: ei,
        categoricalCrossentropy: ai,
        sparseCategoricalCrossentropy: ii,
        mse: za,
        MSE: za,
        mae: Wa,
        MAE: Wa,
        mape: Va,
        MAPE: Va,
        cosine: Xa,
      };
    function si(t) {
      if ("string" == typeof t && t in oi) return oi[t];
      if ("string" != typeof t && null != t) return t;
      throw new Rn("Unknown metric " + t);
    }
    function ui(t) {
      if ((Dn(null !== t, "Unknown LossOrMetricFn " + t), "string" == typeof t))
        return t;
      {
        let e;
        for (const n of Object.keys(Ya))
          if (Ya[n] === t) {
            e = n;
            break;
          }
        if (void 0 !== e) return e;
        for (const n of Object.keys(oi))
          if (oi[n] === t) {
            e = n;
            break;
          }
        return void 0 !== e ? e : t.name;
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ function ci(t, e, n = !1) {
      if (
        null == t ||
        "object" != typeof t ||
        Object.getPrototypeOf(t) !== Object.prototype ||
        !(function t(e) {
          if (null === e) return !0;
          if ("object" == typeof e) {
            if (Object.getPrototypeOf(e) === Object.prototype) {
              const n = Object.keys(e);
              for (const r of n) {
                if ("string" != typeof r) return !1;
                if (!t(e[r])) return !1;
              }
              return !0;
            }
            if (Array.isArray(e)) {
              for (const n of e) if (!t(n)) return !1;
              return !0;
            }
            return !1;
          }
          {
            const t = typeof e;
            return "string" === t || "number" === t || "boolean" === t;
          }
        })(
          /**
           * @license
           * Copyright 2018 Google LLC
           *
           * Use of this source code is governed by an MIT-style
           * license that can be found in the LICENSE file or at
           * https://opensource.org/licenses/MIT.
           * =============================================================================
           */ t
        )
      )
        throw new Error(
          "User-defined metadata is expected to be a JSON object, but is not."
        );
      if (n) {
        const n = JSON.stringify(t);
        n.length > 1048576 &&
          console.warn(
            `User-defined metadata of model "${e}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`
          );
      }
    }
    function li(t, e, n, r = console.log) {
      const a = (function (t) {
          let e = !0;
          const n = [],
            r = [];
          for (const e in t.nodesByDepth) n.push(t.nodesByDepth[e]);
          for (const t of n) {
            if (
              t.length > 1 ||
              (1 === t.length && t[0].inboundLayers.length > 1)
            ) {
              e = !1;
              break;
            }
            r.push(...t);
          }
          if (e)
            for (const n of t.layers) {
              let t = !1;
              for (const a of n.inboundNodes)
                if (-1 !== r.indexOf(a)) {
                  if (t) {
                    e = !1;
                    break;
                  }
                  t = !0;
                }
              if (!e) break;
            }
          return e;
        })(t),
        i = ["Layer (type)", "Output shape", "Param #"];
      let o;
      if (
        (a
          ? ((e = e || 65), (n = n || [0.45, 0.85, 1]))
          : ((e = e || 98), (n = n || [0.33, 0.55, 0.67, 1])),
        n[n.length - 1] <= 1 && (n = n.map((t) => Math.floor(e * t))),
        !a)
      ) {
        i.push("Receives inputs"), (o = []);
        for (const e in t.nodesByDepth) o.push(...t.nodesByDepth[e]);
      }
      r("_".repeat(e)), hi(i, n, r), r("=".repeat(e));
      const s = t.layers;
      for (let t = 0; t < s.length; ++t)
        a ? di(s[t], n, r) : pi(s[t], n, o, r),
          r((t === s.length - 1 ? "=" : "_").repeat(e));
      t.checkTrainableWeightsConsistency();
      const u = (function (t) {
          let e;
          e =
            null != t.collectedTrainableWeights
              ? ga(t.collectedTrainableWeights)
              : ga(t.trainableWeights);
          return e;
        })(t),
        c = ga(t.nonTrainableWeights);
      r("Total params: " + (u + c)),
        r("Trainable params: " + u),
        r("Non-trainable params: " + c),
        r("_".repeat(e));
    }
    function hi(t, e, n = console.log) {
      let r = "";
      for (let n = 0; n < t.length; ++n)
        n > 0 && (r = r.slice(0, r.length - 1) + " "),
          (r += t[n]),
          (r = r.slice(0, e[n])),
          (r += " ".repeat(e[n] - r.length));
      n(r);
    }
    function di(t, e, n) {
      let r;
      try {
        r = JSON.stringify(t.outputShape);
      } catch (t) {
        r = "multiple";
      }
      hi(
        [`${t.name} (${t.getClassName()})`, r, t.countParams().toString()],
        e,
        n
      );
    }
    function pi(t, e, n, r) {
      let a;
      try {
        a = JSON.stringify(t.outputShape);
      } catch (t) {
        a = "multiple";
      }
      const i = [];
      for (const e of t.inboundNodes)
        if (!(null != n && n.length > 0 && -1 === n.indexOf(e)))
          for (let t = 0; t < e.inboundLayers.length; ++t) {
            const n = e.inboundLayers[t].name,
              r = e.nodeIndices[t],
              a = e.tensorIndices[t];
            i.push(`${n}[${r}][${a}]`);
          }
      const o = t.name,
        s = t.getClassName(),
        u = 0 === i.length ? "" : i[0];
      hi([`${o} (${s})`, a, t.countParams().toString(), u], e, r);
      for (let t = 1; t < i.length; ++t) hi(["", "", "", i[t]], e, r);
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ function fi(t, e, n) {
      return (
        ("inboundNodes" === t || "outputLayers" === t || "inputLayers" === t) &&
        0 === e &&
        "string" == typeof n
      );
    }
    function mi(t, e) {
      if (null === t) return null;
      if ("string" == typeof t) return Bn(t);
      if ("number" == typeof t || "boolean" == typeof t) return t;
      if (t instanceof Array) {
        const n = [],
          r = t.length;
        for (let a = 0; a < r; ++a) {
          const r = t[a];
          fi(e, a, r) ? n.push(r) : n.push(mi(r, e));
        }
        return n;
      }
      {
        const e = {};
        for (const n of Object.keys(t)) {
          const r = t[n];
          if ("name" === n && "string" == typeof r) e[n] = r;
          else {
            const t = Bn(n);
            e[t] = mi(r, t);
          }
        }
        return e;
      }
    }
    class gi {
      constructor(t) {
        if (
          ((this.id2Value = {}),
          (this.id2Mask = {}),
          (this.name2Id = {}),
          t instanceof gi)
        )
          for (const e in t.id2Value)
            (this.id2Value[e] = t.id2Value[e]),
              e in t.id2Mask && (this.id2Mask[e] = t.id2Mask[e]);
        else {
          if (null == t) return;
          for (const e of t) this.add(e.key, e.value);
        }
      }
      add(t, e, n) {
        if (null != this.id2Value[t.id])
          throw new Rn(`Duplicate key: name=${t.name}, id=${t.id}`);
        return (
          (this.id2Value[t.id] =
            /**
             * @license
             * Copyright 2018 Google LLC
             *
             * Use of this source code is governed by an MIT-style
             * license that can be found in the LICENSE file or at
             * https://opensource.org/licenses/MIT.
             * =============================================================================
             */
            (function (t, e) {
              if (null == t.dtype || t.dtype === e.dtype) return e;
              try {
                return Object(En.O)(e, t.dtype);
              } catch (n) {
                throw new Rn(
                  `The dtype of the feed (${e.dtype}) can not be cast to the dtype of the key '${t.name}' (${t.dtype}).`
                );
              }
            })(t, e)),
          (this.name2Id[t.name] = t.id),
          null != n && (this.id2Mask[t.id] = n),
          this
        );
      }
      addFeed(t) {
        this.add(t.key, t.value);
      }
      hasKey(t) {
        return null != this.id2Value[t.id];
      }
      names() {
        return Object.keys(this.name2Id);
      }
      getValue(t) {
        if (t instanceof wa) {
          if (null == this.id2Value[t.id])
            throw new Rn("Nonexistent key: " + t.name);
          return this.id2Value[t.id];
        }
        {
          const e = this.name2Id[t];
          if (null == e)
            throw new Rn("Feed dict has no SymbolicTensor name: " + t);
          return this.id2Value[e];
        }
      }
      getMask(t) {
        if (t instanceof wa) {
          if (null == this.id2Value[t.id])
            throw new Rn("Nonexistent key: " + t.name);
          return this.id2Mask[t.id];
        }
        {
          const e = this.name2Id[t];
          if (null == e)
            throw new Rn("Feed dict has no SymbolicTensor name: " + t);
          return this.id2Mask[e];
        }
      }
      disposeMasks() {
        null != this.id2Mask && Object(En.hb)(this.id2Mask);
      }
    }
    const bi = {},
      vi = {};
    function yi(t, e, n, r) {
      const a = null != n && n.training,
        i = Array.isArray(t),
        o = i ? t : [t],
        s = o.map((t) => t.name),
        u = [],
        c = e.names();
      for (const t of s)
        -1 !== c.indexOf(t) ? u.push(e.getValue(t)) : u.push(null);
      null != r && ((r.maxNumTensors = -1 / 0), (r.minNumTensors = 1 / 0));
      const l = s.join(",") + "|" + e.names().join(",");
      let h, d;
      if (null == bi[l]) {
        const t = (function (t, e) {
          En.Cd.assert(
            null != t && t.length > 0,
            () => "Expected at least one fetch, got none"
          );
          let n = [],
            r = {};
          if (1 === t.length) {
            const a = wi(t[0], e);
            (n = a.sorted), (r = a.recipientMap);
          } else {
            const a = new Set();
            for (const i of t) {
              const { sorted: t, recipientMap: o } = wi(i, e);
              for (const e of t) a.has(e.name) || (n.push(e), a.add(e.name));
              for (const t in o)
                null == r[t] && (r[t] = new Set()),
                  o[t].forEach((e) => r[t].add(e));
            }
          }
          return { sorted: n, recipientCounts: xi(r) };
        })(o, e);
        (h = t.sorted), (d = t.recipientCounts), (bi[l] = h), (vi[l] = d);
      }
      (h = bi[l]), (d = {}), a || Object.assign(d, vi[l]);
      const p = new gi(e);
      for (let t = 0; t < h.length; ++t) {
        if (null != r) {
          const t = Object(En.ec)().numTensors;
          t > r.maxNumTensors && (r.maxNumTensors = t),
            t < r.minNumTensors && (r.minNumTensors = t);
        }
        const i = h[t],
          o = i.sourceLayer;
        if (o instanceof Ia) continue;
        const c = [],
          l = [],
          f = [];
        let m = !1;
        for (const t of i.inputs) {
          const n = p.getValue(t),
            r = p.getMask(t);
          c.push(n),
            l.push(r),
            null != r && (m = !0),
            a ||
              (d[t.name]--,
              0 !== d[t.name] ||
                e.hasKey(t) ||
                -1 !== s.indexOf(t.name) ||
                n.isDisposed ||
                !0 === t.sourceLayer.stateful ||
                f.push(n));
        }
        m && ((n = n || {}).mask = l[0]);
        const g = jn(o.apply(c, n));
        let b = null;
        o.supportsMasking && (b = o.computeMask(c, l));
        const v = Ci(i),
          y = Array.isArray(v) ? v : [v];
        for (let t = 0; t < y.length; ++t) {
          p.hasKey(y[t]) || p.add(y[t], g[t], Array.isArray(b) ? b[0] : b);
          const e = s.indexOf(y[t].name);
          -1 !== e && (u[e] = g[t]);
        }
        a || Object(En.hb)(f);
      }
      return p.disposeMasks(), i ? u : u[0];
    }
    function xi(t) {
      const e = {};
      for (const n in t) e[n] = t[n].size;
      return e;
    }
    function wi(t, e) {
      const n = new Set(),
        r = [],
        a = {};
      for (const t of e.names()) n.add(t);
      const i = [],
        o = [];
      for (i.push(t); i.length > 0; ) {
        const t = i[i.length - 1];
        if (n.has(t.name)) {
          i.pop();
          continue;
        }
        const e = o[o.length - 1] === i.length - 1;
        if (0 === t.inputs.length || e)
          i.pop(), r.push(t), n.add(t.name), e && o.pop();
        else {
          o.push(i.length - 1);
          for (const e of t.inputs)
            null == a[e.name] && (a[e.name] = new Set()),
              a[e.name].add(t.name),
              n.has(e.name) || i.push(e);
        }
      }
      return { sorted: r, recipientMap: a };
    }
    function Ci(t) {
      let e;
      if (1 === t.sourceLayer.inboundNodes.length) e = t.sourceLayer.output;
      else {
        let n = null;
        for (let e = 0; e < t.sourceLayer.inboundNodes.length; ++e)
          for (const r of t.sourceLayer.inboundNodes[e].outputTensors)
            if (r.id === t.id) {
              n = e;
              break;
            }
        e = t.sourceLayer.getOutputAt(n);
      }
      return e;
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ class Oi extends Sa {
      constructor(t) {
        if (
          (super({}),
          (this.containerNodes = new Set()),
          (this.name = t.name),
          null == this.name)
        ) {
          const t = this.getClassName().toLowerCase();
          this.name = ha(t);
        }
        if (
          ((this.supportsMasking = !1),
          (this.trainable_ = !0),
          Array.isArray(t.inputs)
            ? (this.inputs = t.inputs.slice())
            : (this.inputs = [t.inputs]),
          Array.isArray(t.outputs)
            ? (this.outputs = t.outputs.slice())
            : (this.outputs = [t.outputs]),
          Vn(this.inputs).length !== this.inputs.length)
        )
          throw new Rn(
            "The list of inputs passed to the model is redundant. All inputs should only appear once. Found: " +
              this.inputs.map((t) => t.name)
          );
        Vn(this.outputs).length !== this.outputs.length &&
          console.warn(
            "The list of outputs passed to the model is redundant. All outputs should only appear once. Found: " +
              this.outputs.map((t) => t.name)
          ),
          (this.inputLayers = []),
          (this.inputLayersNodeIndices = []),
          (this.inputLayersTensorIndices = []),
          (this.outputLayers = []),
          (this.outputLayersNodeIndices = []),
          (this.outputLayersTensorIndices = []),
          (this.layers = []),
          (this.internalContainerRefs = []);
        for (const t of this.outputs) {
          const e = t.sourceLayer,
            n = t.nodeIndex,
            r = t.tensorIndex;
          this.outputLayers.push(e),
            this.outputLayersNodeIndices.push(n),
            this.outputLayersTensorIndices.push(r);
        }
        for (const t of this.inputs) {
          const e = t.sourceLayer,
            n = t.nodeIndex,
            r = t.tensorIndex;
          Dn(0 === n, "input layer has >1 nodes"),
            Dn(0 === r, "input layer has >1 tensors"),
            this.inputLayers.push(e),
            this.inputLayersNodeIndices.push(n),
            this.inputLayersTensorIndices.push(r);
        }
        (this.inputNames = []),
          (this.outputNames = []),
          (this.feedInputShapes = []),
          (this.feedInputNames = []),
          (this.feedOutputNames = []);
        for (let e = 0; e < this.inputLayers.length; e++) {
          const n = this.inputLayers[e];
          if (!(n instanceof Ia))
            throw new TypeError(
              `Input layers to a LayersModel must be InputLayer objects. Received inputs: ${
                t.inputs
              }. Input ${e} (0-based) originates from layer type ${n.getClassName()}.`
            );
          this.inputNames.push(n.name),
            this.feedInputShapes.push(n.batchInputShape),
            this.feedInputNames.push(n.name);
        }
        for (const t of this.outputLayers) this.outputNames.push(t.name);
        (this.internalInputShapes = this.inputs.map((t) => t.shape)),
          (this.internalOutputShapes = this.outputs.map((t) => t.shape));
        const e = {},
          n = {},
          r = {},
          a = {},
          i = {},
          o = [],
          s = (t, e, n, r, a, u) => {
            (null != r && null != a && null != u) ||
              ((r = t.sourceLayer), (a = t.nodeIndex), (u = t.tensorIndex));
            const c = r.inboundNodes[a];
            if (-1 !== n.indexOf(c))
              throw new Nn(
                `The tensor ${t.name} at layer "${r.name}" is part of a cycle.`
              );
            if (-1 !== e.indexOf(c)) return;
            this.containerNodes.add(Oi.nodeKey(r, a)),
              r.id in i || (i[r.id] = Object.keys(i).length),
              -1 === n.indexOf(c) && n.push(c);
            const l = c.inboundLayers.length;
            for (let t = 0; t < l; t++) {
              const r = c.inputTensors[t],
                a = c.inboundLayers[t],
                i = c.nodeIndices[t],
                o = c.tensorIndices[t];
              s(r, e, n, a, i, o);
            }
            for (e.push(c); n.indexOf(c) >= 0; ) n.splice(n.indexOf(c), 1);
            o.push(c);
          },
          u = [],
          c = [];
        for (const t of this.outputs) s(t, u, c);
        const l = o.slice().reverse();
        for (const t of l) {
          (n[t.id] = t), t.id in e || (e[t.id] = 0);
          let i = e[t.id];
          const o = null == r[t.outboundLayer.id] ? 0 : r[t.outboundLayer.id];
          (i = Math.max(i, o)),
            (r[t.outboundLayer.id] = i),
            (a[t.outboundLayer.id] = t.outboundLayer),
            (e[t.id] = i);
          for (let r = 0; r < t.inboundLayers.length; r++) {
            const a = t.inboundLayers[r],
              o = t.nodeIndices[r],
              s = a.inboundNodes[o],
              u = null == e[s.id] ? 0 : e[s.id];
            (e[s.id] = Math.max(i + 1, u)), (n[s.id] = s);
          }
        }
        const h = {};
        for (const t in e) {
          const r = e[t];
          r in h || (h[r] = []), h[r].push(n[t]);
        }
        const d = {};
        for (const t in r) {
          const e = r[t];
          e in d || (d[e] = []), d[e].push(a[t]);
        }
        let p = Object.keys(d)
          .map((t) => parseInt(t, 10))
          .sort(Wn);
        this.layers = [];
        for (const t of p) {
          const e = d[t];
          e.sort((t, e) => {
            const n = i[t.id],
              r = i[e.id];
            return n < r ? -1 : n > r ? 1 : 0;
          });
          for (const t of e)
            t instanceof Oi && this.internalContainerRefs.push(t),
              this.layers.push(t);
        }
        (this.layersByDepth = d),
          (p = Object.keys(h)
            .map((t) => parseInt(t, 10))
            .sort(Wn));
        const f = this.inputs.slice(),
          m = [];
        for (const t of p)
          for (const e of h[t]) {
            const t = e.outboundLayer;
            if (null != t) {
              for (const n of e.inputTensors)
                if (-1 === f.indexOf(n))
                  throw new Nn(
                    "Graph disconnected: cannot obtain value for tensor " +
                      n +
                      ` at layer "${t.name}". The following previous layers were accessed without issue: ` +
                      m
                  );
              for (const t of e.outputTensors) f.push(t);
              m.push(t.name);
            }
          }
        this.nodesByDepth = h;
        const g = this.layers.map((t) => t.name);
        for (const t of g) {
          const e = g.filter((e) => e === t).length;
          if (1 !== e)
            throw new Nn(
              `The name "${t}" is used ${e} times in the model. All layer names should be unique. Layer names: ` +
                JSON.stringify(g)
            );
        }
        (this.outboundNodes = []),
          (this.inboundNodes = []),
          new Oa({
            outboundLayer: this,
            inboundLayers: [],
            nodeIndices: [],
            tensorIndices: [],
            inputTensors: this.inputs,
            outputTensors: this.outputs,
            inputMasks: this.inputs.map((t) => null),
            outputMasks: this.outputs.map((t) => null),
            inputShapes: this.inputs.map((t) => t.shape),
            outputShapes: this.outputs.map((t) => t.shape),
          }),
          (this.built = !0),
          (this._refCount = 1);
      }
      assertNotDisposed() {
        if (0 === this._refCount)
          throw new Error(`Container '${this.name}' is already disposed.`);
      }
      dispose() {
        this.assertNotDisposed();
        const t = { refCountAfterDispose: null, numDisposedVariables: 0 };
        if (0 == --this._refCount) {
          for (const e of this.layers)
            t.numDisposedVariables += e.dispose().numDisposedVariables;
          for (const e of this.internalContainerRefs)
            t.numDisposedVariables += e.dispose().numDisposedVariables;
        }
        return (t.refCountAfterDispose = this._refCount), t;
      }
      get trainable() {
        return this.trainable_;
      }
      set trainable(t) {
        this.layers.forEach((e) => {
          e._trainableWeights.forEach((e) => (e.trainable = t));
        }),
          (this.trainable_ = t);
      }
      get trainableWeights() {
        if (this._trainableWeights.length > 0)
          throw new Rn(
            "Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array."
          );
        if (!this.trainable) return [];
        let t = [];
        for (const e of this.layers) t = t.concat(e.trainableWeights);
        return t;
      }
      get nonTrainableWeights() {
        const t = [];
        for (const e of this.layers) t.push(...e.nonTrainableWeights);
        if (!this.trainable) {
          const e = [];
          for (const t of this.layers) e.push(...t.trainableWeights);
          return e.concat(t);
        }
        return t;
      }
      get weights() {
        return this.trainableWeights.concat(this.nonTrainableWeights);
      }
      loadWeights(t, e = !0) {
        const n = {};
        let r = 0;
        for (const t of this.layers)
          for (const e of t.weights) {
            if (null != n[e.originalName])
              throw new Rn("Duplicate weight name: " + e.originalName);
            (n[e.originalName] = e), r++;
          }
        const a = [];
        for (const r in t) {
          let i = r;
          if (null == n[r]) {
            const t = r.split("/");
            i = t
              .slice(0, -2)
              .concat([t[t.length - 1]])
              .join("/");
          }
          if (null != n[i]) a.push([n[i], t[r]]);
          else if (e)
            throw new Rn("Provided weight data has no target variable: " + r);
          delete n[i];
        }
        if (e) {
          const t = [];
          for (const e in n) t.push(e);
          if (t.length > 0)
            throw new Rn(`${t.length} of ${r} weights are not set: ` + t);
        }
        ya(a);
      }
      updatedConfig() {
        const t = this.getConfig(),
          e = {};
        return (
          (e.className = this.getClassName()),
          (e.config = t),
          (e.kerasVersion = "tfjs-layers 2.0.1"),
          (e.backend = "TensorFlow.js"),
          e
        );
      }
      toJSON(t, e = !0) {
        const n = (function t(e, n) {
          if (null == e) return null;
          if ("string" == typeof e) return $n(e);
          if ("number" == typeof e || "boolean" == typeof e) return e;
          if (e instanceof Array) {
            const r = [],
              a = e.length;
            for (let i = 0; i < a; ++i) {
              const a = e[i];
              fi(n, i, a) ? r.push(a) : r.push(t(a, n));
            }
            return r;
          }
          {
            const n = {};
            for (const r of Object.keys(e)) {
              const a = e[r],
                i = $n(r);
              n[i] =
                ("name" !== r && "className" !== r) || "string" != typeof a
                  ? t(a, r)
                  : a;
            }
            return n;
          }
        })(/** @license See the LICENSE file. */ this.updatedConfig());
        return e ? JSON.stringify(n) : n;
      }
      call(t, e) {
        return Object(En.ud)(() => {
          t = jn(t);
          const n = new gi();
          for (let e = 0; e < this.inputs.length; ++e)
            n.add(this.inputs[e], t[e]);
          return yi(this.outputs, n, e);
        });
      }
      computeMask(t, e) {
        return Object(En.ud)(() => {
          let n;
          return (
            (t = jn(t)),
            (n = null == e ? _n(null, t.length) : jn(e)),
            this.runInternalGraph(t, n)[1]
          );
        });
      }
      computeOutputShape(t) {
        const e = pa(t);
        if (e.length !== this.inputLayers.length)
          throw new Rn(
            `Invalid inputShape argument ${t}: model has ${this.inputLayers.length} tensor inputs.`
          );
        const n = {};
        for (let t = 0; t < e.length; t++) {
          const r = this.inputLayers[t],
            a = e[t];
          n[r.name + "_0_0"] = a;
        }
        const r = Object.keys(this.nodesByDepth)
          .map((t) => parseInt(t, 10))
          .sort(Wn);
        if (r.length > 1)
          for (const t of r) {
            const e = this.nodesByDepth[t];
            for (const t of e) {
              const e = t.outboundLayer;
              if (-1 !== this.inputLayers.map((t) => t.id).indexOf(e.id))
                continue;
              const r = [];
              for (let e = 0; e < t.inboundLayers.length; e++) {
                const a = t.inboundLayers[e],
                  i = t.nodeIndices[e],
                  o = t.tensorIndices[e],
                  s = n[`${a.name}_${i}_${o}`];
                r.push(s);
              }
              const a = pa(e.computeOutputShape(Mn(r))),
                i = e.inboundNodes.indexOf(t);
              for (let t = 0; t < a.length; t++) {
                n[`${e.name}_${i}_${t}`] = a[t];
              }
            }
          }
        const a = [],
          i = [];
        for (let t = 0; t < this.outputLayers.length; t++) {
          const e = this.outputLayers[t],
            n = this.outputLayersNodeIndices[t],
            r = this.outputLayersTensorIndices[t],
            a = `${e.name}_${n}_${r}`;
          i.push(a);
        }
        for (let t = 0; t < i.length; t++) {
          const e = i[t];
          Dn(e in n), a.push(n[e]);
        }
        return Mn(a);
      }
      runInternalGraph(t, e) {
        null == e && (e = _n(null, t.length));
        const n = {};
        for (let r = 0; r < this.inputs.length; ++r) {
          const a = this.inputs[r],
            i = t[r],
            o = e[r];
          n[a.id] = [i, o];
        }
        const r = Object.keys(this.nodesByDepth)
          .map((t) => parseInt(t, 10))
          .sort(Wn);
        for (const t of r) {
          const e = this.nodesByDepth[t];
          for (const t of e) {
            const e = t.outboundLayer,
              r = t.inputTensors,
              a = t.outputTensors,
              i = new Array();
            for (const t of r) t.id in n && i.push(n[t.id]);
            if (i.length === r.length) {
              let r,
                o,
                s,
                u,
                c = {};
              if ((null != t.callArgs && (c = t.callArgs), 1 === i.length)) {
                const [t, n] = i[0];
                null == c.mask && (c.mask = n),
                  (s = jn(e.call(t, c))),
                  (u = jn(e.computeMask(t, n))),
                  (r = [t]),
                  (o = [n]);
              } else
                (r = i.map((t) => t[0])),
                  (o = i.map((t) => t[1])),
                  null == c.mask && (c.mask = o),
                  (s = jn(e.call(r, c))),
                  (u = jn(e.computeMask(r, o)));
              if (e.activityRegularizer)
                throw new An(
                  "LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet."
                );
              for (let t = 0; t < a.length; ++t) {
                const e = a[t],
                  r = s[t],
                  i = u[t];
                n[e.id] = [r, i];
              }
            }
          }
        }
        const a = [],
          i = [],
          o = [];
        for (const t of this.outputs) {
          Dn(t.id in n, `Could not compute output ${t.name} : ${t.id}`);
          const [e, r] = n[t.id];
          o.push(e.shape), a.push(e), i.push(r);
        }
        return [a, i, o];
      }
      buildNodeConversionMap(t) {
        const e = {};
        let n;
        for (const t of this.layers) {
          n = t instanceof Oi ? 1 : 0;
          for (let r = 0; r < t.inboundNodes.length; r++) {
            const a = Oi.nodeKey(t, r);
            this.containerNodes.has(a) && ((e[a] = n), (n += 1));
          }
        }
        return e;
      }
      getLayer(t, e) {
        if (null != e) {
          if (this.layers.length <= e)
            throw new Rn(
              `Was asked to retrieve layer at index ${e}, but model only has ${this.layers.length} layer(s).`
            );
          return this.layers[e];
        }
        if (null == t)
          throw new Rn("Provide either a layer name or layer index");
        for (const e of this.layers) if (e.name === t) return e;
        throw new Rn("No such layer: " + t);
      }
      calculateLosses() {
        return Object(En.ud)(() => {
          const t = [];
          for (const e of this.layers)
            for (let n = 0; n < e.inboundNodes.length; ++n) {
              const r = Oi.nodeKey(e, n);
              this.containerNodes.has(r) && t.push(...e.calculateLosses());
            }
          return t;
        });
      }
      getConfig() {
        const t = { name: this.name },
          e = this.buildNodeConversionMap(this.layers),
          n = [];
        for (const t of this.layers) {
          const r = t.getClassName(),
            a = t.getConfig(),
            i = [];
          for (let n = 0; n < t.inboundNodes.length; n++) {
            const r = t.inboundNodes[n],
              a = Oi.nodeKey(t, n);
            let o = {};
            if (this.containerNodes.has(a)) {
              if (r.callArgs)
                try {
                  JSON.stringify(r.callArgs), (o = r.callArgs);
                } catch (e) {
                  console.warn(
                    `Layer ${t.name} was passed non-serializable keyword arguments: ` +
                      r.callArgs +
                      ". They will not be included in the serialized model (and thus will be missing at deserialization time)."
                  ),
                    (o = {});
                }
              if (r.inboundLayers.length > 0) {
                const t = [];
                for (let n = 0; n < r.inboundLayers.length; n++) {
                  const a = r.inboundLayers[n],
                    i = r.nodeIndices[n],
                    s = r.tensorIndices[n];
                  let u = e[Oi.nodeKey(a, i)];
                  null == u && (u = 0), t.push([a.name, u, s, o]);
                }
                i.push(t);
              }
            }
          }
          const o = {};
          (o.name = t.name),
            (o.className = r),
            (o.config = a),
            (o.inboundNodes = i),
            n.push(o);
        }
        t.layers = n;
        const r = [];
        for (let t = 0; t < this.inputLayers.length; t++) {
          const n = this.inputLayers[t],
            a = this.inputLayersNodeIndices[t],
            i = Oi.nodeKey(n, a);
          if (!this.containerNodes.has(i)) continue;
          let o = e[i];
          null == o && (o = 0);
          const s = this.inputLayersTensorIndices[t];
          r.push([n.name, o, s]);
        }
        t.inputLayers = r;
        const a = [];
        for (let t = 0; t < this.outputLayers.length; t++) {
          const n = this.outputLayers[t],
            r = this.outputLayersNodeIndices[t],
            i = Oi.nodeKey(n, r);
          if (!this.containerNodes.has(i)) continue;
          let o = e[i];
          null == o && (o = 0);
          const s = this.outputLayersTensorIndices[t];
          a.push([n.name, o, s]);
        }
        return (t.outputLayers = a), t;
      }
      static fromConfig(t, e, n = {}, r = !1) {
        const a = {},
          i = {};
        function o(t, e) {
          t.name in i ? i[t.name].push(e) : (i[t.name] = [e]);
        }
        function s(t, e) {
          const n = [];
          let r;
          for (const i of e) {
            const s = i[0],
              u = i[1],
              c = i[2];
            if (((r = null == i[3] ? {} : i[3]), !(s in a)))
              return void o(t, e);
            const l = a[s];
            if (l.inboundNodes.length <= u) return void o(t, e);
            const h = l.inboundNodes[u];
            n.push(h.outputTensors[c]);
          }
          n.length > 0 && t.apply(Mn(n), r);
        }
        function u(t) {
          const n = t.name,
            i = Pa(t, null != e.customObjects ? e.customObjects : {});
          i.setFastWeightInitDuringBuild(r), (a[n] = i);
          t.inboundNodes.forEach((t) => {
            if (!(t instanceof Array))
              throw new Rn(
                "Corrupted configuration, expected array for nodeData: " + t
              );
            o(i, t);
          });
        }
        const c = e.name,
          l = e.layers;
        for (const t of l) u(t);
        for (; !Un(i); )
          for (const t of l) {
            const e = a[t.name];
            if (e.name in i) {
              const t = i[e.name];
              delete i[e.name];
              for (const n of t) s(e, n);
            }
          }
        const h = [],
          d = [],
          p = e.inputLayers;
        for (const t of p) {
          const e = t[0],
            n = t[1],
            r = t[2];
          Dn(e in a);
          const i = a[e].inboundNodes[n].outputTensors;
          h.push(i[r]);
        }
        const f = e.outputLayers;
        for (const t of f) {
          const e = t[0],
            n = t[1],
            r = t[2];
          Dn(e in a);
          const i = a[e].inboundNodes[n].outputTensors;
          d.push(i[r]);
        }
        return new t({ inputs: h, outputs: d, name: c });
      }
      get stateful() {
        if (this._stateful)
          throw new Rn(
            "Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false."
          );
        for (const t of this.layers) if (t.stateful) return !0;
        return !1;
      }
      resetStates() {
        Object(En.ud)(() => {
          this.layers.forEach((t) => {
            t.stateful && t.resetStates();
          });
        });
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ function Ei(t, e, n) {
      const r = e.length;
      if (null == t || (Array.isArray(t) && 0 === t.length))
        return e.map((t) => null);
      if (1 === r)
        return Array.isArray(t) && 1 === t.length
          ? t
          : "object" == typeof t && e[0] in t
          ? [t[e[0]]]
          : [t];
      if (Array.isArray(t)) {
        if (t.length !== r)
          throw new Error(
            `Provided ${n} is an array of ${t.length} element(s), but the model has ${r} outputs. Make sure a set of weights is provided for each model output.`
          );
        return t;
      }
      if (
        "object" == typeof t &&
        Object.keys(t).length > 0 &&
        "object" == typeof t[Object.keys(t)[0]]
      ) {
        const n = [];
        return (
          e.forEach((e) => {
            e in t ? n.push(t[e]) : n.push(null);
          }),
          n
        );
      }
      throw new Error(
        `The model has multiple (${r}) outputs, so ${n} must be either an array with ${r} elements or an object with ${e} keys. Provided ${n} not understood: ${JSON.stringify(
          t
        )}`
      );
    }
    function Si(t, e) {
      return Ei(t, e, "classWeight");
    }
    async function Ii(t, e, n, r) {
      if (null != e || null != r)
        throw new Error("Support sampleWeight is not implemented yet");
      if (null != n) {
        const e = Object(En.ud)(() => {
            if (1 === t.shape.length) return t.clone();
            if (2 === t.shape.length) {
              if (t.shape[1] > 1) {
                const e = 1;
                return t.argMax(e);
              }
              if (1 === t.shape[1]) return t.reshape([t.shape[0]]);
              throw new Error(
                `Encountered unexpected last-dimension size (${t.shape[1]}) during handling of class weights. The size is expected to be >= 1.`
              );
            }
            throw new Error(
              `Unexpected rank of target (y) tensor (${t.rank}) during handling of class weights. The rank is expected to be 1 or 2.`
            );
          }),
          r = Array.from(await e.data());
        Object(En.hb)(e);
        const a = [];
        return (
          r.forEach((t) => {
            if (null == n[t])
              throw new Error(
                `classWeight must contain all classes in the training data. The class ${t} exists in the data but not in classWeight`
              );
            a.push(n[t]);
          }),
          Object(En.qd)(a, "float32")
        );
      }
      return null;
    }
    function ki(t, e) {
      return Object(En.jc)(t, e);
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ function Ni(t, e) {
      let n, r;
      const a = e;
      (n = a.xs),
        (r = a.ys),
        En.Cd.assert(
          null != n && null != r,
          () =>
            "A Dataset iterator for fitDataset() is expected to generate objects of the form `{xs: xVal, ys: yVal}`, where the two values may be `tf.Tensor`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates " +
            e
        );
      const i = Ri("input", t.inputNames, n),
        o = Ri("output", t.outputNames, r),
        s = i[0].shape[0];
      En.Cd.assert(
        i.length === t.inputs.length,
        () =>
          `LayersModel has ${t.inputs.length} inputs, but the dataset provides ${i.length} inputs.  (Expected input keys: ` +
          JSON.stringify(t.inputNames) +
          ")"
      ),
        En.Cd.assert(
          o.length === t.outputs.length,
          () =>
            `LayersModel has ${t.outputs.length} outputs, but the dataset provides ${o.length} outputs.  (Expected output keys: ` +
            JSON.stringify(t.outputNames) +
            ")"
        );
      for (let e = 0; e < i.length; e++)
        En.Cd.assert(
          i[e].shape[0] === s,
          () =>
            `Batch size mismatch: input ${t.inputNames[e]} has ${i[e].shape[0]}; expected  ${s} based on input ${t.inputNames[0]}.`
        );
      for (let e = 0; e < o.length; e++)
        En.Cd.assert(
          o[e].shape[0] === s,
          () =>
            `Batch size mismatch: output ${t.outputNames[e]} has ${o[e].shape[0]}; expected  ${s} based on input ${t.inputNames[0]}.`
        );
      return { xs: i, ys: o };
    }
    function Ri(t, e, n) {
      if (n instanceof En.l) return [n];
      if (Array.isArray(n))
        return (
          En.Cd.assert(
            n.length === e.length,
            () =>
              `Received an array of ${n.length} Tensors, but expected ${e.length} to match the ${t} keys ${e}.`
          ),
          n
        );
      {
        const r = [];
        for (const a of e) {
          if (null == n[a])
            throw new Rn(
              `The feature data generated by the dataset lacks the required ${t} key '${a}'.`
            );
          r.push(n[a]);
        }
        return r;
      }
    }
    async function Ai(t, e, n) {
      const r = null != n.batchesPerEpoch;
      if (
        (En.Cd.assert(
          null != t.optimizer,
          () =>
            "You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."
        ),
        En.Cd.assert(
          null != n,
          () =>
            "For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."
        ),
        En.Cd.assert(
          null != n.epochs && n.epochs > 0 && Number.isInteger(n.epochs),
          () =>
            "For fitDataset(), config.epochs is expected to be a positive integer, but got " +
            n.epochs
        ),
        En.Cd.assert(
          !r || (n.batchesPerEpoch > 0 && Number.isInteger(n.batchesPerEpoch)),
          () =>
            "For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got " +
            n.batchesPerEpoch
        ),
        En.Cd.assert(
          null == n.validationSplit,
          () =>
            "`validationSplit` is not supported by `fitDataset()`. Use validationData instead."
        ),
        t.isTraining)
      )
        throw new Error(
          "Cannot start training because another fit() call is ongoing."
        );
      t.isTraining = !0;
      try {
        const a = null != n.validationData;
        let i, o;
        if (a)
          if (Ti(n.validationData))
            En.Cd.assert(
              null == n.validationBatches ||
                (n.validationBatches > 0 &&
                  Number.isInteger(n.validationBatches)),
              () =>
                "For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got " +
                n.validationBatches
            );
          else {
            const t = (function (t) {
              if (3 === t.length)
                throw new An(
                  "Validation with sample weights is not implemented yet."
                );
              return { xs: t[0], ys: t[1] };
            })(n.validationData);
            (i = t.xs), (o = t.ys);
          }
        const s = t.makeTrainFunction(),
          u = t.getDedupedMetricsNames();
        let c;
        c = a ? u.slice().concat(u.map((t) => "val_" + t)) : u.slice();
        const l = ja(n.callbacks, n.yieldEvery),
          h = null == n.verbose ? 1 : n.verbose,
          { callbackList: d, history: p } = Ba(
            l,
            h,
            n.epochs,
            null,
            null,
            (function (t, e) {
              let n = null;
              null != e.batchesPerEpoch
                ? (n = e.batchesPerEpoch)
                : Number.isFinite(t.size) && (n = t.size);
              return n;
            })(e, n),
            null,
            a,
            c
          );
        d.setModel(t),
          (t.history = p),
          await d.onTrainBegin(),
          (t.stopTraining_ = !1);
        let f = null == n.initialEpoch ? 0 : n.initialEpoch,
          m = await e.iterator();
        for (; f < n.epochs; ) {
          const c = {};
          await d.onEpochBegin(f);
          let l = 0,
            h = 0;
          for (r || (m = await e.iterator()); !r || l < n.batchesPerEpoch; ) {
            const e = await m.next();
            if (r && e.done) {
              console.warn(
                "You provided `batchesPerEpoch` as " +
                  n.batchesPerEpoch +
                  ", but your dataset iterator ran out of data after " +
                  l +
                  " batches; interrupting training. Make sure that your dataset can generate at least `batchesPerEpoch * epochs` batches (in this case, " +
                  n.batchesPerEpoch * n.epochs +
                  " batches). You may need to use the repeat() function when building your dataset."
              );
              break;
            }
            if (null != e.value) {
              const { xs: r, ys: a } = Ni(t, e.value),
                i = {};
              (i.batch = h),
                (i.size = r[0].shape[0]),
                await d.onBatchBegin(h, i);
              const o = [];
              if (null != n.classWeight) {
                const e = Si(n.classWeight, t.outputNames);
                for (let t = 0; t < e.length; ++t)
                  o.push(await Ii(a[t], null, e[t]));
              }
              const c = r.concat(a).concat(o),
                p = s(c);
              En.hb(c);
              for (let t = 0; t < u.length; ++t) {
                const e = u[t],
                  n = p[t];
                (i[e] = n), En.Jb(n);
              }
              await d.onBatchEnd(h, i), Ra(i), h++, l++;
            }
            if (r ? l >= n.batchesPerEpoch : e.done) {
              if (a) {
                let e;
                e = Ti(n.validationData)
                  ? jn(
                      await t.evaluateDataset(n.validationData, {
                        batches: n.validationBatches,
                      })
                    )
                  : jn(
                      t.evaluate(i, o, {
                        batchSize:
                          null == n.validationBatchSize
                            ? 32
                            : n.validationBatchSize,
                        verbose: 0,
                      })
                    );
                for (let n = 0; n < t.metricsNames.length; ++n)
                  c["val_" + t.metricsNames[n]] = e[n];
              }
              break;
            }
            if (t.stopTraining_) break;
          }
          if ((await d.onEpochEnd(f, c), f++, t.stopTraining_)) break;
        }
        return await d.onTrainEnd(), await t.history.syncData(), t.history;
      } finally {
        t.isTraining = !1;
      }
    }
    function Ti(t) {
      return "function" == typeof t.iterator;
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */
    function _i(t) {
      En.Cd.assert(
        t > 0 && Number.isInteger(t),
        () => "batchSize is required to be a positive integer, but got " + t
      );
    }
    function Di(t, e, n) {
      return null == t
        ? [null]
        : Array.isArray(t)
        ? t.map((t) => Ir(t, e, n - e))
        : Ir(t, e, n - e);
    }
    function Fi(t, e) {
      return En.ud(() =>
        null == t
          ? null
          : Array.isArray(t)
          ? t.map((t) => Fi(t, e))
          : Fr(t, "int32" === e.dtype ? e : e.toInt())
      );
    }
    function Mi(t, e) {
      const n = [];
      let r = 0,
        a = null;
      for (; r < t; ) (a = r + e), a >= t && (a = t), n.push([r, a]), (r = a);
      return n;
    }
    async function ji(t, e, n, r = {}) {
      if (t.isTraining)
        throw new Error(
          "Cannot start training because another fit() call is ongoing."
        );
      let a, i, o, s, u, c, l;
      t.isTraining = !0;
      try {
        const h = null == r.batchSize ? 32 : r.batchSize;
        _i(h);
        const d = !1,
          p = await t.standardizeUserData(
            e,
            n,
            r.sampleWeight,
            r.classWeight,
            d,
            h
          );
        (a = p[0]), (i = p[1]), (l = p[2]);
        let f,
          m = !1;
        if (null != r.validationData && r.validationData.length > 0) {
          if (((m = !0), 2 !== r.validationData.length))
            throw 3 === r.validationData.length
              ? new An(
                  "validationData including sample weights is not supported yet."
                )
              : new Rn(
                  "When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; " +
                    r.validationData +
                    " is invalid."
                );
          (o = r.validationData[0]), (s = r.validationData[1]);
          const e = !0,
            n = await t.standardizeUserData(o, s, null, null, e, h);
          (u = n[0]), (c = n[1]), (f = u.concat(c));
        } else if (
          null != r.validationSplit &&
          r.validationSplit > 0 &&
          r.validationSplit < 1
        ) {
          m = !0;
          const t = Math.floor(a[0].shape[0] * (1 - r.validationSplit)),
            e = a[0].shape[0];
          (u = Di(a, t, e)),
            (a = Di(a, 0, t)),
            (c = Di(i, t, e)),
            (i = Di(i, 0, t)),
            (f = u.concat(c));
        } else null != r.validationSteps && (m = !0);
        const g = a.concat(i).concat(l);
        t.checkTrainableWeightsConsistency();
        const b = t.makeTrainFunction(),
          v = t.getDedupedMetricsNames();
        let y, x;
        m
          ? (t.makeTestFunction(),
            (y = t.testFunction),
            (x = v.slice().concat(v.map((t) => "val_" + t))))
          : ((y = null), (f = []), (x = v.slice()));
        const w = ja(r.callbacks, r.yieldEvery);
        return await (async function (
          t,
          e,
          n,
          r,
          a,
          i,
          o,
          s,
          u,
          c,
          l,
          h,
          d,
          p,
          f
        ) {
          null == a && (a = 32),
            null == i && (i = 1),
            null == l && (l = !0),
            null == d && (d = 0);
          let m = !1;
          if (
            (null != u && null != c && (m = !0),
            null != f && ((m = !0), null == p))
          )
            throw new Rn(
              "Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set."
            );
          const g = t.checkNumSamples(n, a, p, "steps_per_epoch");
          let b;
          null != g && (b = Or(0, g)), null == o && (o = 1);
          const { callbackList: v, history: y } = Ba(s, o, i, d, g, p, a, m, h);
          v.setModel(t),
            (t.history = y),
            await v.onTrainBegin(),
            (t.stopTraining_ = !1);
          for (let o = d; o < i; ++o) {
            await v.onEpochBegin(o);
            const i = {};
            if (null != p)
              throw new An("stepsPerEpoch mode is not implemented yet.");
            {
              if ("batch" === l)
                throw new An("batch shuffling is not implemneted yet");
              l && En.Cd.shuffle(b);
              const o = Object(En.qd)(b),
                s = Mi(g, a);
              for (let l = 0; l < s.length; ++l) {
                const h = {};
                if (
                  (await v.onBatchBegin(l, h),
                  En.ud(() => {
                    const d = s[l][0],
                      p = s[l][1],
                      f = Ir(o, d, p - d);
                    (h.batch = l), (h.size = p - d);
                    const g = Fi(n, f),
                      b = e(g);
                    for (let t = 0; t < r.length; ++t) {
                      const e = r[t],
                        n = b[t];
                      (h[e] = n), En.Jb(n);
                    }
                    if (l === s.length - 1 && m) {
                      const e = t.testLoop(u, c, a);
                      for (let t = 0; t < r.length; ++t) {
                        const n = r[t],
                          a = e[t];
                        En.Jb(a), (i["val_" + n] = a);
                      }
                    }
                  }),
                  await v.onBatchEnd(l, h),
                  Ra(h),
                  t.stopTraining_)
                )
                  break;
              }
              o.dispose();
            }
            if ((await v.onEpochEnd(o, i), t.stopTraining_)) break;
          }
          return await v.onTrainEnd(), await t.history.syncData(), t.history;
        })(
          t,
          b,
          g,
          v,
          h,
          r.epochs,
          r.verbose,
          w,
          y,
          f,
          r.shuffle,
          x,
          r.initialEpoch,
          null,
          null
        );
      } finally {
        (t.isTraining = !1),
          Bi(a, e),
          Bi(i, n),
          Bi(u, o),
          Bi(c, s),
          null != l && En.hb(l);
      }
    }
    function $i(t) {
      const e = [];
      t instanceof En.l && (t = [t]);
      for (let n = 0; n < t.length; ++n) {
        const r = t[n];
        if (1 === r.rank) e.push(Sr(r, 1));
        else {
          if (0 === r.rank)
            throw new Error(
              "Expected tensor to be at least 1D, but received a 0D tensor (scalar)."
            );
          e.push(r);
        }
      }
      return e;
    }
    function Bi(t, e) {
      if (null == t) return;
      const n = [];
      if (e instanceof En.l) n.push(e.id);
      else if (Array.isArray(e)) e.forEach((t) => n.push(t.id));
      else if (null != e)
        for (const t in e) {
          const r = e[t];
          n.push(r.id);
        }
      const r = [];
      if (t instanceof En.l) -1 === n.indexOf(t.id) && r.push(t);
      else if (Array.isArray(t))
        t.forEach((t) => {
          -1 === n.indexOf(t.id) && r.push(t);
        });
      else if (null != t)
        for (const e in t) {
          const a = t[e];
          -1 === n.indexOf(a.id) && r.push(a);
        }
      r.forEach((t) => {
        t.isDisposed || t.dispose();
      });
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ function Pi(t) {
      return Array.isArray(t);
    }
    function Li(t) {
      return (
        !(function (t) {
          return t instanceof En.l;
        })(t) && !Pi(t)
      );
    }
    function zi(t, e, n, r = !0, a = "") {
      if (null == e || 0 === e.length) {
        if (null != t) {
          let e = !1;
          if (Pi(t) && t.length > 0) e = !0;
          else if (Li(t)) {
            for (const n in t)
              if (t.hasOwnProperty(n)) {
                e = !0;
                break;
              }
          } else e = !0;
          if (e)
            throw new Rn(
              `Error when checking model ${a} expected no data, but got ` + t
            );
        }
        return [];
      }
      if (null == t) return e.map((t) => null);
      let i;
      if (Li(t)) {
        (t = t), (i = []);
        for (const n of e) {
          if (null == t[n])
            throw new Rn(
              `No data provided for "${n}". Need data for each key in: ` + e
            );
          i.push(t[n]);
        }
      } else if (Pi(t)) {
        if ((t = t).length !== e.length)
          throw new Rn(
            `Error when checking model ${a}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${e.length} Tensor(s), but instead got the following list of Tensor(s): ` +
              t
          );
        i = t;
      } else {
        if (((t = t), e.length > 1))
          throw new Rn(
            `The model ${a} expects ${e.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ` +
              t.shape
          );
        i = [t];
      }
      if (((i = $i(i)), null != n))
        for (let t = 0; t < e.length; ++t) {
          if (null == n[t]) continue;
          const o = i[t];
          if (o.shape.length !== n[t].length)
            throw new Rn(
              `Error when checking ${a}: expected ${e[t]} to have ${n[t].length} dimension(s). but got array with shape ` +
                o.shape
            );
          for (let i = 0; i < n[t].length; ++i) {
            if (0 === i && !r) continue;
            const s = o.shape[i],
              u = n[t][i];
            if (null != u && u >= 0 && s !== u)
              throw new Rn(
                `Error when checking ${a}: expected ${e[t]} to have shape [${n[t]}], but got array with shape [${o.shape}].`
              );
          }
        }
      return i;
    }
    function Wi(t, e, n, r = !0, a = "") {
      let i;
      if (Array.isArray(t)) {
        if (t.length !== e.length)
          throw new Rn(
            `Error when checking model ${a}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${e.length} Tensor(s), but instead got ${t.length} Tensors(s).`
          );
        i = t;
      } else {
        if (e.length > 1)
          throw new Rn(
            `The model expects ${e.length} ${a} Tensors, but only received one Tensor. Found: array with shape ` +
              JSON.stringify(t.shape) +
              "."
          );
        i = [t];
      }
      if (null != n)
        for (let t = 0; t < e.length; ++t) {
          if (null == n[t]) continue;
          const o = i[t];
          if (o.shape.length !== n[t].length)
            throw new Rn(
              `Error when checking ${a}: expected ${e[t]} to have ${n[t].length} dimension(s), but got array with shape ` +
                JSON.stringify(o.shape)
            );
          for (let i = 0; i < n[t].length; ++i) {
            if (0 === i && !r) continue;
            const s = o.shape[i],
              u = n[t][i];
            if (null != u && u !== s)
              throw new Rn(
                `Error when checking ${a}: expected ${
                  e[t]
                } to have shape ${JSON.stringify(
                  n[t]
                )} but got array with shape ${JSON.stringify(o.shape)}.`
              );
          }
        }
    }
    class Vi extends Oi {
      constructor(t) {
        super(t), (this.isTraining = !1);
      }
      summary(t, e, n = console.log) {
        if (!this.built)
          throw new Rn(
            "This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data)."
          );
        li(this, t, e, n);
      }
      compile(t) {
        if (
          (null == t.loss && (t.loss = []),
          (this.loss = t.loss),
          "string" == typeof t.optimizer)
        )
          (this.optimizer_ = (function (t) {
            const e = {
              Adagrad: () => En.xd.adagrad(0.01),
              Adadelta: () => En.xd.adadelta(1, 0.95, In()),
              Adam: () => En.xd.adam(0.001, 0.9, 0.999, In()),
              Adamax: () => En.xd.adamax(0.002, 0.9, 0.999, In(), 0),
              RMSProp: () => En.xd.rmsprop(0.001, 0.9, 0, In()),
              SGD: () => En.xd.sgd(0.01),
            };
            if (
              ((e.adagrad = e.Adagrad),
              (e.adadelta = e.Adadelta),
              (e.adam = e.Adam),
              (e.adamax = e.Adamax),
              (e.rmsprop = e.RMSProp),
              (e.sgd = e.SGD),
              t in e)
            )
              return e[t]();
            throw new Rn("Unknown Optimizer " + t);
          })(
            /**
             * @license
             * Copyright 2019 Google LLC
             *
             * Use of this source code is governed by an MIT-style
             * license that can be found in the LICENSE file or at
             * https://opensource.org/licenses/MIT.
             * =============================================================================
             */ t.optimizer
          )),
            (this.isOptimizerOwned = !0);
        else {
          if (!(t.optimizer instanceof En.i))
            throw new Rn(
              "User-defined optimizer must be an instance of tf.Optimizer."
            );
          (this.optimizer_ = t.optimizer), (this.isOptimizerOwned = !1);
        }
        let e = [];
        if (
          Array.isArray(t.loss) ||
          "string" == typeof t.loss ||
          "function" == typeof t.loss
        )
          if (Array.isArray(t.loss)) {
            if (t.loss.length !== this.outputs.length)
              throw new Rn(
                `When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${t.loss}.`
              );
            const n = t.loss;
            e = n.map((t) => Ja(t));
          } else {
            const n = Ja(t.loss);
            this.outputs.forEach((t) => {
              e.push(n);
            });
          }
        else {
          t.loss = t.loss;
          for (const e in t.loss)
            if (-1 === this.outputNames.indexOf(e))
              throw new Rn(
                `Unknown entry in loss dictionary: "${e}". Only expected the following keys: ` +
                  this.outputNames
              );
          for (const n of this.outputNames)
            null == t.loss[n] &&
              console.warn(
                `Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`
              ),
              e.push(Ja(t.loss[n]));
        }
        (this.lossFunctions = e),
          (this.feedOutputNames = []),
          (this.feedOutputShapes = []),
          (this.feedLossFns = []);
        for (let t = 0; t < this.outputs.length; ++t) {
          const e = this.internalOutputShapes[t],
            n = this.outputNames[t];
          this.feedOutputNames.push(n),
            this.feedOutputShapes.push(e),
            this.feedLossFns.push(this.lossFunctions[t]);
        }
        const n = [];
        (this.metrics = t.metrics),
          (this.metricsNames = ["loss"]),
          (this.metricsTensors = []),
          fr("loss", () => {
            for (let t = 0; t < this.outputs.length; ++t) {
              if (-1 !== n.indexOf(t)) continue;
              const e = this.lossFunctions[t];
              this.outputs.length > 1 &&
                (this.metricsTensors.push([e, t]),
                this.metricsNames.push(this.outputNames[t] + "_loss"));
            }
          });
        const r = (function (t, e) {
            if (null == t || (Array.isArray(t) && 0 === t.length))
              return e.map((t) => []);
            let n;
            if ("string" == typeof t || "function" == typeof t) n = [t];
            else {
              if (!Array.isArray(t) && "object" != typeof t)
                throw new TypeError(
                  "Type of metrics argument not understood. Expected an string,function, Array, or Object, found: " +
                    t
                );
              n = t;
            }
            if (Array.isArray(n)) return e.map((t) => n);
            {
              const t = [];
              for (const r of e) {
                let e = n.hasOwnProperty(r) ? n[r] : [];
                Array.isArray(e) || (e = [e]), t.push(e);
              }
              return t;
            }
          })(t.metrics, this.outputNames),
          a = (t, e, n) => {
            this.outputNames.length > 1 && (e = this.outputNames[t] + "_" + e),
              this.metricsNames.push(e),
              this.metricsTensors.push([n, t]);
          };
        fr("metric", () => {
          for (let t = 0; t < this.outputs.length; ++t) {
            if (-1 !== n.indexOf(t)) continue;
            ((e) => {
              let n, r, i;
              for (const o of e) {
                if (
                  "string" == typeof o &&
                  -1 !== ["accuracy", "acc", "crossentropy", "ce"].indexOf(o)
                ) {
                  const e = this.internalOutputShapes[t];
                  let a;
                  1 === e[e.length - 1] || this.lossFunctions[t] === qa
                    ? -1 !== ["accuracy", "acc"].indexOf(o)
                      ? (r = Qa)
                      : -1 !== ["crossentropy", "ce"].indexOf(o) && (r = ni)
                    : this.lossFunctions[t] === Ha
                    ? -1 !== ["accuracy", "acc"].indexOf(o)
                      ? (r = ri)
                      : -1 !== ["crossentropy", "ce"].indexOf(o) && (r = ii)
                    : -1 !== ["accuracy", "acc"].indexOf(o)
                    ? (r = Za)
                    : -1 !== ["crossentropy", "ce"].indexOf(o) && (r = ai),
                    -1 !== ["accuracy", "acc"].indexOf(o)
                      ? (a = "acc")
                      : -1 !== ["crossentropy", "ce"].indexOf(o) && (a = "ce"),
                    (i = r),
                    (n = "" + a);
                } else {
                  const t = si(o);
                  (i = t), (n = "" + ui(o));
                }
                let e;
                fr(n, () => {
                  e = i;
                }),
                  a(t, n, e);
              }
            })(r[t]);
          }
        }),
          (this.collectedTrainableWeights = this.trainableWeights);
      }
      checkTrainableWeightsConsistency() {
        null != this.collectedTrainableWeights &&
          this.trainableWeights.length !==
            this.collectedTrainableWeights.length &&
          console.warn(
            "Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?"
          );
      }
      evaluate(t, e, n = {}) {
        const r = null == n.batchSize ? 32 : n.batchSize;
        _i(r);
        const a = this.standardizeUserDataXY(t, e, !0, r);
        try {
          const i = a[0].concat(a[1]);
          this.makeTestFunction();
          const o = this.testFunction;
          return Mn(this.testLoop(o, i, r, n.verbose, n.steps));
        } finally {
          Bi(a[0], t), Bi(a[1], e);
        }
      }
      async evaluateDataset(t, e) {
        return (
          this.makeTestFunction(),
          (async function (t, e, n) {
            const r = null != (n = n || {}).batches,
              a = t.testFunction;
            let i = [];
            if (n.verbose > 0)
              throw new An("Verbose mode is not implemented yet.");
            En.Cd.assert(
              !r || (n.batches > 0 && Number.isInteger(n.batches)),
              () =>
                "Test loop expects `batches` to be a positive integer, but received " +
                JSON.stringify(n.batches)
            );
            const o = "function" == typeof e.next ? e : await e.iterator();
            let s = 0,
              u = 0;
            for (; !r || u < n.batches; ) {
              const e = await o.next();
              if (
                ((i = En.ud(() => {
                  if (e.value) {
                    const { xs: n, ys: r } = Ni(t, e.value),
                      o = n.concat(r),
                      c = En.ud(() => a(o));
                    if ((En.hb(o), 0 === u))
                      for (let t = 0; t < c.length; ++t)
                        i.push(Object(En.Ic)(0));
                    const l = o[0].shape[0];
                    for (let t = 0; t < c.length; ++t) {
                      const e = c[t],
                        n = i[t];
                      (i[t] = En.ud(() => En.r(i[t], En.jc(l, e)))),
                        u > 0 && En.hb(n);
                    }
                    En.hb(c), (s += l), ++u;
                  }
                  return i;
                })),
                e.done)
              ) {
                r &&
                  console.warn(
                    `Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`
                  );
                break;
              }
            }
            for (let t = 0; t < i.length; ++t) {
              const e = i[t];
              (i[t] = En.ib(i[t], s)), En.hb(e);
            }
            return Mn(i);
          })(this, t, e)
        );
      }
      checkNumSamples(t, e, n, r = "steps") {
        let a;
        if (null != n) {
          if (((a = null), null != e))
            throw new Rn(
              `If ${r} is set, batchSize must be null or undefined.Got batchSize = ` +
                e
            );
        } else {
          if (null == t)
            throw new Rn(
              "Either the input data should have a defined shape, or " +
                r +
                " shoud be specified."
            );
          a = Array.isArray(t) ? t[0].shape[0] : t.shape[0];
        }
        return a;
      }
      execute(t, e) {
        if (Array.isArray(e) && 0 === e.length)
          throw new Rn("`outputs` is an empty Array, which is not allowed.");
        const n = Array.isArray(e),
          r = n ? e : [e],
          a = this.retrieveSymbolicTensors(r),
          i = new gi();
        if ((t instanceof En.l && (t = [t]), Array.isArray(t))) {
          if (t.length !== this.inputs.length)
            throw new Rn(
              `The number of inputs provided (${t.length}) does not match the number of inputs of this model (${this.inputs.length}).`
            );
          for (let e = 0; e < this.inputs.length; ++e)
            i.add(this.inputs[e], t[e]);
        } else
          for (const e of this.inputs) {
            const n = t[e.name];
            if (null == n)
              throw new Rn(
                "No value is provided for the model's input " + e.name
              );
            i.add(e, n);
          }
        const o = yi(a, i);
        return n ? o : o[0];
      }
      retrieveSymbolicTensors(t) {
        const e = _n(null, t.length);
        let n = t.length;
        for (const r of this.layers) {
          const a = Array.isArray(r.output) ? r.output : [r.output],
            i = a.map((t) => t.name);
          for (let r = 0; r < t.length; ++r) {
            const o = i.indexOf(t[r]);
            if ((-1 !== o && ((e[r] = a[o]), n--), 0 === n)) break;
          }
          if (0 === n) break;
        }
        if (n > 0) {
          const n = [];
          throw (
            (e.forEach((e, r) => {
              null == e && n.push(t[r]);
            }),
            new Rn(
              "Cannot find SymbolicTensors for output name(s): " +
                JSON.stringify(n)
            ))
          );
        }
        return e;
      }
      predictLoop(t, e = 32, n = !1) {
        return En.ud(() => {
          const r = this.checkNumSamples(t);
          if (n) throw new An("Verbose predictLoop() is not implemented yet.");
          const a = Mi(r, e),
            i = this.outputs.map((t) => []);
          for (let e = 0; e < a.length; ++e) {
            En.ud(() => {
              const n = a[e][0],
                r = a[e][1],
                i = Di(t, n, r),
                o = [];
              if (Array.isArray(i))
                for (let t = 0; t < i.length; ++t)
                  o.push({ key: this.inputs[t], value: i[t] });
              else o.push({ key: this.inputs[0], value: i });
              const s = new gi(o);
              return yi(this.outputs, s);
            }).forEach((t, e) => i[e].push(t));
          }
          return Mn(i.map((t) => En.S(t, 0)));
        });
      }
      predict(t, e = {}) {
        const n = $i(t);
        Wi(n, this.inputNames, this.feedInputShapes, !1);
        try {
          const r = null == e.batchSize ? 32 : e.batchSize;
          return _i(r), this.predictLoop(n, r);
        } finally {
          Bi(n, t);
        }
      }
      predictOnBatch(t) {
        Wi(t, this.inputNames, this.feedInputShapes, !0);
        const e = (Array.isArray(t) ? t[0] : t).shape[0];
        return this.predictLoop(t, e);
      }
      standardizeUserDataXY(t, e, n = !0, r) {
        if (null == this.optimizer_)
          throw new Nn(
            "You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs)."
          );
        const a = [];
        for (let t = 0; t < this.feedOutputShapes.length; ++t) {
          const e = this.feedOutputShapes[t];
          this.feedLossFns[t] === Ha
            ? a.push(e.slice(0, e.length - 1).concat([1]))
            : a.push(e);
        }
        if (
          ((function (t, e, n) {
            const r = Vn(t.map((t) => t.shape[0]));
            r.sort();
            const a = Vn(e.map((t) => t.shape[0]));
            if ((a.sort(), r.length > 1))
              throw new Rn(
                "All input Tensors (x) should have the same number of samples. Got array shapes: " +
                  JSON.stringify(t.map((t) => t.shape))
              );
            if (a.length > 1)
              throw new Rn(
                "All target Tensors (y) should have the same number of samples. Got array shapes: " +
                  JSON.stringify(e.map((t) => t.shape))
              );
            if (r.length > 0 && a.length > 0 && !En.Cd.arraysEqual(r, a))
              throw new Rn(
                `Input Tensors should have the same number of samples as target Tensors. Found ${r[0]} input sample(s) and ${a[0]} target sample(s).`
              );
          })(
            (t = zi(t, this.feedInputNames, this.feedInputShapes, !1, "input")),
            (e = zi(e, this.feedOutputNames, a, !1, "target"))
          ),
          (function (t, e, n) {
            const r = [za, qa, Ga];
            for (let a = 0; a < t.length; ++a) {
              const i = t[a],
                o = e[a],
                s = n[a];
              if (null != o) {
                if (o === Ga && 1 === i.shape[i.shape.length - 1])
                  throw new Rn(
                    `You are passing a target array of shape ${i.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`
                  );
                if (-1 !== r.indexOf(o)) {
                  const t = i.shape.slice(1),
                    e = s.slice(1);
                  for (let n = 0; n < t.length; ++n) {
                    const r = t[n],
                      a = e[n];
                    if (null != a && r !== a)
                      throw new Rn(
                        `A target Tensor with shape ${i.shape} was passed for an output of shape ${s}, while using a loss function that expects targets to have the same shape as the output.`
                      );
                  }
                }
              }
            }
          })(e, this.feedLossFns, this.feedOutputShapes),
          this.stateful && null != r && r > 0 && t[0].shape[0] % r != 0)
        )
          throw new Rn(
            `In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${r}. Found: ${t[0].shape[0]} sample(s).`
          );
        return [t, e];
      }
      async standardizeUserData(t, e, n, r, a = !0, i) {
        const [o, s] = this.standardizeUserDataXY(t, e, a, i);
        if (null != n) throw new Error("sample weight is not supported yet.");
        let u = null;
        if (null != r) {
          const t = Si(r, this.outputNames);
          u = [];
          for (let e = 0; e < t.length; ++e) u.push(await Ii(s[e], null, t[e]));
        }
        return [o, s, u];
      }
      testLoop(t, e, n, r = 0, a) {
        return En.ud(() => {
          const i = this.checkNumSamples(e, n, a, "steps"),
            o = [];
          if (r > 0) throw new An("Verbose mode is not implemented yet.");
          if (null != a)
            throw new An("steps mode in testLoop() is not implemented yet");
          {
            const r = Mi(i, n),
              a = Object(En.qd)(Or(0, i));
            for (let n = 0; n < r.length; ++n) {
              const i = r[n][0],
                s = r[n][1],
                u = Ir(a, i, s - i),
                c = Fi(e, u),
                l = t(c);
              if (0 === n)
                for (let t = 0; t < l.length; ++t) o.push(Object(En.Ic)(0));
              for (let t = 0; t < l.length; ++t) {
                const e = l[t];
                o[t] = En.r(o[t], En.jc(s - i, e));
              }
            }
            for (let t = 0; t < o.length; ++t) o[t] = En.ib(o[t], i);
          }
          return o;
        });
      }
      getDedupedMetricsNames() {
        const t = this.metricsNames,
          e = [];
        for (let n = 0; n < t.length; ++n) {
          const r = t[n];
          let a = r;
          if (Fn(t, r) > 1) {
            a += "_" + Fn(t.slice(0, n), r);
          }
          e.push(a);
        }
        return e;
      }
      makeTrainFunction() {
        return (t) => {
          const e = [],
            n = t.slice(0, this.inputs.length),
            r = t.slice(
              this.inputs.length,
              this.inputs.length + this.outputs.length
            ),
            a = t.slice(
              this.inputs.length + this.outputs.length,
              this.inputs.length + 2 * this.outputs.length
            ),
            i = [],
            o = this.collectedTrainableWeights.map((t) => t.read());
          return [
            this.optimizer_.minimize(
              () => {
                const t = [];
                for (let e = 0; e < this.inputs.length; ++e)
                  t.push({ key: this.inputs[e], value: n[e] });
                const o = new gi(t),
                  s = yi(this.outputs, o, { training: !0 });
                let u;
                for (let t = 0; t < this.lossFunctions.length; ++t) {
                  let n = (0, this.lossFunctions[t])(r[t], s[t]);
                  null != a[t] && (n = ki(n, a[t]));
                  const i = En.dc(n);
                  e.push(i), (u = 0 === t ? n : En.r(u, n));
                }
                for (let t = 0; t < this.metricsTensors.length; ++t) {
                  let n;
                  if (this.outputs.length > 1 && t < this.outputs.length)
                    n = e[t];
                  else {
                    const e = this.metricsTensors[t][0],
                      a = this.metricsTensors[t][1];
                    n = En.dc(e(r[a], s[a]));
                  }
                  En.Jb(n), i.push(n);
                }
                return (
                  (u = En.dc(u)),
                  this.calculateLosses().forEach((t) => {
                    u = En.r(u, t);
                  }),
                  u
                );
              },
              !0,
              o
            ),
          ].concat(i);
        };
      }
      makeTestFunction() {
        this.testFunction = (t) =>
          En.ud(() => {
            const e = [];
            let n;
            const r = t.slice(0, this.inputs.length),
              a = t.slice(
                this.inputs.length,
                this.inputs.length + this.outputs.length
              ),
              i = [];
            for (let t = 0; t < this.inputs.length; ++t)
              i.push({ key: this.inputs[t], value: r[t] });
            const o = new gi(i),
              s = yi(this.outputs, o);
            for (let t = 0; t < this.lossFunctions.length; ++t) {
              const r = this.lossFunctions[t],
                i = En.dc(r(a[t], s[t]));
              (n = 0 === t ? i : En.r(n, i)), e.push(n);
            }
            for (let t = 0; t < this.metricsTensors.length; ++t) {
              const n = this.metricsTensors[t][0],
                r = this.metricsTensors[t][1],
                i = En.dc(n(a[r], s[r]));
              e.push(i);
            }
            return e;
          });
      }
      async fit(t, e, n = {}) {
        return ji(this, t, e, n);
      }
      async fitDataset(t, e) {
        return Ai(this, t, e);
      }
      async trainOnBatch(t, e) {
        const n = await this.standardizeUserData(t, e),
          r = n[0],
          a = n[1],
          i = this.makeTrainFunction()(r.concat(a)),
          o = [];
        for (const t of i) {
          const e = await t.data();
          o.push(e[0]);
        }
        return En.hb(i), Mn(o);
      }
      getNamedWeights(t) {
        const e = [],
          n = null != t && t.trainableOnly,
          r = n ? this.trainableWeights : this.weights,
          a = this.getWeights(n);
        for (let t = 0; t < r.length; ++t)
          (n && !r[t].trainable) ||
            e.push({ name: r[t].originalName, tensor: a[t] });
        return e;
      }
      set stopTraining(t) {
        this.stopTraining_ = t;
      }
      get stopTraining() {
        return this.stopTraining_;
      }
      get optimizer() {
        return this.optimizer_;
      }
      set optimizer(t) {
        this.optimizer_ !== t &&
          ((this.optimizer_ = t), (this.isOptimizerOwned = !1));
      }
      dispose() {
        const t = super.dispose();
        if (
          0 === t.refCountAfterDispose &&
          null != this.optimizer &&
          this.isOptimizerOwned
        ) {
          const e = En.ec().numTensors;
          this.optimizer_.dispose(),
            (t.numDisposedVariables += e - En.ec().numTensors);
        }
        return t;
      }
      getLossIdentifiers() {
        let t;
        if ("string" == typeof this.loss) t = $n(this.loss);
        else if (Array.isArray(this.loss)) {
          for (const t of this.loss)
            if ("string" != typeof t)
              throw new Error(
                "Serialization of non-string loss is not supported."
              );
          t = this.loss.map((t) => $n(t));
        } else {
          const e = Object.keys(this.loss);
          t = {};
          const n = this.loss;
          for (const r of e) {
            if ("string" != typeof n[r])
              throw new Error(
                "Serialization of non-string loss is not supported."
              );
            t[r] = $n(n[r]);
          }
        }
        return t;
      }
      getMetricIdentifiers() {
        if (
          "string" == typeof this.metrics ||
          "function" == typeof this.metrics
        )
          return [$n(ui(this.metrics))];
        if (Array.isArray(this.metrics))
          return this.metrics.map((t) => $n(ui(t)));
        {
          const t = {};
          for (const e in this.metrics) t[e] = $n(ui(this.metrics[e]));
          return t;
        }
      }
      getTrainingConfig() {
        return {
          loss: this.getLossIdentifiers(),
          metrics: this.getMetricIdentifiers(),
          optimizer_config: {
            class_name: this.optimizer.getClassName(),
            config: this.optimizer.getConfig(),
          },
        };
      }
      loadTrainingConfig(t) {
        if (null != t.weighted_metrics)
          throw new Error("Loading weight_metrics is not supported yet.");
        if (null != t.loss_weights)
          throw new Error("Loading loss_weights is not supported yet.");
        if (null != t.sample_weight_mode)
          throw new Error("Loading sample_weight_mode is not supported yet.");
        const e = Pa(mi(t.optimizer_config));
        let n, r;
        if ("string" == typeof t.loss) n = Bn(t.loss);
        else if (Array.isArray(t.loss)) n = t.loss.map((t) => Bn(t));
        else if (null != t.loss) {
          n = {};
          for (const e in t.loss) n[e] = Bn(t.loss[e]);
        }
        if (Array.isArray(t.metrics)) r = t.metrics.map((t) => Bn(t));
        else if (null != t.metrics) {
          r = {};
          for (const e in t.metrics) r[e] = Bn(t.metrics[e]);
        }
        this.compile({ loss: n, metrics: r, optimizer: e });
      }
      async save(t, e) {
        if ("string" == typeof t) {
          const e = En.Hb.getSaveHandlers(t);
          if (0 === e.length)
            throw new Rn(`Cannot find any save handlers for URL '${t}'`);
          if (e.length > 1)
            throw new Rn(
              `Found more than one (${e.length}) save handlers for URL '${t}'`
            );
          t = e[0];
        }
        if (null == t.save)
          throw new Rn(
            "LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined."
          );
        const n = await En.Hb.encodeWeights(this.getNamedWeights(e)),
          r = {
            modelTopology: this.toJSON(null, !1),
            format: "layers-model",
            generatedBy: "TensorFlow.js tfjs-layers v2.0.1",
            convertedBy: null,
          };
        if (null != e && e.includeOptimizer && null != this.optimizer) {
          r.trainingConfig = this.getTrainingConfig();
          const t = "optimizer",
            { data: e, specs: a } = await En.Hb.encodeWeights(
              await this.optimizer.getWeights(),
              t
            );
          n.specs.push(...a),
            (n.data = En.Hb.concatenateArrayBuffers([n.data, e]));
        }
        if (null != this.userDefinedMetadata) {
          const t = !0;
          ci(this.userDefinedMetadata, this.name, t),
            (r.userDefinedMetadata = this.userDefinedMetadata);
        }
        return (r.weightData = n.data), (r.weightSpecs = n.specs), t.save(r);
      }
      setUserDefinedMetadata(t) {
        ci(t, this.name), (this.userDefinedMetadata = t);
      }
      getUserDefinedMetadata() {
        return this.userDefinedMetadata;
      }
    }
    (Vi.className = "Model"), En.Mc.registerClass(Vi);
    class Ui extends Vi {
      constructor(t) {
        if (
          (super({ inputs: [], outputs: [] }),
          (t = t || {}),
          (this.trainable = !0),
          (this.built = !1),
          (this.name = null != t.name ? t.name : ha("sequential_")),
          null != t.layers)
        )
          for (const e of t.layers) this.add(e);
      }
      checkShape(t) {
        if (t.inboundNodes[0].outputTensors[0].shape.some((t) => t < 0))
          throw new Rn(
            "Negative dimension size caused by adding layer " +
              t.name +
              " with input shape [" +
              t.inboundNodes[0].inputTensors[0].shape +
              "]"
          );
      }
      add(t) {
        const e = t instanceof Ui || t instanceof Vi;
        let n;
        if (e) {
          if (((n = t), 1 !== n.outputs.length))
            throw new Rn(
              "All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API."
            );
          if (1 !== n.inputs.length)
            throw new Rn(
              "All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API."
            );
        }
        if (0 === this.outputs.length) {
          if (0 === t.inboundNodes.length) {
            if (null == t.batchInputShape)
              throw new Rn(
                "The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument."
              );
            const e = ka({
              batchShape: t.batchInputShape,
              dtype: t.dtype,
              name: t.name + "_input",
            });
            t.apply(e);
          }
          if (e) (this.outputs = n.outputs), (this.inputs = n.inputs);
          else {
            if (1 !== t.inboundNodes.length)
              throw new Rn(
                `A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${t.name} which has ${t.inboundNodes.length} pre-existing inbound connections.`
              );
            if (1 !== t.inboundNodes[0].outputTensors.length)
              throw new Rn(
                "All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API."
              );
            this.checkShape(t),
              (this.outputs = [t.inboundNodes[0].outputTensors[0]]),
              (this.inputs = (function t(e, n, r) {
                if (
                  ((null == n || (null != r && r > 0)) &&
                    ((n = e.sourceLayer), (r = e.nodeIndex)),
                  0 === n.inboundNodes.length)
                )
                  return [e];
                {
                  const e = n.inboundNodes[r];
                  if (0 === e.inboundLayers.length) return e.inputTensors;
                  {
                    const n = [];
                    for (let r = 0; r < e.inboundLayers.length; r++) {
                      const a = t(
                        e.inputTensors[r],
                        e.inboundLayers[r],
                        e.nodeIndices[r]
                      );
                      for (const t of a) -1 === n.indexOf(t) && n.push(t);
                    }
                    return n;
                  }
                }
              })(this.outputs[0]));
          }
          (this.inboundNodes = []),
            new Oa({
              outboundLayer: this,
              inboundLayers: [],
              nodeIndices: [],
              tensorIndices: [],
              inputTensors: this.inputs,
              outputTensors: this.outputs,
              inputMasks: _n(null, this.inputs.length),
              outputMasks: [null],
              inputShapes: this.inputs.map((t) => t.shape),
              outputShapes: this.outputs[0].shape,
            });
        } else {
          const e = t.apply(this.outputs[0]);
          if (Array.isArray(e))
            throw new TypeError(
              "All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API."
            );
          this.checkShape(t),
            (this.outputs = [e]),
            (this.inboundNodes[0].outputTensors = this.outputs),
            (this.inboundNodes[0].outputShapes = [this.outputs[0].shape]);
        }
        this.layers.push(t), (this.built = !1);
      }
      pop() {
        if (0 === this.layers.length)
          throw new TypeError("There are no layers in the model.");
        if ((this.layers.pop(), 0 === this.layers.length))
          (this.outputs = []),
            (this.inboundNodes = []),
            (this.outboundNodes = []);
        else {
          const t = this.layers.length - 1;
          (this.layers[t].outboundNodes = []),
            (this.outputs = [this.layers[t].output]),
            (this.inboundNodes[0].outputTensors = this.outputs),
            (this.inboundNodes[0].outputShapes = [this.outputs[0].shape]);
        }
      }
      call(t, e) {
        return null == this.model && this.build(), this.model.call(t, e);
      }
      build(t) {
        if ((ma(t), 0 === this.inputs.length || 0 === this.outputs.length))
          throw new TypeError(
            "Sequential model cannot be built: model is empty. Add some layers first."
          );
        (this.model = new Vi({
          inputs: this.inputs,
          outputs: this.outputs[0],
          name: this.name + "_model",
        })),
          (this.model.trainable = this.trainable),
          (this.supportsMasking = this.model.supportsMasking),
          (this.inputLayers = this.model.inputLayers),
          (this.inputLayersNodeIndices = this.model.inputLayersNodeIndices),
          (this.inputLayersTensorIndices = this.model.inputLayersTensorIndices),
          (this.outputLayers = this.model.outputLayers),
          (this.outputLayersNodeIndices = this.model.outputLayersNodeIndices),
          (this.outputLayersTensorIndices = this.model.outputLayersTensorIndices),
          (this.nodesByDepth = this.model.nodesByDepth),
          (this.containerNodes = this.model.containerNodes),
          (this.outputNames = this.model.outputNames),
          (this.inputNames = this.model.inputNames),
          (this.built = !0);
      }
      countParams() {
        return this.built || this.build(), super.countParams();
      }
      summary(t, e, n = console.log) {
        this.built || this.build(), super.summary(t, e, n);
      }
      setWeights(t) {
        null == this.model && this.build(), this.model.setWeights(t);
      }
      evaluate(t, e, n = {}) {
        if (!this.built)
          throw new Nn("The model needs to be compiled before being used.");
        return this.model.evaluate(t, e, n);
      }
      async evaluateDataset(t, e) {
        if (!this.built)
          throw new Nn("The model needs to be compiled before being used.");
        return this.model.evaluateDataset(t, e);
      }
      predict(t, e = {}) {
        return null == this.model && this.build(), this.model.predict(t, e);
      }
      predictOnBatch(t) {
        return null == this.model && this.build(), this.model.predictOnBatch(t);
      }
      compile(t) {
        this.build(),
          this.model.compile(t),
          (this.optimizer_ = this.model.optimizer),
          (this.isOptimizerOwned = this.model.isOptimizerOwned),
          (this.loss = this.model.loss),
          (this.metrics = this.model.metrics),
          (this.metricsTensors = this.model.metricsTensors),
          (this.metricsNames = this.model.metricsNames);
      }
      get optimizer() {
        return null == this.model ? void 0 : this.model.optimizer;
      }
      set optimizer(t) {
        this.model.optimizer = t;
      }
      async fit(t, e, n = {}) {
        if (!this.built)
          throw new Nn("The model needs to be compiled before being used.");
        return this.model.fit(t, e, n);
      }
      async fitDataset(t, e) {
        if (!this.built)
          throw new Nn("The model needs to be compiled before being used.");
        return this.model.fitDataset(t, e);
      }
      async trainOnBatch(t, e) {
        return this.model.trainOnBatch(t, e);
      }
      static fromConfig(t, e, n = {}, r = !1) {
        let a,
          i = {};
        if (e instanceof Array) {
          if (null == e[0].className || "Merge" === e[0].className)
            throw new Rn("Legacy serialization format not supported yet.");
          a = e;
        } else
          En.Cd.assert(
            null != e.layers,
            () =>
              "When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."
          ),
            (a = e.layers),
            delete e.layers,
            (i = e);
        const o = new t(i);
        if (!(o instanceof Ui))
          throw new An(
            "Sequential.fromConfig called on non-Sequential input: " + o
          );
        for (const t of a) {
          const e = Pa(t, void 0, r);
          r && e.setFastWeightInitDuringBuild(!0), o.add(e);
        }
        return o;
      }
      set stopTraining(t) {
        if (null == this.model)
          throw new Rn(
            "Cannot set the stopTraining property of a sequential model before it is compiled."
          );
        this.model.stopTraining = t;
      }
      get stopTraining() {
        if (null == this.model)
          throw new Rn(
            "Cannot get the stopTraining property of a sequential model before it is compiled."
          );
        return this.model.stopTraining;
      }
      getConfig() {
        const t = [];
        for (const e of this.layers) {
          const n = {};
          (n.className = e.getClassName()),
            (n.config = e.getConfig()),
            t.push(n);
        }
        return { name: this.name, layers: t };
      }
    }
    (Ui.className = "Sequential"), En.Mc.registerClass(Ui);
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */
    class Gi extends En.Mc.Serializable {
      getConfig() {
        return {};
      }
    }
    class Hi extends Gi {
      apply(t, e = 1) {
        return (function (t, e = 1) {
          if (1 !== e)
            throw new An(
              `Support for alpha values other than 1 (${e}) is not implemented yet.`
            );
          return En.lb(t);
        })(t, e);
      }
    }
    (Hi.className = "elu"), En.Mc.registerClass(Hi);
    class qi extends Gi {
      apply(t) {
        return En.Kc(t);
      }
    }
    (qi.className = "selu"), En.Mc.registerClass(qi);
    class Ki extends Gi {
      apply(t) {
        return En.Cc(t);
      }
    }
    (Ki.className = "relu"), En.Mc.registerClass(Ki);
    class Xi extends Gi {
      apply(t) {
        return Object(En.ud)(() => En.gc(6, En.Cc(t)));
      }
    }
    (Xi.className = "relu6"), En.Mc.registerClass(Xi);
    class Yi extends Gi {
      apply(t) {
        return t;
      }
    }
    (Yi.className = "linear"), En.Mc.registerClass(Yi);
    class Ji extends Gi {
      apply(t) {
        return En.Pc(t);
      }
    }
    (Ji.className = "sigmoid"), En.Mc.registerClass(Ji);
    class Qi extends Gi {
      apply(t) {
        return (function (t) {
          return Object(En.ud)(() => {
            const e = En.r(0.5, En.jc(0.2, t));
            return En.Q(e, 0, 1);
          });
        })(t);
      }
    }
    (Qi.className = "hardSigmoid"), En.Mc.registerClass(Qi);
    class Zi extends Gi {
      apply(t) {
        return En.ad(t);
      }
    }
    (Zi.className = "softplus"), En.Mc.registerClass(Zi);
    class to extends Gi {
      apply(t) {
        return (function (t) {
          return Object(En.ud)(() => En.ib(t, En.o(t).add(1)));
        })(t);
      }
    }
    (to.className = "softsign"), En.Mc.registerClass(to);
    class eo extends Gi {
      apply(t) {
        return En.od(t);
      }
    }
    (eo.className = "tanh"), En.Mc.registerClass(eo);
    class no extends Gi {
      apply(t, e = -1) {
        return En.Zc(t, e);
      }
    }
    (no.className = "softmax"), En.Mc.registerClass(no);
    class ro extends Gi {
      apply(t, e = -1) {
        return En.Tb(t, e);
      }
    }
    function ao(t) {
      return t.getClassName();
    }
    function io(t, e = {}) {
      return zn(
        t,
        En.Mc.SerializationMap.getMap().classNameMap,
        e,
        "activation"
      );
    }
    function oo(t) {
      if (null == t) {
        const t = { className: "linear", config: {} };
        return io(t);
      }
      if ("string" == typeof t) {
        const e = {};
        return (e.className = t), (e.config = {}), io(e);
      }
      return t instanceof Gi ? t : io(t);
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ function so(t) {
      if (null != t && "object" != typeof t)
        throw new Error(
          "Argument to L1L2 regularizer's constructor is expected to be an object, but received: " +
            t
        );
    }
    (ro.className = "logSoftmax"), En.Mc.registerClass(ro);
    class uo extends En.Mc.Serializable {}
    class co extends uo {
      constructor(t) {
        super(),
          so(t),
          (this.l1 = null == t || null == t.l1 ? 0.01 : t.l1),
          (this.l2 = null == t || null == t.l2 ? 0.01 : t.l2),
          (this.hasL1 = 0 !== this.l1),
          (this.hasL2 = 0 !== this.l2);
      }
      apply(t) {
        return Object(En.ud)(() => {
          let e = Object(En.Id)([1]);
          return (
            this.hasL1 &&
              (e = Object(En.r)(
                e,
                Object(En.ld)(En.jc(this.l1, Object(En.o)(t)))
              )),
            this.hasL2 &&
              (e = Object(En.r)(e, Object(En.ld)(En.jc(this.l2, Mr(t))))),
            e.asScalar()
          );
        });
      }
      getConfig() {
        return { l1: this.l1, l2: this.l2 };
      }
      static fromConfig(t, e) {
        return new t({ l1: e.l1, l2: e.l2 });
      }
    }
    (co.className = "L1L2"), En.Mc.registerClass(co);
    const lo = { l1l2: "L1L2" };
    function ho(t) {
      return Ln(t);
    }
    function po(t, e = {}) {
      return zn(
        t,
        En.Mc.SerializationMap.getMap().classNameMap,
        e,
        "regularizer"
      );
    }
    function fo(t) {
      if (null == t) return null;
      if ("string" == typeof t) {
        return po({ className: t in lo ? lo[t] : t, config: {} });
      }
      return t instanceof uo ? t : po(t);
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ class mo extends Sa {
      constructor(t) {
        super(null == t ? {} : t),
          (this.supportsMasking = !0),
          null != t && (this.maxValue = t.maxValue);
      }
      call(t, e) {
        t = fa(t);
        let n = Object(En.Cc)(t);
        return (
          null != this.maxValue && (n = Object(En.Q)(n, 0, this.maxValue)), n
        );
      }
      computeOutputShape(t) {
        return t;
      }
      getConfig() {
        const t = { maxValue: this.maxValue },
          e = super.getConfig();
        return Object.assign(t, e), t;
      }
    }
    (mo.className = "ReLU"), En.Mc.registerClass(mo);
    class go extends Sa {
      constructor(t) {
        super(null == t ? {} : t),
          (this.DEFAULT_ALPHA = 0.3),
          null == t && (t = {}),
          (this.alpha = null == t.alpha ? this.DEFAULT_ALPHA : t.alpha);
      }
      call(t, e) {
        const n = fa(t);
        return Object(En.Lb)(n, this.alpha);
      }
      computeOutputShape(t) {
        return t;
      }
      getConfig() {
        const t = { alpha: this.alpha },
          e = super.getConfig();
        return Object.assign(t, e), t;
      }
    }
    (go.className = "LeakyReLU"), En.Mc.registerClass(go);
    class bo extends Sa {
      constructor(t) {
        if (
          (super(null == t ? {} : t),
          (this.DEFAULT_ALPHA_INITIALIZER = "zeros"),
          null == t && (t = {}),
          (this.supportsMasking = !0),
          (this.alphaInitializer = sa(
            t.alphaInitializer || this.DEFAULT_ALPHA_INITIALIZER
          )),
          (this.alphaRegularizer = fo(t.alphaRegularizer)),
          (this.alphaConstraint = ar(t.alphaConstraint)),
          null == t.sharedAxes)
        )
          this.sharedAxes = null;
        else if (Array.isArray(t.sharedAxes)) this.sharedAxes = t.sharedAxes;
        else {
          if ("number" != typeof t.sharedAxes)
            throw new Rn(
              "Expected sharedAxes to be a number or an array of numbers, but got " +
                t.sharedAxes
            );
          this.sharedAxes = [t.sharedAxes];
        }
      }
      build(t) {
        const e = (t = ma(t)).slice(1);
        if (null != this.sharedAxes)
          for (const t of this.sharedAxes) e[t - 1] = 1;
        this.alpha = this.addWeight(
          "alpha",
          e,
          "float32",
          this.alphaInitializer,
          this.alphaRegularizer,
          !0,
          this.alphaConstraint
        );
        const n = {};
        if (null != this.sharedAxes)
          for (let e = 1; e < t.length; ++e) n[e] = t[e];
        (this.inputSpec = [new xa({ ndim: t.length, axes: n })]),
          (this.built = !0);
      }
      call(t, e) {
        return (t = fa(t)), Object(En.tc)(t, this.alpha.read());
      }
      getConfig() {
        const t = {
            alphaInitializer: oa(this.alphaInitializer),
            alphaRegularizer: ho(this.alphaRegularizer),
            alphaConstraint: nr(this.alphaConstraint),
            sharedAxes: this.sharedAxes,
          },
          e = super.getConfig();
        return Object.assign(t, e), t;
      }
    }
    (bo.className = "PReLU"), En.Mc.registerClass(bo);
    class vo extends Sa {
      constructor(t) {
        if (
          (super(null == t ? {} : t),
          (this.DEFAULT_ALPHA = 1),
          null == t && (t = {}),
          null != t.alpha && t.alpha !== this.DEFAULT_ALPHA)
        )
          throw new An(
            `Non-default alpha value (${t.alpha}) is not supported by the ELU layer yet.`
          );
        this.alpha = null == t.alpha ? this.DEFAULT_ALPHA : t.alpha;
      }
      call(t, e) {
        const n = fa(t);
        return Object(En.lb)(n);
      }
      computeOutputShape(t) {
        return t;
      }
      getConfig() {
        const t = { alpha: this.alpha },
          e = super.getConfig();
        return Object.assign(t, e), t;
      }
    }
    (vo.className = "ELU"), En.Mc.registerClass(vo);
    class yo extends Sa {
      constructor(t) {
        super(null == t ? {} : t),
          (this.DEFAULT_THETA = 1),
          null == t && (t = {}),
          (this.theta = null == t.theta ? this.DEFAULT_THETA : t.theta);
      }
      call(t, e) {
        const n = fa(t);
        return n.mul(Er(n.greater(this.theta), "float32"));
      }
      computeOutputShape(t) {
        return t;
      }
      getConfig() {
        const t = { theta: this.theta },
          e = super.getConfig();
        return Object.assign(t, e), t;
      }
    }
    (yo.className = "ThresholdedReLU"), En.Mc.registerClass(yo);
    class xo extends Sa {
      constructor(t) {
        super(null == t ? {} : t),
          (this.DEFAULT_AXIS = 1),
          null == t && (t = {}),
          (this.softmax = new no().apply),
          (this.axis = null == t.axis ? this.DEFAULT_AXIS : t.axis);
      }
      call(t, e) {
        const n = fa(t);
        return this.softmax(n, this.axis);
      }
      computeOutputShape(t) {
        return t;
      }
      getConfig() {
        const t = { axis: this.axis },
          e = super.getConfig();
        return Object.assign(t, e), t;
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */
    function wo(t, e, n) {
      if ("number" == typeof t) return _n(t, e);
      if (t.length !== e)
        throw new Rn(
          `The ${n} argument must be an integer or tuple of ${e} integers. Received: ${t.length} elements.`
        );
      for (let a = 0; a < e; ++a) {
        const i = t[a];
        if ((r = i) !== parseInt(r.toString(), 10))
          throw new Rn(
            `The ${n} argument must be an integer or tuple of ${e} integers. Received: ${JSON.stringify(
              t
            )} including a non-integer number ` + i
          );
      }
      return t;
      var r;
    }
    function Co(t, e, n, r, a = 1) {
      if (null == t) return t;
      let i;
      return (
        (i = "same" === n ? t : t - (e + (e - 1) * (a - 1)) + 1),
        Math.floor((i + r - 1) / r)
      );
    }
    function Oo(t, e, n, r) {
      if (null == t) return null;
      if ("valid" === r) t = t * e + Cr([n - e, 0]);
      else {
        if ("same" !== r) throw new Rn(`Unsupport padding mode: ${r}.`);
        t *= e;
      }
      return t;
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ function Eo(t, e) {
      return Object(En.ud)(
        () => (lr(e), "channelsFirst" === e ? En.yd(t, [0, 2, 3, 1]) : t)
      );
    }
    function So(t, e) {
      return Object(En.ud)(
        () => (lr(e), "channelsFirst" === e ? En.yd(t, [0, 2, 3, 4, 1]) : t)
      );
    }
    function Io(t, e, n, r = 1, a = "valid", i, o = 1) {
      return Object(En.ud)(() => {
        if ((null == i && (i = "channelsLast"), lr(i), 3 !== t.shape.length))
          throw new Rn(
            "The input of a conv1dWithBias operation should be 3, but is " +
              t.shape.length +
              " instead."
          );
        if (3 !== e.shape.length)
          throw new Rn(
            "The kernel for a conv1dWithBias operation should be 3, but is " +
              e.shape.length +
              " instead"
          );
        if (null != n && 1 !== n.shape.length)
          throw new Rn(
            "The bias for a conv1dWithBias operation should be 1, but is " +
              e.shape.length +
              " instead"
          );
        if (
          ("channelsFirst" === i && (t = En.yd(t, [0, 2, 1])), "causal" === a)
        )
          throw new An(
            "The support for CAUSAL padding mode in conv1dWithBias is not implemented yet."
          );
        let s = En.X(t, e, r, "same" === a ? "same" : "valid", "NWC", o);
        return null != n && (s = $r(s, n)), s;
      });
    }
    function ko(t, e, n, r = [1, 1], a = "valid", i, o, s = null) {
      return Object(En.ud)(() => {
        if (
          (null == i && (i = "channelsLast"),
          lr(i),
          3 !== t.rank && 4 !== t.rank)
        )
          throw new Rn(
            `conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${t.rank}.`
          );
        if (3 !== e.rank && 4 !== e.rank)
          throw new Rn(
            `conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${t.rank}.`
          );
        let u = Eo(t, i);
        if ("causal" === a)
          throw new An(
            "The support for CAUSAL padding mode in conv1dWithBias is not implemented yet."
          );
        return (
          (u = En.zb.conv2d({
            x: u,
            filter: e,
            strides: r,
            pad: "same" === a ? "same" : "valid",
            dilations: o,
            dataFormat: "NHWC",
            bias: n,
            activation: s,
          })),
          "channelsFirst" === i && (u = En.yd(u, [0, 3, 1, 2])),
          u
        );
      });
    }
    function No(t, e, n, r = [1, 1, 1], a = "valid", i, o) {
      return Object(En.ud)(() => {
        if (
          (null == i && (i = "channelsLast"),
          lr(i),
          4 !== t.rank && 5 !== t.rank)
        )
          throw new Rn(
            "conv3dWithBias expects input to be of rank 4 or 5, but received " +
              t.rank +
              "."
          );
        if (4 !== e.rank && 5 !== e.rank)
          throw new Rn(
            "conv3dWithBias expects kernel to be of rank 4 or 5, but received " +
              t.rank +
              "."
          );
        let s = So(t, i);
        if ("causal" === a)
          throw new An(
            "The support for CAUSAL padding mode in conv3dWithBias is not implemented yet."
          );
        return (
          (s = En.ab(s, e, r, "same" === a ? "same" : "valid", "NDHWC", o)),
          null != n && (s = $r(s, n)),
          "channelsFirst" === i && (s = En.yd(s, [0, 4, 1, 2, 3])),
          s
        );
      });
    }
    (xo.className = "Softmax"), En.Mc.registerClass(xo);
    class Ro extends Sa {
      constructor(t, e) {
        if (
          (super(e),
          (this.bias = null),
          (this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal"),
          (this.DEFAULT_BIAS_INITIALIZER = "zeros"),
          Ro.verifyArgs(e),
          (this.rank = t),
          qn(this.rank, "rank"),
          1 !== this.rank && 2 !== this.rank && 3 !== this.rank)
        )
          throw new An(
            `Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`
          );
        if (
          ((this.kernelSize = wo(e.kernelSize, t, "kernelSize")),
          (this.strides = wo(null == e.strides ? 1 : e.strides, t, "strides")),
          (this.padding = null == e.padding ? "valid" : e.padding),
          hr(this.padding),
          (this.dataFormat =
            null == e.dataFormat ? "channelsLast" : e.dataFormat),
          lr(this.dataFormat),
          (this.activation = oo(e.activation)),
          (this.useBias = null == e.useBias || e.useBias),
          (this.biasInitializer = sa(
            e.biasInitializer || this.DEFAULT_BIAS_INITIALIZER
          )),
          (this.biasConstraint = ar(e.biasConstraint)),
          (this.biasRegularizer = fo(e.biasRegularizer)),
          (this.activityRegularizer = fo(e.activityRegularizer)),
          (this.dilationRate = wo(
            null == e.dilationRate ? 1 : e.dilationRate,
            t,
            "dilationRate"
          )),
          1 === this.rank &&
            Array.isArray(this.dilationRate) &&
            1 !== this.dilationRate.length)
        )
          throw new Rn(
            "dilationRate must be a number or an array of a single number for 1D convolution, but received " +
              JSON.stringify(this.dilationRate)
          );
        if (2 === this.rank) {
          if ("number" == typeof this.dilationRate)
            this.dilationRate = [this.dilationRate, this.dilationRate];
          else if (2 !== this.dilationRate.length)
            throw new Rn(
              "dilationRate must be a number or array of two numbers for 2D convolution, but received " +
                JSON.stringify(this.dilationRate)
            );
        } else if (3 === this.rank)
          if ("number" == typeof this.dilationRate)
            this.dilationRate = [
              this.dilationRate,
              this.dilationRate,
              this.dilationRate,
            ];
          else if (3 !== this.dilationRate.length)
            throw new Rn(
              "dilationRate must be a number or array of three numbers for 3D convolution, but received " +
                JSON.stringify(this.dilationRate)
            );
      }
      static verifyArgs(t) {
        if (
          (Dn("kernelSize" in t, "required key 'kernelSize' not in config"),
          "number" != typeof t.kernelSize && !Hn(t.kernelSize, "number", 1, 3))
        )
          throw new Rn(
            `BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(
              t.kernelSize
            )}.`
          );
      }
      getConfig() {
        const t = {
            kernelSize: this.kernelSize,
            strides: this.strides,
            padding: this.padding,
            dataFormat: this.dataFormat,
            dilationRate: this.dilationRate,
            activation: ao(this.activation),
            useBias: this.useBias,
            biasInitializer: oa(this.biasInitializer),
            biasRegularizer: ho(this.biasRegularizer),
            activityRegularizer: ho(this.activityRegularizer),
            biasConstraint: nr(this.biasConstraint),
          },
          e = super.getConfig();
        return Object.assign(t, e), t;
      }
    }
    class Ao extends Ro {
      constructor(t, e) {
        super(t, e),
          (this.kernel = null),
          Ao.verifyArgs(e),
          (this.filters = e.filters),
          qn(this.filters, "filters"),
          (this.kernelInitializer = sa(
            e.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER
          )),
          (this.kernelConstraint = ar(e.kernelConstraint)),
          (this.kernelRegularizer = fo(e.kernelRegularizer));
      }
      build(t) {
        t = ma(t);
        const e = "channelsFirst" === this.dataFormat ? 1 : t.length - 1;
        if (null == t[e])
          throw new Rn(
            "The channel dimension of the input should be defined. Found " +
              t[e]
          );
        const n = t[e],
          r = this.kernelSize.concat([n, this.filters]);
        (this.kernel = this.addWeight(
          "kernel",
          r,
          null,
          this.kernelInitializer,
          this.kernelRegularizer,
          !0,
          this.kernelConstraint
        )),
          this.useBias &&
            (this.bias = this.addWeight(
              "bias",
              [this.filters],
              null,
              this.biasInitializer,
              this.biasRegularizer,
              !0,
              this.biasConstraint
            )),
          (this.inputSpec = [{ ndim: this.rank + 2, axes: { [e]: n } }]),
          (this.built = !0);
      }
      call(t, e) {
        return Object(En.ud)(() => {
          let e;
          t = fa(t);
          const n = null == this.bias ? null : this.bias.read(),
            r = Kn(this.activation.getClassName());
          if (null != r && 2 === this.rank)
            e = ko(
              t,
              this.kernel.read(),
              n,
              this.strides,
              this.padding,
              this.dataFormat,
              this.dilationRate,
              r
            );
          else {
            if (1 === this.rank)
              e = Io(
                t,
                this.kernel.read(),
                n,
                this.strides[0],
                this.padding,
                this.dataFormat,
                this.dilationRate[0]
              );
            else if (2 === this.rank)
              e = ko(
                t,
                this.kernel.read(),
                n,
                this.strides,
                this.padding,
                this.dataFormat,
                this.dilationRate
              );
            else {
              if (3 !== this.rank)
                throw new An(
                  "convolutions greater than 3D are not implemented yet."
                );
              e = No(
                t,
                this.kernel.read(),
                n,
                this.strides,
                this.padding,
                this.dataFormat,
                this.dilationRate
              );
            }
            null != this.activation && (e = this.activation.apply(e));
          }
          return e;
        });
      }
      computeOutputShape(t) {
        t = ma(t);
        const e = [],
          n =
            "channelsLast" === this.dataFormat
              ? t.slice(1, t.length - 1)
              : t.slice(2);
        for (let t = 0; t < n.length; ++t) {
          const r = Co(
            n[t],
            this.kernelSize[t],
            this.padding,
            this.strides[t],
            "number" == typeof this.dilationRate
              ? this.dilationRate
              : this.dilationRate[t]
          );
          e.push(r);
        }
        let r = [t[0]];
        return (
          "channelsLast" === this.dataFormat
            ? ((r = r.concat(e)), r.push(this.filters))
            : (r.push(this.filters), (r = r.concat(e))),
          r
        );
      }
      getConfig() {
        const t = {
            filters: this.filters,
            kernelInitializer: oa(this.kernelInitializer),
            kernelRegularizer: ho(this.kernelRegularizer),
            kernelConstraint: nr(this.kernelConstraint),
          },
          e = super.getConfig();
        return Object.assign(t, e), t;
      }
      static verifyArgs(t) {
        if (!("filters" in t) || "number" != typeof t.filters || t.filters < 1)
          throw new Rn(
            "Convolution layer expected config.filters to be a 'number' > 0 but got " +
              JSON.stringify(t.filters)
          );
      }
    }
    class To extends Ao {
      constructor(t) {
        super(2, t), To.verifyArgs(t);
      }
      getConfig() {
        const t = super.getConfig();
        return delete t.rank, t;
      }
      static verifyArgs(t) {
        if (
          "number" != typeof t.kernelSize &&
          !Hn(t.kernelSize, "number", 1, 2)
        )
          throw new Rn(
            `Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(
              t.kernelSize
            )}.`
          );
      }
    }
    (To.className = "Conv2D"), En.Mc.registerClass(To);
    class _o extends Ao {
      constructor(t) {
        super(3, t), _o.verifyArgs(t);
      }
      getConfig() {
        const t = super.getConfig();
        return delete t.rank, t;
      }
      static verifyArgs(t) {
        if (
          "number" != typeof t.kernelSize &&
          (!Array.isArray(t.kernelSize) ||
            (1 !== t.kernelSize.length && 3 !== t.kernelSize.length))
        )
          throw new Rn(
            `Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(
              t.kernelSize
            )}.`
          );
      }
    }
    (_o.className = "Conv3D"), En.Mc.registerClass(_o);
    class Do extends To {
      constructor(t) {
        if (
          (super(t),
          (this.inputSpec = [new xa({ ndim: 4 })]),
          "same" !== this.padding && "valid" !== this.padding)
        )
          throw new Rn(
            "Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode " +
              this.padding
          );
      }
      build(t) {
        if (4 !== (t = ma(t)).length)
          throw new Rn(
            "Input should have rank 4; Received input shape: " +
              JSON.stringify(t)
          );
        const e = "channelsFirst" === this.dataFormat ? 1 : t.length - 1;
        if (null == t[e])
          throw new Rn(
            "The channel dimension of the inputs should be defined. Found `None`."
          );
        const n = t[e],
          r = this.kernelSize.concat([this.filters, n]);
        (this.kernel = this.addWeight(
          "kernel",
          r,
          "float32",
          this.kernelInitializer,
          this.kernelRegularizer,
          !0,
          this.kernelConstraint
        )),
          this.useBias &&
            (this.bias = this.addWeight(
              "bias",
              [this.filters],
              "float32",
              this.biasInitializer,
              this.biasRegularizer,
              !0,
              this.biasConstraint
            )),
          (this.inputSpec = [new xa({ ndim: 4, axes: { [e]: n } })]),
          (this.built = !0);
      }
      call(t, e) {
        return En.ud(() => {
          let e = fa(t);
          if (4 !== e.shape.length)
            throw new Rn(
              "Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-" +
                e.shape.length
            );
          const n = e.shape,
            r = n[0];
          let a, i;
          "channelsFirst" === this.dataFormat
            ? ((a = 2), (i = 3))
            : ((a = 1), (i = 2));
          const o = n[a],
            s = n[i],
            u = this.kernelSize[0],
            c = this.kernelSize[1],
            l = this.strides[0],
            h = this.strides[1],
            d = [
              r,
              Oo(o, l, u, this.padding),
              Oo(s, h, c, this.padding),
              this.filters,
            ];
          "channelsLast" !== this.dataFormat && (e = En.yd(e, [0, 2, 3, 1]));
          let p = En.Z(e, this.kernel.read(), d, this.strides, this.padding);
          return (
            "channelsLast" !== this.dataFormat && (p = En.yd(p, [0, 3, 1, 2])),
            null != this.bias && (p = $r(p, this.bias.read(), this.dataFormat)),
            null != this.activation && (p = this.activation.apply(p)),
            p
          );
        });
      }
      computeOutputShape(t) {
        const e = (t = ma(t)).slice();
        let n, r, a;
        "channelsFirst" === this.dataFormat
          ? ((n = 1), (r = 2), (a = 3))
          : ((n = 3), (r = 1), (a = 2));
        const i = this.kernelSize[0],
          o = this.kernelSize[1],
          s = this.strides[0],
          u = this.strides[1];
        return (
          (e[n] = this.filters),
          (e[r] = Oo(e[r], s, i, this.padding)),
          (e[a] = Oo(e[a], u, o, this.padding)),
          e
        );
      }
      getConfig() {
        const t = super.getConfig();
        return delete t.dilationRate, t;
      }
    }
    (Do.className = "Conv2DTranspose"), En.Mc.registerClass(Do);
    class Fo extends Ao {
      constructor(t, e) {
        if (
          (super(t, e),
          (this.DEFAULT_DEPTHWISE_INITIALIZER = "glorotUniform"),
          (this.DEFAULT_POINTWISE_INITIALIZER = "glorotUniform"),
          (this.depthwiseKernel = null),
          (this.pointwiseKernel = null),
          null == e.filters)
        )
          throw new Rn(
            "The `filters` configuration field is required by SeparableConv, but is unspecified."
          );
        if (
          null != e.kernelInitializer ||
          null != e.kernelRegularizer ||
          null != e.kernelConstraint
        )
          throw new Rn(
            "Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead."
          );
        if (null != e.padding && "same" !== e.padding && "valid" !== e.padding)
          throw new Rn(
            `SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ` +
              JSON.stringify(e.padding)
          );
        (this.depthMultiplier =
          null == e.depthMultiplier ? 1 : e.depthMultiplier),
          (this.depthwiseInitializer = sa(
            e.depthwiseInitializer || this.DEFAULT_DEPTHWISE_INITIALIZER
          )),
          (this.depthwiseRegularizer = fo(e.depthwiseRegularizer)),
          (this.depthwiseConstraint = ar(e.depthwiseConstraint)),
          (this.pointwiseInitializer = sa(
            e.depthwiseInitializer || this.DEFAULT_POINTWISE_INITIALIZER
          )),
          (this.pointwiseRegularizer = fo(e.pointwiseRegularizer)),
          (this.pointwiseConstraint = ar(e.pointwiseConstraint));
      }
      build(t) {
        if ((t = ma(t)).length < this.rank + 2)
          throw new Rn(
            `Inputs to SeparableConv${this.rank}D should have rank ` +
              (this.rank + 2) +
              ", but received input shape: " +
              JSON.stringify(t)
          );
        const e = "channelsFirst" === this.dataFormat ? 1 : t.length - 1;
        if (null == t[e] || t[e] < 0)
          throw new Rn(
            "The channel dimension of the inputs should be defined, but found " +
              JSON.stringify(t[e])
          );
        const n = t[e],
          r = this.kernelSize.concat([n, this.depthMultiplier]),
          a = [];
        for (let t = 0; t < this.rank; ++t) a.push(1);
        a.push(n * this.depthMultiplier, this.filters);
        (this.depthwiseKernel = this.addWeight(
          "depthwise_kernel",
          r,
          "float32",
          this.depthwiseInitializer,
          this.depthwiseRegularizer,
          !0,
          this.depthwiseConstraint
        )),
          (this.pointwiseKernel = this.addWeight(
            "pointwise_kernel",
            a,
            "float32",
            this.pointwiseInitializer,
            this.pointwiseRegularizer,
            !0,
            this.pointwiseConstraint
          )),
          this.useBias
            ? (this.bias = this.addWeight(
                "bias",
                [this.filters],
                "float32",
                this.biasInitializer,
                this.biasRegularizer,
                !0,
                this.biasConstraint
              ))
            : (this.bias = null),
          (this.inputSpec = [
            new xa({ ndim: this.rank + 2, axes: { [e]: n } }),
          ]),
          (this.built = !0);
      }
      call(t, e) {
        return Object(En.ud)(() => {
          let e;
          if (((t = fa(t)), 1 === this.rank))
            throw new An("1D separable convolution is not implemented yet.");
          return (
            2 === this.rank &&
              ("channelsFirst" === this.dataFormat &&
                (t = En.yd(t, [0, 2, 3, 1])),
              (e = En.Lc(
                t,
                this.depthwiseKernel.read(),
                this.pointwiseKernel.read(),
                this.strides,
                this.padding,
                this.dilationRate,
                "NHWC"
              ))),
            this.useBias && (e = $r(e, this.bias.read(), this.dataFormat)),
            null != this.activation && (e = this.activation.apply(e)),
            "channelsFirst" === this.dataFormat && (e = En.yd(e, [0, 3, 1, 2])),
            e
          );
        });
      }
      getConfig() {
        const t = super.getConfig();
        return (
          delete t.rank,
          delete t.kernelInitializer,
          delete t.kernelRegularizer,
          delete t.kernelConstraint,
          (t.depthwiseInitializer = oa(this.depthwiseInitializer)),
          (t.pointwiseInitializer = oa(this.pointwiseInitializer)),
          (t.depthwiseRegularizer = ho(this.depthwiseRegularizer)),
          (t.pointwiseRegularizer = ho(this.pointwiseRegularizer)),
          (t.depthwiseConstraint = nr(this.depthwiseConstraint)),
          (t.pointwiseConstraint = nr(this.pointwiseConstraint)),
          t
        );
      }
    }
    Fo.className = "SeparableConv";
    class Mo extends Fo {
      constructor(t) {
        super(2, t);
      }
    }
    (Mo.className = "SeparableConv2D"), En.Mc.registerClass(Mo);
    class jo extends Ao {
      constructor(t) {
        super(1, t), jo.verifyArgs(t), (this.inputSpec = [{ ndim: 3 }]);
      }
      getConfig() {
        const t = super.getConfig();
        return delete t.rank, delete t.dataFormat, t;
      }
      static verifyArgs(t) {
        if (
          "number" != typeof t.kernelSize &&
          !Hn(t.kernelSize, "number", 1, 1)
        )
          throw new Rn(
            `Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(
              t.kernelSize
            )}.`
          );
      }
    }
    (jo.className = "Conv1D"), En.Mc.registerClass(jo);
    class $o extends Sa {
      constructor(t) {
        super(t),
          "number" == typeof t.cropping
            ? (this.cropping = [
                [t.cropping, t.cropping],
                [t.cropping, t.cropping],
              ])
            : "number" == typeof t.cropping[0]
            ? (this.cropping = [
                [t.cropping[0], t.cropping[0]],
                [t.cropping[1], t.cropping[1]],
              ])
            : (this.cropping = t.cropping),
          (this.dataFormat =
            void 0 === t.dataFormat ? "channelsLast" : t.dataFormat),
          (this.inputSpec = [{ ndim: 4 }]);
      }
      computeOutputShape(t) {
        return "channelsFirst" === this.dataFormat
          ? [
              t[0],
              t[1],
              t[2] - this.cropping[0][0] - this.cropping[0][1],
              t[3] - this.cropping[1][0] - this.cropping[1][1],
            ]
          : [
              t[0],
              t[1] - this.cropping[0][0] - this.cropping[0][1],
              t[2] - this.cropping[1][0] - this.cropping[1][1],
              t[3],
            ];
      }
      call(t, e) {
        return Object(En.ud)(() => {
          if (((t = fa(t)), "channelsLast" === this.dataFormat)) {
            const e = Nr(
              t,
              this.cropping[0][0],
              t.shape[1] - this.cropping[0][0] - this.cropping[0][1],
              2
            );
            return Nr(
              e,
              this.cropping[1][0],
              t.shape[2] - this.cropping[1][1] - this.cropping[1][0],
              3
            );
          }
          {
            const e = Nr(
              t,
              this.cropping[0][0],
              t.shape[2] - this.cropping[0][0] - this.cropping[0][1],
              3
            );
            return Nr(
              e,
              this.cropping[1][0],
              t.shape[3] - this.cropping[1][1] - this.cropping[1][0],
              4
            );
          }
        });
      }
      getConfig() {
        const t = { cropping: this.cropping, dataFormat: this.dataFormat },
          e = super.getConfig();
        return Object.assign(t, e), t;
      }
    }
    ($o.className = "Cropping2D"), En.Mc.registerClass($o);
    class Bo extends Sa {
      constructor(t) {
        super(t),
          (this.DEFAULT_SIZE = [2, 2]),
          (this.inputSpec = [{ ndim: 4 }]),
          (this.size = null == t.size ? this.DEFAULT_SIZE : t.size),
          (this.dataFormat =
            null == t.dataFormat ? "channelsLast" : t.dataFormat);
      }
      computeOutputShape(t) {
        if ("channelsFirst" === this.dataFormat) {
          const e = null == t[2] ? null : this.size[0] * t[2],
            n = null == t[3] ? null : this.size[1] * t[3];
          return [t[0], t[1], e, n];
        }
        {
          const e = null == t[1] ? null : this.size[0] * t[1],
            n = null == t[2] ? null : this.size[1] * t[2];
          return [t[0], e, n, t[3]];
        }
      }
      call(t, e) {
        return En.ud(() => {
          let e = fa(t);
          const n = e.shape;
          if ("channelsFirst" === this.dataFormat) {
            e = En.yd(e, [0, 2, 3, 1]);
            const t = this.size[0] * n[2],
              r = this.size[1] * n[3],
              a = e.resizeNearestNeighbor([t, r]);
            return En.yd(a, [0, 3, 1, 2]);
          }
          {
            const t = this.size[0] * n[1],
              r = this.size[1] * n[2];
            return e.resizeNearestNeighbor([t, r]);
          }
        });
      }
      getConfig() {
        const t = { size: this.size, dataFormat: this.dataFormat },
          e = super.getConfig();
        return Object.assign(t, e), t;
      }
    }
    (Bo.className = "UpSampling2D"), En.Mc.registerClass(Bo);
    class Po extends Ro {
      constructor(t) {
        super(2, t),
          (this.depthwiseKernel = null),
          (this.depthMultiplier =
            null == t.depthMultiplier ? 1 : t.depthMultiplier),
          (this.depthwiseInitializer = sa(
            t.depthwiseInitializer || this.DEFAULT_KERNEL_INITIALIZER
          )),
          (this.depthwiseConstraint = ar(t.depthwiseConstraint)),
          (this.depthwiseRegularizer = fo(t.depthwiseRegularizer));
      }
      build(t) {
        if ((t = ma(t)).length < 4)
          throw new Rn(
            `Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(
              t
            )}.`
          );
        const e = "channelsFirst" === this.dataFormat ? 1 : 3;
        if (null == t[e] || t[e] < 0)
          throw new Rn(
            `The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${t[e]}).`
          );
        const n = t[e],
          r = [this.kernelSize[0], this.kernelSize[1], n, this.depthMultiplier];
        (this.depthwiseKernel = this.addWeight(
          "depthwise_kernel",
          r,
          null,
          this.depthwiseInitializer,
          this.depthwiseRegularizer,
          !0,
          this.depthwiseConstraint
        )),
          this.useBias
            ? (this.bias = this.addWeight(
                "bias",
                [n * this.depthMultiplier],
                null,
                this.biasInitializer,
                this.biasRegularizer,
                !0,
                this.biasConstraint
              ))
            : (this.bias = null),
          (this.built = !0);
      }
      call(t, e) {
        return Object(En.ud)(() => {
          let e =
            /**
             * @license
             * Copyright 2018 Google LLC
             *
             * Use of this source code is governed by an MIT-style
             * license that can be found in the LICENSE file or at
             * https://opensource.org/licenses/MIT.
             * =============================================================================
             */
            (function (t, e, n = [1, 1], r = "valid", a, i) {
              return Object(En.ud)(() => {
                null == a && (a = "channelsLast"), lr(a);
                let o = Eo(t, a);
                if (4 !== t.rank)
                  throw new Rn(
                    "Input for depthwiseConv2d is required to be 4-D, but is instead " +
                      t.rank +
                      "-D"
                  );
                if (4 !== e.rank)
                  throw new Rn(
                    "depthwiseKernel is required to be 4-D, but is instead " +
                      e.rank +
                      "-D"
                  );
                return (
                  (o = En.fb(
                    o,
                    e,
                    n,
                    "same" === r ? "same" : "valid",
                    "NHWC",
                    i
                  )),
                  "channelsFirst" === a && (o = En.yd(o, [0, 3, 1, 2])),
                  o
                );
              });
            })(
              (t = fa(t)),
              this.depthwiseKernel.read(),
              this.strides,
              this.padding,
              this.dataFormat,
              null
            );
          return (
            this.useBias && (e = $r(e, this.bias.read(), this.dataFormat)),
            null != this.activation && (e = this.activation.apply(e)),
            e
          );
        });
      }
      computeOutputShape(t) {
        t = ma(t);
        const e = "channelsFirst" === this.dataFormat ? t[2] : t[1],
          n = "channelsFirst" === this.dataFormat ? t[3] : t[2],
          r =
            "channelsFirst" === this.dataFormat
              ? t[1] * this.depthMultiplier
              : t[3] * this.depthMultiplier,
          a = Co(e, this.kernelSize[0], this.padding, this.strides[0]),
          i = Co(n, this.kernelSize[1], this.padding, this.strides[1]);
        return "channelsFirst" === this.dataFormat
          ? [t[0], r, a, i]
          : [t[0], a, i, r];
      }
      getConfig() {
        const t = super.getConfig();
        return (
          (t.depthMultiplier = this.depthMultiplier),
          (t.depthwiseInitializer = oa(this.depthwiseInitializer)),
          (t.depthwiseRegularizer = ho(this.depthwiseRegularizer)),
          (t.depthwiseConstraint = nr(this.depthwiseRegularizer)),
          t
        );
      }
    }
    (Po.className = "DepthwiseConv2D"), En.Mc.registerClass(Po);
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */
    class Lo extends Sa {
      constructor(t) {
        super(t),
          (this.rate = Math.max(Math.min(t.rate, 1), 0)),
          (this.noiseShape = t.noiseShape),
          (this.seed = t.seed),
          (this.supportsMasking = !0);
      }
      getNoiseShape(t) {
        if (null == this.noiseShape) return this.noiseShape;
        const e = t.shape,
          n = [];
        for (let t = 0; t < this.noiseShape.length; ++t)
          n.push(null == this.noiseShape[t] ? e[t] : this.noiseShape[t]);
        return n;
      }
      call(t, e) {
        return Object(En.ud)(() => {
          this.invokeCallHook(t, e);
          const n = fa(t);
          if (0 < this.rate && this.rate < 1) {
            const t = null != e.training && e.training,
              r = this.getNoiseShape(n);
            return Pr(
              () => Br(n, this.rate, r, this.seed),
              () => n,
              t
            );
          }
          return t;
        });
      }
      getConfig() {
        const t = {
            rate: this.rate,
            noiseShape: this.noiseShape,
            seed: this.seed,
          },
          e = super.getConfig();
        return Object.assign(t, e), t;
      }
      dispose() {
        return super.dispose();
      }
    }
    (Lo.className = "Dropout"), En.Mc.registerClass(Lo);
    class zo extends Lo {
      constructor(t) {
        super(t), (this.inputSpec = [{ ndim: 3 }]);
      }
      getNoiseShape(t) {
        const e = t.shape;
        return [e[0], 1, e[2]];
      }
    }
    (zo.className = "SpatialDropout1D"), En.Mc.registerClass(zo);
    class Wo extends Sa {
      constructor(t) {
        if (
          (super(t),
          (this.activation = null),
          (this.useBias = !0),
          (this.kernel = null),
          (this.bias = null),
          (this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal"),
          (this.DEFAULT_BIAS_INITIALIZER = "zeros"),
          null == t.batchInputShape &&
            null == t.inputShape &&
            null != t.inputDim)
        ) {
          let e = null;
          null != t.batchSize && (e = t.batchSize),
            (this.batchInputShape = [e, t.inputDim]);
        }
        (this.units = t.units),
          qn(this.units, "units"),
          (this.activation = oo(t.activation)),
          null != t.useBias && (this.useBias = t.useBias),
          (this.kernelInitializer = sa(
            t.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER
          )),
          (this.biasInitializer = sa(
            t.biasInitializer || this.DEFAULT_BIAS_INITIALIZER
          )),
          (this.kernelConstraint = ar(t.kernelConstraint)),
          (this.biasConstraint = ar(t.biasConstraint)),
          (this.kernelRegularizer = fo(t.kernelRegularizer)),
          (this.biasRegularizer = fo(t.biasRegularizer)),
          (this.activityRegularizer = fo(t.activityRegularizer)),
          (this.supportsMasking = !0),
          (this.inputSpec = [{ minNDim: 2 }]);
      }
      build(t) {
        const e = (t = ma(t))[t.length - 1];
        null == this.kernel &&
          ((this.kernel = this.addWeight(
            "kernel",
            [e, this.units],
            null,
            this.kernelInitializer,
            this.kernelRegularizer,
            !0,
            this.kernelConstraint
          )),
          this.useBias &&
            (this.bias = this.addWeight(
              "bias",
              [this.units],
              null,
              this.biasInitializer,
              this.biasRegularizer,
              !0,
              this.biasConstraint
            ))),
          (this.inputSpec = [{ minNDim: 2, axes: { [-1]: e } }]),
          (this.built = !0);
      }
      computeOutputShape(t) {
        const e = (t = ma(t)).slice();
        return (e[e.length - 1] = this.units), e;
      }
      call(t, e) {
        return Object(En.ud)(() => {
          this.invokeCallHook(t, e);
          const n = fa(t),
            r = Kn(this.activation.getClassName());
          let a;
          return (
            null != r
              ? (a = Dr(
                  n,
                  this.kernel.read(),
                  r,
                  this.bias ? this.bias.read() : null
                ))
              : ((a = Dr(n, this.kernel.read())),
                null != this.bias && (a = $r(a, this.bias.read())),
                null != this.activation && (a = this.activation.apply(a))),
            a
          );
        });
      }
      getConfig() {
        const t = {
            units: this.units,
            activation: ao(this.activation),
            useBias: this.useBias,
            kernelInitializer: oa(this.kernelInitializer),
            biasInitializer: oa(this.biasInitializer),
            kernelRegularizer: ho(this.kernelRegularizer),
            biasRegularizer: ho(this.biasRegularizer),
            activityRegularizer: ho(this.activityRegularizer),
            kernelConstraint: nr(this.kernelConstraint),
            biasConstraint: nr(this.biasConstraint),
          },
          e = super.getConfig();
        return Object.assign(t, e), t;
      }
    }
    (Wo.className = "Dense"), En.Mc.registerClass(Wo);
    class Vo extends Sa {
      constructor(t) {
        super((t = t || {})),
          (this.inputSpec = [{ minNDim: 3 }]),
          (this.dataFormat = t.dataFormat);
      }
      computeOutputShape(t) {
        t = ma(t);
        for (const e of t.slice(1))
          if (null == e)
            throw new Rn(
              `The shape of the input to "Flatten" is not fully defined (got ${t.slice(
                1
              )}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`
            );
        return [t[0], yr(t, 1)];
      }
      call(t, e) {
        return Object(En.ud)(() => {
          this.invokeCallHook(t, e);
          let n = fa(t);
          if ("channelsFirst" === this.dataFormat && n.rank > 1) {
            const t = [0];
            for (let e = 2; e < n.rank; ++e) t.push(e);
            t.push(1), (n = n.transpose(t));
          }
          return (function (t) {
            if (t.rank <= 1)
              throw new Rn(
                `batchFlatten requires a minimum rank of 2. Got rank: ${t.rank}.`
              );
            const e = [t.shape[0], yr(t.shape, 1)];
            return t.reshape(e);
          })(n);
        });
      }
      getConfig() {
        const t = {};
        null != this.dataFormat && (t.dataFormat = this.dataFormat);
        const e = super.getConfig();
        return Object.assign(t, e), t;
      }
    }
    (Vo.className = "Flatten"), En.Mc.registerClass(Vo);
    class Uo extends Sa {
      constructor(t) {
        super(t),
          (this.supportsMasking = !0),
          (this.activation = oo(t.activation));
      }
      call(t, e) {
        return Object(En.ud)(() => {
          this.invokeCallHook(t, e);
          const n = fa(t);
          return this.activation.apply(n);
        });
      }
      getConfig() {
        const t = { activation: ao(this.activation) },
          e = super.getConfig();
        return Object.assign(t, e), t;
      }
    }
    (Uo.className = "Activation"), En.Mc.registerClass(Uo);
    class Go extends Sa {
      constructor(t) {
        super(t), (this.n = t.n), (this.inputSpec = [{ ndim: 2 }]);
      }
      computeOutputShape(t) {
        return [t[0], this.n, t[1]];
      }
      call(t, e) {
        return Object(En.ud)(() => {
          return (
            (t = fa(t)),
            (e = t),
            (n = this.n),
            Object(En.ud)(() => {
              if (2 !== e.shape.length)
                throw new Rn(
                  `repeat() expects a rank-2 tensor, but received a rank-${e.shape.length} tensor.`
                );
              return Tr(Sr(e, 1), [1, n, 1]);
            })
          );
          var e, n;
        });
      }
      getConfig() {
        const t = { n: this.n },
          e = super.getConfig();
        return Object.assign(t, e), t;
      }
    }
    (Go.className = "RepeatVector"), En.Mc.registerClass(Go);
    class Ho extends Sa {
      constructor(t) {
        super(t), (this.targetShape = t.targetShape);
        for (let t = 0; t < this.targetShape.length; ++t)
          this.isUnknown(this.targetShape[t]) && (this.targetShape[t] = null);
      }
      isUnknown(t) {
        return t < 0 || null == t;
      }
      fixUnknownDimension(t, e) {
        const n = "Total size of new array must be unchanged.",
          r = e.slice();
        let a = 1,
          i = null;
        for (let t = 0; t < r.length; ++t) {
          const e = r[t];
          if (this.isUnknown(e)) {
            if (null !== i)
              throw new Rn("Can only specifiy one unknown dimension.");
            i = t;
          } else a *= e;
        }
        const o = yr(t);
        if (null !== i) {
          if (0 === a || o % a != 0) throw new Rn(n);
          r[i] = o / a;
        } else if (o !== a) throw new Rn(n);
        return r;
      }
      computeOutputShape(t) {
        let e = !1;
        for (let n = 0; n < t.length; ++n)
          if (this.isUnknown(t[n])) {
            e = !0;
            break;
          }
        return e
          ? t.slice(0, 1).concat(this.targetShape)
          : t
              .slice(0, 1)
              .concat(this.fixUnknownDimension(t.slice(1), this.targetShape));
      }
      call(t, e) {
        return Object(En.ud)(() => {
          this.invokeCallHook(t, e);
          const n = fa(t),
            r = n.shape,
            a = r
              .slice(0, 1)
              .concat(this.fixUnknownDimension(r.slice(1), this.targetShape));
          return n.reshape(a);
        });
      }
      getConfig() {
        const t = { targetShape: this.targetShape },
          e = super.getConfig();
        return Object.assign(t, e), t;
      }
    }
    (Ho.className = "Reshape"), En.Mc.registerClass(Ho);
    class qo extends Sa {
      constructor(t) {
        if ((super(t), null == t.dims))
          throw new Error(
            "Required configuration field `dims` is missing during Permute constructor call."
          );
        if (!Array.isArray(t.dims))
          throw new Error(
            "Permute constructor requires `dims` to be an Array, but received " +
              t.dims +
              " instead."
          );
        const e = Or(1, t.dims.length + 1);
        if (!En.Cd.arraysEqual(t.dims.slice().sort(), e))
          throw new Error(
            "Invalid permutation `dims`: " +
              JSON.stringify(t.dims) +
              " `dims` must contain consecutive integers starting from 1."
          );
        (this.dims = t.dims),
          (this.dimsIncludingBatch = [0].concat(this.dims)),
          (this.inputSpec = [new xa({ ndim: this.dims.length + 1 })]);
      }
      computeOutputShape(t) {
        const e = (t = ma(t)).slice();
        return (
          this.dims.forEach((n, r) => {
            e[r + 1] = t[n];
          }),
          e
        );
      }
      call(t, e) {
        return Object(En.yd)(fa(t), this.dimsIncludingBatch);
      }
      getConfig() {
        const t = { dims: this.dims },
          e = super.getConfig();
        return Object.assign(t, e), t;
      }
    }
    (qo.className = "Permute"), En.Mc.registerClass(qo);
    class Ko extends Sa {
      constructor(t) {
        super(null == t ? {} : t),
          (this.supportsMasking = !0),
          (this.maskValue =
            null != t ? (null == t.maskValue ? 0 : t.maskValue) : 0);
      }
      computeOutputShape(t) {
        return t;
      }
      getConfig() {
        const t = super.getConfig(),
          e = { maskValue: this.maskValue };
        return Object.assign(e, t), e;
      }
      computeMask(t, e) {
        const n = fa(t);
        return Object(En.u)(Object(En.nc)(n, this.maskValue), -1);
      }
      call(t, e) {
        return Object(En.ud)(() => {
          this.invokeCallHook(t, e);
          const n = fa(t),
            r = Object(En.u)(Object(En.nc)(n, this.maskValue), -1, !0);
          return n.mul(r.asType(n.dtype));
        });
      }
    }
    (Ko.className = "Masking"), En.Mc.registerClass(Ko);
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */
    class Xo extends Sa {
      constructor(t) {
        if (
          (super(t),
          (this.embeddings = null),
          (this.DEFAULT_EMBEDDINGS_INITIALIZER = "randomUniform"),
          null == t.batchInputShape && null == t.inputShape)
        ) {
          let e = null;
          null != t.batchSize && (e = t.batchSize),
            null == t.inputLength
              ? (this.batchInputShape = [e, null])
              : (this.batchInputShape = [e].concat(jn(t.inputLength)));
        }
        (this.inputDim = t.inputDim),
          qn(this.inputDim, "inputDim"),
          (this.outputDim = t.outputDim),
          qn(this.outputDim, "outputDim"),
          (this.embeddingsInitializer = sa(
            t.embeddingsInitializer || this.DEFAULT_EMBEDDINGS_INITIALIZER
          )),
          (this.embeddingsRegularizer = fo(t.embeddingsRegularizer)),
          (this.activityRegularizer = fo(t.activityRegularizer)),
          (this.embeddingsConstraint = ar(t.embeddingsConstraint)),
          (this.maskZero = t.maskZero),
          (this.supportsMasking = t.maskZero),
          (this.inputLength = t.inputLength);
      }
      build(t) {
        (this.embeddings = this.addWeight(
          "embeddings",
          [this.inputDim, this.outputDim],
          this.dtype,
          this.embeddingsInitializer,
          this.embeddingsRegularizer,
          !0,
          this.embeddingsConstraint
        )),
          (this.built = !0);
      }
      warnOnIncompatibleInputShape(t) {}
      computeMask(t, e) {
        return Object(En.ud)(() =>
          this.maskZero
            ? ((t = fa(t)), Object(En.nc)(t, Object(En.Jd)(t)))
            : null
        );
      }
      computeOutputShape(t) {
        if (((t = ma(t)), null == this.inputLength))
          return [...t, this.outputDim];
        const e = jn(this.inputLength);
        if (e.length !== t.length - 1)
          throw new Rn(
            `"inputLength" is ${this.inputLength}, but received input shape has shape ` +
              t
          );
        {
          let n = 0;
          for (let r = 0; r < e.length; ++r) {
            const a = e[r],
              i = t[r + 1];
            if (null != a && null != i && a !== i)
              throw new Rn(
                `"inputLength" is ${this.inputLength}, but received input shape has shape ` +
                  t
              );
            null == a && (e[n] = i), n++;
          }
        }
        return [t[0], ...e, this.outputDim];
      }
      call(t, e) {
        return Object(En.ud)(() => {
          this.invokeCallHook(t, e);
          let n = fa(t);
          "int32" !== n.dtype && (n = Er(n, "int32"));
          return Fr(this.embeddings.read(), n.as1D()).reshape(
            ma(this.computeOutputShape(n.shape))
          );
        });
      }
      getConfig() {
        const t = {
            inputDim: this.inputDim,
            outputDim: this.outputDim,
            embeddingsInitializer: oa(this.embeddingsInitializer),
            embeddingsRegularizer: ho(this.embeddingsRegularizer),
            activityRegularizer: ho(this.activityRegularizer),
            embeddingsConstraint: nr(this.embeddingsConstraint),
            maskZero: this.maskZero,
            inputLength: this.inputLength,
          },
          e = super.getConfig();
        return Object.assign(t, e), t;
      }
    }
    (Xo.className = "Embedding"), En.Mc.registerClass(Xo);
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */
    class Yo extends Sa {
      constructor(t) {
        super(t || {}), (this.supportsMasking = !0);
      }
      mergeFunction(t) {
        throw new An();
      }
      computeElementwiseOpOutputShape(t, e) {
        if (null == t || null == e) return null;
        if (t.length < e.length)
          return this.computeElementwiseOpOutputShape(e, t);
        if (0 === e.length) return t;
        const n = t.slice(0, t.length - e.length);
        for (let r = 0; r < e.length; ++r) {
          const a = t[t.length - e.length + r],
            i = e[r];
          if (null == a || null == i || a < 0 || i < 0) n.push(null);
          else if (1 === a) n.push(i);
          else if (1 === i) n.push(a);
          else {
            if (a !== i)
              throw new Rn(
                "Operands could not be broadcast together with shapes " +
                  JSON.stringify(t) +
                  " " +
                  JSON.stringify(e)
              );
            n.push(a);
          }
        }
        return n;
      }
      build(t) {
        if (
          (Array.isArray(t) && !Array.isArray(t[0]) && (t = [ma(t)]),
          (t = t).length < 2)
        )
          throw new Rn(
            `A merge layer should be called on an Array of at least 2 inputs. Got ${t.length} input(s).`
          );
        let e = [];
        for (const n of t) null != n && null !== n[0] && e.push(n[0]);
        if (((e = Vn(e)), e.length > 1))
          throw new Rn(
            `Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(
              t
            )}.`
          );
        let n = null == t[0] ? null : t[0].slice(1);
        for (let e = 1; e < t.length; ++e) {
          const r = null == t[e] ? null : t[e].slice(1);
          n = this.computeElementwiseOpOutputShape(n, r);
        }
        const r = t.map((t) => t.length);
        -1 === t.indexOf(null) && 1 === Vn(r).length
          ? (this.reshapeRequired = !1)
          : (this.reshapeRequired = !0);
      }
      call(t, e) {
        return Object(En.ud)(() => {
          if (((t = t), this.reshapeRequired)) {
            const e = [],
              n = t.map((t) => t.rank);
            if (-1 === n.indexOf(null)) {
              const r = Cr(n);
              for (let n of t) {
                const t = n.rank;
                for (let e = 0; e < r - t; ++e) n = Sr(n, 1);
                e.push(n);
              }
              return this.mergeFunction(e);
            }
            {
              let n = !1;
              for (const r of t) {
                const t = r.rank;
                if (null == t) {
                  const t = r.shape,
                    a = t[0],
                    i = t.slice(1).concat([a]);
                  let o = r.reshape([a].concat(yr(t.slice(1))));
                  (o = En.yd(o, [1, 0])),
                    (o = o.reshape(i)),
                    e.push(o),
                    (n = !0);
                } else if (t > 1) {
                  const a = Or(1, t).concat([0]);
                  e.push(En.yd(r, a)), (n = !0);
                } else e.push(r);
              }
              let r = this.mergeFunction(e);
              const a = r.rank;
              if (n)
                if (null == a) {
                  const t = r.shape,
                    e = t[t.length - 1],
                    n = [e].concat(t.slice(0, t.length - 1));
                  r = En.yd(r.reshape([-1, e]), [1, 0]).reshape(n);
                } else if (a > 1) {
                  const t = [a - 1].concat(Or(0, a - 1));
                  r = En.yd(r, t);
                }
              return r;
            }
          }
          return this.mergeFunction(t);
        });
      }
      computeOutputShape(t) {
        let e;
        e = null == (t = t)[0] ? null : t[0].slice(1);
        for (let n = 1; n < t.length; ++n) {
          const r = null == t[n] ? null : t[n].slice(1);
          e = this.computeElementwiseOpOutputShape(e, r);
        }
        let n = [];
        for (const e of t) null != e && null !== e[0] && n.push(e[0]);
        return (
          (n = Vn(n)), (e = 1 === n.length ? n.concat(e) : [null].concat(e)), e
        );
      }
      computeMask(t, e) {
        return En.ud(() => {
          if (null == e) return null;
          if (!Array.isArray(e)) throw new Rn("`mask` should be an Array");
          if (!Array.isArray(t)) throw new Rn("`inputs` should be an Array");
          if (e.length !== t.length)
            throw new Rn(
              `The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${t.length} vs ${e.length})`
            );
          if (e.every((t) => null == t)) return null;
          let n = (e = e.map((t) => (null == t ? t : En.sb(t, 0))))[0];
          for (let t = 1; t < e.length - 1; ++t) n = En.Ub(n, e[t]);
          return n;
        });
      }
    }
    class Jo extends Yo {
      constructor(t) {
        super(t);
      }
      mergeFunction(t) {
        return Object(En.ud)(() => {
          let e = t[0].clone();
          for (let n = 1; n < t.length; ++n) e = En.r(e, t[n]);
          return e;
        });
      }
    }
    (Jo.className = "Add"), En.Mc.registerClass(Jo);
    class Qo extends Yo {
      constructor(t) {
        super(t);
      }
      mergeFunction(t) {
        return Object(En.ud)(() => {
          let e = t[0].clone();
          for (let n = 1; n < t.length; ++n) e = En.jc(e, t[n]);
          return e;
        });
      }
    }
    (Qo.className = "Multiply"), En.Mc.registerClass(Qo);
    class Zo extends Yo {
      constructor(t) {
        super(t);
      }
      mergeFunction(t) {
        return Object(En.ud)(() => {
          let e = t[0].clone();
          for (let n = 1; n < t.length; ++n) e = En.r(e, t[n]);
          return En.jc(1 / t.length, e);
        });
      }
    }
    (Zo.className = "Average"), En.Mc.registerClass(Zo);
    class ts extends Yo {
      constructor(t) {
        super(t);
      }
      mergeFunction(t) {
        return Object(En.ud)(() => {
          let e = t[0];
          for (let n = 1; n < t.length; ++n) e = En.cc(e, t[n]);
          return e;
        });
      }
    }
    (ts.className = "Maximum"), En.Mc.registerClass(ts);
    class es extends Yo {
      constructor(t) {
        super(t);
      }
      mergeFunction(t) {
        return Object(En.ud)(() => {
          let e = t[0];
          for (let n = 1; n < t.length; ++n) e = En.gc(e, t[n]);
          return e;
        });
      }
    }
    (es.className = "Minimum"), En.Mc.registerClass(es);
    class ns extends Yo {
      constructor(t) {
        super(t),
          (this.DEFAULT_AXIS = -1),
          null == t && (t = {}),
          (this.axis = null == t.axis ? this.DEFAULT_AXIS : t.axis),
          (this.supportsMasking = !0),
          (this.reshapeRequired = !1);
      }
      build(t) {
        if (!Array.isArray(t) || !Array.isArray(t[0]) || 1 === t.length)
          throw new Rn(
            "A `Concatenate` layer should be called on a list of at least 2 inputs"
          );
        t = t;
        let e = !0;
        for (const n of t)
          if (null != n) {
            e = !1;
            break;
          }
        if (e) return;
        const n = [];
        for (let e = 0; e < t.length; ++e) {
          const r = t[e].slice();
          r.splice(this.axis, 1);
          let a = !1;
          for (const t of n)
            if (En.Cd.arraysEqual(t, r)) {
              a = !0;
              break;
            }
          a || n.push(r);
        }
        if (n.length > 1)
          throw new Rn(
            "A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: " +
              JSON.stringify(t)
          );
      }
      mergeFunction(t) {
        return Object(En.ud)(() => Rr(t, this.axis));
      }
      computeOutputShape(t) {
        if (!Array.isArray(t) || !Array.isArray(t[0]))
          throw new Rn(
            "A `Concatenate` layer should be called on a list of inputs."
          );
        const e = t,
          n = e[0].slice(),
          r = this.axis < 0 ? n.length + this.axis : this.axis;
        for (const t of e.slice(1)) {
          if (null == n[r] || null == t[r]) {
            n[r] = null;
            break;
          }
          n[r] += t[r];
        }
        return n;
      }
      computeMask(t, e) {
        if (null == e) return null;
        if (!Array.isArray(e))
          throw new Rn("`mask` should be an array for Concatenate");
        if (!Array.isArray(t))
          throw new Rn("`inputs` should be an array for Concatenate");
        if (e.length !== t.length)
          throw new Rn(
            `Mismatch in the length of mask (${e.length}) and the legnth of inputs (${t.length})`
          );
        return En.ud(() => {
          let n = !0;
          if (
            (e.forEach((t) => {
              null == t || (n = !1);
            }),
            n)
          )
            return null;
          const r = [];
          for (let n = 0; n < t.length; ++n)
            null == e[n]
              ? r.push(En.qc(t[n]).asType("bool"))
              : e[n].rank < t[n].rank
              ? r.push(En.sb(e[n], -1))
              : r.push(e[n]);
          const a = En.S(r, this.axis);
          return En.t(a, -1, !1);
        });
      }
      getConfig() {
        const t = { axis: this.axis },
          e = super.getConfig();
        return Object.assign(t, e), t;
      }
    }
    function rs(t, e) {
      for (; t < 0; ) t += e;
      return t;
    }
    (ns.className = "Concatenate"), En.Mc.registerClass(ns);
    class as extends Yo {
      constructor(t) {
        super(t),
          (this.axes = t.axes),
          (this.normalize = null != t.normalize && t.normalize),
          (this.supportsMasking = !0),
          (this.reshapeRequired = !1);
      }
      build(t) {
        En.Cd.assert(
          Array.isArray(t) &&
            2 === t.length &&
            Array.isArray(t[0]) &&
            Array.isArray(t[1]),
          () => "A `Dot` layer should be called on a list of exactly 2 inputs."
        );
        const e = t[0],
          n = t[1];
        if (e.length > 3 || n.length > 3)
          throw new An(
            "Dot layer does not support tensors of 4D or higher rank yet."
          );
        const r = this.interpretAxes(e, n);
        if (e[r[0]] !== n[r[1]])
          throw new Rn(`Dimension incompatibility: ${e[r[0]]} !== ${n[r[1]]}`);
      }
      mergeFunction(t) {
        if (2 !== t.length)
          throw new Rn(
            `A \`Dot\` layer must be called on exactly 2 inputs, but received ${t.length} input(s).`
          );
        let e,
          n = t[0],
          r = t[1];
        return (
          (e = Array.isArray(this.axes)
            ? this.axes.map((e, n) => rs(e, t[n].shape.length))
            : [rs(this.axes, n.shape.length), rs(this.axes, r.shape.length)]),
          this.normalize && ((n = La(n, e[0])), (r = La(r, e[1]))),
          (function (t, e, n) {
            if (t.shape.length > 3 || e.shape.length > 3)
              throw new An(
                "batchDot is not implemented for tensors of 4D or higher rank yet"
              );
            if (
              (En.Cd.assert(
                t.shape.length >= 2,
                () =>
                  "batchDot requires the rank of x to be >= 2, but got " +
                  t.shape.length
              ),
              En.Cd.assert(
                t.shape.length >= 2,
                () =>
                  "batchDot requires the rank of y to be >= 2, but got " +
                  e.shape.length
              ),
              "number" == typeof n && (n = [n, n]),
              "complex64" === t.dtype || "complex64" === e.dtype)
            )
              throw new An(
                "batchDot is not implemented for complex64-type Tensors yet."
              );
            const r = t.shape.length,
              a = e.shape.length;
            null == n && (n = [r - 1, a - 2]);
            const i = n;
            return En.ud(() => {
              let n, o;
              if (r > a) {
                n = r - a;
                const t = [];
                for (let e = 0; e < n; ++e) t.push(1);
                e = e.reshape(e.shape.concat(t));
              } else if (a > r) {
                n = a - r;
                const e = [];
                for (let t = 0; t < n; ++t) e.push(1);
                t = t.reshape(t.shape.concat(e));
              } else n = 0;
              if (2 === t.shape.length && 2 === e.shape.length)
                o =
                  i[0] === i[1]
                    ? t.mul(e).sum(i[0])
                    : t.transpose([1, 0]).mul(e).sum(i[1]);
              else {
                const n = i[0] !== t.shape.length - 1,
                  r = i[1] === e.shape.length - 1;
                o = t.matMul(e, n, r);
              }
              if (n > 0) {
                let t;
                t = r > a ? r + a - 3 : r - 1;
                const e = [];
                for (let r = t; r < t + n; ++r) e.push(r);
                o = o.squeeze(e);
              }
              return 1 === o.shape.length && (o = o.expandDims(1)), o;
            });
          })(n, r, e)
        );
      }
      interpretAxes(t, e) {
        let n;
        return (
          (n = Array.isArray(this.axes)
            ? this.axes
            : [rs(this.axes, t.length), rs(this.axes, e.length)]),
          n
        );
      }
      computeOutputShape(t) {
        En.Cd.assert(
          Array.isArray(t) &&
            2 === t.length &&
            Array.isArray(t[0]) &&
            Array.isArray(t[1]),
          () => "A `Dot` layer should be called on a list of exactly 2 inputs."
        );
        const e = t[0].slice(),
          n = t[1].slice();
        if (e.length > 3 || n.length > 3)
          throw new An(
            "Dot layer does not support tensors of 4D or higher rank yet."
          );
        const r = this.interpretAxes(e, n);
        e.splice(r[0], 1), n.splice(r[1], 1), n.splice(0, 1);
        const a = e.concat(n);
        return 1 === a.length && a.push(1), a;
      }
      computeMask(t, e) {
        return null;
      }
      getConfig() {
        const t = { axes: this.axes, normalize: this.normalize },
          e = super.getConfig();
        return Object.assign(t, e), t;
      }
    }
    (as.className = "Dot"), En.Mc.registerClass(as);
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */
    class is extends Sa {
      constructor(t) {
        super(t), (this.supportsMasking = !0), (this.stddev = t.stddev);
      }
      computeOutputShape(t) {
        return t;
      }
      getConfig() {
        const t = super.getConfig(),
          e = { stddev: this.stddev };
        return Object.assign(e, t), e;
      }
      call(t, e) {
        return Object(En.ud)(() => {
          this.invokeCallHook(t, e);
          const n = fa(t);
          return Pr(
            () => _r(n.shape, 0, this.stddev).add(n),
            () => n,
            e.training || !1
          );
        });
      }
    }
    (is.className = "GaussianNoise"), En.Mc.registerClass(is);
    class os extends Sa {
      constructor(t) {
        super(t), (this.supportsMasking = !0), (this.rate = t.rate);
      }
      computeOutputShape(t) {
        return t;
      }
      getConfig() {
        const t = super.getConfig(),
          e = { rate: this.rate };
        return Object.assign(e, t), e;
      }
      call(t, e) {
        return Object(En.ud)(() => {
          this.invokeCallHook(t, e);
          const n = fa(t);
          if (this.rate > 0 && this.rate < 1) {
            return Pr(
              () => {
                const t = Math.sqrt(this.rate / (1 - this.rate));
                return n.mul(_r(n.shape, 1, t));
              },
              () => n,
              e.training || !1
            );
          }
          return n;
        });
      }
    }
    (os.className = "GaussianDropout"), En.Mc.registerClass(os);
    class ss extends Sa {
      constructor(t) {
        super(t),
          (this.supportsMasking = !0),
          (this.rate = t.rate),
          (this.noiseShape = t.noiseShape);
      }
      _getNoiseShape(t) {
        return this.noiseShape || fa(t).shape;
      }
      computeOutputShape(t) {
        return t;
      }
      getConfig() {
        const t = super.getConfig(),
          e = { rate: this.rate };
        return Object.assign(e, t), e;
      }
      call(t, e) {
        return Object(En.ud)(() => {
          if (this.rate < 1 && this.rate > 0) {
            const n = this._getNoiseShape(t);
            return Pr(
              () => {
                const e = fa(t),
                  r = -1.7580993408473766;
                let a = Object(En.Db)(Object(En.wc)(n), this.rate);
                a = Er(a, "float32");
                const i = ((1 - this.rate) * (1 + this.rate * r ** 2)) ** -0.5,
                  o = -i * r * this.rate;
                return e.mul(a).add(a.add(-1).mul(r)).mul(i).add(o);
              },
              () => fa(t),
              e.training || !1
            );
          }
          return t;
        });
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */
    function us(t, e, n, r, a, i = 0.001) {
      let o;
      if (2 === t.rank) o = En.H(t, e, n, r, a, i);
      else if (3 === t.rank) o = En.I(t, e, n, r, a, i);
      else {
        if (4 !== t.rank)
          throw new An(
            `batchNormalization is not implemented for array of rank ${t.rank} yet`
          );
        o = En.J(t, e, n, r, a, i);
      }
      return o;
    }
    function cs(t, e, n, r, a = 0.001) {
      return En.Cd.arraysEqual(r.slice().sort(), Or(0, t.rank - 1))
        ? (function (t, e, n, r, a = 0.001) {
            return Object(En.ud)(() => {
              const i = En.ic(t, r),
                o = i.mean,
                s = i.variance;
              return [us(t, o, s, n, e, a), o, s];
            });
          })(t, e, n, r, a)
        : (function (t, e, n, r, a = 0.001) {
            return Object(En.ud)(() => {
              const i = En.ic(t, r),
                o = i.mean,
                s = i.variance,
                u = [];
              for (const e of Or(0, t.rank))
                -1 !== r.indexOf(e) ? u.push(1) : u.push(t.shape[e]);
              const c = o.reshape(u),
                l = s.reshape(u),
                h = null == e ? null : e.reshape(u),
                d = null == n ? null : n.reshape(u);
              return [us(t, c, l, d, h, a), o, s];
            });
          })(t, e, n, r, a);
    }
    (ss.className = "AlphaDropout"), En.Mc.registerClass(ss);
    class ls extends Sa {
      constructor(t) {
        null == t && (t = {}),
          super(t),
          (this.supportsMasking = !0),
          (this.axis = null == t.axis ? -1 : t.axis),
          (this.momentum = null == t.momentum ? 0.99 : t.momentum),
          (this.epsilon = null == t.epsilon ? 0.001 : t.epsilon),
          (this.center = null == t.center || t.center),
          (this.scale = null == t.scale || t.scale),
          (this.betaInitializer = sa(t.betaInitializer || "zeros")),
          (this.gammaInitializer = sa(t.gammaInitializer || "ones")),
          (this.movingMeanInitializer = sa(t.movingMeanInitializer || "zeros")),
          (this.movingVarianceInitializer = sa(
            t.movingVarianceInitializer || "ones"
          )),
          (this.betaConstraint = ar(t.betaConstraint)),
          (this.gammaConstraint = ar(t.gammaConstraint)),
          (this.betaRegularizer = fo(t.betaRegularizer)),
          (this.gammaRegularizer = fo(t.gammaRegularizer));
      }
      build(t) {
        t = ma(t);
        const e = this.axis >= 0 ? this.axis : this.axis + t.length,
          n = t[e];
        if (null == n)
          throw new Rn(
            `Axis ${e} of input tensor should have a defined dimension but the layer received an input with shape ` +
              JSON.stringify(t) +
              "."
          );
        this.inputSpec = [new xa({ ndim: t.length, axes: { [e]: n } })];
        const r = [n];
        this.scale &&
          (this.gamma = this.addWeight(
            "gamma",
            r,
            null,
            this.gammaInitializer,
            this.gammaRegularizer,
            !0,
            this.gammaConstraint
          )),
          this.center &&
            (this.beta = this.addWeight(
              "beta",
              r,
              null,
              this.betaInitializer,
              this.betaRegularizer,
              !0,
              this.betaConstraint
            )),
          (this.movingMean = this.addWeight(
            "moving_mean",
            r,
            null,
            this.movingMeanInitializer,
            null,
            !1
          )),
          (this.movingVariance = this.addWeight(
            "moving_variance",
            r,
            null,
            this.movingVarianceInitializer,
            null,
            !1
          )),
          (this.built = !0);
      }
      call(t, e) {
        return Object(En.ud)(() => {
          const n = null != e.training && e.training,
            r = fa(t),
            a = r.shape,
            i = a.length,
            o = Or(0, i),
            s = this.axis >= 0 ? this.axis : this.axis + i;
          o.splice(s, 1);
          const u = _n(1, i);
          u[s] = a[s];
          const c = o.slice();
          c.sort();
          const l = !En.Cd.arraysEqual(c, Or(0, i).slice(0, i - 1));
          if (!n)
            return (() => {
              if (l) {
                const t = this.movingMean.read().reshape(u),
                  e = this.movingVariance.read().reshape(u),
                  n = this.center ? this.beta.read().reshape(u) : null,
                  a = this.scale ? this.gamma.read().reshape(u) : null;
                return us(r, t, e, n, a, this.epsilon);
              }
              return us(
                r,
                this.movingMean.read(),
                this.movingVariance.read(),
                null == this.beta ? null : this.beta.read(),
                null == this.gamma ? null : this.gamma.read(),
                this.epsilon
              );
            })();
          const [h, d, p] = cs(
              r,
              this.gamma.read(),
              this.beta.read(),
              o,
              this.epsilon
            ),
            f = (t, e, n) => {
              En.ud(() => {
                const r = 1 - n,
                  a = t.read(),
                  i = a.sub(e).mul(r);
                t.write(a.sub(i));
              });
            };
          return (
            (() => {
              f(this.movingMean, d, this.momentum),
                f(this.movingVariance, p, this.momentum);
            })(),
            h
          );
        });
      }
      getConfig() {
        const t = {
            axis: this.axis,
            momentum: this.momentum,
            epsilon: this.epsilon,
            center: this.center,
            scale: this.scale,
            betaInitializer: oa(this.betaInitializer),
            gammaInitializer: oa(this.gammaInitializer),
            movingMeanInitializer: oa(this.movingMeanInitializer),
            movingVarianceInitializer: oa(this.movingVarianceInitializer),
            betaRegularizer: ho(this.betaRegularizer),
            gammaRegularizer: ho(this.gammaRegularizer),
            betaConstraint: nr(this.betaConstraint),
            gammaConstraint: nr(this.gammaConstraint),
          },
          e = super.getConfig();
        return Object.assign(t, e), t;
      }
    }
    (ls.className = "BatchNormalization"), En.Mc.registerClass(ls);
    class hs extends Sa {
      constructor(t) {
        if (
          (null == t && (t = {}),
          super(t),
          (this.axis = null == t.axis ? -1 : t.axis),
          "number" == typeof this.axis)
        ) {
          if (!Number.isInteger(this.axis))
            throw new Error(
              "Expected axis to be an integer, but received " + this.axis
            );
        } else {
          if (!Array.isArray(this.axis))
            throw new Error(
              "Expected axis to be an integer or an array of integers, but received " +
                JSON.stringify(this.axis)
            );
          for (const t of this.axis)
            if (!Number.isInteger(t))
              throw new Error(
                "Expected axis to be an array of integers, but received " +
                  JSON.stringify(this.axis)
              );
        }
        (this.epsilon = null == t.epsilon ? 0.001 : t.epsilon),
          (this.center = null == t.center || t.center),
          (this.scale = null == t.scale || t.scale),
          (this.betaInitializer = sa(t.betaInitializer || "zeros")),
          (this.gammaInitializer = sa(t.gammaInitializer || "ones")),
          (this.betaRegularizer = fo(t.betaRegularizer)),
          (this.gammaRegularizer = fo(t.gammaRegularizer)),
          (this.supportsMasking = !0);
      }
      build(t) {
        const e = (t = ma(t)).length;
        "number" == typeof this.axis && (this.axis = [this.axis]);
        for (let t = 0; t < this.axis.length; ++t)
          this.axis[t] < 0 && (this.axis[t] += e);
        for (const t of this.axis)
          if (t < 0 || t >= e) throw new Error("Invalid axis: " + t);
        if (this.axis.length !== Vn(this.axis).length)
          throw new Error("Found duplicate axes in: " + this.axis);
        const n = this.axis.map((e) => t[e]);
        this.scale
          ? (this.gamma = this.addWeight(
              "gamma",
              n,
              "float32",
              this.gammaInitializer,
              this.gammaRegularizer,
              !0
            ))
          : (this.gamma = null),
          this.center
            ? (this.beta = this.addWeight(
                "beta",
                n,
                "float32",
                this.betaInitializer,
                this.betaRegularizer,
                !0
              ))
            : (this.beta = null),
          (this.built = !0);
      }
      call(t, e) {
        const n = fa(t),
          r = n.shape,
          a = r.length;
        return Object(En.ud)(() => {
          let { mean: t, variance: e } = Object(En.ic)(n, this.axis, !0);
          const i = _n(1, a);
          for (const t of this.axis) i[t] = r[t];
          const o = (t) =>
            null != t && t.shape.length !== a && this.axis !== [a - 1]
              ? t.reshape(i)
              : t;
          let s = o(this.gamma.read()),
            u = o(this.beta.read());
          const c = [],
            l = [];
          for (let t = 0; t < a; ++t)
            -1 !== this.axis.indexOf(t)
              ? (c.push(r[t]), l.push(1))
              : (c.push(1), l.push(r[t]));
          return (
            (t = t.tile(c)),
            (e = e.tile(c)),
            (s = s.tile(l)),
            (u = u.tile(l)),
            us(n, t, e, u, s, this.epsilon)
          );
        });
      }
      getConfig() {
        const t = {
            axis: this.axis,
            epsilon: this.epsilon,
            center: this.center,
            scale: this.scale,
            betaInitializer: oa(this.betaInitializer),
            gammaInitializer: oa(this.gammaInitializer),
            betaRegularizer: ho(this.betaRegularizer),
            gammaRegularizer: ho(this.gammaRegularizer),
          },
          e = super.getConfig();
        return Object.assign(t, e), t;
      }
    }
    (hs.className = "LayerNormalization"), En.Mc.registerClass(hs);
    class ds extends Sa {
      constructor(t) {
        if (
          (null == t && (t = {}),
          super(t),
          (this.dataFormat =
            null == t.dataFormat ? "channelsLast" : t.dataFormat),
          null == t.padding)
        )
          this.padding = [
            [1, 1],
            [1, 1],
          ];
        else if ("number" == typeof t.padding)
          this.padding = [
            [t.padding, t.padding],
            [t.padding, t.padding],
          ];
        else {
          if (((t.padding = t.padding), 2 !== t.padding.length))
            throw new Rn(
              `ZeroPadding2D expects padding to be a length-2 array, but received a length-${t.padding.length} array.`
            );
          let e, n;
          if ("number" == typeof t.padding[0])
            (e = [t.padding[0], t.padding[0]]),
              (n = [t.padding[1], t.padding[1]]);
          else {
            if (((t.padding = t.padding), 2 !== t.padding[0].length))
              throw new Rn(
                `ZeroPadding2D expects height padding to be a length-2 array, but received a length-${t.padding[0].length} array.`
              );
            if (((e = t.padding[0]), 2 !== t.padding[1].length))
              throw new Rn(
                `ZeroPadding2D expects width padding to be a length-2 array, but received a length-${t.padding[1].length} array.`
              );
            n = t.padding[1];
          }
          this.padding = [e, n];
        }
        this.inputSpec = [new xa({ ndim: 4 })];
      }
      computeOutputShape(t) {
        let e, n;
        return (
          (t = ma(t)),
          "channelsFirst" === this.dataFormat
            ? ((e =
                null != t[2] && t[2] >= 0
                  ? t[2] + this.padding[0][0] + this.padding[0][1]
                  : null),
              (n =
                null != t[3] && t[3] >= 0
                  ? t[3] + this.padding[1][0] + this.padding[1][1]
                  : null),
              [t[0], t[1], e, n])
            : ((e =
                null != t[1] && t[1] >= 0
                  ? t[1] + this.padding[0][0] + this.padding[0][1]
                  : null),
              (n =
                null != t[2] && t[2] >= 0
                  ? t[2] + this.padding[1][0] + this.padding[1][1]
                  : null),
              [t[0], e, n, t[3]])
        );
      }
      call(t, e) {
        return Object(En.ud)(() => {
          return (
            (e = fa(t)),
            (n = this.padding),
            (r = this.dataFormat),
            Object(En.ud)(() => {
              if (4 !== e.rank)
                throw new Rn(
                  "temporalPadding expects input tensor to be 4-D, but received a " +
                    e.rank +
                    "-D tensor."
                );
              if (
                (null == n &&
                  (n = [
                    [1, 1],
                    [1, 1],
                  ]),
                2 !== n.length || 2 !== n[0].length || 2 !== n[1].length)
              )
                throw new Rn(
                  "spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers."
                );
              if (
                (null == r && (r = "channelsLast"),
                "channelsLast" !== r && "channelsFirst" !== r)
              )
                throw new Rn(
                  `Unknown data format: ${r}. Supported data formats are 'channelsLast' and 'channelsFirst.`
                );
              let t;
              return (
                (t =
                  "channelsFirst" === r
                    ? [[0, 0], [0, 0], n[0], n[1]]
                    : [[0, 0], n[0], n[1], [0, 0]]),
                En.rc(e, t)
              );
            })
          );
          var e, n, r;
        });
      }
      getConfig() {
        const t = { padding: this.padding, dataFormat: this.dataFormat },
          e = super.getConfig();
        return Object.assign(t, e), t;
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */
    function ps(t, e, n, r, a, i) {
      return Object(En.ud)(() => {
        let o;
        lr(a),
          dr(i),
          hr(r),
          null == n && (n = [1, 1]),
          null == r && (r = "valid"),
          null == a && (a = "channelsLast"),
          null == i && (i = "max"),
          (t = Eo(t, a));
        const s = "same" === r ? "same" : "valid";
        return (
          (o = "max" === i ? En.Zb(t, e, n, s) : En.C(t, e, n, s)),
          "channelsFirst" === a && (o = En.yd(o, [0, 3, 1, 2])),
          o
        );
      });
    }
    function fs(t, e, n, r, a, i) {
      return Object(En.ud)(() => {
        let o;
        lr(a),
          dr(i),
          hr(r),
          null == n && (n = [1, 1, 1]),
          null == r && (r = "valid"),
          null == a && (a = "channelsLast"),
          null == i && (i = "max"),
          (t = So(t, a));
        const s = "same" === r ? "same" : "valid";
        return (
          (o = "max" === i ? En.ac(t, e, n, s) : En.D(t, e, n, s)),
          "channelsFirst" === a && (o = En.yd(o, [0, 4, 1, 2, 3])),
          o
        );
      });
    }
    (ds.className = "ZeroPadding2D"), En.Mc.registerClass(ds);
    class ms extends Sa {
      constructor(t) {
        if (
          (null == t.poolSize && (t.poolSize = 2),
          super(t),
          "number" == typeof t.poolSize)
        )
          this.poolSize = [t.poolSize];
        else {
          if (
            !Array.isArray(t.poolSize) ||
            1 !== t.poolSize.length ||
            "number" != typeof t.poolSize[0]
          )
            throw new Rn(
              "poolSize for 1D convolutional layer must be a number or an Array of a single number, but received " +
                JSON.stringify(t.poolSize)
            );
          this.poolSize = t.poolSize;
        }
        if ((qn(this.poolSize, "poolSize"), null == t.strides))
          this.strides = this.poolSize;
        else if ("number" == typeof t.strides) this.strides = [t.strides];
        else {
          if (
            !Array.isArray(t.strides) ||
            1 !== t.strides.length ||
            "number" != typeof t.strides[0]
          )
            throw new Rn(
              "strides for 1D convolutional layer must be a number or an Array of a single number, but received " +
                JSON.stringify(t.strides)
            );
          this.strides = t.strides;
        }
        qn(this.strides, "strides"),
          (this.padding = null == t.padding ? "valid" : t.padding),
          hr(this.padding),
          (this.inputSpec = [new xa({ ndim: 3 })]);
      }
      computeOutputShape(t) {
        const e = Co(
          (t = ma(t))[1],
          this.poolSize[0],
          this.padding,
          this.strides[0]
        );
        return [t[0], e, t[2]];
      }
      call(t, e) {
        return Object(En.ud)(() => {
          this.invokeCallHook(t, e), (t = Sr(fa(t), 2));
          const n = this.poolingFunction(
            fa(t),
            [this.poolSize[0], 1],
            [this.strides[0], 1],
            this.padding,
            "channelsLast"
          );
          return En.hd(n, [2]);
        });
      }
      getConfig() {
        const t = {
            poolSize: this.poolSize,
            padding: this.padding,
            strides: this.strides,
          },
          e = super.getConfig();
        return Object.assign(t, e), t;
      }
    }
    class gs extends ms {
      constructor(t) {
        super(t);
      }
      poolingFunction(t, e, n, r, a) {
        return lr(a), hr(r), ps(t, e, n, r, a, "max");
      }
    }
    (gs.className = "MaxPooling1D"), En.Mc.registerClass(gs);
    class bs extends ms {
      constructor(t) {
        super(t);
      }
      poolingFunction(t, e, n, r, a) {
        return lr(a), hr(r), ps(t, e, n, r, a, "avg");
      }
    }
    (bs.className = "AveragePooling1D"), En.Mc.registerClass(bs);
    class vs extends Sa {
      constructor(t) {
        if (
          (null == t.poolSize && (t.poolSize = [2, 2]),
          super(t),
          (this.poolSize = Array.isArray(t.poolSize)
            ? t.poolSize
            : [t.poolSize, t.poolSize]),
          null == t.strides)
        )
          this.strides = this.poolSize;
        else if (Array.isArray(t.strides)) {
          if (2 !== t.strides.length)
            throw new Rn(
              "If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length " +
                t.strides.length +
                "."
            );
          this.strides = t.strides;
        } else this.strides = [t.strides, t.strides];
        qn(this.poolSize, "poolSize"),
          qn(this.strides, "strides"),
          (this.padding = null == t.padding ? "valid" : t.padding),
          (this.dataFormat =
            null == t.dataFormat ? "channelsLast" : t.dataFormat),
          lr(this.dataFormat),
          hr(this.padding),
          (this.inputSpec = [new xa({ ndim: 4 })]);
      }
      computeOutputShape(t) {
        t = ma(t);
        let e = "channelsFirst" === this.dataFormat ? t[2] : t[1],
          n = "channelsFirst" === this.dataFormat ? t[3] : t[2];
        return (
          (e = Co(e, this.poolSize[0], this.padding, this.strides[0])),
          (n = Co(n, this.poolSize[1], this.padding, this.strides[1])),
          "channelsFirst" === this.dataFormat
            ? [t[0], t[1], e, n]
            : [t[0], e, n, t[3]]
        );
      }
      call(t, e) {
        return Object(En.ud)(
          () => (
            this.invokeCallHook(t, e),
            this.poolingFunction(
              fa(t),
              this.poolSize,
              this.strides,
              this.padding,
              this.dataFormat
            )
          )
        );
      }
      getConfig() {
        const t = {
            poolSize: this.poolSize,
            padding: this.padding,
            strides: this.strides,
            dataFormat: this.dataFormat,
          },
          e = super.getConfig();
        return Object.assign(t, e), t;
      }
    }
    class ys extends vs {
      constructor(t) {
        super(t);
      }
      poolingFunction(t, e, n, r, a) {
        return lr(a), hr(r), ps(t, e, n, r, a, "max");
      }
    }
    (ys.className = "MaxPooling2D"), En.Mc.registerClass(ys);
    class xs extends vs {
      constructor(t) {
        super(t);
      }
      poolingFunction(t, e, n, r, a) {
        return lr(a), hr(r), ps(t, e, n, r, a, "avg");
      }
    }
    (xs.className = "AveragePooling2D"), En.Mc.registerClass(xs);
    class ws extends Sa {
      constructor(t) {
        if (
          (null == t.poolSize && (t.poolSize = [2, 2, 2]),
          super(t),
          (this.poolSize = Array.isArray(t.poolSize)
            ? t.poolSize
            : [t.poolSize, t.poolSize, t.poolSize]),
          null == t.strides)
        )
          this.strides = this.poolSize;
        else if (Array.isArray(t.strides)) {
          if (3 !== t.strides.length)
            throw new Rn(
              "If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length " +
                t.strides.length +
                "."
            );
          this.strides = t.strides;
        } else this.strides = [t.strides, t.strides, t.strides];
        qn(this.poolSize, "poolSize"),
          qn(this.strides, "strides"),
          (this.padding = null == t.padding ? "valid" : t.padding),
          (this.dataFormat =
            null == t.dataFormat ? "channelsLast" : t.dataFormat),
          lr(this.dataFormat),
          hr(this.padding),
          (this.inputSpec = [new xa({ ndim: 5 })]);
      }
      computeOutputShape(t) {
        t = ma(t);
        let e = "channelsFirst" === this.dataFormat ? t[2] : t[1],
          n = "channelsFirst" === this.dataFormat ? t[3] : t[2],
          r = "channelsFirst" === this.dataFormat ? t[4] : t[3];
        return (
          (e = Co(e, this.poolSize[0], this.padding, this.strides[0])),
          (n = Co(n, this.poolSize[1], this.padding, this.strides[1])),
          (r = Co(r, this.poolSize[2], this.padding, this.strides[2])),
          "channelsFirst" === this.dataFormat
            ? [t[0], t[1], e, n, r]
            : [t[0], e, n, r, t[4]]
        );
      }
      call(t, e) {
        return Object(En.ud)(
          () => (
            this.invokeCallHook(t, e),
            this.poolingFunction(
              fa(t),
              this.poolSize,
              this.strides,
              this.padding,
              this.dataFormat
            )
          )
        );
      }
      getConfig() {
        const t = {
            poolSize: this.poolSize,
            padding: this.padding,
            strides: this.strides,
            dataFormat: this.dataFormat,
          },
          e = super.getConfig();
        return Object.assign(t, e), t;
      }
    }
    class Cs extends ws {
      constructor(t) {
        super(t);
      }
      poolingFunction(t, e, n, r, a) {
        return lr(a), hr(r), fs(t, e, n, r, a, "max");
      }
    }
    (Cs.className = "MaxPooling3D"), En.Mc.registerClass(Cs);
    class Os extends ws {
      constructor(t) {
        super(t);
      }
      poolingFunction(t, e, n, r, a) {
        return lr(a), hr(r), fs(t, e, n, r, a, "avg");
      }
    }
    (Os.className = "AveragePooling3D"), En.Mc.registerClass(Os);
    class Es extends Sa {
      constructor(t) {
        super(t), (this.inputSpec = [new xa({ ndim: 3 })]);
      }
      computeOutputShape(t) {
        return [t[0], t[2]];
      }
      call(t, e) {
        throw new An();
      }
    }
    class Ss extends Es {
      constructor(t) {
        super(t || {});
      }
      call(t, e) {
        return Object(En.ud)(() => {
          const e = fa(t);
          return En.dc(e, 1);
        });
      }
    }
    (Ss.className = "GlobalAveragePooling1D"), En.Mc.registerClass(Ss);
    class Is extends Es {
      constructor(t) {
        super(t || {});
      }
      call(t, e) {
        return Object(En.ud)(() => {
          const e = fa(t);
          return En.Yb(e, 1);
        });
      }
    }
    (Is.className = "GlobalMaxPooling1D"), En.Mc.registerClass(Is);
    class ks extends Sa {
      constructor(t) {
        super(t),
          (this.dataFormat =
            null == t.dataFormat ? "channelsLast" : t.dataFormat),
          lr(this.dataFormat),
          (this.inputSpec = [new xa({ ndim: 4 })]);
      }
      computeOutputShape(t) {
        return (
          (t = t),
          "channelsLast" === this.dataFormat ? [t[0], t[3]] : [t[0], t[1]]
        );
      }
      call(t, e) {
        throw new An();
      }
      getConfig() {
        const t = { dataFormat: this.dataFormat },
          e = super.getConfig();
        return Object.assign(t, e), t;
      }
    }
    class Ns extends ks {
      call(t, e) {
        return Object(En.ud)(() => {
          const e = fa(t);
          return "channelsLast" === this.dataFormat
            ? En.dc(e, [1, 2])
            : En.dc(e, [2, 3]);
        });
      }
    }
    (Ns.className = "GlobalAveragePooling2D"), En.Mc.registerClass(Ns);
    class Rs extends ks {
      call(t, e) {
        return Object(En.ud)(() => {
          const e = fa(t);
          return "channelsLast" === this.dataFormat
            ? En.Yb(e, [1, 2])
            : En.Yb(e, [2, 3]);
        });
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */
    function As(t, e, n, r) {
      if (Array.isArray(t)) {
        if (null != e || null != n)
          throw new Rn(
            "When inputs is an array, neither initialState or constants should be provided"
          );
        null != r &&
          ((n = t.slice(t.length - r, t.length)),
          (t = t.slice(0, t.length - r))),
          t.length > 1 && (e = t.slice(1, t.length)),
          (t = t[0]);
      }
      function a(t) {
        return null == t || Array.isArray(t) ? t : [t];
      }
      return { inputs: t, initialState: (e = a(e)), constants: (n = a(n)) };
    }
    function Ts(t, e, n, r = !1, a, i, o = !1, s = !1) {
      return En.ud(() => {
        const u = e.shape.length;
        if (u < 3) throw new Rn(`Input should be at least 3D, but is ${u}D.`);
        const c = [1, 0].concat(Or(2, u));
        if (((e = En.yd(e, c)), null != i))
          throw new An(
            "The rnn() functoin of the deeplearn.js backend does not support constants yet."
          );
        o &&
          console.warn(
            "Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."
          ),
          null != a &&
            ((a = a.asType("bool").asType("float32")).rank === u - 1 &&
              (a = En.sb(a, -1)),
            (a = En.yd(a, c))),
          r && ((e = En.Ec(e, 0)), null != a && (a = En.Ec(a, 0)));
        const l = [];
        let h,
          d = n;
        const p = e.shape[0],
          f = En.Ad(e);
        let m, g;
        null != a && (m = En.Ad(a));
        for (let e = 0; e < p; ++e) {
          const n = f[e],
            r = En.ud(() => t(n, d));
          if (null == a) (h = r[0]), (d = r[1]);
          else {
            const t = En.ud(() => {
              const t = m[e],
                n = En.qc(t).sub(t);
              return {
                output: r[0].mul(t).add(d[0].mul(n)),
                newStates: d.map((e, a) => r[1][a].mul(t).add(e.mul(n))),
              };
            });
            (h = t.output), (d = t.newStates);
          }
          s && l.push(h);
        }
        if (s) {
          const t = 1;
          g = En.id(l, t);
        }
        return [h, g, d];
      });
    }
    (Rs.className = "GlobalMaxPooling2D"), En.Mc.registerClass(Rs);
    class _s extends Sa {
      constructor(t) {
        let e;
        if ((super(t), null == t.cell))
          throw new Rn("cell property is missing for the constructor of RNN.");
        if (
          ((e = Array.isArray(t.cell) ? new Ls({ cells: t.cell }) : t.cell),
          null == e.stateSize)
        )
          throw new Rn(
            "The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state)."
          );
        (this.cell = e),
          (this.returnSequences =
            null != t.returnSequences && t.returnSequences),
          (this.returnState = null != t.returnState && t.returnState),
          (this.goBackwards = null != t.goBackwards && t.goBackwards),
          (this._stateful = null != t.stateful && t.stateful),
          (this.unroll = null != t.unroll && t.unroll),
          (this.supportsMasking = !0),
          (this.inputSpec = [new xa({ ndim: 3 })]),
          (this.stateSpec = null),
          (this.states_ = null),
          (this.numConstants = null),
          (this.keptStates = []);
      }
      getStates() {
        if (null == this.states_) {
          return Or(
            0,
            Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1
          ).map((t) => null);
        }
        return this.states_;
      }
      setStates(t) {
        this.states_ = t;
      }
      computeOutputShape(t) {
        da(t) && (t = t[0]), (t = t);
        let e = this.cell.stateSize;
        Array.isArray(e) || (e = [e]);
        const n = e[0];
        let r;
        if (
          ((r = this.returnSequences ? [t[0], t[1], n] : [t[0], n]),
          this.returnState)
        ) {
          const n = [];
          for (const r of e) n.push([t[0], r]);
          return [r].concat(n);
        }
        return r;
      }
      computeMask(t, e) {
        return En.ud(() => {
          Array.isArray(e) && (e = e[0]);
          const t = this.returnSequences ? e : null;
          if (this.returnState) {
            const e = this.states.map((t) => null);
            return [t].concat(e);
          }
          return t;
        });
      }
      get states() {
        if (null == this.states_) {
          const t = Array.isArray(this.cell.stateSize)
              ? this.cell.stateSize.length
              : 1,
            e = [];
          for (let n = 0; n < t; ++n) e.push(null);
          return e;
        }
        return this.states_;
      }
      set states(t) {
        this.states_ = t;
      }
      build(t) {
        if (null != this.numConstants)
          throw new An("Constants support is not implemented in RNN yet.");
        da(t) && (t = t[0]), (t = t);
        const e = this.stateful ? t[0] : null,
          n = t[t.length - 1];
        this.inputSpec[0] = new xa({ shape: [e, null, n] });
        const r = [t[0]].concat(t.slice(2));
        let a;
        if (
          (this.cell.build(r),
          (a = Array.isArray(this.cell.stateSize)
            ? this.cell.stateSize
            : [this.cell.stateSize]),
          null != this.stateSpec)
        ) {
          if (
            !En.Cd.arraysEqual(
              this.stateSpec.map((t) => t.shape[t.shape.length - 1]),
              a
            )
          )
            throw new Rn(
              `An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ` +
                this.cell.stateSize
            );
        } else this.stateSpec = a.map((t) => new xa({ shape: [null, t] }));
        this.stateful && this.resetStates();
      }
      resetStates(t, e = !1) {
        Object(En.ud)(() => {
          if (!this.stateful)
            throw new kn(
              "Cannot call resetStates() on an RNN Layer that is not stateful."
            );
          const n = this.inputSpec[0].shape[0];
          if (null == n)
            throw new Rn(
              "If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer."
            );
          if (null == this.states_)
            Array.isArray(this.cell.stateSize)
              ? (this.states_ = this.cell.stateSize.map((t) => En.Id([n, t])))
              : (this.states_ = [En.Id([n, this.cell.stateSize])]);
          else if (null == t)
            En.hb(this.states_),
              null != this.keptStates &&
                (En.hb(this.keptStates), (this.keptStates = [])),
              Array.isArray(this.cell.stateSize)
                ? (this.states_ = this.cell.stateSize.map((t) => En.Id([n, t])))
                : (this.states_[0] = En.Id([n, this.cell.stateSize]));
          else {
            if (
              (Array.isArray(t) || (t = [t]), t.length !== this.states_.length)
            )
              throw new Rn(
                `Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: ` +
                  t
              );
            !0 === e
              ? this.keptStates.push(this.states_.slice())
              : En.hb(this.states_);
            for (let e = 0; e < this.states_.length; ++e) {
              const r = t[e],
                a = Array.isArray(this.cell.stateSize)
                  ? this.cell.stateSize[e]
                  : this.cell.stateSize,
                i = [n, a];
              if (!En.Cd.arraysEqual(r.shape, i))
                throw new Rn(
                  `State ${e} is incompatible with layer ${this.name}: expected shape=${i}, received shape=${r.shape}`
                );
              this.states_[e] = r;
            }
          }
          this.states_ = this.states_.map((t) => En.Jb(t.clone()));
        });
      }
      apply(t, e) {
        let n = null == e ? null : e.initialState,
          r = null == e ? null : e.constants;
        null == e && (e = {});
        const a = As(t, n, r, this.numConstants);
        (t = a.inputs), (n = a.initialState), (r = a.constants);
        let i = [],
          o = [];
        if (null != n) {
          (e.initialState = n), (i = i.concat(n)), (this.stateSpec = []);
          for (const t of n) this.stateSpec.push(new xa({ shape: t.shape }));
          o = o.concat(this.stateSpec);
        }
        null != r &&
          ((e.constants = r),
          (i = i.concat(r)),
          (this.numConstants = r.length));
        if (i[0] instanceof wa) {
          const n = [t].concat(i),
            r = this.inputSpec.concat(o),
            a = this.inputSpec;
          this.inputSpec = r;
          const s = super.apply(n, e);
          return (this.inputSpec = a), s;
        }
        return super.apply(t, e);
      }
      call(t, e) {
        return Object(En.ud)(() => {
          const n = null == e ? null : e.mask,
            r = null == e ? null : e.training;
          let a = null == e ? null : e.initialState;
          (t = fa(t)),
            null == a &&
              (a = this.stateful ? this.states_ : this.getInitialState(t));
          const i = Array.isArray(this.cell.stateSize)
            ? this.cell.stateSize.length
            : 1;
          if (a.length !== i)
            throw new Rn(
              `RNN Layer has ${i} state(s) but was passed ` +
                a.length +
                " initial state(s)."
            );
          this.unroll &&
            console.warn(
              "Ignoring unroll = true for RNN layer, due to imperative backend."
            );
          const o = { training: r },
            s = Ts(
              (t, e) => {
                const n = this.cell.call([t].concat(e), o);
                return [n[0], n.slice(1)];
              },
              t,
              a,
              this.goBackwards,
              n,
              null,
              this.unroll,
              this.returnSequences
            ),
            u = s[0],
            c = s[1],
            l = s[2];
          this.stateful && this.resetStates(l, r);
          const h = this.returnSequences ? c : u;
          return this.returnState ? [h].concat(l) : h;
        });
      }
      getInitialState(t) {
        return Object(En.ud)(() => {
          let e = En.Id(t.shape);
          return (
            (e = En.ld(e, [1, 2])),
            (e = Sr(e)),
            Array.isArray(this.cell.stateSize)
              ? this.cell.stateSize.map((t) => (t > 1 ? Tr(e, [1, t]) : e))
              : this.cell.stateSize > 1
              ? [Tr(e, [1, this.cell.stateSize])]
              : [e]
          );
        });
      }
      get trainableWeights() {
        return this.trainable ? this.cell.trainableWeights : [];
      }
      get nonTrainableWeights() {
        return this.trainable
          ? this.cell.nonTrainableWeights
          : this.cell.weights;
      }
      setFastWeightInitDuringBuild(t) {
        super.setFastWeightInitDuringBuild(t),
          null != this.cell && this.cell.setFastWeightInitDuringBuild(t);
      }
      getConfig() {
        const t = {
          returnSequences: this.returnSequences,
          returnState: this.returnState,
          goBackwards: this.goBackwards,
          stateful: this.stateful,
          unroll: this.unroll,
        };
        null != this.numConstants && (t.numConstants = this.numConstants);
        const e = this.cell.getConfig();
        t.cell = { className: this.cell.getClassName(), config: e };
        const n = super.getConfig();
        return Object.assign(t, n), t;
      }
      static fromConfig(t, e, n = {}) {
        const r = Pa(e.cell, n);
        return new t(Object.assign(e, { cell: r }));
      }
    }
    (_s.className = "RNN"), En.Mc.registerClass(_s);
    class Ds extends Sa {}
    class Fs extends Ds {
      constructor(t) {
        super(t),
          (this.DEFAULT_ACTIVATION = "tanh"),
          (this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal"),
          (this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal"),
          (this.DEFAULT_BIAS_INITIALIZER = "zeros"),
          (this.units = t.units),
          qn(this.units, "units"),
          (this.activation = oo(
            null == t.activation ? this.DEFAULT_ACTIVATION : t.activation
          )),
          (this.useBias = null == t.useBias || t.useBias),
          (this.kernelInitializer = sa(
            t.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER
          )),
          (this.recurrentInitializer = sa(
            t.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER
          )),
          (this.biasInitializer = sa(
            t.biasInitializer || this.DEFAULT_BIAS_INITIALIZER
          )),
          (this.kernelRegularizer = fo(t.kernelRegularizer)),
          (this.recurrentRegularizer = fo(t.recurrentRegularizer)),
          (this.biasRegularizer = fo(t.biasRegularizer)),
          (this.kernelConstraint = ar(t.kernelConstraint)),
          (this.recurrentConstraint = ar(t.recurrentConstraint)),
          (this.biasConstraint = ar(t.biasConstraint)),
          (this.dropout = wr([1, Cr([0, null == t.dropout ? 0 : t.dropout])])),
          (this.recurrentDropout = wr([
            1,
            Cr([0, null == t.recurrentDropout ? 0 : t.recurrentDropout]),
          ])),
          (this.stateSize = this.units),
          (this.dropoutMask = null),
          (this.recurrentDropoutMask = null);
      }
      build(t) {
        (t = ma(t)),
          (this.kernel = this.addWeight(
            "kernel",
            [t[t.length - 1], this.units],
            null,
            this.kernelInitializer,
            this.kernelRegularizer,
            !0,
            this.kernelConstraint
          )),
          (this.recurrentKernel = this.addWeight(
            "recurrent_kernel",
            [this.units, this.units],
            null,
            this.recurrentInitializer,
            this.recurrentRegularizer,
            !0,
            this.recurrentConstraint
          )),
          this.useBias
            ? (this.bias = this.addWeight(
                "bias",
                [this.units],
                null,
                this.biasInitializer,
                this.biasRegularizer,
                !0,
                this.biasConstraint
              ))
            : (this.bias = null),
          (this.built = !0);
      }
      call(t, e) {
        return Object(En.ud)(() => {
          if (2 !== (t = t).length)
            throw new Rn(
              `SimpleRNNCell expects 2 input Tensors, got ${t.length}.`
            );
          let n = t[1];
          t = t[0];
          const r = null != e.training && e.training;
          let a;
          0 < this.dropout &&
            this.dropout < 1 &&
            null == this.dropoutMask &&
            (this.dropoutMask = zs(() => En.qc(t), this.dropout, r)),
            0 < this.recurrentDropout &&
              this.recurrentDropout < 1 &&
              null == this.recurrentDropoutMask &&
              (this.recurrentDropoutMask = zs(
                () => En.qc(n),
                this.recurrentDropout,
                r
              ));
          const i = this.dropoutMask,
            o = this.recurrentDropoutMask;
          (a = Dr(null != i ? En.jc(t, i) : t, this.kernel.read())),
            null != this.bias && (a = $r(a, this.bias.read())),
            null != o && (n = En.jc(n, o));
          let s = En.r(a, Dr(n, this.recurrentKernel.read()));
          return (
            null != this.activation && (s = this.activation.apply(s)), [s, s]
          );
        });
      }
      getConfig() {
        const t = {
            units: this.units,
            activation: ao(this.activation),
            useBias: this.useBias,
            kernelInitializer: oa(this.kernelInitializer),
            recurrentInitializer: oa(this.recurrentInitializer),
            biasInitializer: oa(this.biasInitializer),
            kernelRegularizer: ho(this.kernelRegularizer),
            recurrentRegularizer: ho(this.recurrentRegularizer),
            biasRegularizer: ho(this.biasRegularizer),
            activityRegularizer: ho(this.activityRegularizer),
            kernelConstraint: nr(this.kernelConstraint),
            recurrentConstraint: nr(this.recurrentConstraint),
            biasConstraint: nr(this.biasConstraint),
            dropout: this.dropout,
            recurrentDropout: this.recurrentDropout,
          },
          e = super.getConfig();
        return Object.assign(t, e), t;
      }
    }
    (Fs.className = "SimpleRNNCell"), En.Mc.registerClass(Fs);
    class Ms extends _s {
      constructor(t) {
        (t.cell = new Fs(t)), super(t);
      }
      call(t, e) {
        return Object(En.ud)(() => {
          null != this.cell.dropoutMask &&
            (En.hb(this.cell.dropoutMask), (this.cell.dropoutMask = null)),
            null != this.cell.recurrentDropoutMask &&
              (En.hb(this.cell.recurrentDropoutMask),
              (this.cell.recurrentDropoutMask = null));
          const n = null == e ? null : e.mask,
            r = null == e ? null : e.training,
            a = null == e ? null : e.initialState;
          return super.call(t, { mask: n, training: r, initialState: a });
        });
      }
      get units() {
        return this.cell.units;
      }
      get activation() {
        return this.cell.activation;
      }
      get useBias() {
        return this.cell.useBias;
      }
      get kernelInitializer() {
        return this.cell.kernelInitializer;
      }
      get recurrentInitializer() {
        return this.cell.recurrentInitializer;
      }
      get biasInitializer() {
        return this.cell.biasInitializer;
      }
      get kernelRegularizer() {
        return this.cell.kernelRegularizer;
      }
      get recurrentRegularizer() {
        return this.cell.recurrentRegularizer;
      }
      get biasRegularizer() {
        return this.cell.biasRegularizer;
      }
      get kernelConstraint() {
        return this.cell.kernelConstraint;
      }
      get recurrentConstraint() {
        return this.cell.recurrentConstraint;
      }
      get biasConstraint() {
        return this.cell.biasConstraint;
      }
      get dropout() {
        return this.cell.dropout;
      }
      get recurrentDropout() {
        return this.cell.recurrentDropout;
      }
      getConfig() {
        const t = {
            units: this.units,
            activation: ao(this.activation),
            useBias: this.useBias,
            kernelInitializer: oa(this.kernelInitializer),
            recurrentInitializer: oa(this.recurrentInitializer),
            biasInitializer: oa(this.biasInitializer),
            kernelRegularizer: ho(this.kernelRegularizer),
            recurrentRegularizer: ho(this.recurrentRegularizer),
            biasRegularizer: ho(this.biasRegularizer),
            activityRegularizer: ho(this.activityRegularizer),
            kernelConstraint: nr(this.kernelConstraint),
            recurrentConstraint: nr(this.recurrentConstraint),
            biasConstraint: nr(this.biasConstraint),
            dropout: this.dropout,
            recurrentDropout: this.recurrentDropout,
          },
          e = super.getConfig();
        return delete e.cell, Object.assign(t, e), t;
      }
      static fromConfig(t, e) {
        return new t(e);
      }
    }
    (Ms.className = "SimpleRNN"), En.Mc.registerClass(Ms);
    class js extends Ds {
      constructor(t) {
        if (
          (super(t),
          (this.DEFAULT_ACTIVATION = "tanh"),
          (this.DEFAULT_RECURRENT_ACTIVATION = "hardSigmoid"),
          (this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal"),
          (this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal"),
          (this.DEFAULT_BIAS_INITIALIZER = "zeros"),
          t.resetAfter)
        )
          throw new Rn(
            "GRUCell does not support reset_after parameter set to true."
          );
        (this.units = t.units),
          qn(this.units, "units"),
          (this.activation = oo(
            void 0 === t.activation ? this.DEFAULT_ACTIVATION : t.activation
          )),
          (this.recurrentActivation = oo(
            void 0 === t.recurrentActivation
              ? this.DEFAULT_RECURRENT_ACTIVATION
              : t.recurrentActivation
          )),
          (this.useBias = null == t.useBias || t.useBias),
          (this.kernelInitializer = sa(
            t.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER
          )),
          (this.recurrentInitializer = sa(
            t.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER
          )),
          (this.biasInitializer = sa(
            t.biasInitializer || this.DEFAULT_BIAS_INITIALIZER
          )),
          (this.kernelRegularizer = fo(t.kernelRegularizer)),
          (this.recurrentRegularizer = fo(t.recurrentRegularizer)),
          (this.biasRegularizer = fo(t.biasRegularizer)),
          (this.kernelConstraint = ar(t.kernelConstraint)),
          (this.recurrentConstraint = ar(t.recurrentConstraint)),
          (this.biasConstraint = ar(t.biasConstraint)),
          (this.dropout = wr([1, Cr([0, null == t.dropout ? 0 : t.dropout])])),
          (this.recurrentDropout = wr([
            1,
            Cr([0, null == t.recurrentDropout ? 0 : t.recurrentDropout]),
          ])),
          (this.implementation = t.implementation),
          (this.stateSize = this.units),
          (this.dropoutMask = null),
          (this.recurrentDropoutMask = null);
      }
      build(t) {
        const e = (t = ma(t))[t.length - 1];
        (this.kernel = this.addWeight(
          "kernel",
          [e, 3 * this.units],
          null,
          this.kernelInitializer,
          this.kernelRegularizer,
          !0,
          this.kernelConstraint
        )),
          (this.recurrentKernel = this.addWeight(
            "recurrent_kernel",
            [this.units, 3 * this.units],
            null,
            this.recurrentInitializer,
            this.recurrentRegularizer,
            !0,
            this.recurrentConstraint
          )),
          this.useBias
            ? (this.bias = this.addWeight(
                "bias",
                [3 * this.units],
                null,
                this.biasInitializer,
                this.biasRegularizer,
                !0,
                this.biasConstraint
              ))
            : (this.bias = null),
          (this.built = !0);
      }
      call(t, e) {
        return Object(En.ud)(() => {
          if (2 !== (t = t).length)
            throw new Rn(
              "GRUCell expects 2 input Tensors (inputs, h, c), got " +
                t.length +
                "."
            );
          const n = null != e.training && e.training;
          let r = t[1];
          (t = t[0]),
            0 < this.dropout &&
              this.dropout < 1 &&
              null == this.dropoutMask &&
              (this.dropoutMask = zs(() => En.qc(t), this.dropout, n, 3)),
            0 < this.recurrentDropout &&
              this.recurrentDropout < 1 &&
              null == this.recurrentDropoutMask &&
              (this.recurrentDropoutMask = zs(
                () => En.qc(r),
                this.recurrentDropout,
                n,
                3
              ));
          const a = this.dropoutMask,
            i = this.recurrentDropoutMask;
          let o, s, u;
          0 < this.dropout && this.dropout < 1 && (t = En.jc(t, a[0]));
          let c = Dr(t, this.kernel.read());
          this.useBias && (c = $r(c, this.bias.read())),
            0 < this.recurrentDropout &&
              this.recurrentDropout < 1 &&
              (r = En.jc(r, i[0]));
          const l = this.recurrentKernel.read(),
            [h, d] = En.dd(l, [2 * this.units, this.units], l.rank - 1),
            p = Dr(r, h),
            [f, m, g] = En.dd(c, 3, c.rank - 1),
            [b, v] = En.dd(p, 2, p.rank - 1);
          (o = this.recurrentActivation.apply(En.r(f, b))),
            (s = this.recurrentActivation.apply(En.r(m, v)));
          const y = Dr(En.jc(s, r), d);
          u = this.activation.apply(En.r(g, y));
          const x = En.r(En.jc(o, r), En.jc(En.r(1, En.lc(o)), u));
          return [x, x];
        });
      }
      getConfig() {
        const t = {
            units: this.units,
            activation: ao(this.activation),
            recurrentActivation: ao(this.recurrentActivation),
            useBias: this.useBias,
            kernelInitializer: oa(this.kernelInitializer),
            recurrentInitializer: oa(this.recurrentInitializer),
            biasInitializer: oa(this.biasInitializer),
            kernelRegularizer: ho(this.kernelRegularizer),
            recurrentRegularizer: ho(this.recurrentRegularizer),
            biasRegularizer: ho(this.biasRegularizer),
            activityRegularizer: ho(this.activityRegularizer),
            kernelConstraint: nr(this.kernelConstraint),
            recurrentConstraint: nr(this.recurrentConstraint),
            biasConstraint: nr(this.biasConstraint),
            dropout: this.dropout,
            recurrentDropout: this.recurrentDropout,
            implementation: this.implementation,
            resetAfter: !1,
          },
          e = super.getConfig();
        return Object.assign(t, e), t;
      }
    }
    (js.className = "GRUCell"), En.Mc.registerClass(js);
    class $s extends _s {
      constructor(t) {
        0 === t.implementation &&
          console.warn(
            "`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."
          ),
          (t.cell = new js(t)),
          super(t);
      }
      call(t, e) {
        return Object(En.ud)(() => {
          null != this.cell.dropoutMask &&
            (En.hb(this.cell.dropoutMask), (this.cell.dropoutMask = null)),
            null != this.cell.recurrentDropoutMask &&
              (En.hb(this.cell.recurrentDropoutMask),
              (this.cell.recurrentDropoutMask = null));
          const n = null == e ? null : e.mask,
            r = null == e ? null : e.training,
            a = null == e ? null : e.initialState;
          return super.call(t, { mask: n, training: r, initialState: a });
        });
      }
      get units() {
        return this.cell.units;
      }
      get activation() {
        return this.cell.activation;
      }
      get recurrentActivation() {
        return this.cell.recurrentActivation;
      }
      get useBias() {
        return this.cell.useBias;
      }
      get kernelInitializer() {
        return this.cell.kernelInitializer;
      }
      get recurrentInitializer() {
        return this.cell.recurrentInitializer;
      }
      get biasInitializer() {
        return this.cell.biasInitializer;
      }
      get kernelRegularizer() {
        return this.cell.kernelRegularizer;
      }
      get recurrentRegularizer() {
        return this.cell.recurrentRegularizer;
      }
      get biasRegularizer() {
        return this.cell.biasRegularizer;
      }
      get kernelConstraint() {
        return this.cell.kernelConstraint;
      }
      get recurrentConstraint() {
        return this.cell.recurrentConstraint;
      }
      get biasConstraint() {
        return this.cell.biasConstraint;
      }
      get dropout() {
        return this.cell.dropout;
      }
      get recurrentDropout() {
        return this.cell.recurrentDropout;
      }
      get implementation() {
        return this.cell.implementation;
      }
      getConfig() {
        const t = {
            units: this.units,
            activation: ao(this.activation),
            recurrentActivation: ao(this.recurrentActivation),
            useBias: this.useBias,
            kernelInitializer: oa(this.kernelInitializer),
            recurrentInitializer: oa(this.recurrentInitializer),
            biasInitializer: oa(this.biasInitializer),
            kernelRegularizer: ho(this.kernelRegularizer),
            recurrentRegularizer: ho(this.recurrentRegularizer),
            biasRegularizer: ho(this.biasRegularizer),
            activityRegularizer: ho(this.activityRegularizer),
            kernelConstraint: nr(this.kernelConstraint),
            recurrentConstraint: nr(this.recurrentConstraint),
            biasConstraint: nr(this.biasConstraint),
            dropout: this.dropout,
            recurrentDropout: this.recurrentDropout,
            implementation: this.implementation,
            resetAfter: !1,
          },
          e = super.getConfig();
        return delete e.cell, Object.assign(t, e), t;
      }
      static fromConfig(t, e) {
        return 0 === e.implmentation && (e.implementation = 1), new t(e);
      }
    }
    ($s.className = "GRU"), En.Mc.registerClass($s);
    class Bs extends Ds {
      constructor(t) {
        super(t),
          (this.DEFAULT_ACTIVATION = "tanh"),
          (this.DEFAULT_RECURRENT_ACTIVATION = "hardSigmoid"),
          (this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal"),
          (this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal"),
          (this.DEFAULT_BIAS_INITIALIZER = "zeros"),
          (this.units = t.units),
          qn(this.units, "units"),
          (this.activation = oo(
            void 0 === t.activation ? this.DEFAULT_ACTIVATION : t.activation
          )),
          (this.recurrentActivation = oo(
            void 0 === t.recurrentActivation
              ? this.DEFAULT_RECURRENT_ACTIVATION
              : t.recurrentActivation
          )),
          (this.useBias = null == t.useBias || t.useBias),
          (this.kernelInitializer = sa(
            t.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER
          )),
          (this.recurrentInitializer = sa(
            t.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER
          )),
          (this.biasInitializer = sa(
            t.biasInitializer || this.DEFAULT_BIAS_INITIALIZER
          )),
          (this.unitForgetBias = t.unitForgetBias),
          (this.kernelRegularizer = fo(t.kernelRegularizer)),
          (this.recurrentRegularizer = fo(t.recurrentRegularizer)),
          (this.biasRegularizer = fo(t.biasRegularizer)),
          (this.kernelConstraint = ar(t.kernelConstraint)),
          (this.recurrentConstraint = ar(t.recurrentConstraint)),
          (this.biasConstraint = ar(t.biasConstraint)),
          (this.dropout = wr([1, Cr([0, null == t.dropout ? 0 : t.dropout])])),
          (this.recurrentDropout = wr([
            1,
            Cr([0, null == t.recurrentDropout ? 0 : t.recurrentDropout]),
          ])),
          (this.implementation = t.implementation),
          (this.stateSize = [this.units, this.units]),
          (this.dropoutMask = null),
          (this.recurrentDropoutMask = null);
      }
      build(t) {
        var e;
        const n = (t = ma(t))[t.length - 1];
        let r;
        if (
          ((this.kernel = this.addWeight(
            "kernel",
            [n, 4 * this.units],
            null,
            this.kernelInitializer,
            this.kernelRegularizer,
            !0,
            this.kernelConstraint
          )),
          (this.recurrentKernel = this.addWeight(
            "recurrent_kernel",
            [this.units, 4 * this.units],
            null,
            this.recurrentInitializer,
            this.recurrentRegularizer,
            !0,
            this.recurrentConstraint
          )),
          this.useBias)
        ) {
          if (this.unitForgetBias) {
            const t = this.biasInitializer,
              n = this.units;
            r = new (((e = class extends Wr {
              apply(e, r) {
                const a = t.apply([n]),
                  i = new Ur().apply([n]),
                  o = t.apply([2 * n]);
                return Ar(Ar(a, i), o);
              }
            }).className = "CustomInit"),
            e)();
          } else r = this.biasInitializer;
          this.bias = this.addWeight(
            "bias",
            [4 * this.units],
            null,
            r,
            this.biasRegularizer,
            !0,
            this.biasConstraint
          );
        } else this.bias = null;
        this.built = !0;
      }
      call(t, e) {
        return Object(En.ud)(() => {
          const n = null != e.training && e.training;
          if (3 !== (t = t).length)
            throw new Rn(
              "LSTMCell expects 3 input Tensors (inputs, h, c), got " +
                t.length +
                "."
            );
          let r = t[1];
          const a = t[2];
          (t = t[0]),
            0 < this.dropout &&
              this.dropout < 1 &&
              null == this.dropoutMask &&
              (this.dropoutMask = zs(() => En.qc(t), this.dropout, n, 4)),
            0 < this.recurrentDropout &&
              this.recurrentDropout < 1 &&
              null == this.recurrentDropoutMask &&
              (this.recurrentDropoutMask = zs(
                () => En.qc(r),
                this.recurrentDropout,
                n,
                4
              ));
          const i = this.dropoutMask,
            o = this.recurrentDropoutMask;
          let s, u, c, l;
          0 < this.dropout && this.dropout < 1 && (t = En.jc(t, i[0]));
          let h = Dr(t, this.kernel.read());
          0 < this.recurrentDropout &&
            this.recurrentDropout < 1 &&
            (r = En.jc(r, o[0])),
            (h = En.r(h, Dr(r, this.recurrentKernel.read()))),
            this.useBias && (h = $r(h, this.bias.read()));
          const [d, p, f, m] = En.dd(h, 4, h.rank - 1);
          (s = this.recurrentActivation.apply(d)),
            (u = this.recurrentActivation.apply(p)),
            (c = En.r(En.jc(u, a), En.jc(s, this.activation.apply(f)))),
            (l = this.recurrentActivation.apply(m));
          const g = En.jc(l, this.activation.apply(c));
          return [g, g, c];
        });
      }
      getConfig() {
        const t = {
            units: this.units,
            activation: ao(this.activation),
            recurrentActivation: ao(this.recurrentActivation),
            useBias: this.useBias,
            kernelInitializer: oa(this.kernelInitializer),
            recurrentInitializer: oa(this.recurrentInitializer),
            biasInitializer: oa(this.biasInitializer),
            unitForgetBias: this.unitForgetBias,
            kernelRegularizer: ho(this.kernelRegularizer),
            recurrentRegularizer: ho(this.recurrentRegularizer),
            biasRegularizer: ho(this.biasRegularizer),
            activityRegularizer: ho(this.activityRegularizer),
            kernelConstraint: nr(this.kernelConstraint),
            recurrentConstraint: nr(this.recurrentConstraint),
            biasConstraint: nr(this.biasConstraint),
            dropout: this.dropout,
            recurrentDropout: this.recurrentDropout,
            implementation: this.implementation,
          },
          e = super.getConfig();
        return Object.assign(t, e), t;
      }
    }
    (Bs.className = "LSTMCell"), En.Mc.registerClass(Bs);
    class Ps extends _s {
      constructor(t) {
        0 === t.implementation &&
          console.warn(
            "`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."
          ),
          (t.cell = new Bs(t)),
          super(t);
      }
      call(t, e) {
        return Object(En.ud)(() => {
          null != this.cell.dropoutMask &&
            (En.hb(this.cell.dropoutMask), (this.cell.dropoutMask = null)),
            null != this.cell.recurrentDropoutMask &&
              (En.hb(this.cell.recurrentDropoutMask),
              (this.cell.recurrentDropoutMask = null));
          const n = null == e ? null : e.mask,
            r = null == e ? null : e.training,
            a = null == e ? null : e.initialState;
          return super.call(t, { mask: n, training: r, initialState: a });
        });
      }
      get units() {
        return this.cell.units;
      }
      get activation() {
        return this.cell.activation;
      }
      get recurrentActivation() {
        return this.cell.recurrentActivation;
      }
      get useBias() {
        return this.cell.useBias;
      }
      get kernelInitializer() {
        return this.cell.kernelInitializer;
      }
      get recurrentInitializer() {
        return this.cell.recurrentInitializer;
      }
      get biasInitializer() {
        return this.cell.biasInitializer;
      }
      get unitForgetBias() {
        return this.cell.unitForgetBias;
      }
      get kernelRegularizer() {
        return this.cell.kernelRegularizer;
      }
      get recurrentRegularizer() {
        return this.cell.recurrentRegularizer;
      }
      get biasRegularizer() {
        return this.cell.biasRegularizer;
      }
      get kernelConstraint() {
        return this.cell.kernelConstraint;
      }
      get recurrentConstraint() {
        return this.cell.recurrentConstraint;
      }
      get biasConstraint() {
        return this.cell.biasConstraint;
      }
      get dropout() {
        return this.cell.dropout;
      }
      get recurrentDropout() {
        return this.cell.recurrentDropout;
      }
      get implementation() {
        return this.cell.implementation;
      }
      getConfig() {
        const t = {
            units: this.units,
            activation: ao(this.activation),
            recurrentActivation: ao(this.recurrentActivation),
            useBias: this.useBias,
            kernelInitializer: oa(this.kernelInitializer),
            recurrentInitializer: oa(this.recurrentInitializer),
            biasInitializer: oa(this.biasInitializer),
            unitForgetBias: this.unitForgetBias,
            kernelRegularizer: ho(this.kernelRegularizer),
            recurrentRegularizer: ho(this.recurrentRegularizer),
            biasRegularizer: ho(this.biasRegularizer),
            activityRegularizer: ho(this.activityRegularizer),
            kernelConstraint: nr(this.kernelConstraint),
            recurrentConstraint: nr(this.recurrentConstraint),
            biasConstraint: nr(this.biasConstraint),
            dropout: this.dropout,
            recurrentDropout: this.recurrentDropout,
            implementation: this.implementation,
          },
          e = super.getConfig();
        return delete e.cell, Object.assign(t, e), t;
      }
      static fromConfig(t, e) {
        return 0 === e.implmentation && (e.implementation = 1), new t(e);
      }
    }
    (Ps.className = "LSTM"), En.Mc.registerClass(Ps);
    class Ls extends Ds {
      constructor(t) {
        super(t), (this.cells = t.cells);
      }
      get stateSize() {
        const t = [];
        for (const e of this.cells.slice().reverse())
          Array.isArray(e.stateSize)
            ? t.push(...e.stateSize)
            : t.push(e.stateSize);
        return t;
      }
      call(t, e) {
        return Object(En.ud)(() => {
          let n = (t = t).slice(1);
          const r = [];
          for (const t of this.cells.slice().reverse())
            Array.isArray(t.stateSize)
              ? r.push(n.splice(0, t.stateSize.length))
              : r.push(n.splice(0, 1));
          r.reverse();
          const a = [];
          let i;
          for (let o = 0; o < this.cells.length; ++o) {
            const s = this.cells[o];
            (n = r[o]),
              (i = 0 === o ? [t[0]].concat(n) : [i[0]].concat(n)),
              (i = s.call(i, e)),
              a.push(i.slice(1));
          }
          n = [];
          for (const t of a.slice().reverse()) n.push(...t);
          return [i[0]].concat(n);
        });
      }
      build(t) {
        let e;
        da(t) && (t = t[0]),
          (t = t),
          this.cells.forEach((n, r) => {
            fr("RNNCell_" + r, () => {
              n.build(t),
                (e = Array.isArray(n.stateSize) ? n.stateSize[0] : n.stateSize),
                (t = [t[0], e]);
            });
          }),
          (this.built = !0);
      }
      getConfig() {
        const t = [];
        for (const e of this.cells)
          t.push({ className: e.getClassName(), config: e.getConfig() });
        const e = { cells: t },
          n = super.getConfig();
        return Object.assign(e, n), e;
      }
      static fromConfig(t, e, n = {}) {
        const r = [];
        for (const t of e.cells) r.push(Pa(t, n));
        return new t({ cells: r });
      }
      get trainableWeights() {
        if (!this.trainable) return [];
        const t = [];
        for (const e of this.cells) t.push(...e.trainableWeights);
        return t;
      }
      get nonTrainableWeights() {
        const t = [];
        for (const e of this.cells) t.push(...e.nonTrainableWeights);
        if (!this.trainable) {
          const e = [];
          for (const t of this.cells) e.push(...t.trainableWeights);
          return e.concat(t);
        }
        return t;
      }
      getWeights() {
        const t = [];
        for (const e of this.cells) t.push(...e.weights);
        return va(t);
      }
      setWeights(t) {
        const e = [];
        for (const n of this.cells) {
          const r = n.weights.length,
            a = t.splice(r);
          for (let t = 0; t < n.weights.length; ++t)
            e.push([n.weights[t], a[t]]);
        }
        ya(e);
      }
    }
    function zs(t, e, n = null, r = 1) {
      function a() {
        return Br(t(), e);
      }
      if (r > 1) {
        const e = [];
        for (let i = 0; i < r; i++) e.push(Pr(a, t, n));
        return e.map((t) => En.Jb(t.clone()));
      }
      return En.Jb(Pr(a, t, n).clone());
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ (Ls.className = "StackedRNNCells"), En.Mc.registerClass(Ls);
    class Ws extends Sa {
      constructor(t) {
        super(t), (this.layer = t.layer);
      }
      build(t) {
        this.built = !0;
      }
      get trainable() {
        return null != this.layer && this.layer.trainable;
      }
      set trainable(t) {
        null != this.layer && (this.layer.trainable = t);
      }
      get trainableWeights() {
        return this.layer.trainableWeights;
      }
      get nonTrainableWeights() {
        return this.layer.nonTrainableWeights;
      }
      get updates() {
        return this.layer._updates;
      }
      get losses() {
        return this.layer.losses;
      }
      getWeights() {
        return this.layer.getWeights();
      }
      setWeights(t) {
        this.layer.setWeights(t);
      }
      getConfig() {
        const t = {
            layer: {
              className: this.layer.getClassName(),
              config: this.layer.getConfig(),
            },
          },
          e = super.getConfig();
        return Object.assign(t, e), t;
      }
      setFastWeightInitDuringBuild(t) {
        super.setFastWeightInitDuringBuild(t),
          null != this.layer && this.layer.setFastWeightInitDuringBuild(t);
      }
      static fromConfig(t, e, n = {}) {
        const r = Pa(e.layer, n);
        delete e.layer;
        const a = { layer: r };
        return Object.assign(a, e), new t(a);
      }
    }
    class Vs extends Ws {
      constructor(t) {
        super(t), (this.supportsMasking = !0);
      }
      build(t) {
        if ((t = ma(t)).length < 3)
          throw new Rn(
            "TimeDistributed layer expects an input shape >= 3D, but received input shape " +
              JSON.stringify(t)
          );
        this.inputSpec = [{ shape: t }];
        const e = [t[0]].concat(t.slice(2));
        this.layer.built || (this.layer.build(e), (this.layer.built = !0)),
          super.build(t);
      }
      computeOutputShape(t) {
        const e = [(t = ma(t))[0]].concat(t.slice(2)),
          n = this.layer.computeOutputShape(e),
          r = t[1];
        return [n[0], r].concat(n.slice(1));
      }
      call(t, e) {
        return Object(En.ud)(
          () =>
            Ts(
              (t, n) => [fa(this.layer.call(t, e)), []],
              (t = fa(t)),
              [],
              !1,
              null,
              null,
              !1,
              !0
            )[1]
        );
      }
    }
    (Vs.className = "TimeDistributed"), En.Mc.registerClass(Vs);
    class Us extends Ws {
      constructor(t) {
        super(t);
        const e = t.layer.getConfig(),
          n = {};
        (n.className = t.layer.getClassName()),
          (n.config = e),
          (this.forwardLayer = Pa(n)),
          (e.goBackwards = !0 !== e.goBackwards);
        const r = {};
        var a;
        if (
          ((r.className = t.layer.getClassName()),
          (r.config = e),
          (this.backwardLayer = Pa(r)),
          (this.forwardLayer.name = "forward_" + this.forwardLayer.name),
          (this.backwardLayer.name = "backward_" + this.backwardLayer.name),
          (this.mergeMode = void 0 === t.mergeMode ? "concat" : t.mergeMode),
          (a = this.mergeMode),
          Gn(ur, "BidirectionalMergeMode", a),
          t.weights)
        )
          throw new An(
            "weights support is not implemented for Bidirectional layer yet."
          );
        (this._stateful = t.layer.stateful),
          (this.returnSequences = t.layer.returnSequences),
          (this.returnState = t.layer.returnState),
          (this.supportsMasking = !0),
          (this._trainable = !0),
          (this.inputSpec = t.layer.inputSpec),
          (this.numConstants = null);
      }
      get trainable() {
        return this._trainable;
      }
      set trainable(t) {
        (this._trainable = t),
          null != this.forwardLayer && (this.forwardLayer.trainable = t),
          null != this.backwardLayer && (this.backwardLayer.trainable = t);
      }
      getWeights() {
        return this.forwardLayer
          .getWeights()
          .concat(this.backwardLayer.getWeights());
      }
      setWeights(t) {
        const e = t.length,
          n = Math.floor(e / 2);
        this.forwardLayer.setWeights(t.slice(0, n)),
          this.backwardLayer.setWeights(t.slice(n));
      }
      computeOutputShape(t) {
        let e,
          n,
          r,
          a = this.forwardLayer.computeOutputShape(t);
        return (
          (Array.isArray(a) && Array.isArray(a[0])) || (a = [a]),
          (a = a),
          this.returnState ? ((r = a.slice(1)), (e = a[0])) : (e = a[0]),
          (e = e),
          "concat" === this.mergeMode
            ? ((e[e.length - 1] *= 2), (n = [e]))
            : (n = null == this.mergeMode ? [e, e.slice()] : [e]),
          this.returnState
            ? null == this.mergeMode
              ? n.concat(r).concat(r.slice())
              : [e].concat(r).concat(r.slice())
            : Mn(n)
        );
      }
      apply(t, e) {
        let n = null == e ? null : e.initialState,
          r = null == e ? null : e.constants;
        null == e && (e = {});
        const a = As(t, n, r, this.numConstants);
        if (
          ((t = a.inputs),
          (n = a.initialState),
          (r = a.constants),
          Array.isArray(t) && ((n = t.slice(1)), (t = t[0])),
          (null == n || 0 === n.length) && null == r)
        )
          return super.apply(t, e);
        const i = [],
          o = [];
        if (null != n) {
          const t = n.length;
          if (t % 2 > 0)
            throw new Rn(
              "When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs."
            );
          (e.initialState = n), i.push(...n);
          const r = n.map((t) => new xa({ shape: t.shape }));
          (this.forwardLayer.stateSpec = r.slice(0, t / 2)),
            (this.backwardLayer.stateSpec = r.slice(t / 2)),
            o.push(...r);
        }
        if (null != r)
          throw new An(
            "Support for constants in Bidirectional layers is not implemented yet."
          );
        const s = i[0] instanceof wa;
        for (const t of i)
          if (t instanceof wa !== s)
            throw new Rn(
              "The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors"
            );
        if (s) {
          const n = [t].concat(i),
            r = this.inputSpec.concat(o),
            a = this.inputSpec;
          this.inputSpec = r;
          const s = super.apply(n, e);
          return (this.inputSpec = a), s;
        }
        return super.apply(t, e);
      }
      call(t, e) {
        return Object(En.ud)(() => {
          const n = e.initialState;
          let r, a, i, o;
          if (null == n)
            (r = this.forwardLayer.call(t, e)),
              (a = this.backwardLayer.call(t, e));
          else {
            const i = n.slice(0, n.length / 2),
              o = n.slice(n.length / 2);
            (r = this.forwardLayer.call(
              t,
              Object.assign(e, { initialState: i })
            )),
              (a = this.backwardLayer.call(
                t,
                Object.assign(e, { initialState: o })
              ));
          }
          return (
            this.returnState &&
              (Array.isArray(r) && (i = r.slice(1).concat(a.slice(1))),
              (r = r[0]),
              (a = a[0])),
            this.returnSequences && (a = En.Ec(a, 1)),
            "concat" === this.mergeMode
              ? (o = Rr([r, a]))
              : "sum" === this.mergeMode
              ? (o = En.r(r, a))
              : "ave" === this.mergeMode
              ? (o = En.jc(0.5, En.r(r, a)))
              : "mul" === this.mergeMode
              ? (o = En.jc(r, a))
              : null == this.mergeMode && (o = [r, a]),
            this.returnState
              ? null == this.mergeMode
                ? o.concat(i)
                : [o].concat(i)
              : o
          );
        });
      }
      resetStates(t) {
        this.forwardLayer.resetStates(), this.backwardLayer.resetStates();
      }
      build(t) {
        fr(this.forwardLayer.name, () => {
          this.forwardLayer.build(t);
        }),
          fr(this.backwardLayer.name, () => {
            this.backwardLayer.build(t);
          }),
          (this.built = !0);
      }
      computeMask(t, e) {
        let n;
        if (
          (Array.isArray(e) && (e = e[0]),
          (n = this.returnSequences
            ? null == this.mergeMode
              ? [e, e]
              : e
            : null == this.mergeMode
            ? [null, null]
            : null),
          this.returnState)
        ) {
          const t = this.forwardLayer.states.map((t) => null);
          return Array.isArray(n)
            ? n.concat(t).concat(t)
            : [n].concat(t).concat(t);
        }
        return n;
      }
      get trainableWeights() {
        return this.forwardLayer.trainableWeights.concat(
          this.backwardLayer.trainableWeights
        );
      }
      get nonTrainableWeights() {
        return this.forwardLayer.nonTrainableWeights.concat(
          this.backwardLayer.nonTrainableWeights
        );
      }
      setFastWeightInitDuringBuild(t) {
        super.setFastWeightInitDuringBuild(t),
          null != this.forwardLayer &&
            this.forwardLayer.setFastWeightInitDuringBuild(t),
          null != this.backwardLayer &&
            this.backwardLayer.setFastWeightInitDuringBuild(t);
      }
      getConfig() {
        const t = { mergeMode: this.mergeMode },
          e = super.getConfig();
        return Object.assign(t, e), t;
      }
      static fromConfig(t, e) {
        const n = Pa(e.layer);
        if ((delete e.layer, null != e.numConstants))
          throw new An(
            "Deserialization of a Bidirectional layer with numConstants present is not supported yet."
          );
        const r = e;
        return (r.layer = n), new t(r);
      }
    }
    (Us.className = "Bidirectional"), En.Mc.registerClass(Us);
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */
    var Gs = n(15),
      Hs = n(2);
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class qs {
      constructor(t, e, n) {
        (this.node = t),
          (this.tensorMap = e),
          (this.context = n),
          (this.inputs = []),
          (this.attrs = {}),
          (this.inputs = t.inputNames.map((t) => this.getInput(t))),
          null != t.rawAttrs &&
            (this.attrs = Object.keys(t.rawAttrs).reduce(
              (t, e) => ((t[e] = this.getAttr(e)), t),
              {}
            ));
      }
      getInput(t) {
        return Object(Hs.c)(t, this.tensorMap, this.context);
      }
      getAttr(t, e) {
        const n = this.node.rawAttrs[t];
        if (null != n.tensor)
          return Object(Hs.c)(t, this.tensorMap, this.context);
        if (null != n.i || null != n.f)
          return Object(Gs.f)(this.node.rawAttrs, t, e);
        if (null != n.s) return Object(Gs.i)(this.node.rawAttrs, t, e);
        if (null != n.b) return Object(Gs.c)(this.node.rawAttrs, t, e);
        if (null != n.shape) return Object(Gs.k)(this.node.rawAttrs, t, e);
        if (null != n.type) return Object(Gs.e)(this.node.rawAttrs, t, e);
        if (null != n.list) {
          if (null != n.list.i || null != n.list.f)
            return Object(Gs.g)(this.node.rawAttrs, t, e);
          if (null != n.list.s) return Object(Gs.h)(this.node.rawAttrs, t, e);
          if (null != n.list.shape)
            return Object(Gs.j)(this.node.rawAttrs, t, e);
          if (null != n.list.b) return Object(Gs.b)(this.node.rawAttrs, t, e);
          if (null != n.list.type)
            return Object(Gs.d)(this.node.rawAttrs, t, e);
        }
        return e;
      }
    }
    var Ks = n(25);
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function Xs(t, e, n = "") {
      En.Cd.assert(
        (function (t, e) {
          if (t.length !== e.length) return !1;
          for (let n = 0; n < t.length; n++)
            if (-1 !== t[n] && -1 !== e[n] && t[n] !== e[n]) return !1;
          return !0;
        })(
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */ t,
          e
        ),
        () => n + ` Shapes ${t} and ${e} must match`
      );
    }
    class Ys {
      constructor(t, e, n, r, a, i, o) {
        (this.name = t),
          (this.dtype = e),
          (this.maxSize = n),
          (this.elementShape = r),
          (this.identicalElementShapes = a),
          (this.dynamicSize = i),
          (this.clearAfterRead = o),
          (this.tensors = []),
          (this.closed_ = !1),
          (this.id = Ys.nextId++);
      }
      get closed() {
        return this.closed_;
      }
      clearAndClose() {
        this.tensors.forEach((t) => t.tensor.dispose()),
          (this.tensors = []),
          (this.closed_ = !0);
      }
      size() {
        return this.tensors.length;
      }
      read(t) {
        if (this.closed_)
          throw new Error(`TensorArray ${this.name} has already been closed.`);
        if (t < 0 || t >= this.size())
          throw new Error(
            `Tried to read from index ${t}, but array size is: ${this.size()}`
          );
        const e = this.tensors[t];
        if (e.cleared)
          throw new Error(
            `TensorArray ${this.name}: Could not read index ${t} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`
          );
        return this.clearAfterRead && (e.cleared = !0), (e.read = !0), e.tensor;
      }
      readMany(t) {
        return t.map((t) => this.read(t));
      }
      write(t, e) {
        if (this.closed_)
          throw new Error(`TensorArray ${this.name} has already been closed.`);
        if (t < 0 || (!this.dynamicSize && t >= this.maxSize))
          throw new Error(
            `Tried to write to index ${t}, but array is not resizeable and size is: ${this.maxSize}`
          );
        const n = this.tensors[t] || {};
        if (e.dtype !== this.dtype)
          throw new Error(
            `TensorArray ${this.name}: Could not write to TensorArray index ${t},\n          because the value dtype is ${e.dtype}, but TensorArray dtype is ${this.dtype}.`
          );
        if (
          (0 !== this.size() ||
            (null != this.elementShape && 0 !== this.elementShape.length) ||
            (this.elementShape = e.shape),
          Xs(
            this.elementShape,
            e.shape,
            `TensorArray ${this.name}: Could not write to TensorArray index ${t}.`
          ),
          n && n.read)
        )
          throw new Error(
            `TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been read.`
          );
        if (n && n.written)
          throw new Error(
            `TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been written.`
          );
        (n.tensor = e), (n.written = !0), (this.tensors[t] = n);
      }
      writeMany(t, e) {
        if (t.length !== e.length)
          throw new Error(
            `TensorArray ${this.name}: could not write multiple tensors,because the index size: ${t.length} is not the same as tensors size: ${e.length}.`
          );
        t.forEach((t, n) => this.write(t, e[n]));
      }
      gather(t, e) {
        if (e && e !== this.dtype)
          throw new Error(
            `TensorArray dtype is ${this.dtype} but gather requested dtype ${e}`
          );
        if (t) t = t.slice(0, this.size());
        else {
          t = [];
          for (let e = 0; e < this.size(); e++) t.push(e);
        }
        if (0 === t.length)
          return Object(En.pd)([], [0].concat(this.elementShape));
        const n = this.readMany(t);
        return (
          Xs(this.elementShape, n[0].shape, "TensorArray shape mismatch: "),
          Object(En.id)(n, 0)
        );
      }
      concat(t) {
        if (t && t !== this.dtype)
          throw new Error(
            `TensorArray dtype is ${this.dtype} but concat requested dtype ${t}`
          );
        if (0 === this.size())
          return Object(En.pd)([], [0].concat(this.elementShape));
        const e = [];
        for (let t = 0; t < this.size(); t++) e.push(t);
        const n = this.readMany(e);
        return (
          Xs(
            this.elementShape,
            n[0].shape,
            `TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`
          ),
          Object(En.S)(n, 0)
        );
      }
      scatter(t, e) {
        if (e.dtype !== this.dtype)
          throw new Error(
            `TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`
          );
        if (t.length !== e.shape[0])
          throw new Error(
            `Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`
          );
        const n = Math.max(...t);
        if (!this.dynamicSize && n >= this.maxSize)
          throw new Error(
            `Max index must be < array size (${n}  vs. ${this.maxSize})`
          );
        this.writeMany(t, Object(En.Ad)(e, 0));
      }
      split(t, e) {
        if (e.dtype !== this.dtype)
          throw new Error(
            `TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`
          );
        let n = 0;
        const r = t.map((t) => ((n += t), n));
        if (n !== e.shape[0])
          throw new Error(
            `Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${e.shape}`
          );
        if (!this.dynamicSize && t.length !== this.maxSize)
          throw new Error(
            `TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${t.length}), and the TensorArray is not marked as dynamically resizeable`
          );
        const a = 0 === n ? 0 : e.size / n,
          i = [];
        Object(En.ud)(() => {
          e = e.reshape([1, n, a]);
          for (let n = 0; n < t.length; ++n) {
            const o = [0, 0 === n ? 0 : r[n - 1], 0],
              s = [1, t[n], a];
            i[n] = Object(En.Tc)(e, o, s).reshape(this.elementShape);
          }
          return i;
        });
        const o = [];
        for (let e = 0; e < t.length; e++) o[e] = e;
        this.writeMany(o, i);
      }
    }
    Ys.nextId = 0;
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function Js(t, e, n) {
      const r = ((t, e, n) => {
        switch (t.category) {
          case "arithmetic":
            return En.ud(() =>
              ((t, e, n) => {
                switch (t.op) {
                  case "BiasAdd":
                  case "AddV2":
                  case "Add":
                    return [
                      En.r(
                        Object(Hs.b)("a", t, e, n),
                        Object(Hs.b)("b", t, e, n)
                      ),
                    ];
                  case "AddN":
                    return [En.s(Object(Hs.b)("tensors", t, e, n))];
                  case "FloorMod":
                  case "Mod":
                    return [
                      En.hc(
                        Object(Hs.b)("a", t, e, n),
                        Object(Hs.b)("b", t, e, n)
                      ),
                    ];
                  case "Mul":
                    return [
                      En.jc(
                        Object(Hs.b)("a", t, e, n),
                        Object(Hs.b)("b", t, e, n)
                      ),
                    ];
                  case "RealDiv":
                  case "Div":
                    return [
                      En.ib(
                        Object(Hs.b)("a", t, e, n),
                        Object(Hs.b)("b", t, e, n)
                      ),
                    ];
                  case "DivNoNan":
                    return [
                      En.jb(
                        Object(Hs.b)("a", t, e, n),
                        Object(Hs.b)("b", t, e, n)
                      ),
                    ];
                  case "FloorDiv":
                    return [
                      En.yb(
                        Object(Hs.b)("a", t, e, n),
                        Object(Hs.b)("b", t, e, n)
                      ),
                    ];
                  case "Sub":
                    return [
                      En.kd(
                        Object(Hs.b)("a", t, e, n),
                        Object(Hs.b)("b", t, e, n)
                      ),
                    ];
                  case "Minimum":
                    return [
                      En.gc(
                        Object(Hs.b)("a", t, e, n),
                        Object(Hs.b)("b", t, e, n)
                      ),
                    ];
                  case "Maximum":
                    return [
                      En.cc(
                        Object(Hs.b)("a", t, e, n),
                        Object(Hs.b)("b", t, e, n)
                      ),
                    ];
                  case "Pow":
                    return [
                      En.sc(
                        Object(Hs.b)("a", t, e, n),
                        Object(Hs.b)("b", t, e, n)
                      ),
                    ];
                  case "SquaredDifference":
                    return [
                      En.gd(
                        Object(Hs.b)("a", t, e, n),
                        Object(Hs.b)("b", t, e, n)
                      ),
                    ];
                  default:
                    throw TypeError(`Node type ${t.op} is not implemented`);
                }
              })(t, e, n)
            );
          case "basic_math":
            return En.ud(() =>
              ((t, e, n) => {
                switch (t.op) {
                  case "Abs":
                  case "ComplexAbs":
                    return [En.o(Object(Hs.b)("x", t, e, n))];
                  case "Acos":
                    return [En.p(Object(Hs.b)("x", t, e, n))];
                  case "Acosh":
                    return [En.q(Object(Hs.b)("x", t, e, n))];
                  case "Asin":
                    return [En.x(Object(Hs.b)("x", t, e, n))];
                  case "Asinh":
                    return [En.y(Object(Hs.b)("x", t, e, n))];
                  case "Atan":
                    return [En.z(Object(Hs.b)("x", t, e, n))];
                  case "Atan2":
                    return [
                      En.A(
                        Object(Hs.b)("x", t, e, n),
                        Object(Hs.b)("y", t, e, n)
                      ),
                    ];
                  case "Atanh":
                    return [En.B(Object(Hs.b)("x", t, e, n))];
                  case "Ceil":
                    return [En.P(Object(Hs.b)("x", t, e, n))];
                  case "Complex":
                    return [
                      En.R(
                        Object(Hs.b)("real", t, e, n),
                        Object(Hs.b)("imag", t, e, n)
                      ),
                    ];
                  case "Cos":
                    return [En.bb(Object(Hs.b)("x", t, e, n))];
                  case "Cosh":
                    return [En.cb(Object(Hs.b)("x", t, e, n))];
                  case "Elu":
                    return [En.lb(Object(Hs.b)("x", t, e, n))];
                  case "Erf":
                    return [En.qb(Object(Hs.b)("x", t, e, n))];
                  case "Exp":
                    return [En.rb(Object(Hs.b)("x", t, e, n))];
                  case "Expm1":
                    return [En.tb(Object(Hs.b)("x", t, e, n))];
                  case "Floor":
                    return [En.xb(Object(Hs.b)("x", t, e, n))];
                  case "Log":
                    return [En.Rb(Object(Hs.b)("x", t, e, n))];
                  case "Log1p":
                    return [En.Sb(Object(Hs.b)("x", t, e, n))];
                  case "Imag":
                    return [En.Fb(Object(Hs.b)("x", t, e, n))];
                  case "Neg":
                    return [En.lc(Object(Hs.b)("x", t, e, n))];
                  case "Reciprocal":
                    return [En.zc(Object(Hs.b)("x", t, e, n))];
                  case "Real":
                    return [En.yc(Object(Hs.b)("x", t, e, n))];
                  case "Relu":
                    return [En.Cc(Object(Hs.b)("x", t, e, n))];
                  case "Round":
                    return [En.Gc(Object(Hs.b)("x", t, e, n))];
                  case "Selu":
                    return [En.Kc(Object(Hs.b)("x", t, e, n))];
                  case "Sigmoid":
                    return [En.Pc(Object(Hs.b)("x", t, e, n))];
                  case "Sin":
                    return [En.Rc(Object(Hs.b)("x", t, e, n))];
                  case "Sign":
                    return [En.Qc(Object(Hs.b)("x", t, e, n))];
                  case "Sinh":
                    return [En.Sc(Object(Hs.b)("x", t, e, n))];
                  case "Softplus":
                    return [En.ad(Object(Hs.b)("x", t, e, n))];
                  case "Sqrt":
                    return [En.ed(Object(Hs.b)("x", t, e, n))];
                  case "Square":
                    return [En.fd(Object(Hs.b)("x", t, e, n))];
                  case "Tanh":
                    return [En.od(Object(Hs.b)("x", t, e, n))];
                  case "Tan":
                    return [En.nd(Object(Hs.b)("x", t, e, n))];
                  case "Relu6":
                  case "ClipByValue":
                    return [
                      En.Q(
                        Object(Hs.b)("x", t, e, n),
                        Object(Hs.b)("clipValueMin", t, e, n),
                        Object(Hs.b)("clipValueMax", t, e, n)
                      ),
                    ];
                  case "Rsqrt":
                    return [En.Hc(Object(Hs.c)(t.inputNames[0], e, n))];
                  case "Prod":
                    return [
                      En.uc(
                        Object(Hs.b)("x", t, e, n),
                        Object(Hs.b)("axes", t, e, n)
                      ),
                    ];
                  case "LeakyRelu":
                    return [
                      En.Lb(
                        Object(Hs.b)("x", t, e, n),
                        Object(Hs.b)("alpha", t, e, n)
                      ),
                    ];
                  case "Prelu":
                    return [
                      En.tc(
                        Object(Hs.b)("x", t, e, n),
                        Object(Hs.b)("alpha", t, e, n)
                      ),
                    ];
                  default:
                    throw TypeError(`Node type ${t.op} is not implemented`);
                }
              })(t, e, n)
            );
          case "control":
            return (async (t, e, n) => {
              switch (t.op) {
                case "If":
                case "StatelessIf": {
                  const r = Object(Hs.b)("thenBranch", t, e, n),
                    a = Object(Hs.b)("elseBranch", t, e, n),
                    i = Object(Hs.b)("cond", t, e, n),
                    o = Object(Hs.b)("args", t, e, n);
                  return (await i.data())[0]
                    ? n.functionMap[r].executeFunctionAsync(o)
                    : n.functionMap[a].executeFunctionAsync(o);
                }
                case "While":
                case "StatelessWhile": {
                  const r = Object(Hs.b)("body", t, e, n),
                    a = Object(Hs.b)("cond", t, e, n),
                    i = Object(Hs.b)("args", t, e, n),
                    o = (await n.functionMap[a].executeFunctionAsync(i))[0];
                  let s = await o.data(),
                    u = i;
                  for (; s[0]; ) {
                    u = await n.functionMap[r].executeFunctionAsync(u);
                    const t = (
                      await n.functionMap[a].executeFunctionAsync(u)
                    )[0];
                    s = await t.data();
                  }
                  return u;
                }
                case "LoopCond":
                  return [Object(Hs.b)("pred", t, e, n).clone()];
                case "Switch": {
                  const r = Object(Hs.b)("pred", t, e, n),
                    a = Object(Hs.b)("data", t, e, n);
                  return (await r.data())[0]
                    ? [void 0, a.clone()]
                    : [a.clone(), void 0];
                }
                case "Merge":
                  const r = t.inputNames.find(
                    (t) => void 0 !== Object(Hs.c)(t, e, n)
                  );
                  return r ? [Object(Hs.c)(r, e, n).clone()] : void 0;
                case "Enter":
                  const a = Object(Hs.b)("frameName", t, e, n),
                    i = Object(Hs.b)("tensor", t, e, n);
                  return n.enterFrame(a), [i.clone()];
                case "Exit":
                  const o = Object(Hs.b)("tensor", t, e, n);
                  return n.exitFrame(), [o.clone()];
                case "NextIteration":
                  const s = Object(Hs.b)("tensor", t, e, n);
                  return n.nextIteration(), [s.clone()];
                case "TensorArrayV3":
                  const u = Object(Hs.b)("size", t, e, n),
                    c = Object(Hs.b)("dtype", t, e, n),
                    l = Object(Hs.b)("elementShape", t, e, n),
                    h = Object(Hs.b)("dynamicSize", t, e, n),
                    d = Object(Hs.b)("clearAfterRead", t, e, n),
                    p = Object(Hs.b)("identicalElementShapes", t, e, n),
                    f = Object(Hs.b)("name", t, e, n),
                    m = new Ys(f, c, u, l, p, h, d);
                  return (
                    n.addTensorArray(m), [Object(En.Ic)(m.id), Object(En.Ic)(1)]
                  );
                case "TensorArrayWriteV3":
                  const g = Object(Hs.b)("tensorArrayId", t, e, n),
                    b = Object(Hs.b)("index", t, e, n),
                    v = Object(Hs.b)("tensor", t, e, n);
                  return n.getTensorArray(g).write(b, v), [Object(En.Ic)(1)];
                case "TensorArrayReadV3":
                  const y = Object(Hs.b)("tensorArrayId", t, e, n),
                    x = Object(Hs.b)("index", t, e, n);
                  return [n.getTensorArray(y).read(x)];
                case "TensorArrayGatherV3":
                  const w = Object(Hs.b)("tensorArrayId", t, e, n),
                    C = Object(Hs.b)("indices", t, e, n),
                    O = Object(Hs.b)("dtype", t, e, n);
                  return [n.getTensorArray(w).gather(C, O)];
                case "TensorArrayScatterV3":
                  const E = Object(Hs.b)("tensorArrayId", t, e, n),
                    S = Object(Hs.b)("indices", t, e, n),
                    I = Object(Hs.b)("tensor", t, e, n);
                  return n.getTensorArray(E).scatter(S, I), [Object(En.Ic)(1)];
                case "TensorArrayConcatV3":
                  const k = Object(Hs.b)("tensorArrayId", t, e, n),
                    N = n.getTensorArray(k),
                    R = Object(Hs.b)("dtype", t, e, n);
                  return [N.concat(R)];
                case "TensorArraySplitV3":
                  const A = Object(Hs.b)("tensorArrayId", t, e, n),
                    T = Object(Hs.b)("tensor", t, e, n),
                    _ = Object(Hs.b)("lengths", t, e, n);
                  return n.getTensorArray(A).split(_, T), [Object(En.Ic)(1)];
                case "TensorArraySizeV3":
                  const D = Object(Hs.b)("tensorArrayId", t, e, n),
                    F = n.getTensorArray(D);
                  return [Object(En.Ic)(F.size(), "int32")];
                case "TensorArrayCloseV3":
                  const M = Object(Hs.b)("tensorArrayId", t, e, n);
                  return (
                    n.getTensorArray(M).clearAndClose(), [Object(En.Ic)(0)]
                  );
                default:
                  throw TypeError(`Node type ${t.op} is not implemented`);
              }
            })(t, e, n);
          case "convolution":
            return En.ud(() =>
              ((t, e, n) => {
                switch (t.op) {
                  case "Conv1D": {
                    const r = Object(Hs.b)("stride", t, e, n),
                      a = Object(Hs.b)("pad", t, e, n),
                      i = Object(Hs.b)("dataFormat", t, e, n).toUpperCase(),
                      o = Object(Hs.b)("dilation", t, e, n);
                    return [
                      En.X(
                        Object(Hs.b)("x", t, e, n),
                        Object(Hs.b)("filter", t, e, n),
                        r,
                        a,
                        i,
                        o
                      ),
                    ];
                  }
                  case "Conv2D": {
                    const r = Object(Hs.b)("strides", t, e, n),
                      a = Object(Hs.b)("pad", t, e, n),
                      i = Object(Hs.b)("dataFormat", t, e, n).toUpperCase(),
                      o = Object(Hs.b)("dilations", t, e, n);
                    return [
                      En.Y(
                        Object(Hs.b)("x", t, e, n),
                        Object(Hs.b)("filter", t, e, n),
                        [r[1], r[2]],
                        a,
                        i,
                        [o[1], o[2]]
                      ),
                    ];
                  }
                  case "_FusedConv2D":
                  case "FusedDepthwiseConv2dNative": {
                    const [r, a] = Object(Hs.b)("fusedOps", t, e, n),
                      i = "biasadd" === r,
                      o = "prelu" === a,
                      s = "fusedbatchnorm" === r,
                      u = Object(Hs.b)("numArgs", t, e, n);
                    if (i) {
                      if (o && 2 !== u)
                        throw new Error(
                          "FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha."
                        );
                      if (!o && 1 !== u)
                        throw new Error(
                          "FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias."
                        );
                    }
                    if (s)
                      throw new Error(
                        "FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported."
                      );
                    const c = Object(Hs.b)("strides", t, e, n),
                      l = Object(Hs.b)("pad", t, e, n),
                      h = Object(Hs.b)("dataFormat", t, e, n).toUpperCase(),
                      d = Object(Hs.b)("dilations", t, e, n),
                      [p, f] = Object(Hs.b)("args", t, e, n);
                    return [
                      ("_FusedConv2D" === t.op
                        ? En.zb.conv2d
                        : En.zb.depthwiseConv2d)({
                        x: Object(Hs.b)("x", t, e, n),
                        filter: Object(Hs.b)("filter", t, e, n),
                        strides: [c[1], c[2]],
                        pad: l,
                        dataFormat: h,
                        dilations: [d[1], d[2]],
                        bias: p,
                        activation: a,
                        preluActivationWeights: f,
                      }),
                    ];
                  }
                  case "Conv2DBackpropInput":
                  case "Conv2dTranspose": {
                    const r = Object(Hs.b)("outputShape", t, e, n),
                      a = Object(Hs.b)("strides", t, e, n),
                      i = Object(Hs.b)("pad", t, e, n);
                    return [
                      En.Z(
                        Object(Hs.b)("x", t, e, n),
                        Object(Hs.b)("filter", t, e, n),
                        r,
                        [a[1], a[2]],
                        i
                      ),
                    ];
                  }
                  case "DepthwiseConv2dNative":
                  case "DepthwiseConv2d": {
                    const r = Object(Hs.b)("strides", t, e, n),
                      a = Object(Hs.b)("pad", t, e, n),
                      i = Object(Hs.b)("dilations", t, e, n),
                      o = Object(Hs.b)("dataFormat", t, e, n).toUpperCase();
                    return [
                      En.fb(
                        Object(Hs.b)("input", t, e, n),
                        Object(Hs.b)("filter", t, e, n),
                        [r[1], r[2]],
                        a,
                        o,
                        [i[1], i[2]]
                      ),
                    ];
                  }
                  case "Conv3D": {
                    const r = Object(Hs.b)("strides", t, e, n),
                      a = Object(Hs.b)("pad", t, e, n),
                      i = Object(Hs.b)("dataFormat", t, e, n).toUpperCase(),
                      o = Object(Hs.b)("dilations", t, e, n);
                    return [
                      En.ab(
                        Object(Hs.b)("x", t, e, n),
                        Object(Hs.b)("filter", t, e, n),
                        [r[1], r[2], r[3]],
                        a,
                        i,
                        [o[1], o[2], o[3]]
                      ),
                    ];
                  }
                  case "AvgPool": {
                    const r = Object(Hs.b)("strides", t, e, n),
                      a = Object(Hs.b)("pad", t, e, n),
                      i = Object(Hs.b)("kernelSize", t, e, n);
                    return [
                      En.C(
                        Object(Hs.b)("x", t, e, n),
                        [i[1], i[2]],
                        [r[1], r[2]],
                        a
                      ),
                    ];
                  }
                  case "MaxPool": {
                    const r = Object(Hs.b)("strides", t, e, n),
                      a = Object(Hs.b)("pad", t, e, n),
                      i = Object(Hs.b)("kernelSize", t, e, n);
                    return [
                      En.Zb(
                        Object(Hs.b)("x", t, e, n),
                        [i[1], i[2]],
                        [r[1], r[2]],
                        a
                      ),
                    ];
                  }
                  case "MaxPoolWithArgmax": {
                    const r = Object(Hs.b)("strides", t, e, n),
                      a = Object(Hs.b)("pad", t, e, n),
                      i = Object(Hs.b)("kernelSize", t, e, n),
                      o = Object(Hs.b)("includeBatchInIndex", t, e, n),
                      { result: s, indexes: u } = En.bc(
                        Object(Hs.b)("x", t, e, n),
                        [i[1], i[2]],
                        [r[1], r[2]],
                        a,
                        o
                      );
                    return [s, u];
                  }
                  case "AvgPool3D": {
                    const r = Object(Hs.b)("strides", t, e, n),
                      a = Object(Hs.b)("pad", t, e, n),
                      i = Object(Hs.b)("kernelSize", t, e, n);
                    return [
                      En.D(
                        Object(Hs.b)("x", t, e, n),
                        [i[1], i[2], i[3]],
                        [r[1], r[2], r[3]],
                        a
                      ),
                    ];
                  }
                  case "MaxPool3D": {
                    const r = Object(Hs.b)("strides", t, e, n),
                      a = Object(Hs.b)("pad", t, e, n),
                      i = Object(Hs.b)("kernelSize", t, e, n);
                    return [
                      En.ac(
                        Object(Hs.b)("x", t, e, n),
                        [i[1], i[2], i[3]],
                        [r[1], r[2], r[3]],
                        a
                      ),
                    ];
                  }
                  default:
                    throw TypeError(`Node type ${t.op} is not implemented`);
                }
              })(t, e, n)
            );
          case "creation":
            return En.ud(() =>
              ((t, e, n) => {
                switch (t.op) {
                  case "Fill": {
                    const r = Object(Hs.b)("shape", t, e, n),
                      a = Object(Hs.b)("dtype", t, e, n),
                      i = Object(Hs.b)("value", t, e, n);
                    return [En.wb(r, i, a)];
                  }
                  case "LinSpace": {
                    const r = Object(Hs.b)("start", t, e, n),
                      a = Object(Hs.b)("stop", t, e, n),
                      i = Object(Hs.b)("num", t, e, n);
                    return [En.Pb(r, a, i)];
                  }
                  case "Multinomial": {
                    const r = Object(Hs.b)("logits", t, e, n),
                      a = Object(Hs.b)("numSamples", t, e, n),
                      i = Object(Hs.b)("seed", t, e, n);
                    return [En.kc(r, a, i)];
                  }
                  case "OneHot": {
                    const r = Object(Hs.b)("indices", t, e, n),
                      a = Object(Hs.b)("depth", t, e, n),
                      i = Object(Hs.b)("onValue", t, e, n),
                      o = Object(Hs.b)("offValue", t, e, n);
                    return [En.oc(r, a, i, o)];
                  }
                  case "Ones":
                    return [
                      En.pc(
                        Object(Hs.b)("shape", t, e, n),
                        Object(Hs.b)("dtype", t, e, n)
                      ),
                    ];
                  case "OnesLike":
                    return [En.qc(Object(Hs.b)("x", t, e, n))];
                  case "RandomUniform":
                    return [
                      En.wc(
                        Object(Hs.b)("shape", t, e, n),
                        Object(Hs.b)("minval", t, e, n),
                        Object(Hs.b)("maxval", t, e, n),
                        Object(Hs.b)("dtype", t, e, n)
                      ),
                    ];
                  case "Range": {
                    const r = Object(Hs.b)("start", t, e, n),
                      a = Object(Hs.b)("stop", t, e, n),
                      i = Object(Hs.b)("step", t, e, n);
                    return [En.xc(r, a, i, Object(Hs.b)("dtype", t, e, n))];
                  }
                  case "TruncatedNormal": {
                    const r = Object(Hs.b)("shape", t, e, n),
                      a = Object(Hs.b)("mean", t, e, n),
                      i = Object(Hs.b)("stdDev", t, e, n),
                      o = Object(Hs.b)("seed", t, e, n);
                    return [En.zd(r, a, i, Object(Hs.b)("dtype", t, e, n), o)];
                  }
                  case "Zeros":
                    return [
                      En.Id(
                        Object(Hs.b)("shape", t, e, n),
                        Object(Hs.b)("dtype", t, e, n)
                      ),
                    ];
                  case "ZerosLike":
                    return [En.Jd(Object(Hs.b)("x", t, e, n))];
                  default:
                    throw TypeError(`Node type ${t.op} is not implemented`);
                }
              })(t, e, n)
            );
          case "dynamic":
            return (async (t, e, n) => {
              switch (t.op) {
                case "NonMaxSuppressionV5":
                case "NonMaxSuppressionV3":
                case "NonMaxSuppressionV2": {
                  const r = Object(Hs.b)("boxes", t, e, n),
                    a = Object(Hs.b)("scores", t, e, n),
                    i = Object(Hs.b)("maxOutputSize", t, e, n),
                    o = Object(Hs.b)("iouThreshold", t, e, n),
                    s = Object(Hs.b)("scoreThreshold", t, e, n);
                  if ("NonMaxSuppressionV5" === t.op) {
                    const u = Object(Hs.b)("softNmsSigma", t, e, n),
                      c = await En.Gb.nonMaxSuppressionWithScoreAsync(
                        r,
                        a,
                        i,
                        o,
                        s,
                        u
                      );
                    return [c.selectedIndices, c.selectedScores];
                  }
                  return [await En.Gb.nonMaxSuppressionAsync(r, a, i, o, s)];
                }
                case "Where": {
                  const r = Object(Hs.b)("condition", t, e, n).asType("bool"),
                    a = [await En.Hd(r)];
                  return r.dispose(), a;
                }
                case "ListDiff":
                  return En.Oc(
                    Object(Hs.b)("x", t, e, n),
                    Object(Hs.b)("y", t, e, n)
                  );
                default:
                  throw TypeError(`Node type ${t.op} is not implemented`);
              }
            })(t, e, n);
          case "evaluation":
            return En.ud(() =>
              ((t, e, n) => {
                switch (t.op) {
                  case "TopKV2": {
                    const r = Object(Hs.b)("x", t, e, n),
                      a = Object(Hs.b)("k", t, e, n),
                      i = Object(Hs.b)("sorted", t, e, n),
                      o = En.wd(r, a, i);
                    return [o.values, o.indices];
                  }
                  default:
                    throw TypeError(`Node type ${t.op} is not implemented`);
                }
              })(t, e, n)
            );
          case "image":
            return En.ud(() =>
              ((t, e, n) => {
                switch (t.op) {
                  case "ResizeBilinear": {
                    const r = Object(Hs.b)("images", t, e, n),
                      a = Object(Hs.b)("size", t, e, n),
                      i = Object(Hs.b)("alignCorners", t, e, n);
                    return [En.Gb.resizeBilinear(r, [a[0], a[1]], i)];
                  }
                  case "ResizeNearestNeighbor": {
                    const r = Object(Hs.b)("images", t, e, n),
                      a = Object(Hs.b)("size", t, e, n),
                      i = Object(Hs.b)("alignCorners", t, e, n);
                    return [En.Gb.resizeNearestNeighbor(r, [a[0], a[1]], i)];
                  }
                  case "CropAndResize": {
                    const r = Object(Hs.b)("image", t, e, n),
                      a = Object(Hs.b)("boxes", t, e, n),
                      i = Object(Hs.b)("boxInd", t, e, n),
                      o = Object(Hs.b)("cropSize", t, e, n),
                      s = Object(Hs.b)("method", t, e, n),
                      u = Object(Hs.b)("extrapolationValue", t, e, n);
                    return [En.Gb.cropAndResize(r, a, i, o, s, u)];
                  }
                  default:
                    throw TypeError(`Node type ${t.op} is not implemented`);
                }
              })(t, e, n)
            );
          case "graph":
            return En.ud(() =>
              ((t, e, n) => {
                switch (t.op) {
                  case "Const":
                    return e[t.name];
                  case "PlaceholderWithDefault":
                    const r = Object(Hs.b)("default", t, e, n);
                    return [Object(Hs.c)(t.name, e, n) || r];
                  case "Placeholder":
                    return [Object(Hs.c)(t.name, e, n)];
                  case "Identity":
                  case "StopGradient":
                  case "FakeQuantWithMinMaxVars":
                    return [Object(Hs.b)("x", t, e, n).clone()];
                  case "IdentityN":
                    return Object(Hs.b)("x", t, e, n).map((t) => t.clone());
                  case "Snapshot":
                    return [Object(Hs.b)("x", t, e, n).clone()];
                  case "Shape":
                    return [En.qd(Object(Hs.b)("x", t, e, n).shape, "int32")];
                  case "ShapeN":
                    return Object(Hs.b)("x", t, e, n).map((t) =>
                      En.qd(t.shape)
                    );
                  case "Size":
                    return [En.Ic(Object(Hs.b)("x", t, e, n).size, "int32")];
                  case "Rank":
                    return [En.Ic(Object(Hs.b)("x", t, e, n).rank, "int32")];
                  case "NoOp":
                    return [En.Ic(1)];
                  case "Print":
                    const a = Object(Hs.b)("x", t, e, n),
                      i = Object(Hs.b)("data", t, e, n),
                      o = Object(Hs.b)("message", t, e, n),
                      s = Object(Hs.b)("summarize", t, e, n);
                    console.warn(
                      "The graph has a tf.print() operation,usually used for debugging, which slows down performance."
                    ),
                      console.log(o);
                    for (let t = 0; t < i.length; t++)
                      console.log(
                        Array.prototype.slice.call(i[t].dataSync()).slice(0, s)
                      );
                    return [a];
                  default:
                    throw TypeError(`Node type ${t.op} is not implemented`);
                }
              })(t, e, n)
            );
          case "logical":
            return En.ud(() =>
              ((t, e, n) => {
                switch (t.op) {
                  case "Equal":
                    return [
                      En.pb(
                        Object(Hs.b)("a", t, e, n),
                        Object(Hs.b)("b", t, e, n)
                      ),
                    ];
                  case "NotEqual":
                    return [
                      En.nc(
                        Object(Hs.b)("a", t, e, n),
                        Object(Hs.b)("b", t, e, n)
                      ),
                    ];
                  case "Greater":
                    return [
                      En.Cb(
                        Object(Hs.b)("a", t, e, n),
                        Object(Hs.b)("b", t, e, n)
                      ),
                    ];
                  case "GreaterEqual":
                    return [
                      En.Db(
                        Object(Hs.b)("a", t, e, n),
                        Object(Hs.b)("b", t, e, n)
                      ),
                    ];
                  case "Less":
                    return [
                      En.Mb(
                        Object(Hs.b)("a", t, e, n),
                        Object(Hs.b)("b", t, e, n)
                      ),
                    ];
                  case "LessEqual":
                    return [
                      En.Nb(
                        Object(Hs.b)("a", t, e, n),
                        Object(Hs.b)("b", t, e, n)
                      ),
                    ];
                  case "LogicalAnd":
                    return [
                      En.Ub(
                        Object(Hs.b)("a", t, e, n),
                        Object(Hs.b)("b", t, e, n)
                      ),
                    ];
                  case "LogicalNot":
                    return [En.Vb(Object(Hs.b)("a", t, e, n))];
                  case "LogicalOr":
                    return [
                      En.Wb(
                        Object(Hs.b)("a", t, e, n),
                        Object(Hs.b)("b", t, e, n)
                      ),
                    ];
                  case "Select":
                  case "SelectV2":
                    return [
                      En.Gd(
                        Object(Hs.b)("condition", t, e, n),
                        Object(Hs.b)("a", t, e, n),
                        Object(Hs.b)("b", t, e, n)
                      ),
                    ];
                  default:
                    throw TypeError(`Node type ${t.op} is not implemented`);
                }
              })(t, e, n)
            );
          case "matrices":
            return En.ud(() =>
              ((t, e, n) => {
                switch (t.op) {
                  case "BatchMatMul":
                  case "BatchMatMulV2":
                  case "MatMul":
                    return [
                      En.Xb(
                        Object(Hs.b)("a", t, e, n),
                        Object(Hs.b)("b", t, e, n),
                        Object(Hs.b)("transposeA", t, e, n),
                        Object(Hs.b)("transposeB", t, e, n)
                      ),
                    ];
                  case "Transpose":
                    return [
                      En.yd(
                        Object(Hs.b)("x", t, e, n),
                        Object(Hs.b)("perm", t, e, n)
                      ),
                    ];
                  case "_FusedMatMul":
                    const [r, a] = Object(Hs.b)("fusedOps", t, e, n),
                      i = "biasadd" === r,
                      o = "prelu" === a,
                      s = Object(Hs.b)("numArgs", t, e, n);
                    if (i) {
                      if (o && 2 !== s)
                        throw new Error(
                          "Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha."
                        );
                      if (!o && 1 !== s)
                        throw new Error(
                          "Fused MatMul with BiasAdd must have one extra argument: bias."
                        );
                    }
                    const [u, c] = Object(Hs.b)("args", t, e, n);
                    return [
                      En.zb.matMul({
                        a: Object(Hs.b)("a", t, e, n),
                        b: Object(Hs.b)("b", t, e, n),
                        transposeA: Object(Hs.b)("transposeA", t, e, n),
                        transposeB: Object(Hs.b)("transposeB", t, e, n),
                        bias: u,
                        activation: a,
                        preluActivationWeights: c,
                      }),
                    ];
                  default:
                    throw TypeError(`Node type ${t.op} is not implemented`);
                }
              })(t, e, n)
            );
          case "normalization":
            return En.ud(() =>
              ((t, e, n) => {
                switch (t.op) {
                  case "FusedBatchNorm":
                  case "FusedBatchNormV2":
                  case "FusedBatchNormV3":
                    return [
                      En.G(
                        Object(Hs.b)("x", t, e, n),
                        Object(Hs.b)("mean", t, e, n),
                        Object(Hs.b)("variance", t, e, n),
                        Object(Hs.b)("offset", t, e, n),
                        Object(Hs.b)("scale", t, e, n),
                        Object(Hs.b)("epsilon", t, e, n)
                      ),
                    ];
                  case "LRN":
                    return [
                      En.Qb(
                        Object(Hs.b)("x", t, e, n),
                        Object(Hs.b)("radius", t, e, n),
                        Object(Hs.b)("bias", t, e, n),
                        Object(Hs.b)("alpha", t, e, n),
                        Object(Hs.b)("beta", t, e, n)
                      ),
                    ];
                  case "Softmax":
                    return [En.Zc(Object(Hs.b)("x", t, e, n))];
                  case "LogSoftmax":
                    return [En.Tb(Object(Hs.b)("x", t, e, n))];
                  case "SparseToDense":
                    return [
                      En.cd(
                        Object(Hs.b)("sparseIndices", t, e, n),
                        Object(Hs.b)("outputShape", t, e, n),
                        Object(Hs.b)("sparseValues", t, e, n),
                        Object(Hs.b)("defaultValue", t, e, n)
                      ),
                    ];
                  default:
                    throw TypeError(`Node type ${t.op} is not implemented`);
                }
              })(t, e, n)
            );
          case "reduction":
            return En.ud(() =>
              ((t, e, n) => {
                switch (t.op) {
                  case "Max": {
                    const r = Object(Hs.b)("axis", t, e, n),
                      a = Object(Hs.b)("keepDims", t, e, n);
                    return [En.Yb(Object(Hs.b)("x", t, e, n), r, a)];
                  }
                  case "Mean": {
                    const r = Object(Hs.b)("axis", t, e, n),
                      a = Object(Hs.b)("keepDims", t, e, n);
                    return [En.dc(Object(Hs.b)("x", t, e, n), r, a)];
                  }
                  case "Min": {
                    const r = Object(Hs.b)("axis", t, e, n),
                      a = Object(Hs.b)("keepDims", t, e, n);
                    return [En.fc(Object(Hs.b)("x", t, e, n), r, a)];
                  }
                  case "Sum": {
                    const r = Object(Hs.b)("axis", t, e, n),
                      a = Object(Hs.b)("keepDims", t, e, n);
                    return [En.ld(Object(Hs.b)("x", t, e, n), r, a)];
                  }
                  case "All": {
                    const r = Object(Hs.b)("axis", t, e, n),
                      a = Object(Hs.b)("keepDims", t, e, n);
                    return [En.t(Object(Hs.b)("x", t, e, n), r, a)];
                  }
                  case "Any": {
                    const r = Object(Hs.b)("axis", t, e, n),
                      a = Object(Hs.b)("keepDims", t, e, n);
                    return [En.u(Object(Hs.b)("x", t, e, n), r, a)];
                  }
                  case "ArgMax": {
                    const r = Object(Hs.b)("axis", t, e, n);
                    return [En.v(Object(Hs.b)("x", t, e, n), r)];
                  }
                  case "ArgMin": {
                    const r = Object(Hs.b)("axis", t, e, n);
                    return [En.w(Object(Hs.b)("x", t, e, n), r)];
                  }
                  case "Prod": {
                    const r = Object(Hs.b)("axis", t, e, n),
                      a = Object(Hs.b)("keepDims", t, e, n);
                    return [En.uc(Object(Hs.b)("x", t, e, n), r, a)];
                  }
                  case "Cumsum": {
                    const r = Object(Hs.b)("axis", t, e, n),
                      a = Object(Hs.b)("exclusive", t, e, n),
                      i = Object(Hs.b)("reverse", t, e, n);
                    return [En.db(Object(Hs.b)("x", t, e, n), r, a, i)];
                  }
                  default:
                    throw TypeError(`Node type ${t.op} is not implemented`);
                }
              })(t, e, n)
            );
          case "slice_join":
            return En.ud(() =>
              ((t, e, n) => {
                switch (t.op) {
                  case "ConcatV2":
                  case "Concat": {
                    const r = Object(Hs.b)("n", t, e, n),
                      a = Object(Hs.b)("axis", t, e, n);
                    let i = Object(Hs.b)("tensors", t, e, n);
                    return (i = i.slice(0, r)), [En.S(i, a)];
                  }
                  case "GatherV2":
                  case "Gather": {
                    const r = Object(Hs.b)("axis", t, e, n),
                      a = Object(Hs.b)("x", t, e, n),
                      i = Object(Hs.b)("indices", t, e, n);
                    return [En.Ab(a, i.asType("int32"), r)];
                  }
                  case "ReverseV2":
                  case "Reverse": {
                    const r = Object(Hs.b)("axis", t, e, n),
                      a = Object(Hs.b)("x", t, e, n);
                    return [En.Ec(a, r)];
                  }
                  case "Slice": {
                    const r = Object(Hs.b)("begin", t, e, n),
                      a = Object(Hs.b)("size", t, e, n);
                    return [En.Tc(Object(Hs.b)("x", t, e, n), r, a)];
                  }
                  case "StridedSlice": {
                    const r = Object(Hs.b)("begin", t, e, n),
                      a = Object(Hs.b)("end", t, e, n),
                      i = Object(Hs.b)("strides", t, e, n),
                      o = Object(Hs.b)("beginMask", t, e, n),
                      s = Object(Hs.b)("endMask", t, e, n),
                      u = Object(Hs.b)("ellipsisMask", t, e, n),
                      c = Object(Hs.b)("newAxisMask", t, e, n),
                      l = Object(Hs.b)("shrinkAxisMask", t, e, n),
                      h = Object(Hs.b)("x", t, e, n);
                    if (1 === r.length && h.shape.length > 1)
                      for (let t = 1; t < h.shape.length; t++)
                        r.push(0), a.push(h.shape[t]), i.push(i[0]);
                    return [En.jd(h, r, a, i, o, s, u, c, l)];
                  }
                  case "Pack":
                    return En.ud(() => {
                      const r = Object(Hs.b)("axis", t, e, n),
                        a = Object(Hs.b)("tensors", t, e, n),
                        i = a[0].shape,
                        o = a[0].squeeze().shape,
                        s = a.map((t) => {
                          const e = En.Cd.arraysEqual(t.shape, i);
                          if (!e && !En.Cd.arraysEqual(t.squeeze().shape, o))
                            throw new Error(
                              "the input tensors shape does not match"
                            );
                          return e ? t : t.reshape(i);
                        });
                      return [En.id(s, r)];
                    });
                  case "Unpack":
                    return En.ud(() => {
                      const r = Object(Hs.b)("axis", t, e, n),
                        a = Object(Hs.b)("tensor", t, e, n);
                      return En.Ad(a, r);
                    });
                  case "Tile": {
                    const r = Object(Hs.b)("reps", t, e, n);
                    return [En.vd(Object(Hs.b)("x", t, e, n), r)];
                  }
                  case "Split":
                  case "SplitV": {
                    const r = Object(Hs.b)("axis", t, e, n),
                      a = Object(Hs.b)("numOrSizeSplits", t, e, n);
                    return En.dd(Object(Hs.b)("x", t, e, n), a, r);
                  }
                  case "ScatterNd": {
                    const r = Object(Hs.b)("indices", t, e, n),
                      a = Object(Hs.b)("values", t, e, n),
                      i = Object(Hs.b)("shape", t, e, n);
                    return [En.Jc(r, a, i)];
                  }
                  case "GatherNd": {
                    const r = Object(Hs.b)("x", t, e, n),
                      a = Object(Hs.b)("indices", t, e, n);
                    return [En.Bb(r, a)];
                  }
                  case "SparseToDense": {
                    const r = Object(Hs.b)("sparseIndices", t, e, n),
                      a = Object(Hs.b)("outputShape", t, e, n),
                      i = Object(Hs.b)("sparseValues", t, e, n),
                      o = Object(Hs.b)("defaultValue", t, e, n);
                    return [
                      En.cd(
                        r,
                        i,
                        a,
                        i.dtype === o.dtype ? o : o.asType(i.dtype)
                      ),
                    ];
                  }
                  default:
                    throw TypeError(`Node type ${t.op} is not implemented`);
                }
              })(t, e, n)
            );
          case "spectral":
            return En.ud(() =>
              ((t, e, n) => {
                switch (t.op) {
                  case "FFT":
                    return [En.vb(Object(Hs.b)("x", t, e, n))];
                  case "IFFT":
                    return [En.Eb(Object(Hs.b)("x", t, e, n))];
                  case "RFFT":
                    return [En.Fc(Object(Hs.b)("x", t, e, n))];
                  case "IRFFT":
                    return [En.Ib(Object(Hs.b)("x", t, e, n))];
                  default:
                    throw TypeError(`Node type ${t.op} is not implemented`);
                }
              })(t, e, n)
            );
          case "transformation":
            return En.ud(() =>
              ((t, e, n) => {
                switch (t.op) {
                  case "Cast":
                    return [
                      En.O(
                        Object(Hs.b)("x", t, e, n),
                        Object(Hs.b)("dtype", t, e, n)
                      ),
                    ];
                  case "ExpandDims": {
                    const r = Object(Hs.b)("axis", t, e, n);
                    return [En.sb(Object(Hs.b)("x", t, e, n), r)];
                  }
                  case "Squeeze": {
                    const r = Object(Hs.b)("axis", t, e, n);
                    return [En.hd(Object(Hs.b)("x", t, e, n), r)];
                  }
                  case "Reshape":
                    return [
                      En.Dc(
                        Object(Hs.b)("x", t, e, n),
                        Object(Hs.b)("shape", t, e, n)
                      ),
                    ];
                  case "PadV2":
                  case "Pad":
                    return [
                      En.rc(
                        Object(Hs.b)("x", t, e, n),
                        Object(Hs.f)(Object(Hs.b)("padding", t, e, n), 2),
                        Object(Hs.b)("constantValue", t, e, n)
                      ),
                    ];
                  case "SpaceToBatchND": {
                    const r = Object(Hs.b)("blockShape", t, e, n),
                      a = Object(Hs.f)(Object(Hs.b)("paddings", t, e, n), 2);
                    return [En.bd(Object(Hs.b)("x", t, e, n), r, a)];
                  }
                  case "BatchToSpaceND": {
                    const r = Object(Hs.b)("blockShape", t, e, n),
                      a = Object(Hs.f)(Object(Hs.b)("crops", t, e, n), 2);
                    return [En.K(Object(Hs.b)("x", t, e, n), r, a)];
                  }
                  case "DepthToSpace": {
                    const r = Object(Hs.b)("blockSize", t, e, n),
                      a = Object(Hs.b)("dataFormat", t, e, n).toUpperCase();
                    return [En.eb(Object(Hs.b)("x", t, e, n), r, a)];
                  }
                  case "BroadcastTo":
                    return [
                      En.L(
                        Object(Hs.b)("x", t, e, n),
                        Object(Hs.b)("shape", t, e, n)
                      ),
                    ];
                  default:
                    throw TypeError(`Node type ${t.op} is not implemented`);
                }
              })(t, e, n)
            );
          case "custom":
            const r = Object(Ks.a)(t.op);
            if (r && r.customExecutor) return r.customExecutor(new qs(t, e, n));
            throw TypeError(`Custom op ${t.op} is not registered.`);
          default:
            throw TypeError(
              `Unknown op '${t.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`
            );
        }
      })(t, e, n);
      return r instanceof Promise ? r.then((t) => [].concat(t)) : [].concat(r);
    }
    class Qs {
      constructor(t, e, n = {}) {
        (this.weightMap = t),
          (this.tensorArrayMap = e),
          (this.functionMap = n),
          (this.rootContext = { id: 0, frameName: "", iterationId: 0 }),
          (this.contexts = [this.rootContext]),
          (this.lastId = 0),
          this.generateCurrentContextIds();
      }
      newFrame(t, e) {
        return { id: t, frameName: e, iterationId: 0 };
      }
      set currentContext(t) {
        this.contexts !== t &&
          ((this.contexts = t), this.generateCurrentContextIds());
      }
      get currentContext() {
        return this.contexts;
      }
      get currentContextId() {
        return this._currentContextIds[0];
      }
      get currentContextIds() {
        return this._currentContextIds;
      }
      generateCurrentContextIds() {
        const t = [];
        for (let e = 0; e < this.contexts.length - 1; e++) {
          const n = this.contexts.slice(0, this.contexts.length - e);
          t.push(this.contextIdforContexts(n));
        }
        t.push(""), (this._currentContextIds = t);
      }
      contextIdforContexts(t) {
        return t
          ? t
              .map((t) =>
                0 === t.id && 0 === t.iterationId
                  ? ""
                  : `${t.frameName}-${t.iterationId}`
              )
              .join("/")
          : "";
      }
      enterFrame(t) {
        this.contexts &&
          (this.lastId++,
          (this.contexts = this.contexts.slice()),
          this.contexts.push(this.newFrame(this.lastId, t)),
          this._currentContextIds.unshift(
            this.contextIdforContexts(this.contexts)
          ));
      }
      exitFrame() {
        if (!(this.contexts && this.contexts.length > 1))
          throw new Error("Cannot exit frame, the context is empty");
        (this.contexts = this.contexts.slice()),
          this.contexts.splice(-1),
          this.currentContextIds.shift();
      }
      nextIteration() {
        if (!(this.contexts && this.contexts.length > 0))
          throw new Error(
            "Cannot increase frame iteration, the context is empty"
          );
        {
          (this.contexts = this.contexts.slice()), this.lastId++;
          const t = Object.assign({}, this.contexts[this.contexts.length - 1]);
          (t.iterationId += 1),
            (t.id = this.lastId),
            this.contexts.splice(-1, 1, t),
            this._currentContextIds.splice(
              0,
              1,
              this.contextIdforContexts(this.contexts)
            );
        }
      }
      getWeight(t) {
        return this.weightMap[t];
      }
      addTensorArray(t) {
        this.tensorArrayMap[t.id] = t;
      }
      getTensorArray(t) {
        return this.tensorArrayMap[t];
      }
    }
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Zs(t, e, n) {
      const r = new Set(),
        a = [];
      let i = null,
        o = null;
      const s = new Set(),
        u = Object.keys(t).map((t) => Object(Hs.e)(t)[0]),
        c = [...e];
      for (; c.length > 0; ) {
        const t = c.pop();
        (nu(t) || ru(t)) &&
          null == i &&
          ((i = t),
          (o = i.children.map((t) => t.name).filter((t) => r.has(t)))),
          r.add(t.name),
          null == n[t.name] &&
            -1 === u.indexOf(t.name) &&
            (0 !== t.inputs.length
              ? t.inputs.forEach((t) => {
                  s.has(t.name) || (s.add(t.name), c.push(t));
                })
              : a.push(t.name));
      }
      return {
        inputs: t,
        outputs: e,
        usedNodes: r,
        missingInputs: a,
        dynamicNode: i,
        syncInputs: o,
      };
    }
    const tu = [
        "Switch",
        "Merge",
        "Enter",
        "Exit",
        "NextIteration",
        "StatelessIf",
        "StatelessWhile",
      ],
      eu = [
        "NonMaxSuppressionV2",
        "NonMaxSuppressionV3",
        "NonMaxSuppressionV5",
        "Where",
      ];
    function nu(t) {
      return tu.indexOf(t.op) >= 0;
    }
    function ru(t) {
      return eu.indexOf(t.op) >= 0;
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class au {
      constructor(t, e) {
        (this.graph = t),
          (this.parent = e),
          (this.compiledMap = new Map()),
          (this._weightMap = {}),
          (this.SEPERATOR = ","),
          (this._functions = {}),
          (this._functionExecutorMap = {}),
          (this._outputs = t.outputs),
          (this._inputs = t.inputs),
          (this._signature = t.signature),
          (this._functions = t.functions),
          null != t.functions &&
            Object.keys(t.functions).forEach((e) => {
              this._functionExecutorMap[e] = new au(t.functions[e], this);
            });
      }
      get weightIds() {
        return this.parent ? this.parent.weightIds : this._weightIds;
      }
      get functionExecutorMap() {
        return this.parent
          ? this.parent.functionExecutorMap
          : this._functionExecutorMap;
      }
      get weightMap() {
        return this.parent ? this.parent.weightMap : this._weightMap;
      }
      set weightMap(t) {
        const e = Object.keys(t).map((e) => t[e].map((t) => t.id));
        (this._weightIds = [].concat(...e)), (this._weightMap = t);
      }
      get inputs() {
        return this._inputs.map((t) => ({
          name: t.name,
          shape: t.attrParams.shape ? t.attrParams.shape.value : void 0,
          dtype: t.attrParams.dtype ? t.attrParams.dtype.value : void 0,
        }));
      }
      get outputs() {
        return this._outputs.map((t) => ({
          name: t.name,
          shape: t.attrParams.shape ? t.attrParams.shape.value : void 0,
          dtype: t.attrParams.dtype ? t.attrParams.dtype.value : void 0,
        }));
      }
      get inputNodes() {
        return this._inputs.map((t) => t.signatureKey || t.name);
      }
      get outputNodes() {
        return this._outputs.map((t) => {
          const e = t.signatureKey || t.name;
          return t.defaultOutput ? `${e}:${t.defaultOutput}` : e;
        });
      }
      get functions() {
        return Object.keys(this._functions).reduce(
          (t, e) => ((t[e] = this._functions[e].signature), t),
          {}
        );
      }
      getCompilationKey(t, e) {
        const n = t.map((t) => t.name).sort(),
          r = e.map((t) => t.name).sort();
        return n.join(this.SEPERATOR) + "--" + r.join(this.SEPERATOR);
      }
      compile(t, e) {
        const n = Zs(t, e, this.weightMap),
          { missingInputs: r, dynamicNode: a, syncInputs: i } = n;
        if (null != a)
          throw new Error(
            `This execution contains the node '${a.name}', which has the dynamic op '${a.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${i}]`
          );
        if (r.length > 0) {
          const n = e.map((t) => t.name),
            a = Object.keys(t);
          throw new Error(
            `Cannot compute the outputs [${n}] from the provided inputs [${a}]. Missing the following inputs: [${r}]`
          );
        }
        return (function (t, e, n) {
          const { usedNodes: r, inputs: a } = n,
            i = [];
          Object.keys(a)
            .map((t) => Object(Hs.e)(t)[0])
            .map((e) => t.nodes[e])
            .forEach((t) => {
              r.has(t.name) && i.push(t);
            }),
            t.weights.forEach((t) => {
              r.has(t.name) && i.push(t);
            });
          const o = new Set(),
            s = [];
          for (; i.length > 0; ) {
            const t = i.pop();
            o.add(t.name),
              e[t.name] || s.push(t),
              t.children.forEach((t) => {
                !o.has(t.name) &&
                  r.has(t.name) &&
                  t.inputs.every((t) => o.has(t.name)) &&
                  i.push(t);
              });
          }
          return s;
        })(this.graph, this.weightMap, n);
      }
      execute(t, e) {
        t = this.mapInputs(t);
        const n = Object.keys(t).sort();
        this.checkInputs(t),
          this.checkInputShapeAndType(t),
          (e = this.mapOutputs(e)),
          this.checkOutputs(e);
        const r = n.map((t) => this.graph.nodes[Object(Hs.e)(t)[0]]),
          a = e.map((t) => this.graph.nodes[Object(Hs.e)(t)[0]]),
          i = this.getCompilationKey(r, a);
        let o = this.compiledMap.get(i);
        null == o && ((o = this.compile(t, a)), this.compiledMap.set(i, o));
        const s = {};
        return Object(En.ud)(() => {
          const n = new Qs(this.weightMap, s, this.functionExecutorMap),
            r = Object.assign({}, this.weightMap);
          Object.keys(t).forEach((e) => {
            const [n, a] = Object(Hs.e)(e),
              i = [];
            (i[a] = t[e]), (r[n] = i);
          });
          const a = this.getFrozenTensorIds(r),
            i = {};
          for (let t = 0; t < o.length; t++) {
            const s = o[t];
            if (!r[s.name]) {
              const t = Js(s, r, n);
              if (t instanceof Promise)
                throw new Error(
                  `The execution of the op '${s.op}' returned a promise. Please use model.executeAsync() instead.`
                );
              (r[s.name] = t),
                this.checkTensorForDisposal(s.name, s, r, n, a, e, i);
            }
          }
          return e.map((t) => Object(Hs.c)(t, r, n));
        });
      }
      getFrozenTensorIds(t) {
        const e = [].concat.apply(
          [],
          Object.keys(t)
            .map((e) => t[e])
            .map((t) => t.map((t) => t.id))
        );
        return new Set(e);
      }
      checkTensorForDisposal(t, e, n, r, a, i, o) {
        "control" !== e.category &&
          -1 === i.indexOf(t) &&
          (n[t].forEach((t) => {
            null != t && (o[t.id] = (o[t.id] || 0) + e.children.length);
          }),
          e.inputs.forEach((t) => {
            if ("control" !== t.category) {
              const e = Object(Hs.d)(t.name, n, r);
              null != e &&
                e.forEach((t) => {
                  if (t && !a.has(t.id)) {
                    const e = o[t.id];
                    1 === e
                      ? (t.dispose(), delete o[t.id])
                      : null != e && o[t.id]--;
                  }
                });
            }
          }));
      }
      async executeAsync(t, e, n = !1) {
        (t = this.mapInputs(t)),
          this.checkInputs(t),
          this.checkInputShapeAndType(t),
          (e = this.mapOutputs(e)),
          this.checkOutputs(e);
        const r = new Qs(this.weightMap, {}, this.functionExecutorMap),
          a = await this.executeWithControlFlow(t, r, e, n),
          i = e.map((t) => Object(Hs.c)(t, a, r)),
          o = new Set(i.map((t) => t.id)),
          s = new Set(Object.keys(t).map((e) => t[e].id));
        return (
          Object.keys(a).forEach((t) => {
            a[t].forEach((t) => {
              !t ||
                t.isDisposed ||
                o.has(t.id) ||
                s.has(t.id) ||
                -1 !== this.weightIds.indexOf(t.id) ||
                t.dispose();
            });
          }),
          i
        );
      }
      async executeFunctionAsync(t) {
        const e = t.reduce((t, e, n) => ((t[this.inputs[n].name] = e), t), {});
        return this.executeAsync(e, this.outputNodes, !0);
      }
      async executeWithControlFlow(t, e, n, r) {
        const a = Object.keys(t),
          i = a.map((t) => this.graph.nodes[Object(Hs.e)(t)[0]]),
          o = n.map((t) => this.graph.nodes[Object(Hs.e)(t)[0]]),
          {
            usedNodes: s,
            missingInputs: u,
            dynamicNode: c,
            syncInputs: l,
          } = Zs(t, o, this.weightMap),
          h = [...i, ...this.graph.weights].map((t) => ({
            node: t,
            contexts: e.currentContext,
          })),
          d = Object.assign({}, this.weightMap);
        Object.keys(t).forEach((e) => {
          const [n, r] = Object(Hs.e)(e),
            a = [];
          (a[r] = t[e]), (d[n] = a);
        });
        const p = {},
          f = this.getFrozenTensorIds(d),
          m = {};
        for (; h.length > 0; ) {
          const t = this.processStack(i, h, e, d, m, f, n, p, s);
          await Promise.all(t);
        }
        null != c ||
          r ||
          console.warn(
            "This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead."
          );
        const g = o
          .filter((t) => !nu(t) && !Object(Hs.c)(t.name, d, e))
          .map((t) => t.name);
        if (g.length > 0) {
          let t = "";
          throw (
            (null != c &&
              (t = `Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${l}]`),
            new Error(
              `Cannot compute the outputs [${g}] from the provided inputs [${a}]. Consider providing the following inputs: [${u}]. ${t}`
            ))
          );
        }
        return d;
      }
      processStack(t, e, n, r, a, i, o, s, u) {
        const c = [];
        for (; e.length > 0; ) {
          const l = e.pop();
          n.currentContext = l.contexts;
          let h = "";
          if (
            ("Enter" === l.node.op &&
              Object(Hs.b)("isConstant", l.node, r, n) &&
              ([h] = Object(Hs.a)(l.node.name, n)),
            -1 === t.indexOf(l.node))
          ) {
            const t = Js(l.node, r, n);
            h || ([h] = Object(Hs.a)(l.node.name, n));
            const d = n.currentContext;
            t instanceof Promise
              ? c.push(
                  t.then(
                    (t) => (
                      (r[h] = t),
                      (n.currentContext = d),
                      this.checkTensorForDisposal(h, l.node, r, n, i, o, s),
                      this.processChildNodes(l.node, e, n, r, a, u),
                      t
                    )
                  )
                )
              : ((r[h] = t),
                this.checkTensorForDisposal(h, l.node, r, n, i, o, s),
                this.processChildNodes(l.node, e, n, r, a, u));
          } else this.processChildNodes(l.node, e, n, r, a, u);
        }
        return c;
      }
      processChildNodes(t, e, n, r, a, i) {
        t.children.forEach((t) => {
          const [o] = Object(Hs.a)(t.name, n);
          !a[o] &&
            i.has(t.name) &&
            ("Merge" === t.op
              ? t.inputNames.some((t) => !!Object(Hs.c)(t, r, n)) &&
                ((a[o] = !0), e.push({ contexts: n.currentContext, node: t }))
              : t.inputNames.every((t) => !!Object(Hs.c)(t, r, n)) &&
                ((a[o] = !0), e.push({ contexts: n.currentContext, node: t })));
        });
      }
      dispose() {
        Object.keys(this.weightMap).forEach((t) =>
          this.weightMap[t].forEach((t) => t.dispose())
        );
      }
      checkInputShapeAndType(t) {
        Object.keys(t).forEach((e) => {
          const n = t[e],
            [r] = Object(Hs.e)(e),
            a = this.graph.nodes[r];
          if (a.attrParams.shape && a.attrParams.shape.value) {
            const t = a.attrParams.shape.value,
              e =
                t.length === n.shape.length &&
                n.shape.every((e, n) => -1 === t[n] || t[n] === e);
            En.Cd.assert(
              e,
              () =>
                `The shape of dict['${a.name}'] provided in model.execute(dict) must be [${t}], but was [${n.shape}]`
            );
          }
          a.attrParams.dtype &&
            a.attrParams.dtype.value &&
            En.Cd.assert(
              n.dtype === a.attrParams.dtype.value,
              () =>
                `The dtype of dict['${a.name}'] provided in model.execute(dict) must be ${a.attrParams.dtype.value}, but was ${n.dtype}`
            );
        });
      }
      mapInputs(t) {
        const e = {};
        for (const n in t)
          if (
            null != this._signature &&
            null != this._signature.inputs &&
            null != this._signature.inputs[n]
          ) {
            e[this._signature.inputs[n].name] = t[n];
          } else e[n] = t[n];
        return e;
      }
      checkInputs(t) {
        const e = Object.keys(t).filter((t) => {
          const [e] = Object(Hs.e)(t);
          return null == this.graph.nodes[e];
        });
        if (e.length > 0)
          throw new Error(
            `The dict provided in model.execute(dict) has keys: [${e}] that are not part of graph`
          );
      }
      mapOutputs(t) {
        return t.map((t) => {
          if (
            null != this._signature &&
            null != this._signature.outputs &&
            null != this._signature.outputs[t]
          ) {
            return this._signature.outputs[t].name;
          }
          return t;
        }, {});
      }
      checkOutputs(t) {
        t.forEach((t) => {
          const [e] = Object(Hs.e)(t);
          if (!this.graph.nodes[e])
            throw new Error(`The output '${t}' is not found in the graph`);
        });
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class iu {
      constructor(t, e = {}) {
        (this.modelUrl = t),
          (this.loadOptions = e),
          (this.version = "n/a"),
          null == e && (this.loadOptions = {});
      }
      get modelVersion() {
        return this.version;
      }
      get inputNodes() {
        return this.executor.inputNodes;
      }
      get outputNodes() {
        return this.executor.outputNodes;
      }
      get inputs() {
        return this.executor.inputs;
      }
      get outputs() {
        return this.executor.outputs;
      }
      get weights() {
        return this.executor.weightMap;
      }
      findIOHandler() {
        const t = this.modelUrl;
        if (null != t.load) this.handler = t;
        else if (null != this.loadOptions.requestInit)
          this.handler = En.Hb.browserHTTPRequest(t, this.loadOptions);
        else {
          const e = En.Hb.getLoadHandlers(t, this.loadOptions);
          if (0 === e.length)
            e.push(En.Hb.browserHTTPRequest(t, this.loadOptions));
          else if (e.length > 1)
            throw new Error(
              `Found more than one (${e.length}) load handlers for URL '${[t]}'`
            );
          this.handler = e[0];
        }
      }
      async load() {
        if ((this.findIOHandler(), null == this.handler.load))
          throw new Error(
            "Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented."
          );
        const t = await this.handler.load();
        return this.loadSync(t);
      }
      loadSync(t) {
        this.artifacts = t;
        const e = this.artifacts.modelTopology;
        let n = {};
        null != this.artifacts.userDefinedMetadata &&
          (n = this.artifacts.userDefinedMetadata.signature),
          (this.version = `${e.versions.producer}.${e.versions.minConsumer}`);
        const r = En.Hb.decodeWeights(
          this.artifacts.weightData,
          this.artifacts.weightSpecs
        );
        return (
          (this.executor = new au(Gs.a.Instance.transformGraph(e, n))),
          (this.executor.weightMap = this.convertTensorMapToTensorsMap(r)),
          !0
        );
      }
      async save(t, e) {
        if ("string" == typeof t) {
          const e = En.Hb.getSaveHandlers(t);
          if (0 === e.length)
            throw new Error(`Cannot find any save handlers for URL '${t}'`);
          if (e.length > 1)
            throw new Error(
              `Found more than one (${e.length}) save handlers for URL '${t}'`
            );
          t = e[0];
        }
        if (null == t.save)
          throw new Error(
            "GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined."
          );
        return t.save(this.artifacts);
      }
      predict(t, e) {
        return this.execute(t, this.outputNodes);
      }
      normalizeInputs(t) {
        if (!(t instanceof En.l || Array.isArray(t))) return t;
        if ((t = Array.isArray(t) ? t : [t]).length !== this.inputNodes.length)
          throw new Error(
            `Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${t.length} input tensors.`
          );
        return this.inputNodes.reduce((e, n, r) => ((e[n] = t[r]), e), {});
      }
      normalizeOutputs(t) {
        return (t = t || this.outputNodes), Array.isArray(t) ? t : [t];
      }
      execute(t, e) {
        (t = this.normalizeInputs(t)), (e = this.normalizeOutputs(e));
        const n = this.executor.execute(t, e);
        return n.length > 1 ? n : n[0];
      }
      async executeAsync(t, e) {
        (t = this.normalizeInputs(t)), (e = this.normalizeOutputs(e));
        const n = await this.executor.executeAsync(t, e);
        return n.length > 1 ? n : n[0];
      }
      convertTensorMapToTensorsMap(t) {
        return Object.keys(t).reduce((e, n) => ((e[n] = [t[n]]), e), {});
      }
      dispose() {
        this.executor.dispose();
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    var ou = n(20),
      su = n(14),
      uu = n(19);
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     *
     * =============================================================================
     */
    class cu {
      constructor() {
        this.size = null;
      }
      batch(t, e = !0) {
        const n = this;
        let r;
        return (
          En.Cd.assert(
            t > 0,
            () => "batchSize needs to be positive, but it is\n      " + t
          ),
          (r =
            this.size === 1 / 0 || null == this.size
              ? this.size
              : e
              ? Math.ceil(this.size / t)
              : Math.floor(this.size / t)),
          lu(async () => (await n.iterator()).columnMajorBatch(t, e, pu), r)
        );
      }
      concatenate(t) {
        const e = this;
        let n;
        return (
          (n =
            this.size === 1 / 0 || t.size === 1 / 0
              ? 1 / 0
              : null != this.size && null != t.size
              ? this.size + t.size
              : null),
          lu(
            async () => (await e.iterator()).concatenate(await t.iterator()),
            n
          )
        );
      }
      filter(t) {
        const e = this;
        let n;
        return (
          (n = this.size === 1 / 0 ? 1 / 0 : null),
          lu(
            async () => (await e.iterator()).filter((e) => En.ud(() => t(e))),
            n
          )
        );
      }
      async forEachAsync(t) {
        return (await this.iterator()).forEachAsync(t);
      }
      map(t) {
        const e = this;
        return lu(
          async () => (await e.iterator()).map((e) => En.ud(() => t(e))),
          this.size
        );
      }
      mapAsync(t) {
        const e = this;
        return lu(async () => (await e.iterator()).mapAsync(t), this.size);
      }
      prefetch(t) {
        if (null == t)
          throw new RangeError(
            "`Dataset.prefetch()` requires bufferSize to be specified."
          );
        const e = this;
        return lu(async () => (await e.iterator()).prefetch(t), this.size);
      }
      repeat(t) {
        const e = this;
        let n;
        return (
          (n =
            null != this.size && t > 0
              ? this.size * t
              : 0 === t
              ? 0
              : null != this.size && (void 0 === t || t < 0)
              ? 1 / 0
              : null),
          lu(async () => {
            const n = Object(su.e)(async () => ({
              value: await e.iterator(),
              done: !1,
            }));
            return Object(su.d)(n.take(t));
          }, n)
        );
      }
      skip(t) {
        const e = this;
        let n;
        return (
          (n =
            null != this.size && t >= 0 && this.size >= t
              ? this.size - t
              : null != this.size && (this.size < t || void 0 === t || t < 0)
              ? 0
              : null),
          lu(async () => (await e.iterator()).skip(t), n)
        );
      }
      shuffle(t, e, n = !0) {
        if (null == t || t < 0)
          throw null == this.size
            ? new RangeError(
                "`Dataset.shuffle()` requires bufferSize to be specified."
              )
            : new RangeError(
                `\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`
              );
        const r = this,
          a = ou.alea(e || En.Cd.now().toString());
        return lu(async () => {
          let e = a.int32();
          return (
            n && (e += a.int32()), (await r.iterator()).shuffle(t, e.toString())
          );
        }, this.size);
      }
      take(t) {
        const e = this;
        let n;
        return (
          (n =
            null != this.size && this.size > t
              ? t
              : null != this.size && this.size <= t
              ? this.size
              : null),
          lu(async () => (await e.iterator()).take(t), n)
        );
      }
      async toArray() {
        if (this.size === 1 / 0)
          throw new Error("Can not convert infinite data stream to array.");
        return (await this.iterator()).toArray();
      }
      async toArrayForTest() {
        if (this.size === 1 / 0)
          throw new Error("Can not convert infinite data stream to array.");
        return (await this.iterator()).toArrayForTest();
      }
    }
    function lu(t, e = null) {
      return new (class extends cu {
        constructor() {
          super(...arguments), (this.size = e);
        }
        async iterator() {
          return t();
        }
      })();
    }
    function hu(t) {
      return lu(async () => Object(su.f)(t), t.length);
    }
    function du(t) {
      if (!Object(uu.e)(t))
        throw new Error("The argument to zip() must be an object or array.");
      let e;
      if (Array.isArray(t))
        for (let n = 0; n < t.length; n++)
          e = null == e ? t[n].size : Math.min(e, t[n].size);
      else if (t instanceof Object)
        for (const n in t) e = null == e ? t[n].size : Math.min(e, t[n].size);
      return lu(async () => {
        const e = await Object(uu.c)(t, (t) => {
          if (t instanceof cu) return { value: t.iterator(), recurse: !1 };
          if (Object(uu.e)(t)) return { value: null, recurse: !0 };
          throw new Error(
            "Leaves of the structure passed to zip() must be Datasets, not primitives."
          );
        });
        return Object(su.g)(e, su.c.SHORTEST);
      }, e);
    }
    function pu(t) {
      if (null === t) return null;
      const e = t[0];
      if (Object(uu.a)(e)) {
        return {
          value: (function (t) {
            if (0 === t.length)
              throw new Error("Can't make a batch of zero elements.");
            return t[0] instanceof En.l ? En.id(t) : En.pd(t);
          })(
            /**
             * @license
             * Copyright 2018 Google LLC. All Rights Reserved.
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             * http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             *
             * =============================================================================
             */ t
          ),
          recurse: !1,
        };
      }
      return { value: null, recurse: !0 };
    }
    cu.MAX_BUFFER_SIZE = 1e4;
    class fu extends cu {
      constructor(t) {
        super(), (this.input = t);
      }
      async iterator() {
        return (await this.input.iterator())
          .decodeUTF8()
          .split("\n")
          .map((t) => (t.endsWith("\r") && (t = t.slice(0, -1)), t));
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     *
     * =============================================================================
     */ const mu = Symbol("out"),
      gu = Symbol("field"),
      bu = Symbol("quote"),
      vu = Symbol("quoteafterquote"),
      yu = Symbol("quoteinquote");
    class xu extends cu {
      constructor(t, e) {
        super(),
          (this.input = t),
          (this.hasHeader = !0),
          (this.fullColumnNames = null),
          (this.columnNamesValidated = !1),
          (this.columnConfigs = null),
          (this.configuredColumnsOnly = !1),
          (this.delimiter = ","),
          (this.delimWhitespace = !1),
          (this.base = new fu(t)),
          e || (e = {}),
          (this.hasHeader = !1 !== e.hasHeader),
          (this.fullColumnNames = e.columnNames),
          (this.columnConfigs = e.columnConfigs),
          (this.configuredColumnsOnly = e.configuredColumnsOnly),
          e.delimWhitespace
            ? (En.Cd.assert(
                null == e.delimiter,
                () =>
                  "Delimiter should not be provided when delimWhitespace is true."
              ),
              (this.delimWhitespace = !0),
              (this.delimiter = " "))
            : (this.delimiter = e.delimiter ? e.delimiter : ",");
      }
      async columnNames() {
        return (
          this.columnNamesValidated || (await this.setColumnNames()),
          this.configuredColumnsOnly
            ? Object.keys(this.columnConfigs)
            : this.fullColumnNames
        );
      }
      async setColumnNames() {
        const t = await this.maybeReadHeaderLine();
        if (!this.fullColumnNames && !t)
          throw new Error(
            "Column names must be provided if there is no header line."
          );
        this.fullColumnNames &&
          t &&
          En.Cd.assert(
            t.length === this.fullColumnNames.length,
            () =>
              "The length of provided columnNames (" +
              this.fullColumnNames.length.toString() +
              ") does not match the length of the header line read from file (" +
              t.length.toString() +
              ")."
          ),
          this.fullColumnNames || (this.fullColumnNames = t);
        const e = this.fullColumnNames.reduce(
            (t, e) => ((t[e] = t[e] + 1 || 1), t),
            {}
          ),
          n = Object.keys(e).filter((t) => e[t] > 1);
        if (
          (En.Cd.assert(
            0 === n.length,
            () => "Duplicate column names found: " + n.toString()
          ),
          this.columnConfigs)
        )
          for (const t of Object.keys(this.columnConfigs)) {
            if (-1 === this.fullColumnNames.indexOf(t))
              throw new Error(
                'The key "' +
                  t +
                  '" provided in columnConfigs does not match any of the column names (' +
                  this.fullColumnNames.toString() +
                  ")."
              );
          }
        this.columnNamesValidated = !0;
      }
      async maybeReadHeaderLine() {
        if (this.hasHeader) {
          const t = await this.base.iterator(),
            e = await t.next();
          if (e.done) throw new Error("No data was found for CSV parsing.");
          const n = e.value;
          return this.parseRow(n, !1);
        }
        return null;
      }
      async iterator() {
        this.columnNamesValidated || (await this.setColumnNames());
        let t = await this.base.iterator();
        return (
          this.hasHeader && (t = t.skip(1)),
          t.map((t) => this.makeDataElement(t))
        );
      }
      makeDataElement(t) {
        const e = this.parseRow(t),
          n = {},
          r = {};
        for (let a = 0; a < this.fullColumnNames.length; a++) {
          const i = this.fullColumnNames[a],
            o = this.columnConfigs ? this.columnConfigs[i] : null;
          if (!this.configuredColumnsOnly || o) {
            const s = e[a];
            let u = null;
            if ("" === s)
              if (o && void 0 !== o.default) u = o.default;
              else {
                if (o && (o.required || o.isLabel))
                  throw new Error(
                    `Required column ${i} is empty in this line: ${t}`
                  );
                u = void 0;
              }
            else {
              const t = Number(s);
              if (isNaN(t))
                u = o && "bool" === o.dtype ? this.getBoolean(s) : s;
              else if (o && o.dtype)
                switch (o.dtype) {
                  case "float32":
                    u = t;
                    break;
                  case "int32":
                    u = Math.floor(t);
                    break;
                  case "bool":
                    u = this.getBoolean(s);
                    break;
                  default:
                    u = t;
                }
              else u = t;
            }
            o && o.isLabel ? (r[i] = u) : (n[i] = u);
          }
        }
        return 0 === Object.keys(r).length ? n : { xs: n, ys: r };
      }
      getBoolean(t) {
        return "1" === t || "true" === t.toLowerCase() ? 1 : 0;
      }
      parseRow(t, e = !0) {
        const n = [];
        let r = 0;
        const a = t.length;
        let i = mu;
        for (let e = 0; e < a; e++)
          switch (i) {
            case mu:
              switch (t.charAt(e)) {
                case '"':
                  (r = e + 1), (i = bu);
                  break;
                case this.delimiter:
                  if (
                    ((r = e + 1),
                    " " === this.delimiter && this.delimWhitespace)
                  )
                    break;
                  n.push(""), (i = mu);
                  break;
                default:
                  (i = gu), (r = e);
              }
              break;
            case gu:
              switch (t.charAt(e)) {
                case this.delimiter:
                  n.push(t.substring(r, e)), (i = mu), (r = e + 1);
              }
              break;
            case bu:
              switch (t.charAt(e)) {
                case '"':
                  i = vu;
              }
              break;
            case vu:
              switch (t.charAt(e)) {
                case this.delimiter:
                  n.push(t.substring(r, e - 1)), (i = mu), (r = e + 1);
                  break;
                case '"':
                  i = bu;
                  break;
                default:
                  i = yu;
              }
              break;
            case yu:
              switch (t.charAt(e)) {
                case '"':
                  i = bu;
              }
          }
        if (
          (i === vu ? n.push(t.substring(r, a - 1)) : n.push(t.substring(r)),
          e && n.length !== this.fullColumnNames.length)
        )
          throw new Error(
            `Invalid row in csv file. Should have ${this.fullColumnNames.length} elements in a row, but got ${n}`
          );
        return n;
      }
    }
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     *
     * =============================================================================
     */ class wu extends su.a {
      constructor(t) {
        super(),
          (this.microphoneConfig = t),
          (this.isClosed = !1),
          (this.fftSize = t.fftSize || 1024);
        const e = Math.log2(this.fftSize);
        if (this.fftSize < 0 || e < 4 || e > 14 || !Number.isInteger(e))
          throw new Error(
            "Invalid fftSize: it must be a power of 2 between 2 to 4 and 2 to 14, but got " +
              this.fftSize
          );
        if (
          ((this.numFrames = t.numFramesPerSpectrogram || 43),
          (this.sampleRateHz = t.sampleRateHz),
          (this.columnTruncateLength = t.columnTruncateLength || this.fftSize),
          (this.audioTrackConstraints = t.audioTrackConstraints),
          (this.smoothingTimeConstant = t.smoothingTimeConstant || 0),
          (this.includeSpectrogram = !1 !== t.includeSpectrogram),
          (this.includeWaveform = !0 === t.includeWaveform),
          !this.includeSpectrogram && !this.includeWaveform)
        )
          throw new Error(
            "Both includeSpectrogram and includeWaveform are false. At least one type of data should be returned."
          );
      }
      summary() {
        return "microphone";
      }
      static async create(t = {}) {
        if (Object(En.ob)().get("IS_NODE"))
          throw new Error(
            "microphone API is only supported in browser environment."
          );
        const e = new wu(t);
        return await e.start(), e;
      }
      async start() {
        try {
          this.stream = await navigator.mediaDevices.getUserMedia({
            audio:
              null == this.audioTrackConstraints || this.audioTrackConstraints,
            video: !1,
          });
        } catch (t) {
          throw new Error(
            "Error thrown while initializing video stream: " + t.message
          );
        }
        if (!this.stream)
          throw new Error("Could not obtain audio from microphone.");
        const t = window.AudioContext || window.webkitAudioContext;
        if (((this.audioContext = new t()), this.sampleRateHz)) {
          if (this.audioContext.sampleRate !== this.sampleRateHz)
            throw new Error(
              `Mismatch in sampling rate: Expected: ${this.sampleRateHz}; Actual: ` +
                this.audioContext.sampleRate
            );
        } else this.sampleRateHz = this.audioContext.sampleRate;
        const e = this.audioContext.createMediaStreamSource(this.stream);
        (this.analyser = this.audioContext.createAnalyser()),
          (this.analyser.fftSize = 2 * this.fftSize),
          (this.analyser.smoothingTimeConstant = this.smoothingTimeConstant),
          e.connect(this.analyser),
          (this.freqData = new Float32Array(this.fftSize)),
          (this.timeData = new Float32Array(this.fftSize));
      }
      async next() {
        if (this.isClosed) return { value: null, done: !0 };
        let t, e;
        const n = await this.getAudioData();
        if (this.includeSpectrogram) {
          const e = this.flattenQueue(n.freqDataQueue);
          t = this.getTensorFromAudioDataArray(e, [
            this.numFrames,
            this.columnTruncateLength,
            1,
          ]);
        }
        if (this.includeWaveform) {
          const t = this.flattenQueue(n.timeDataQueue);
          e = this.getTensorFromAudioDataArray(t, [
            this.numFrames * this.fftSize,
            1,
          ]);
        }
        return { value: { spectrogram: t, waveform: e }, done: !1 };
      }
      async capture() {
        return (await this.next()).value;
      }
      async getAudioData() {
        const t = [],
          e = [];
        let n = 0;
        return new Promise((r) => {
          const a = setInterval(() => {
            this.includeSpectrogram &&
              (this.analyser.getFloatFrequencyData(this.freqData),
              this.freqData[0] === -1 / 0 &&
                r({ freqDataQueue: t, timeDataQueue: e }),
              t.push(this.freqData.slice(0, this.columnTruncateLength))),
              this.includeWaveform &&
                (this.analyser.getFloatTimeDomainData(this.timeData),
                e.push(this.timeData.slice())),
              ++n === this.numFrames &&
                (clearInterval(a), r({ freqDataQueue: t, timeDataQueue: e }));
          }, (this.fftSize / this.sampleRateHz) * 1e3);
        });
      }
      stop() {
        this.isClosed ||
          ((this.isClosed = !0),
          this.analyser.disconnect(),
          this.audioContext.close(),
          null != this.stream &&
            this.stream.getTracks().length > 0 &&
            this.stream.getTracks()[0].stop());
      }
      toArray() {
        throw new Error("Can not convert infinite audio stream to array.");
      }
      getSampleRate() {
        return this.sampleRateHz;
      }
      flattenQueue(t) {
        const e = t[0].length,
          n = new Float32Array(t.length * e);
        return t.forEach((t, r) => n.set(t, r * e)), n;
      }
      getTensorFromAudioDataArray(t, e) {
        const n = new Float32Array(En.Cd.sizeFromShape(e));
        return n.set(t, n.length - t.length), Object(En.pd)(n, e);
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     *
     * =============================================================================
     */ class Cu extends su.a {
      constructor(t, e) {
        if (
          (super(),
          (this.webcamVideoElement = t),
          (this.webcamConfig = e),
          (this.isClosed = !0),
          (this.resize = !1),
          this.needToResize())
        )
          if (
            ((this.resize = !0),
            (this.cropSize = [
              this.webcamConfig.resizeHeight,
              this.webcamConfig.resizeWidth,
            ]),
            (this.cropBoxInd = Object(En.qd)([0], "int32")),
            this.webcamConfig.centerCrop)
          ) {
            const t =
                (1 * this.webcamConfig.resizeWidth) /
                this.webcamVideoElement.width,
              e =
                (1 * this.webcamConfig.resizeHeight) /
                this.webcamVideoElement.height,
              n = (1 - t) / 2,
              r = (1 - e) / 2,
              a = n + t,
              i = e + r;
            this.cropBox = Object(En.rd)([r, n, i, a], [1, 4]);
          } else this.cropBox = Object(En.rd)([0, 0, 1, 1], [1, 4]);
      }
      summary() {
        return "webcam";
      }
      static async create(t, e = {}) {
        if (Object(En.ob)().get("IS_NODE"))
          throw new Error(
            "tf.data.webcam is only supported in browser environment."
          );
        if (!t) {
          if (
            ((t = document.createElement("video")),
            !e.resizeWidth || !e.resizeHeight)
          )
            throw new Error(
              "Please provide webcam video element, or resizeWidth and resizeHeight to create a hidden video element."
            );
          (t.width = e.resizeWidth), (t.height = e.resizeHeight);
        }
        const n = new Cu(t, e);
        return await n.start(), n;
      }
      async start() {
        this.webcamConfig.facingMode &&
          En.Cd.assert(
            "user" === this.webcamConfig.facingMode ||
              "environment" === this.webcamConfig.facingMode,
            () =>
              `Invalid webcam facing mode: ${this.webcamConfig.facingMode}. Please provide 'user' or 'environment'`
          );
        try {
          this.stream = await navigator.mediaDevices.getUserMedia({
            video: {
              deviceId: this.webcamConfig.deviceId,
              facingMode: this.webcamConfig.facingMode
                ? this.webcamConfig.facingMode
                : "user",
              width: this.webcamVideoElement.width,
              height: this.webcamVideoElement.height,
            },
          });
        } catch (t) {
          throw (
            ((t.message =
              "Error thrown while initializing video stream: " + t.message),
            t)
          );
        }
        if (!this.stream)
          throw new Error("Could not obtain video from webcam.");
        try {
          this.webcamVideoElement.srcObject = this.stream;
        } catch (t) {
          console.log(t),
            (this.webcamVideoElement.src = window.URL.createObjectURL(
              this.stream
            ));
        }
        return (
          this.webcamVideoElement.play(),
          (this.isClosed = !1),
          new Promise((t) => {
            this.webcamVideoElement.onloadedmetadata = () => {
              t();
            };
          })
        );
      }
      async next() {
        if (this.isClosed) return { value: null, done: !0 };
        let t;
        try {
          t = En.M.fromPixels(this.webcamVideoElement);
        } catch (t) {
          throw new Error(
            "Error thrown converting video to pixels: " + JSON.stringify(t)
          );
        }
        if (!this.resize) return { value: t, done: !1 };
        try {
          return { value: this.cropAndResizeFrame(t), done: !1 };
        } catch (t) {
          throw new Error("Error thrown cropping the video: " + t.message);
        } finally {
          t.dispose();
        }
      }
      needToResize() {
        return !(
          !this.webcamConfig.resizeWidth ||
          !this.webcamConfig.resizeHeight ||
          (this.webcamVideoElement.width === this.webcamConfig.resizeWidth &&
            this.webcamVideoElement.height === this.webcamConfig.resizeHeight)
        );
      }
      cropAndResizeFrame(t) {
        return Object(En.ud)(() => {
          const e = t.toFloat().expandDims(0);
          let n;
          n = En.Gb.cropAndResize(
            e,
            this.cropBox,
            this.cropBoxInd,
            this.cropSize,
            "bilinear"
          );
          const r = n.shape;
          return n.reshape(r.slice(1));
        });
      }
      async capture() {
        return (await this.next()).value;
      }
      stop() {
        this.stream.getTracks().forEach((t) => t.stop());
        try {
          this.webcamVideoElement.srcObject = null;
        } catch (t) {
          console.log(t), (this.webcamVideoElement.src = null);
        }
        this.isClosed = !0;
      }
      toArray() {
        throw new Error("Can not convert infinite video stream to array.");
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     *
     * =============================================================================
     */ class Ou {}
    var Eu = n(56);
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     *
     * =============================================================================
     */ class Su extends Eu.a {
      constructor(t, e = {}) {
        super(),
          (this.file = t),
          (this.options = e),
          En.Cd.assert(
            t instanceof Uint8Array ||
              (!!Object(En.ob)().get("IS_BROWSER") &&
                (t instanceof File || t instanceof Blob)),
            () =>
              "FileChunkIterator only supports File, Blob and Uint8Array right now."
          ),
          (this.offset = e.offset || 0),
          (this.chunkSize = e.chunkSize || 1048576);
      }
      summary() {
        return "FileChunks " + this.file;
      }
      async next() {
        if (
          this.offset >=
          (this.file instanceof Uint8Array
            ? this.file.byteLength
            : this.file.size)
        )
          return { value: null, done: !0 };
        const t = new Promise((t, e) => {
          const n = this.offset + this.chunkSize;
          if (this.file instanceof Uint8Array)
            t(new Uint8Array(this.file.slice(this.offset, n)));
          else {
            const r = new FileReader();
            (r.onload = (n) => {
              let a = r.result;
              if (
                (a instanceof ArrayBuffer && (a = new Uint8Array(a)),
                !(a instanceof Uint8Array))
              )
                return e(new TypeError("FileReader returned unknown type."));
              t(a);
            }),
              (r.onabort = (t) => e(new Error("Aborted"))),
              (r.onerror = (t) => e(new Error(t.type)));
            const a = this.file.slice(this.offset, n);
            r.readAsArrayBuffer(a);
          }
          this.offset = n;
        });
        return { value: await t, done: !1 };
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     *
     * =============================================================================
     */ const Iu = (t) => ({
      method: t.method,
      headers: t.headers,
      body: t.body,
      mode: t.mode,
      credentials: t.credentials,
      cache: t.cache,
      redirect: t.redirect,
      referrer: t.referrer,
      integrity: t.integrity,
    });
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     *
     * =============================================================================
     */ function ku(t) {
      return "string" == typeof t && "file://" === t.substr(0, 7);
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     *
     * =============================================================================
     */ class Nu extends Ou {
      constructor(t, e = {}) {
        super(), (this.input = t), (this.options = e);
      }
      async iterator() {
        if (ku(this.input) && Object(En.ob)().get("IS_NODE")) {
          const t = n(80);
          this.input = t.readFileSync(this.input.substr(7));
        }
        return new Su(this.input, this.options);
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     *
     * =============================================================================
     */ class Ru extends Ou {
      constructor(t, e = {}) {
        super(), (this.url = t), (this.fileOptions = e);
      }
      async iterator() {
        return ku(this.url)
          ? new Nu(this.url, this.fileOptions).iterator()
          : (async function (t, e = {}) {
              let n, r;
              "string" == typeof t ? (n = t) : ((n = t.url), (r = Iu(t)));
              const a = await En.Cd.fetch(n, r);
              if (a.ok) {
                const t = new Uint8Array(await a.arrayBuffer());
                return new Su(t, e);
              }
              throw new Error(a.statusText);
            })(this.url, this.fileOptions);
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     *
     * =============================================================================
     */ function Au(t, e = {}) {
      return new xu(new Ru(t), e);
    }
    function Tu(t) {
      const e = Object(su.e)(t);
      return lu(async () => e);
    }
    function _u(t) {
      return lu(async () => {
        const e = await t();
        return Object(su.e)(() => e.next());
      });
    }
    async function Du(t, e) {
      return Cu.create(t, e);
    }
    async function Fu(t) {
      return wu.create(t);
    }
    /** @license See the LICENSE file. */ const Mu = "2.0.1";
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function ju(t, e, n, r) {
      const a = En.Cd.getTypedArrayFromDType(r, En.Cd.sizeFromShape(n));
      for (let n = 0; n < a.length; ++n) {
        const r = n * e;
        let i = t[r];
        for (let n = 0; n < e; ++n) {
          const e = t[r + n];
          e > i && (i = e);
        }
        a[n] = i;
      }
      return a;
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function $u(t, e, n, r, a) {
      const i = e.length,
        o = En.Cd.sizeFromShape(e),
        s = En.Cd.computeStrides(e),
        u = En.Cd.computeStrides(a),
        c = En.Cd.getTypedArrayFromDType(n, En.Cd.sizeFromShape(a));
      for (let e = 0; e < o; ++e) {
        const n = En.Cd.indexToLoc(e, i, s),
          a = new Array(n.length);
        for (let t = 0; t < a.length; t++) a[t] = n[r[t]];
        c[En.Cd.locToIndex(a, i, u)] = t[e];
      }
      return c;
    }
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Bu(t, e) {
      Array.isArray(t) || (t = [t]),
        t.forEach((t) => {
          null != t &&
            En.Cd.assert(
              "complex64" !== t.dtype,
              () =>
                e + " does not support complex64 tensors in the CPU backend."
            );
        });
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Pu(t, e, n, r, a, i) {
      const o = a.strideHeight,
        s = a.strideWidth,
        u = a.dilationHeight,
        c = a.dilationWidth,
        l = a.effectiveFilterHeight,
        h = a.effectiveFilterWidth,
        d = a.padInfo.top,
        p = a.padInfo.left,
        f = "max" === i ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY,
        m = Object(En.N)(a.outShape, n),
        g = m.values,
        b = a.outShape[1] * a.outShape[2] * a.outShape[3],
        v = a.outShape[2] * a.outShape[3],
        y = a.outShape[3];
      for (let e = 0; e < a.batchSize; ++e) {
        const n = e * b,
          m = e * r[0];
        for (let e = 0; e < a.inChannels; ++e)
          for (let b = 0; b < a.outHeight; ++b) {
            const x = b * o - d,
              w = Math.max(0, x),
              C = Math.min(a.inHeight, l + x),
              O = n + b * v;
            for (let n = 0; n < a.outWidth; ++n) {
              const o = n * s - p,
                l = Math.max(0, o),
                d = Math.min(a.inWidth, h + o);
              let b = f,
                v = 0,
                x = 0;
              for (let n = w; n < C; n += u) {
                const a = m + n * r[1];
                for (let n = l; n < d; n += c) {
                  const o = t[a + n * r[2] + e];
                  "max" === i && o > b
                    ? (b = o)
                    : "avg" === i && ((v += o), x++);
                }
                if (isNaN(b)) break;
              }
              g[O + n * y + e] = "avg" === i ? v / x : b;
            }
          }
      }
      return m;
    }
    function Lu(t, e, n, r, a = !1, i = !1) {
      const o = Object(En.N)(r.outShape, "int32"),
        s = r.strideHeight,
        u = r.strideWidth,
        c = r.dilationHeight,
        l = r.dilationWidth,
        h = r.effectiveFilterHeight,
        d = r.effectiveFilterWidth,
        p = r.padInfo.top,
        f = r.padInfo.left,
        m = Object(En.N)(e, n, t);
      for (let t = 0; t < r.batchSize; ++t)
        for (let e = 0; e < r.inChannels; ++e)
          for (let n = 0; n < r.outHeight; ++n) {
            const g = n * s - p;
            let b = g;
            for (; b < 0; ) b += c;
            const v = Math.min(r.inHeight, h + g);
            for (let s = 0; s < r.outWidth; ++s) {
              const h = s * u - f;
              let p = h;
              for (; p < 0; ) p += l;
              const y = Math.min(r.inWidth, d + h);
              let x = Number.NEGATIVE_INFINITY,
                w = -1;
              for (let n = b; n < v; n += c) {
                const o = n - g;
                for (let s = p; s < y; s += l) {
                  const u = s - h,
                    c = m.get(t, n, s, e);
                  c > x &&
                    ((x = c),
                    (w = a
                      ? i
                        ? ((t * r.inHeight + n) * r.inWidth + s) *
                            r.inChannels +
                          e
                        : (n * r.inWidth + s) * r.inChannels + e
                      : o * d + u));
                }
              }
              o.set(w, t, n, s, e);
            }
          }
      return o;
    }
    /**
     * @license
     * Copyright 2017 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const zu = En.Kb.nonMaxSuppressionV3,
      Wu = En.Kb.split,
      Vu = En.Kb.tile,
      Uu = En.Kb.topkImpl,
      Gu = En.Kb.whereImpl;
    function Hu(t, e, n, r) {
      if ("linear" === n) return t.linear(e);
      if ("relu" === n) return t.relu(e);
      if ("elu" === n) return t.elu(e);
      if ("relu6" === n) return t.relu6(e);
      if ("prelu" === n) return t.prelu(e, r);
      throw new Error(
        `Activation ${n} has not been implemented for the CPU backend.`
      );
    }
    class qu extends En.d {
      constructor() {
        super(),
          (this.blockSize = 48),
          (this.firstUse = !0),
          (this.data = new En.a(this, Object(En.nb)()));
      }
      write(t, e, n) {
        this.firstUse &&
          ((this.firstUse = !1),
          Object(En.ob)().get("IS_NODE") &&
            En.F.warn(
              "\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"
            ));
        const r = {};
        return this.data.set(r, { values: t, dtype: n }), r;
      }
      move(t, e, n, r) {
        this.data.set(t, { values: e, dtype: r });
      }
      numDataIds() {
        return this.data.numDataIds();
      }
      async read(t) {
        return this.readSync(t);
      }
      readSync(t) {
        const { dtype: e, complexTensors: n } = this.data.get(t);
        if ("complex64" === e) {
          const t = this.readSync(n.real.dataId),
            e = this.readSync(n.imag.dataId);
          return En.F.mergeRealAndImagArrays(t, e);
        }
        return this.data.get(t).values;
      }
      bufferSync(t) {
        const e = this.readSync(t.dataId);
        let n = e;
        if ("string" === t.dtype)
          try {
            n = e.map((t) => En.Cd.decodeString(t));
          } catch (t) {
            throw new Error("Failed to decode encoded string bytes into utf-8");
          }
        return En.N(t.shape, t.dtype, n);
      }
      makeOutput(t, e, n) {
        const r = this.write(t, e, n);
        return Object(En.nb)().makeTensorFromDataId(r, e, n, this);
      }
      disposeData(t) {
        if (this.data.has(t)) {
          const { complexTensors: e } = this.data.get(t);
          null != e && (e.real.dispose(), e.imag.dispose()),
            this.data.delete(t);
        }
      }
      async time(t) {
        const e = En.Cd.now();
        t();
        return { kernelMs: En.Cd.now() - e };
      }
      memory() {
        return {
          unreliable: !0,
          reasons: [
            "The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less.",
          ],
        };
      }
      complex(t, e) {
        const n = this.makeOutput(null, t.shape, "complex64");
        return (
          (this.data.get(n.dataId).complexTensors = {
            real: Object(En.nb)().keep(t.clone()),
            imag: Object(En.nb)().keep(e.clone()),
          }),
          n
        );
      }
      real(t) {
        return this.data.get(t.dataId).complexTensors.real.clone();
      }
      imag(t) {
        return this.data.get(t.dataId).complexTensors.imag.clone();
      }
      slice(t, e, n) {
        Bu(t, "slice");
        if (En.Yc.isSliceContinous(t.shape, e, n)) {
          const r = En.Yc.computeFlatOffset(e, t.strides),
            a = En.Cd.sizeFromShape(n),
            i = this.readSync(t.dataId);
          return En.pd(i.subarray(r, r + a), n, t.dtype);
        }
        const r = En.N(n, t.dtype),
          a = this.bufferSync(t);
        for (let t = 0; t < r.size; ++t) {
          const n = r.indexToLoc(t).map((t, n) => t + e[n]);
          r.values[t] = a.get(...n);
        }
        return r.toTensor();
      }
      stridedSlice(t, e, n, r) {
        Bu(t, "stridedSlice");
        const a = En.Yc.computeOutShape(e, n, r);
        if (a.some((t) => 0 === t)) return En.pd([], a);
        const i = En.N(a, t.dtype),
          o = this.bufferSync(t);
        for (let t = 0; t < i.size; t++) {
          const n = i.indexToLoc(t),
            a = new Array(n.length);
          for (let t = 0; t < a.length; t++) a[t] = n[t] * r[t] + e[t];
          i.set(o.get(...a), ...n);
        }
        return i.toTensor();
      }
      diag(t) {
        const e = this.readSync(t.dataId),
          n = En.N([t.size, t.size], t.dtype),
          r = n.values;
        for (let n = 0; n < e.length; n++) r[n * t.size + n] = e[n];
        return n.toTensor();
      }
      unstack(t, e) {
        const n = t.shape[e],
          r = new Array(t.rank - 1);
        let a = 0;
        for (let n = 0; n < t.rank; n++) n !== e && (r[a++] = t.shape[n]);
        const i = new Array(t.rank).fill(0),
          o = t.shape.slice();
        o[e] = 1;
        const s = new Array(n);
        for (let n = 0; n < s.length; n++)
          (i[e] = n), (s[n] = this.slice(t, i, o).reshape(r));
        return s;
      }
      reverse(t, e) {
        Bu(t, "reverse");
        const n = En.N(t.shape, t.dtype),
          r = this.bufferSync(t);
        for (let a = 0; a < n.size; a++) {
          const i = n.indexToLoc(a),
            o = i.slice();
          e.forEach((e) => (o[e] = t.shape[e] - 1 - o[e])),
            n.set(r.get(...o), ...i);
        }
        return n.toTensor();
      }
      concat(t, e) {
        if ("complex64" === t[0].dtype) {
          const n = t.map((t) => En.yc(t)),
            r = t.map((t) => En.Fb(t));
          return En.R(this.concat(n, e), this.concat(r, e));
        }
        const n = t.map((t) => {
            const n = En.Cd.sizeFromShape(t.shape.slice(e));
            return t.as2D(-1, n);
          }),
          r = En.F.computeOutShape(
            n.map((t) => t.shape),
            1
          ),
          a = En.N(r, t[0].dtype).values;
        if (1 === n[0].shape[0]) {
          let t = 0;
          n.forEach((e) => {
            a.set(this.readSync(e.dataId), t), (t += e.size);
          });
        } else {
          let t = 0;
          n.forEach((e) => {
            const n = this.readSync(e.dataId);
            let i = 0;
            for (let o = 0; o < e.shape[0]; ++o) {
              const s = o * r[1] + t;
              for (let t = 0; t < e.shape[1]; ++t) a[s + t] = n[i++];
            }
            t += e.shape[1];
          });
        }
        const i = En.F.computeOutShape(
          t.map((t) => t.shape),
          e
        );
        return En.pd(a, i, t[0].dtype);
      }
      neg(t) {
        return Bu(t, "neg"), this.multiply(En.Ic(-1), t);
      }
      add(t, e) {
        return "complex64" === t.dtype || "complex64" === e.dtype
          ? this.broadcastedBinaryComplexOp(
              t.cast("complex64"),
              e.cast("complex64"),
              (t, e, n, r) => ({ real: t + n, imag: e + r })
            )
          : this.broadcastedBinaryOp(
              t,
              e,
              Object(En.Bd)(t.dtype, e.dtype),
              (t, e) => t + e
            );
      }
      addN(t) {
        Bu(t, "addN");
        const e = t.map((t) => this.readSync(t.dataId)),
          n = En.N(t[0].shape, t[0].dtype),
          r = n.values;
        for (let n = 0; n < t.length; n++) {
          const t = e[n];
          for (let e = 0; e < r.length; e++) r[e] += t[e];
        }
        return n.toTensor();
      }
      softmax(t, e) {
        const n = En.Cd.parseAxisParam([e], t.shape),
          r = Object(En.Yb)(t, n),
          a = En.F.expandShapeToKeepDim(r.shape, n),
          i = this.subtract(t, r.reshape(a)),
          o = this.exp(i),
          s = this.sum(o, n).reshape(a);
        return En.ib(o, s);
      }
      subtract(t, e) {
        return "complex64" === t.dtype || "complex64" === e.dtype
          ? this.broadcastedBinaryComplexOp(
              t.cast("complex64"),
              e.cast("complex64"),
              (t, e, n, r) => ({ real: t - n, imag: e - r })
            )
          : this.broadcastedBinaryOp(
              t,
              e,
              Object(En.Bd)(t.dtype, e.dtype),
              (t, e) => t - e
            );
      }
      pow(t, e) {
        return (
          Bu([t, e], "pow"),
          this.broadcastedBinaryOp(t, e, t.dtype, (t, e) => Math.pow(t, e))
        );
      }
      batchMatMul(t, e, n, r) {
        Bu([t, e], "matMul");
        const a = n ? t.shape[1] : t.shape[2],
          i = n ? t.shape[2] : t.shape[1],
          o = r ? e.shape[1] : e.shape[2],
          s = t.shape[0],
          u = this.readSync(t.dataId),
          c = this.readSync(e.dataId),
          [l, h, d] = n
            ? [t.strides[0], 1, t.strides[1]]
            : [t.strides[0], t.strides[1], 1],
          [p, f, m] = r
            ? [1, e.strides[1], e.strides[0]]
            : [e.strides[1], 1, e.strides[0]],
          g = i * o,
          b = En.N([s, i, o], t.dtype),
          v = b.values,
          y = this.blockSize;
        for (let t = 0; t < s; t++)
          for (let e = 0; e < i; e += y)
            for (let n = 0; n < o; n += y)
              for (let r = 0; r < a; r += y) {
                const s = Math.min(e + y, i),
                  b = Math.min(n + y, o),
                  x = Math.min(r + y, a);
                for (let a = e; a < s; a++)
                  for (let e = n; e < b; e++) {
                    let n = 0;
                    for (let i = r; i < x; i++)
                      n += u[t * l + a * h + i * d] * c[i * p + e * f + t * m];
                    v[t * g + (a * o + e)] += n;
                  }
              }
        return b.toTensor();
      }
      fusedBatchMatMul({
        a: t,
        b: e,
        transposeA: n,
        transposeB: r,
        bias: a,
        activation: i,
        preluActivationWeights: o,
      }) {
        let s = this.batchMatMul(t, e, n, r);
        return a && (s = this.add(s, a)), i && (s = Hu(this, s, i, o)), s;
      }
      multiply(t, e) {
        return "complex64" === t.dtype || "complex64" === e.dtype
          ? this.broadcastedBinaryComplexOp(
              t.cast("complex64"),
              e.cast("complex64"),
              (t, e, n, r) => ({ real: t * n - e * r, imag: t * r + e * n })
            )
          : this.broadcastedBinaryOp(
              t,
              e,
              Object(En.Bd)(t.dtype, e.dtype),
              (t, e) => t * e
            );
      }
      floorDiv(t, e) {
        Bu([t, e], "floorDiv");
        return this.broadcastedBinaryOp(t, e, "int32", (t, e) =>
          Math.floor(t / e)
        );
      }
      sum(t, e) {
        Bu(t, "sum"), En.F.assertAxesAreInnerMostDims("sum", e, t.rank);
        const [n, r] = En.F.computeOutAndReduceShapes(t.shape, e),
          a = Object(En.Bd)(t.dtype, "int32"),
          i = En.Id(n, a),
          o = En.Cd.sizeFromShape(r),
          s = this.readSync(i.dataId),
          u = this.readSync(t.dataId);
        for (let t = 0; t < s.length; ++t) {
          const e = t * o;
          let n = 0;
          for (let t = 0; t < o; ++t) n += u[e + t];
          s[t] = n;
        }
        return i;
      }
      prod(t, e) {
        Bu(t, "sum");
        const [n, r] = En.F.computeOutAndReduceShapes(t.shape, e),
          a = Object(En.Bd)(t.dtype, "int32"),
          i = En.Id(n, a),
          o = En.Cd.sizeFromShape(r),
          s = this.readSync(i.dataId),
          u = this.readSync(t.dataId);
        for (let t = 0; t < s.length; ++t) {
          const e = t * o;
          let n = 1;
          for (let t = 0; t < o; ++t) n *= u[e + t];
          s[t] = n;
        }
        return i;
      }
      unsortedSegmentSum(t, e, n) {
        Bu(t, "unsortedSegmentSum");
        const r = [],
          a = t.rank - e.rank;
        for (let t = 0; t < a; ++t) e = e.expandDims(t + 1);
        for (let a = 0; a < n; ++a) {
          const n = En.Ic(a, "int32"),
            i = En.pb(n, e).asType("float32").mul(t).sum(0);
          r.push(i);
        }
        return En.id(r);
      }
      argMin(t, e) {
        Bu(t, "argMin");
        const n = [e];
        En.F.assertAxesAreInnerMostDims("argMin", n, t.rank);
        const [r, a] = En.F.computeOutAndReduceShapes(t.shape, n),
          i = En.Id(r, "int32"),
          o = En.Cd.sizeFromShape(a),
          s = this.readSync(i.dataId),
          u = this.readSync(t.dataId);
        for (let t = 0; t < s.length; ++t) {
          const e = t * o;
          let n = u[e],
            r = 0;
          for (let t = 0; t < o; ++t) {
            const a = u[e + t];
            a < n && ((n = a), (r = t));
          }
          s[t] = r;
        }
        return i;
      }
      argMax(t, e) {
        Bu(t, "argMax");
        const n = [e];
        En.F.assertAxesAreInnerMostDims("argMax", n, t.rank);
        const [r, a] = En.F.computeOutAndReduceShapes(t.shape, n),
          i = En.Id(r, "int32"),
          o = En.Cd.sizeFromShape(a),
          s = this.readSync(i.dataId),
          u = this.readSync(t.dataId);
        for (let t = 0; t < s.length; ++t) {
          const e = t * o;
          let n = u[e],
            r = 0;
          for (let t = 0; t < o; ++t) {
            const a = u[e + t];
            a > n && ((n = a), (r = t));
          }
          s[t] = r;
        }
        return i;
      }
      cumsum(t, e, n, r) {
        if ((Bu(t, "cumsum"), e !== t.rank - 1))
          throw new Error(
            `backend.cumsum in CPU expects an inner-most axis=${
              t.rank - 1
            } but got axis=` + e
          );
        const a = Object(En.Bd)(t.dtype, "int32"),
          i = En.Id(t.shape, a),
          o = this.readSync(i.dataId),
          s = this.readSync(t.dataId),
          u = t.shape[t.rank - 1],
          c = r ? (t, e) => t + u - e - 1 : (t, e) => t + e;
        for (let t = 0; t < s.length; t += u)
          for (let e = 0; e < u; e++) {
            const r = c(t, e);
            if (0 === e) o[r] = n ? 0 : s[r];
            else {
              const a = c(t, e - 1);
              o[r] = n ? s[a] + o[a] : s[r] + o[a];
            }
          }
        return i;
      }
      equal(t, e) {
        return (
          Bu([t, e], "equal"),
          this.broadcastedBinaryOp(t, e, "bool", (t, e) => (t === e ? 1 : 0))
        );
      }
      notEqual(t, e) {
        return (
          Bu([t, e], "notEqual"),
          this.broadcastedBinaryOp(t, e, "bool", (t, e) => (t !== e ? 1 : 0))
        );
      }
      less(t, e) {
        return (
          Bu([t, e], "less"),
          this.broadcastedBinaryOp(t, e, "bool", (t, e) => (t < e ? 1 : 0))
        );
      }
      lessEqual(t, e) {
        return (
          Bu([t, e], "lessEqual"),
          this.broadcastedBinaryOp(t, e, "bool", (t, e) => (t <= e ? 1 : 0))
        );
      }
      greater(t, e) {
        return (
          Bu([t, e], "greater"),
          this.broadcastedBinaryOp(t, e, "bool", (t, e) => (t > e ? 1 : 0))
        );
      }
      greaterEqual(t, e) {
        return (
          Bu([t, e], "greaterEqual"),
          this.broadcastedBinaryOp(t, e, "bool", (t, e) => (t >= e ? 1 : 0))
        );
      }
      logicalNot(t) {
        Bu(t, "logicalNot");
        const e = this.readSync(t.dataId),
          n = new Uint8Array(e.length);
        for (let t = 0; t < e.length; ++t) n[t] = e[t] ? 0 : 1;
        return this.makeOutput(n, t.shape, "bool");
      }
      logicalAnd(t, e) {
        return (
          Bu([t, e], "logicalAnd"),
          this.broadcastedBinaryOp(t, e, "bool", (t, e) => t && e)
        );
      }
      logicalOr(t, e) {
        return (
          Bu([t, e], "logicalOr"),
          this.broadcastedBinaryOp(t, e, "bool", (t, e) => t || e)
        );
      }
      select(t, e, n) {
        Bu([t, e, n], "select");
        const r = this.readSync(t.dataId),
          a = this.readSync(e.dataId),
          i = this.readSync(n.dataId),
          o = En.Id(e.shape, Object(En.Bd)(e.dtype, n.dtype)),
          s = this.readSync(o.dataId);
        let u = 0;
        const c =
          0 === t.rank || t.rank > 1 || 1 === e.rank
            ? 1
            : En.Cd.sizeFromShape(e.shape.slice(1));
        for (let t = 0; t < r.length; t++)
          for (let e = 0; e < c; e++)
            1 === r[t] ? (s[u++] = a[t]) : (s[u++] = i[t]);
        return o;
      }
      where(t) {
        Bu([t], "where");
        const e = this.readSync(t.dataId);
        return Gu(t.shape, e);
      }
      topk(t, e, n) {
        Bu(t, "topk");
        const r = this.readSync(t.dataId);
        return Uu(r, t.shape, t.dtype, e, n);
      }
      min(t, e) {
        Bu(t, "min"), En.F.assertAxesAreInnerMostDims("min", e, t.rank);
        const [n, r] = En.F.computeOutAndReduceShapes(t.shape, e),
          a = En.Id(n, t.dtype),
          i = En.Cd.sizeFromShape(r),
          o = this.readSync(a.dataId),
          s = this.readSync(t.dataId);
        for (let t = 0; t < o.length; ++t) {
          const e = t * i;
          let n = s[e];
          for (let t = 0; t < i; ++t) {
            const r = s[e + t];
            r < n && (n = r);
          }
          o[t] = n;
        }
        return a;
      }
      minimum(t, e) {
        return (
          Bu([t, e], "minimum"),
          this.broadcastedBinaryOp(t, e, t.dtype, (t, e) => Math.min(t, e))
        );
      }
      mod(t, e) {
        return (
          Bu([t, e], "mod"),
          this.broadcastedBinaryOp(t, e, t.dtype, (t, e) => {
            const n = t % e;
            return (t < 0 && e < 0) || (t >= 0 && e >= 0) ? n : (n + e) % e;
          })
        );
      }
      maximum(t, e) {
        return (
          Bu([t, e], "maximum"),
          this.broadcastedBinaryOp(t, e, t.dtype, (t, e) => Math.max(t, e))
        );
      }
      all(t, e) {
        Bu(t, "all"), En.F.assertAxesAreInnerMostDims("all", e, t.rank);
        const [n, r] = En.F.computeOutAndReduceShapes(t.shape, e),
          a = En.Id(n, t.dtype),
          i = En.Cd.sizeFromShape(r),
          o = this.readSync(a.dataId),
          s = this.readSync(t.dataId);
        for (let t = 0; t < o.length; ++t) {
          const e = t * i;
          let n = s[e];
          for (let t = 0; t < i; ++t) {
            const r = s[e + t];
            n = n && r;
          }
          o[t] = n;
        }
        return a;
      }
      any(t, e) {
        Bu(t, "any"), En.F.assertAxesAreInnerMostDims("any", e, t.rank);
        const [n, r] = En.F.computeOutAndReduceShapes(t.shape, e),
          a = En.Id(n, t.dtype),
          i = En.Cd.sizeFromShape(r),
          o = this.readSync(a.dataId),
          s = this.readSync(t.dataId);
        for (let t = 0; t < o.length; ++t) {
          const e = t * i;
          let n = s[e];
          for (let t = 0; t < i; ++t) {
            const r = s[e + t];
            n = n || r;
          }
          o[t] = n;
        }
        return a;
      }
      squaredDifference(t, e) {
        return (
          Bu([t, e], "squaredDifference"),
          this.broadcastedBinaryOp(t, e, t.dtype, (t, e) => {
            const n = t - e;
            return n * n;
          })
        );
      }
      ceil(t) {
        Bu(t, "ceil");
        const e = this.readSync(t.dataId),
          n = new Float32Array(e.length);
        for (let t = 0; t < e.length; ++t) n[t] = Math.ceil(e[t]);
        return this.makeOutput(n, t.shape, "float32");
      }
      floor(t) {
        Bu(t, "floor");
        const e = this.readSync(t.dataId),
          n = new Float32Array(e.length);
        for (let t = 0; t < e.length; ++t) n[t] = Math.floor(e[t]);
        return this.makeOutput(n, t.shape, "float32");
      }
      sign(t) {
        Bu(t, "x");
        const e = this.readSync(t.dataId),
          n = new Float32Array(e.length);
        for (let t = 0; t < e.length; ++t)
          e[t] < 0 ? (n[t] = -1) : e[t] > 0 ? (n[t] = 1) : (n[t] = 0);
        return this.makeOutput(n, t.shape, "float32");
      }
      isNaN(t) {
        Bu(t, "x");
        const e = this.readSync(t.dataId),
          n = new Uint8Array(e.length);
        for (let t = 0; t < e.length; ++t) Number.isNaN(e[t]) && (n[t] = 1);
        return this.makeOutput(n, t.shape, "bool");
      }
      isInf(t) {
        Bu(t, "x");
        const e = this.readSync(t.dataId),
          n = new Uint8Array(e.length);
        for (let t = 0; t < e.length; ++t)
          Math.abs(e[t]) === 1 / 0 && (n[t] = 1);
        return this.makeOutput(n, t.shape, "bool");
      }
      isFinite(t) {
        Bu(t, "x");
        const e = this.readSync(t.dataId),
          n = new Uint8Array(e.length);
        for (let t = 0; t < e.length; ++t) Number.isFinite(e[t]) && (n[t] = 1);
        return this.makeOutput(n, t.shape, "bool");
      }
      round(t) {
        Bu(t, "round");
        const e = this.readSync(t.dataId),
          n = new Float32Array(e.length);
        for (let t = 0; t < e.length; ++t) {
          const r = Math.floor(e[t]);
          e[t] - r < 0.5
            ? (n[t] = Math.floor(e[t]))
            : e[t] - r > 0.5
            ? (n[t] = Math.ceil(e[t]))
            : (n[t] = r % 2 == 0 ? r : r + 1);
        }
        return this.makeOutput(n, t.shape, "float32");
      }
      exp(t) {
        Bu(t, "exp");
        const e = this.readSync(t.dataId),
          n = new Float32Array(e.length);
        for (let t = 0; t < e.length; ++t) n[t] = Math.exp(e[t]);
        return this.makeOutput(n, t.shape, "float32");
      }
      expm1(t) {
        Bu(t, "expm1");
        const e = this.readSync(t.dataId),
          n = new Float32Array(e.length);
        for (let t = 0; t < e.length; ++t) n[t] = Math.expm1(e[t]);
        return this.makeOutput(n, t.shape, "float32");
      }
      log(t) {
        Bu(t, "log");
        const e = this.readSync(t.dataId),
          n = new Float32Array(e.length);
        for (let t = 0; t < e.length; ++t) {
          const r = e[t];
          n[t] = Math.log(r);
        }
        return this.makeOutput(n, t.shape, "float32");
      }
      log1p(t) {
        Bu(t, "log1p");
        const e = this.readSync(t.dataId),
          n = new Float32Array(e.length);
        for (let t = 0; t < e.length; ++t) {
          const r = e[t];
          n[t] = Math.log1p(r);
        }
        return this.makeOutput(n, t.shape, "float32");
      }
      sqrt(t) {
        Bu(t, "sqrt");
        const e = this.readSync(t.dataId),
          n = new Float32Array(e.length);
        for (let t = 0; t < e.length; ++t) {
          const r = e[t];
          n[t] = Math.sqrt(r);
        }
        return this.makeOutput(n, t.shape, "float32");
      }
      rsqrt(t) {
        Bu(t, "rsqrt");
        const e = this.readSync(t.dataId),
          n = new Float32Array(e.length);
        for (let t = 0; t < e.length; ++t) {
          const r = e[t];
          n[t] = 1 / Math.sqrt(r);
        }
        return this.makeOutput(n, t.shape, "float32");
      }
      reciprocal(t) {
        Bu(t, "reciprocal");
        const e = this.readSync(t.dataId),
          n = new Float32Array(e.length);
        for (let t = 0; t < e.length; ++t) n[t] = 1 / e[t];
        return this.makeOutput(n, t.shape, "float32");
      }
      linear(t) {
        return t;
      }
      relu(t) {
        Bu(t, "relu");
        const e = En.Id(t.shape, t.dtype),
          n = this.readSync(e.dataId),
          r = this.readSync(t.dataId);
        for (let t = 0; t < r.length; ++t) n[t] = Math.max(0, r[t]);
        return e;
      }
      relu6(t) {
        Bu(t, "relu");
        const e = En.Id(t.shape, t.dtype),
          n = this.readSync(e.dataId),
          r = this.readSync(t.dataId);
        for (let t = 0; t < r.length; ++t)
          n[t] = Math.min(Math.max(0, r[t]), 6);
        return e;
      }
      prelu(t, e) {
        return (
          Bu([t, e], "prelu"),
          this.broadcastedBinaryOp(t, e, t.dtype, (t, e) => (t < 0 ? e * t : t))
        );
      }
      elu(t) {
        Bu(t, "elu");
        const e = new Float32Array(t.size),
          n = this.readSync(t.dataId);
        for (let t = 0; t < n.length; ++t) {
          const r = n[t];
          e[t] = r >= 0 ? r : Math.exp(r) - 1;
        }
        return this.makeOutput(e, t.shape, "float32");
      }
      eluDer(t, e) {
        Bu([t, e], "eluDer");
        const n = new Float32Array(e.size),
          r = this.readSync(e.dataId),
          a = this.readSync(t.dataId);
        for (let t = 0; t < r.length; ++t) {
          const e = r[t];
          n[t] = e >= 1 ? a[t] : a[t] * (e + 1);
        }
        return this.makeOutput(n, e.shape, "float32");
      }
      selu(t) {
        Bu(t, "selu");
        const e = En.F.SELU_SCALEALPHA,
          n = En.F.SELU_SCALE,
          r = new Float32Array(t.size),
          a = this.readSync(t.dataId);
        for (let t = 0; t < a.length; ++t) {
          const i = a[t];
          r[t] = i >= 0 ? n * i : e * (Math.exp(i) - 1);
        }
        return this.makeOutput(r, t.shape, "float32");
      }
      clip(t, e, n) {
        Bu(t, "clip");
        const r = new Float32Array(t.size),
          a = this.readSync(t.dataId);
        for (let t = 0; t < a.length; ++t) {
          const i = a[t];
          r[t] = i > n ? n : i < e ? e : i;
        }
        return this.makeOutput(r, t.shape, "float32");
      }
      abs(t) {
        const e = new Float32Array(t.size),
          n = this.readSync(t.dataId);
        for (let t = 0; t < n.length; ++t) e[t] = Math.abs(n[t]);
        return this.makeOutput(e, t.shape, "float32");
      }
      complexAbs(t) {
        const e = new Float32Array(t.size),
          n = this.readSync(t.dataId);
        for (let r = 0; r < t.size; ++r) {
          const t = n[2 * r],
            a = n[2 * r + 1];
          e[r] = Math.hypot(t, a);
        }
        return this.makeOutput(e, t.shape, "float32");
      }
      int(t) {
        Bu(t, "int");
        const e = new Int32Array(t.size),
          n = this.readSync(t.dataId);
        for (let t = 0; t < n.length; ++t) e[t] = n[t];
        return this.makeOutput(e, t.shape, "int32");
      }
      sigmoid(t) {
        Bu(t, "sigmoid");
        const e = new Float32Array(t.size),
          n = this.readSync(t.dataId);
        for (let t = 0; t < n.length; ++t) e[t] = 1 / (1 + Math.exp(-n[t]));
        return this.makeOutput(e, t.shape, "float32");
      }
      softplus(t) {
        Bu(t, "softplus");
        const e = Math.log(1.1920928955078125e-7) + 2,
          n = new Float32Array(t.size),
          r = this.readSync(t.dataId);
        for (let t = 0; t < r.length; ++t) {
          const a = r[t] > -e,
            i = r[t] < e,
            o = Math.exp(r[t]);
          let s;
          (s = i ? o : a ? r[t] : Math.log(1 + o)), (n[t] = s);
        }
        return this.makeOutput(n, t.shape, "float32");
      }
      sin(t) {
        Bu(t, "sin");
        const e = new Float32Array(t.size),
          n = this.readSync(t.dataId);
        for (let t = 0; t < n.length; ++t) e[t] = Math.sin(n[t]);
        return this.makeOutput(e, t.shape, "float32");
      }
      cos(t) {
        Bu(t, "cos");
        const e = new Float32Array(t.size),
          n = this.readSync(t.dataId);
        for (let t = 0; t < n.length; ++t) e[t] = Math.cos(n[t]);
        return this.makeOutput(e, t.shape, "float32");
      }
      tan(t) {
        Bu(t, "tan");
        const e = new Float32Array(t.size),
          n = this.readSync(t.dataId);
        for (let t = 0; t < n.length; ++t) e[t] = Math.tan(n[t]);
        return this.makeOutput(e, t.shape, "float32");
      }
      asin(t) {
        Bu(t, "asin");
        const e = new Float32Array(t.size),
          n = this.readSync(t.dataId);
        for (let t = 0; t < n.length; ++t) e[t] = Math.asin(n[t]);
        return this.makeOutput(e, t.shape, "float32");
      }
      acos(t) {
        Bu(t, "acos");
        const e = new Float32Array(t.size),
          n = this.readSync(t.dataId);
        for (let t = 0; t < n.length; ++t) e[t] = Math.acos(n[t]);
        return this.makeOutput(e, t.shape, "float32");
      }
      atan(t) {
        Bu(t, "atan");
        const e = new Float32Array(t.size),
          n = this.readSync(t.dataId);
        for (let t = 0; t < n.length; ++t) e[t] = Math.atan(n[t]);
        return this.makeOutput(e, t.shape, "float32");
      }
      atan2(t, e) {
        return (
          Bu([t, e], "atan2"),
          this.broadcastedBinaryOp(t, e, t.dtype, (t, e) => Math.atan2(t, e))
        );
      }
      sinh(t) {
        Bu(t, "sinh");
        const e = new Float32Array(t.size),
          n = this.readSync(t.dataId);
        for (let t = 0; t < n.length; ++t) e[t] = Math.sinh(n[t]);
        return this.makeOutput(e, t.shape, "float32");
      }
      cosh(t) {
        Bu(t, "cosh");
        const e = new Float32Array(t.size),
          n = this.readSync(t.dataId);
        for (let t = 0; t < n.length; ++t) e[t] = Math.cosh(n[t]);
        return this.makeOutput(e, t.shape, "float32");
      }
      tanh(t) {
        Bu(t, "tanh");
        const e = new Float32Array(t.size),
          n = this.readSync(t.dataId);
        for (let t = 0; t < n.length; ++t) e[t] = En.Cd.tanh(n[t]);
        return this.makeOutput(e, t.shape, "float32");
      }
      asinh(t) {
        Bu(t, "asinh");
        const e = new Float32Array(t.size),
          n = this.readSync(t.dataId);
        for (let t = 0; t < n.length; ++t) e[t] = Math.asinh(n[t]);
        return this.makeOutput(e, t.shape, "float32");
      }
      acosh(t) {
        Bu(t, "acosh");
        const e = new Float32Array(t.size),
          n = this.readSync(t.dataId);
        for (let t = 0; t < n.length; ++t) e[t] = Math.acosh(n[t]);
        return this.makeOutput(e, t.shape, "float32");
      }
      atanh(t) {
        Bu(t, "atanh");
        const e = new Float32Array(t.size),
          n = this.readSync(t.dataId);
        for (let t = 0; t < n.length; ++t) e[t] = Math.atanh(n[t]);
        return this.makeOutput(e, t.shape, "float32");
      }
      erf(t) {
        Bu(t, "erf");
        const e = new Float32Array(t.size),
          n = this.readSync(t.dataId),
          r = En.F.ERF_P,
          a = En.F.ERF_A1,
          i = En.F.ERF_A2,
          o = En.F.ERF_A3,
          s = En.F.ERF_A4,
          u = En.F.ERF_A5;
        for (let t = 0; t < n.length; ++t) {
          const c = Math.sign(n[t]),
            l = Math.abs(n[t]),
            h = 1 / (1 + r * l);
          e[t] =
            c *
            (1 -
              ((((u * h + s) * h + o) * h + i) * h + a) * h * Math.exp(-l * l));
        }
        return this.makeOutput(e, t.shape, "float32");
      }
      step(t, e = 0) {
        Bu(t, "step");
        const n = new Float32Array(t.size),
          r = this.readSync(t.dataId);
        for (let t = 0; t < r.length; ++t) {
          const a = r[t];
          isNaN(a) ? (n[t] = NaN) : (n[t] = a > 0 ? 1 : e);
        }
        return this.makeOutput(n, t.shape, "float32");
      }
      fusedConv2d({
        input: t,
        filter: e,
        convInfo: n,
        bias: r,
        activation: a,
        preluActivationWeights: i,
      }) {
        let o = this.conv2d(t, e, n);
        return r && (o = this.add(o, r)), a && (o = Hu(this, o, a, i)), o;
      }
      conv2d(t, e, n) {
        Bu([t, e], "conv2d");
        const r = n.filterHeight,
          a = n.filterWidth,
          i = n.dilationHeight,
          o = n.dilationWidth,
          s = n.padInfo.left,
          u = n.padInfo.top,
          c = "channelsLast" === n.dataFormat,
          l = En.N(n.outShape, t.dtype),
          h = t.strides[0],
          d = c ? t.strides[1] : t.strides[2],
          p = c ? t.strides[2] : 1,
          f = c ? 1 : t.strides[1],
          m = l.strides[0],
          g = c ? l.strides[1] : l.strides[2],
          b = c ? l.strides[2] : 1,
          v = c ? 1 : l.strides[1],
          y = this.readSync(t.dataId),
          x = this.readSync(e.dataId),
          w = l.values;
        for (let t = 0; t < n.batchSize; ++t) {
          const c = t * h,
            l = t * m;
          for (let t = 0; t < n.outHeight; ++t) {
            const h = l + t * g,
              m = t * n.strideHeight - u;
            for (let t = 0; t < r; t++) {
              const r = m + t * i;
              if (r < 0 || r >= n.inHeight) continue;
              const u = t * e.strides[0],
                l = c + r * d;
              for (let t = 0; t < n.outWidth; ++t) {
                const r = h + t * b,
                  i = t * n.strideWidth - s;
                for (let t = 0; t < a; t++) {
                  const a = i + t * o;
                  if (a < 0 || a >= n.inWidth) continue;
                  const s = l + a * p;
                  let c = u + t * e.strides[1];
                  for (let t = 0; t < n.inChannels; ++t) {
                    const e = y[s + t * f];
                    for (let t = 0; t < n.outChannels; ++t)
                      w[r + t * v] += e * x[c + t];
                    c += n.outChannels;
                  }
                }
              }
            }
          }
        }
        return l.toTensor();
      }
      conv3d(t, e, n) {
        const r = n.filterDepth,
          a = n.filterHeight,
          i = n.filterWidth,
          o = n.dilationDepth,
          s = n.dilationHeight,
          u = n.dilationWidth,
          c = n.padInfo.front,
          l = n.padInfo.left,
          h = n.padInfo.top,
          d = En.N(n.outShape, t.dtype),
          p = this.readSync(t.dataId),
          f = this.readSync(e.dataId),
          m = d.values;
        for (let g = 0; g < n.batchSize; ++g) {
          const b = g * t.strides[0],
            v = g * d.strides[0];
          for (let g = 0; g < n.outDepth; ++g) {
            const y = v + g * d.strides[1],
              x = g * n.strideDepth - c;
            for (let c = 0; c < r; c++) {
              const r = x + c * o;
              if (r < 0 || r >= n.inDepth) continue;
              const g = c * e.strides[0],
                v = b + r * t.strides[1];
              for (let r = 0; r < n.outHeight; ++r) {
                const o = y + r * d.strides[2],
                  c = r * n.strideHeight - h;
                for (let r = 0; r < a; r++) {
                  const a = c + r * s;
                  if (a < 0 || a >= n.inHeight) continue;
                  const h = g + r * e.strides[1],
                    d = v + a * t.strides[2];
                  for (let t = 0; t < n.outWidth; ++t) {
                    const r = o + t * n.outChannels,
                      a = t * n.strideWidth - l;
                    for (let t = 0; t < i; t++) {
                      const i = a + t * u;
                      if (i < 0 || i >= n.inWidth) continue;
                      const o = h + t * e.strides[2],
                        s = d + i * n.inChannels;
                      let c = o;
                      for (let t = 0; t < n.inChannels; ++t) {
                        const e = p[s + t];
                        for (let t = 0; t < n.outChannels; ++t)
                          m[r + t] += e * f[c + t];
                        c += n.outChannels;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return d.toTensor();
      }
      conv2dDerInput(t, e, n) {
        Bu([t, e], "conv2dDerInput");
        const r = En.N(n.inShape, "float32"),
          a = r.values,
          i = this.readSync(t.dataId),
          o = this.readSync(e.dataId),
          [s, u, c] = e.strides,
          {
            batchSize: l,
            filterHeight: h,
            filterWidth: d,
            inChannels: p,
            inHeight: f,
            inWidth: m,
            outChannels: g,
            outHeight: b,
            outWidth: v,
            strideHeight: y,
            strideWidth: x,
            dataFormat: w,
          } = n,
          C = h - 1 - n.padInfo.top,
          O = d - 1 - n.padInfo.left,
          E = "channelsLast" === w,
          S = r.strides[0],
          I = E ? r.strides[1] : r.strides[2],
          k = E ? r.strides[2] : 1,
          N = E ? 1 : r.strides[1],
          R = t.strides[0],
          A = E ? t.strides[1] : t.strides[2],
          T = E ? t.strides[2] : 1,
          _ = E ? 1 : t.strides[1];
        for (let t = 0; t < l; ++t)
          for (let e = 0; e < p; ++e)
            for (let n = 0; n < f; ++n) {
              const r = n - C,
                l = Math.max(0, Math.ceil(r / y)),
                p = Math.min(b, (h + r) / y);
              for (let f = 0; f < m; ++f) {
                const m = f - O,
                  b = Math.max(0, Math.ceil(m / x)),
                  w = Math.min(v, (d + m) / x);
                let C = 0;
                for (let n = l; n < p; ++n) {
                  const a = n * y - r;
                  for (let r = b; r < w; ++r) {
                    const l = R * t + A * n + T * r,
                      p = s * (h - 1 - a) + u * (d - 1 - (r * x - m)) + c * e;
                    for (let t = 0; t < g; ++t) {
                      C += i[l + _ * t] * o[p + t];
                    }
                  }
                }
                a[S * t + I * n + k * f + N * e] = C;
              }
            }
        return r.toTensor();
      }
      conv3dDerInput(t, e, n) {
        const r = En.N(n.inShape, "float32"),
          a = r.values,
          [i, o, s, u] = r.strides,
          c = this.readSync(t.dataId),
          [l, h, d, p] = t.strides,
          f = this.readSync(e.dataId),
          [m, g, b, v] = e.strides,
          {
            batchSize: y,
            filterDepth: x,
            filterHeight: w,
            filterWidth: C,
            inChannels: O,
            inDepth: E,
            inHeight: S,
            inWidth: I,
            outChannels: k,
            outDepth: N,
            outHeight: R,
            outWidth: A,
            strideDepth: T,
            strideHeight: _,
            strideWidth: D,
          } = n,
          F = x - 1 - n.padInfo.front,
          M = w - 1 - n.padInfo.top,
          j = C - 1 - n.padInfo.left;
        for (let t = 0; t < y; ++t)
          for (let e = 0; e < O; ++e)
            for (let n = 0; n < E; ++n) {
              const r = n - F,
                y = Math.max(0, Math.ceil(r / T)),
                O = Math.min(N, (x + r) / T);
              for (let E = 0; E < S; ++E) {
                const S = E - M,
                  N = Math.max(0, Math.ceil(S / _)),
                  F = Math.min(R, (w + S) / _);
                for (let R = 0; R < I; ++R) {
                  const I = R - j,
                    M = Math.max(0, Math.ceil(I / D)),
                    $ = Math.min(A, (C + I) / D);
                  let B = 0;
                  for (let n = y; n < O; ++n) {
                    const a = n * T - r;
                    for (let r = N; r < F; ++r) {
                      const i = r * _ - S;
                      for (let o = M; o < $; ++o) {
                        const s = l * t + h * n + d * r + p * o,
                          u =
                            m * (x - 1 - a) +
                            g * (w - 1 - i) +
                            b * (C - 1 - (o * D - I)) +
                            v * e;
                        for (let t = 0; t < k; ++t) {
                          B += c[s + t] * f[u + t];
                        }
                      }
                    }
                  }
                  a[i * t + o * n + s * E + u * R + e] = B;
                }
              }
            }
        return r.toTensor();
      }
      conv2dDerFilter(t, e, n) {
        Bu([t, e], "conv2dDerFilter");
        const r = n.strideHeight,
          a = n.strideWidth,
          i = n.filterHeight,
          o = n.filterWidth,
          s = "channelsLast" === n.dataFormat,
          u = En.N(n.filterShape, "float32"),
          c = n.padInfo.left,
          l = n.padInfo.top,
          h = this.bufferSync(t),
          d = this.bufferSync(e);
        for (let t = 0; t < i; ++t) {
          const e = Math.max(0, Math.ceil((l - t) / r)),
            i = Math.min(n.outHeight, (n.inHeight + l - t) / r);
          for (let p = 0; p < o; ++p) {
            const o = Math.max(0, Math.ceil((c - p) / a)),
              f = Math.min(n.outWidth, (n.inWidth + c - p) / a);
            for (let m = 0; m < n.inChannels; ++m)
              for (let g = 0; g < n.outChannels; ++g) {
                let b = 0;
                for (let u = 0; u < n.batchSize; ++u)
                  for (let n = e; n < i; ++n) {
                    const e = t + n * r - l;
                    for (let t = o; t < f; ++t) {
                      const r = p + t * a - c;
                      b += s
                        ? h.get(u, e, r, m) * d.get(u, n, t, g)
                        : h.get(u, m, e, r) * d.get(u, g, n, t);
                    }
                  }
                u.set(b, t, p, m, g);
              }
          }
        }
        return u.toTensor();
      }
      conv3dDerFilter(t, e, n) {
        const r = n.strideDepth,
          a = n.strideHeight,
          i = n.strideWidth,
          o = n.filterDepth,
          s = n.filterHeight,
          u = n.filterWidth,
          c = En.N(n.filterShape, "float32"),
          l = c.values,
          [h, d, p, f] = c.strides,
          m = this.readSync(e.dataId),
          [g, b, v, y] = e.strides,
          x = this.readSync(t.dataId),
          [w, C, O, E] = t.strides,
          S = n.padInfo.front,
          I = n.padInfo.left,
          k = n.padInfo.top;
        for (let t = 0; t < o; ++t) {
          const e = Math.max(0, Math.ceil((S - t) / r)),
            o = Math.min(n.outDepth, (n.inDepth + S - t) / r),
            c = t * h;
          for (let h = 0; h < s; ++h) {
            const s = Math.max(0, Math.ceil((k - h) / a)),
              N = Math.min(n.outHeight, (n.inHeight + k - h) / a),
              R = h * d + c;
            for (let c = 0; c < u; ++c) {
              const u = Math.max(0, Math.ceil((I - c) / i)),
                d = Math.min(n.outWidth, (n.inWidth + I - c) / i),
                A = c * p + R;
              for (let p = 0; p < n.inChannels; ++p) {
                const R = p * f + A;
                for (let f = 0; f < n.outChannels; ++f) {
                  let A = 0;
                  for (let l = 0; l < n.batchSize; ++l) {
                    const n = l * w,
                      R = l * g;
                    for (let l = e; l < o; ++l) {
                      const e = (t + l * r - S) * C + n,
                        o = l * b + R;
                      for (let t = s; t < N; ++t) {
                        const n = (h + t * a - k) * O + e,
                          r = t * v + o;
                        for (let t = u; t < d; ++t) {
                          const e = t * y + r;
                          A += x[(c + t * i - I) * E + n + p] * m[e + f];
                        }
                      }
                    }
                  }
                  l[R + f] = A;
                }
              }
            }
          }
        }
        return c.toTensor();
      }
      fusedDepthwiseConv2D({
        input: t,
        filter: e,
        convInfo: n,
        bias: r,
        activation: a,
        preluActivationWeights: i,
      }) {
        let o = this.depthwiseConv2D(t, e, n);
        return r && (o = this.add(o, r)), a && (o = Hu(this, o, a, i)), o;
      }
      depthwiseConv2D(t, e, n) {
        Bu([t, e], "depthwiseConv2D");
        const r = n.filterHeight,
          a = n.filterWidth,
          i = n.dilationHeight,
          o = n.dilationWidth,
          s = n.padInfo.left,
          u = n.padInfo.top,
          c = n.outChannels / n.inChannels,
          l = En.N(n.outShape, t.dtype),
          h = this.readSync(t.dataId),
          d = this.readSync(e.dataId),
          p = l.values;
        for (let f = 0; f < n.batchSize; ++f) {
          const m = f * t.strides[0],
            g = f * l.strides[0];
          for (let f = 0; f < n.outHeight; ++f) {
            const b = g + f * l.strides[1],
              v = f * n.strideHeight - s;
            for (let s = 0; s < r; ++s) {
              const r = v + s * i;
              if (r < 0 || r >= n.inHeight) continue;
              const f = s * e.strides[0],
                g = m + r * t.strides[1];
              for (let t = 0; t < n.outWidth; ++t) {
                const r = b + t * l.strides[2],
                  i = t * n.strideWidth - u;
                for (let t = 0; t < a; ++t) {
                  const a = i + t * o;
                  if (a < 0 || a >= n.inWidth) continue;
                  const s = f + t * e.strides[1],
                    u = g + a * n.inChannels;
                  let l = r,
                    m = s;
                  for (let t = 0; t < n.inChannels; ++t) {
                    const e = h[u + t];
                    for (let t = 0; t < c; ++t) p[l + t] += e * d[m + t];
                    (l += c), (m += c);
                  }
                }
              }
            }
          }
        }
        return l.toTensor();
      }
      depthwiseConv2DDerInput(t, e, n) {
        Bu([t, e], "depthwiseConv2DDerInput");
        const r = En.N(n.inShape, "float32"),
          a = r.values,
          [i, o, s] = r.strides,
          u = this.readSync(t.dataId),
          [c, l, h] = t.strides,
          d = this.readSync(e.dataId),
          [p, f, m] = e.strides,
          {
            batchSize: g,
            filterHeight: b,
            filterWidth: v,
            inChannels: y,
            inHeight: x,
            inWidth: w,
            outChannels: C,
            outHeight: O,
            outWidth: E,
            strideHeight: S,
            strideWidth: I,
          } = n,
          k = b - 1 - n.padInfo.top,
          N = v - 1 - n.padInfo.left,
          R = C / y;
        for (let t = 0; t < g; ++t)
          for (let e = 0; e < y; ++e)
            for (let n = 0; n < x; ++n) {
              const r = n - k,
                g = Math.max(0, Math.ceil(r / S)),
                y = Math.min(O, (b + r) / S);
              for (let x = 0; x < w; ++x) {
                const w = x - N,
                  C = Math.max(0, Math.ceil(w / I)),
                  O = Math.min(E, (v + w) / I);
                let k = 0;
                for (let n = g; n < y; ++n) {
                  const a = n * S - r;
                  for (let r = C; r < O; ++r) {
                    const i = c * t + l * n + h * r,
                      o = p * (b - 1 - a) + f * (v - 1 - (r * I - w)) + m * e;
                    for (let t = 0; t < R; ++t) {
                      k += u[i + (e * R + t)] * d[o + t];
                    }
                  }
                }
                a[i * t + o * n + s * x + e] = k;
              }
            }
        return r.toTensor();
      }
      depthwiseConv2DDerFilter(t, e, n) {
        Bu([t, e], "depthwiseConv2DDerFilter");
        const r = n.strideHeight,
          a = n.strideWidth,
          i = n.filterHeight,
          o = n.filterWidth,
          s = En.N(n.filterShape, "float32"),
          u = n.padInfo.left,
          c = n.padInfo.top,
          l = n.outChannels / n.inChannels,
          h = this.bufferSync(t),
          d = this.bufferSync(e);
        for (let t = 0; t < i; ++t) {
          const e = Math.max(0, Math.ceil((c - t) / r)),
            i = Math.min(n.outHeight, (n.inHeight + c - t) / r);
          for (let p = 0; p < o; ++p) {
            const o = Math.max(0, Math.ceil((u - p) / a)),
              f = Math.min(n.outWidth, (n.inWidth + u - p) / a);
            for (let m = 0; m < n.outChannels; ++m) {
              const g = Math.trunc(m / l),
                b = m % l;
              let v = 0;
              for (let s = 0; s < n.batchSize; ++s)
                for (let n = e; n < i; ++n) {
                  const e = t + n * r - c;
                  for (let t = o; t < f; ++t) {
                    const r = p + t * a - u;
                    v += h.get(s, e, r, g) * d.get(s, n, t, m);
                  }
                }
              s.set(v, t, p, g, b);
            }
          }
        }
        return s.toTensor();
      }
      tile(t, e) {
        return Bu(t, "tile"), Vu(this.bufferSync(t), e);
      }
      pad(t, e, n) {
        Bu(t, "pad");
        const r = e.map((e, n) => e[0] + t.shape[n] + e[1]),
          a = e.map((t) => t[0]),
          i = this.bufferSync(t),
          o = En.N(r, t.dtype);
        0 !== n && o.values.fill(n);
        for (let e = 0; e < t.size; e++) {
          const t = i.indexToLoc(e),
            n = t.map((t, e) => t + a[e]);
          o.set(i.get(...t), ...n);
        }
        return o.toTensor();
      }
      gather(t, e, n) {
        Bu([t, e], "gather");
        const r = t.shape.slice(),
          a = this.readSync(e.dataId);
        r[n] = a.length;
        const i = En.N(r, t.dtype),
          o = this.bufferSync(t);
        for (let t = 0; t < i.size; ++t) {
          const e = i.indexToLoc(t),
            r = e.slice();
          r[n] = a[e[n]];
          const s = o.locToIndex(r);
          i.values[t] = o.values[s];
        }
        return i.toTensor();
      }
      batchToSpaceND(t, e, n) {
        Bu([t], "batchToSpaceND");
        const r = e.reduce((t, e) => t * e),
          a = En.F.getReshaped(t.shape, e, r),
          i = En.F.getPermuted(a.length, e.length),
          o = En.F.getReshapedPermuted(t.shape, e, r),
          s = En.F.getSliceBeginCoords(n, e.length),
          u = En.F.getSliceSize(o, n, e.length);
        return En.yd(t.reshape(a), i).reshape(o).slice(s, u);
      }
      spaceToBatchND(t, e, n) {
        Bu([t], "spaceToBatchND");
        const r = e.reduce((t, e) => t * e),
          a = [[0, 0]];
        a.push(...n);
        for (let n = 1 + e.length; n < t.shape.length; ++n) a.push([0, 0]);
        const i = t.pad(a),
          o = En.F.getReshaped(i.shape, e, r, !1),
          s = En.F.getPermuted(o.length, e.length, !1),
          u = En.F.getReshapedPermuted(i.shape, e, r, !1);
        return En.yd(i.reshape(o), s).reshape(u);
      }
      maxPool(t, e) {
        Bu(t, "maxPool");
        return Pu(
          this.readSync(t.dataId),
          t.shape,
          t.dtype,
          t.strides,
          e,
          "max"
        ).toTensor();
      }
      maxPoolBackprop(t, e, n, r) {
        Bu([e, n], "maxPoolBackprop");
        const a = this.readSync(e.dataId),
          i = Object(En.N)(
            r.outShape,
            e.dtype,
            Lu(a, e.shape, e.dtype, r).values
          ),
          o = r.strideHeight,
          s = r.strideWidth,
          u = r.dilationHeight,
          c = r.dilationWidth,
          l = r.effectiveFilterHeight,
          h = r.effectiveFilterWidth,
          d = h - 1 - r.padInfo.left,
          p = l - 1 - r.padInfo.top,
          f = En.N(e.shape, "float32"),
          m = this.bufferSync(t);
        for (let t = 0; t < r.batchSize; ++t)
          for (let e = 0; e < r.inChannels; ++e)
            for (let n = 0; n < r.inHeight; ++n)
              for (let a = 0; a < r.inWidth; ++a) {
                const g = n - p,
                  b = a - d;
                let v = 0;
                for (let n = 0; n < l; n += u) {
                  const a = (g + n) / o;
                  if (!(a < 0 || a >= r.outHeight || Math.floor(a) !== a))
                    for (let o = 0; o < h; o += c) {
                      const u = (b + o) / s;
                      if (u < 0 || u >= r.outWidth || Math.floor(u) !== u)
                        continue;
                      const c =
                        l * h - 1 - i.get(t, a, u, e) === n * h + o ? 1 : 0;
                      if (0 === c) continue;
                      v += m.get(t, a, u, e) * c;
                    }
                }
                f.set(v, t, n, a, e);
              }
        return f.toTensor();
      }
      avgPoolBackprop(t, e, n) {
        Bu([t, e], "avgPoolBackprop");
        const r = n.strideHeight,
          a = n.strideWidth,
          i = n.filterHeight,
          o = n.filterWidth,
          s = n.dilationHeight,
          u = n.dilationWidth,
          c = n.effectiveFilterHeight,
          l = n.effectiveFilterWidth,
          h = l - 1 - n.padInfo.left,
          d = c - 1 - n.padInfo.top,
          p = En.N(e.shape, "float32"),
          f = 1 / (i * o),
          m = this.bufferSync(t);
        for (let t = 0; t < n.batchSize; ++t)
          for (let e = 0; e < n.inChannels; ++e)
            for (let i = 0; i < n.inHeight; ++i)
              for (let o = 0; o < n.inWidth; ++o) {
                const g = i - d,
                  b = o - h;
                let v = 0;
                for (let i = 0; i < c; i += s) {
                  const o = (g + i) / r;
                  if (!(o < 0 || o >= n.outHeight || Math.floor(o) !== o))
                    for (let r = 0; r < l; r += u) {
                      const i = (b + r) / a;
                      if (i < 0 || i >= n.outWidth || Math.floor(i) !== i)
                        continue;
                      v += m.get(t, o, i, e);
                    }
                }
                p.set(v * f, t, i, o, e);
              }
        return p.toTensor();
      }
      pool3d(t, e, n) {
        Bu(t, "pool3d");
        const r = e.strideDepth,
          a = e.strideHeight,
          i = e.strideWidth,
          o = e.dilationDepth,
          s = e.dilationHeight,
          u = e.dilationWidth,
          c = e.effectiveFilterDepth,
          l = e.effectiveFilterHeight,
          h = e.effectiveFilterWidth,
          d = e.padInfo.front,
          p = e.padInfo.top,
          f = e.padInfo.left,
          m = "max" === n ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY,
          g = this.readSync(t.dataId),
          b = En.N(e.outShape, t.dtype),
          v = b.values,
          y = e.outShape[1] * e.outShape[2] * e.outShape[3] * e.outShape[4],
          x = e.outShape[2] * e.outShape[3] * e.outShape[4],
          w = e.outShape[3] * e.outShape[4],
          C = e.outShape[4];
        for (let b = 0; b < e.batchSize; ++b) {
          const O = b * y,
            E = b * t.strides[0];
          for (let b = 0; b < e.inChannels; ++b)
            for (let y = 0; y < e.outDepth; ++y) {
              const S = y * r - d;
              let I = S;
              for (; I < 0; ) I += o;
              const k = Math.min(e.inDepth, c + S),
                N = O + y * x;
              for (let r = 0; r < e.outHeight; ++r) {
                const c = r * a - p;
                let d = c;
                for (; d < 0; ) d += s;
                const y = Math.min(e.inHeight, l + c),
                  x = N + r * w;
                for (let r = 0; r < e.outWidth; ++r) {
                  const a = r * i - f;
                  let c = a;
                  for (; c < 0; ) c += u;
                  const l = Math.min(e.inWidth, h + a),
                    p = x + r * C;
                  let w = m,
                    O = 0,
                    S = 0;
                  for (let e = I; e < k; e += o) {
                    const r = E + e * t.strides[1];
                    for (let e = d; e < y; e += s) {
                      const a = r + e * t.strides[2];
                      for (let e = c; e < l; e += u) {
                        const r = g[a + e * t.strides[3] + b];
                        if (
                          ("max" === n && r > w
                            ? (w = r)
                            : "avg" === n && ((O += r), S++),
                          isNaN(w))
                        )
                          break;
                      }
                      if (isNaN(w)) break;
                    }
                    if (isNaN(w)) break;
                  }
                  v[p + b] = "avg" === n ? O / S : w;
                }
              }
            }
        }
        return b.toTensor();
      }
      avgPool3d(t, e) {
        return Bu(t, "avgPool3d"), this.pool3d(t, e, "avg").toFloat();
      }
      avgPool3dBackprop(t, e, n) {
        Bu([t, e], "avgPool3dBackprop");
        const r = n.strideDepth,
          a = n.strideHeight,
          i = n.strideWidth,
          o = n.filterDepth,
          s = n.filterHeight,
          u = n.filterWidth,
          c = n.dilationDepth,
          l = n.dilationHeight,
          h = n.dilationWidth,
          d = n.effectiveFilterDepth,
          p = n.effectiveFilterHeight,
          f = n.effectiveFilterWidth,
          m = d - 1 - n.padInfo.front,
          g = f - 1 - n.padInfo.left,
          b = p - 1 - n.padInfo.top,
          v = En.N(e.shape, "float32"),
          y = 1 / (o * s * u),
          x = this.bufferSync(t);
        for (let t = 0; t < n.batchSize; ++t)
          for (let e = 0; e < n.inChannels; ++e)
            for (let o = 0; o < n.inDepth; ++o)
              for (let s = 0; s < n.inHeight; ++s)
                for (let u = 0; u < n.inWidth; ++u) {
                  const w = o - m,
                    C = s - b,
                    O = u - g;
                  let E = 0;
                  for (let o = 0; o < d; o += c) {
                    const s = (w + o) / r;
                    if (!(s < 0 || s >= n.outDepth || Math.floor(s) !== s))
                      for (let r = 0; r < p; r += l) {
                        const o = (C + r) / a;
                        if (!(o < 0 || o >= n.outHeight || Math.floor(o) !== o))
                          for (let r = 0; r < f; r += h) {
                            const a = (O + r) / i;
                            if (a < 0 || a >= n.outWidth || Math.floor(a) !== a)
                              continue;
                            E += x.get(t, s, o, a, e);
                          }
                      }
                  }
                  v.set(E * y, t, o, s, u, e);
                }
        return v.toTensor();
      }
      maxPool3d(t, e) {
        return Bu(t, "maxPool3d"), this.pool3d(t, e, "max").toFloat();
      }
      maxPool3dPositions(t, e) {
        const n = En.N(e.outShape, "int32"),
          r = e.strideDepth,
          a = e.strideHeight,
          i = e.strideWidth,
          o = e.dilationDepth,
          s = e.dilationHeight,
          u = e.dilationWidth,
          c = e.effectiveFilterDepth,
          l = e.effectiveFilterHeight,
          h = e.effectiveFilterWidth,
          d = e.padInfo.front,
          p = e.padInfo.top,
          f = e.padInfo.left,
          m = this.bufferSync(t);
        for (let t = 0; t < e.batchSize; ++t)
          for (let g = 0; g < e.inChannels; ++g)
            for (let b = 0; b < e.outDepth; ++b) {
              const v = b * r - d;
              let y = v;
              for (; y < 0; ) y += o;
              const x = Math.min(e.inDepth, c + v);
              for (let r = 0; r < e.outHeight; ++r) {
                const c = r * a - p;
                let d = c;
                for (; d < 0; ) d += s;
                const w = Math.min(e.inHeight, l + c);
                for (let a = 0; a < e.outWidth; ++a) {
                  const p = a * i - f;
                  let C = p;
                  for (; C < 0; ) C += u;
                  const O = Math.min(e.inWidth, h + p);
                  let E = Number.NEGATIVE_INFINITY,
                    S = -1;
                  for (let e = y; e < x; e += o) {
                    const n = e - v;
                    for (let r = d; r < w; r += s) {
                      const a = r - c;
                      for (let i = C; i < O; i += u) {
                        const o = i - p,
                          s = m.get(t, e, r, i, g);
                        s >= E && ((E = s), (S = n * l * h + a * l + o));
                      }
                    }
                  }
                  n.set(S, t, b, r, a, g);
                }
              }
            }
        return n.toTensor();
      }
      maxPool3dBackprop(t, e, n, r) {
        Bu([e, n], "maxPool3dBackprop");
        const a = this.maxPool3dPositions(e, r),
          i = r.strideDepth,
          o = r.strideHeight,
          s = r.strideWidth,
          u = r.dilationDepth,
          c = r.dilationHeight,
          l = r.dilationWidth,
          h = r.effectiveFilterDepth,
          d = r.effectiveFilterHeight,
          p = r.effectiveFilterWidth,
          f = h - 1 - r.padInfo.front,
          m = p - 1 - r.padInfo.left,
          g = d - 1 - r.padInfo.top,
          b = En.N(e.shape, "float32"),
          v = this.bufferSync(a),
          y = this.bufferSync(t);
        for (let t = 0; t < r.batchSize; ++t)
          for (let e = 0; e < r.inChannels; ++e)
            for (let n = 0; n < r.inDepth; ++n)
              for (let a = 0; a < r.inHeight; ++a)
                for (let x = 0; x < r.inWidth; ++x) {
                  const w = n - f,
                    C = a - g,
                    O = x - m;
                  let E = 0;
                  for (let n = 0; n < h; n += u) {
                    const a = (w + n) / i;
                    if (!(a < 0 || a >= r.outDepth || Math.floor(a) !== a))
                      for (let i = 0; i < d; i += c) {
                        const u = (C + i) / o;
                        if (!(u < 0 || u >= r.outHeight || Math.floor(u) !== u))
                          for (let o = 0; o < p; o += l) {
                            const c = (O + o) / s;
                            if (c < 0 || c >= r.outWidth || Math.floor(c) !== c)
                              continue;
                            const l =
                              h * d * p - 1 - v.get(t, a, u, c, e) ===
                              n * d * p + i * p + o
                                ? 1
                                : 0;
                            if (0 === l) continue;
                            E += y.get(t, a, u, c, e) * l;
                          }
                      }
                  }
                  b.set(E, t, n, a, x, e);
                }
        return b.toTensor();
      }
      cast(t, e) {
        return En.F.castTensor(t, e, this);
      }
      reshape(t, e) {
        return En.F.reshapeTensor(t, e);
      }
      avgPool(t, e) {
        Bu(t, "avgPool"), Bu(t, "maxPool");
        return Pu(
          this.readSync(t.dataId),
          t.shape,
          t.dtype,
          t.strides,
          e,
          "avg"
        )
          .toTensor()
          .toFloat();
      }
      resizeBilinear(t, e, n, r) {
        Bu(t, "resizeBilinear");
        const [a, i, o, s] = t.shape,
          u = this.readSync(t.dataId),
          c = new Float32Array(En.Cd.sizeFromShape([a, e, n, s])),
          l = [r && e > 1 ? i - 1 : i, r && n > 1 ? o - 1 : o],
          h = [r && e > 1 ? e - 1 : e, r && n > 1 ? n - 1 : n];
        let d = 0;
        const p = l[0] / h[0],
          f = l[1] / h[1];
        for (let r = 0; r < a; r++)
          for (let a = 0; a < e; a++) {
            const e = p * a,
              l = Math.floor(e),
              h = e - l,
              m = Math.min(i - 1, Math.ceil(e)),
              g = r * t.strides[0] + l * t.strides[1],
              b = r * t.strides[0] + m * t.strides[1];
            for (let e = 0; e < n; e++) {
              const n = f * e,
                r = Math.floor(n),
                a = n - r,
                i = Math.min(o - 1, Math.ceil(n)),
                l = g + r * t.strides[2],
                p = b + r * t.strides[2],
                m = g + i * t.strides[2],
                v = b + i * t.strides[2];
              for (let t = 0; t < s; t++) {
                const e = u[l + t],
                  n = u[p + t],
                  r = e + (u[m + t] - e) * a,
                  i = r + (n + (u[v + t] - n) * a - r) * h;
                c[d++] = i;
              }
            }
          }
        return En.pd(c, [a, e, n, s]);
      }
      resizeBilinearBackprop(t, e, n) {
        Bu([t, e], "resizeBilinearBackprop");
        const [r, a, i, o] = e.shape,
          [, s, u] = t.shape,
          c = new Float32Array(r * a * i * o),
          l = [n && s > 1 ? a - 1 : a, n && u > 1 ? i - 1 : i],
          h = [n && s > 1 ? s - 1 : s, n && u > 1 ? u - 1 : u],
          d = l[0] / h[0],
          p = l[1] / h[1],
          f = this.readSync(t.dataId);
        let m = 0;
        for (let t = 0; t < r; t++) {
          const n = t * e.strides[0];
          for (let t = 0; t < s; t++) {
            const r = t * d,
              s = Math.floor(r),
              l = Math.min(Math.ceil(r), a - 1),
              h = n + s * e.strides[1],
              g = n + l * e.strides[1],
              b = r - s,
              v = 1 - b;
            for (let t = 0; t < u; t++) {
              const n = t * p,
                r = Math.floor(n),
                a = Math.min(Math.ceil(n), i - 1),
                s = n - r,
                u = 1 - s,
                l = h + r * e.strides[2],
                d = h + a * e.strides[2],
                y = g + r * e.strides[2],
                x = g + a * e.strides[2],
                w = v * u,
                C = v * s,
                O = b * u,
                E = b * s;
              for (let t = 0; t < o; t++) {
                const e = f[m++];
                (c[l + t] += e * w),
                  (c[d + t] += e * C),
                  (c[y + t] += e * O),
                  (c[x + t] += e * E);
              }
            }
          }
        }
        return En.sd(c, [r, i, a, o], e.dtype);
      }
      resizeNearestNeighbor(t, e, n, r) {
        Bu(t, "resizeNearestNeighbor");
        const [a, i, o, s] = t.shape,
          u = this.readSync(t.dataId),
          c = new Float32Array(a * e * n * s),
          l = [r && e > 1 ? i - 1 : i, r && n > 1 ? o - 1 : o],
          h = [r && e > 1 ? e - 1 : e, r && n > 1 ? n - 1 : n],
          d = l[0] / h[0],
          p = l[1] / h[1];
        let f = 0;
        for (let l = 0; l < a; l++) {
          const a = l * t.strides[0];
          for (let l = 0; l < e; l++) {
            const e = d * l,
              h =
                a +
                Math.min(i - 1, r ? Math.round(e) : Math.floor(e)) *
                  t.strides[1];
            for (let e = 0; e < n; e++) {
              const n = p * e,
                a =
                  h +
                  Math.min(o - 1, r ? Math.round(n) : Math.floor(n)) *
                    t.strides[2];
              for (let t = 0; t < s; t++) {
                const e = u[a + t];
                c[f++] = e;
              }
            }
          }
        }
        return En.pd(c, [a, e, n, s], t.dtype);
      }
      resizeNearestNeighborBackprop(t, e, n) {
        Bu([t, e], "resizeNearestNeighborBackprop");
        const [r, a, i, o] = e.shape,
          [, s, u] = t.shape,
          c = new Float32Array(r * a * i * o),
          l = this.readSync(t.dataId),
          h = [n && s > 1 ? a - 1 : a, n && u > 1 ? i - 1 : i],
          d = [n && s > 1 ? s - 1 : s, n && u > 1 ? u - 1 : u],
          p = h[0] / d[0],
          f = h[1] / d[1],
          m = 1 / p,
          g = 1 / f,
          b = 2 * Math.ceil(m) + 2,
          v = 2 * Math.ceil(g) + 2;
        for (let h = 0; h < r; h++) {
          const r = h * e.strides[0];
          for (let h = 0; h < a; h++) {
            const d = r + h * e.strides[1],
              y = Math.floor(h * m),
              x = Math.floor(y - b / 2);
            for (let m = 0; m < i; m++) {
              const y = d + m * e.strides[2],
                w = Math.floor(m * g),
                C = Math.floor(w - v / 2);
              for (let e = 0; e < o; e++) {
                let o = 0;
                for (let c = 0; c < b; c++) {
                  const d = c + x;
                  if (d < 0 || d >= s) continue;
                  const g = r + d * t.strides[1],
                    b = d * p;
                  if (h === Math.min(a - 1, n ? Math.round(b) : Math.floor(b)))
                    for (let r = 0; r < v; r++) {
                      const a = r + C;
                      if (a < 0 || a >= u) continue;
                      const s = g + a * t.strides[2],
                        c = a * f;
                      m ===
                        Math.min(i - 1, n ? Math.round(c) : Math.floor(c)) &&
                        (o += l[s + e]);
                    }
                }
                c[y + e] = o;
              }
            }
          }
        }
        return En.sd(c, e.shape, e.dtype);
      }
      batchNorm(t, e, n, r, a, i) {
        Bu([t, e, n, a, r], "batchNorm");
        const o = this.readSync(t.dataId),
          s = this.readSync(e.dataId),
          u = this.readSync(n.dataId),
          c = a ? this.readSync(a.dataId) : new Float32Array([1]),
          l = r ? this.readSync(r.dataId) : new Float32Array([0]),
          h = new Float32Array(o.length),
          d = l.length,
          p = c.length,
          f = u.length,
          m = s.length;
        let g = 0,
          b = 0,
          v = 0,
          y = 0;
        for (let t = 0; t < o.length; ++t)
          (h[t] = l[g++] + ((o[t] - s[b++]) * c[v++]) / Math.sqrt(u[y++] + i)),
            g >= d && (g = 0),
            b >= m && (b = 0),
            v >= p && (v = 0),
            y >= f && (y = 0);
        return En.sd(h, t.shape);
      }
      localResponseNormalization4D(t, e, n, r, a) {
        Bu(t, "localResponseNormalization4D");
        const i = t.shape[3],
          o = i - 1,
          s = this.readSync(t.dataId),
          u = t.size,
          c = new Float32Array(u);
        function l(t) {
          const n = t % i;
          let r = t - n + Math.max(0, n - e);
          const a = t - n + Math.min(n + e, o);
          let u = 0;
          for (; r <= a; r++) {
            const t = s[r];
            u += t * t;
          }
          return u;
        }
        for (let t = 0; t < u; t++) {
          const e = l(t),
            i = s[t] * Math.pow(n + r * e, -a);
          c[t] = i;
        }
        return En.sd(c, t.shape);
      }
      LRNGrad(t, e, n, r, a, i, o) {
        Bu(t, "LRNGrad");
        const s = t.shape[3],
          u = this.readSync(t.dataId),
          c = this.readSync(e.dataId),
          l = this.readSync(n.dataId),
          h = new Float32Array(t.size),
          d = t.size;
        for (let t = 0; t < d; t++) {
          const e = t % s,
            n = t - e + Math.max(0, e - r),
            d = t - e + Math.min(s, e + r + 1);
          let p = 0;
          for (let t = n; t < d; t++) p += Math.pow(c[t], 2);
          p = i * p + a;
          for (let e = n; e < d; e++) {
            let n = (-2 * i * o * c[e] * l[t]) / p;
            t === e && (n += Math.pow(p, -o)), (n *= u[t]), (h[e] += n);
          }
        }
        return En.sd(h, t.shape);
      }
      multinomial(t, e, n, r) {
        Bu(t, "multinomial");
        const a = e ? t : En.Zc(t),
          i = a.shape[0],
          o = a.shape[1],
          s = En.Id([i, n], "int32"),
          u = this.readSync(s.dataId),
          c = this.readSync(a.dataId);
        for (let t = 0; t < i; ++t) {
          const e = t * o,
            a = new Float32Array(o - 1);
          a[0] = c[e];
          for (let t = 1; t < a.length; ++t) a[t] = a[t - 1] + c[e + t];
          const i = ou.alea(r.toString()),
            s = t * n;
          for (let t = 0; t < n; ++t) {
            const e = i();
            u[s + t] = a.length;
            for (let n = 0; n < a.length; n++)
              if (e < a[n]) {
                u[s + t] = n;
                break;
              }
          }
        }
        return s;
      }
      oneHot(t, e, n, r) {
        Bu(t, "oneHot");
        const a = new Float32Array(t.size * e);
        a.fill(r);
        const i = this.readSync(t.dataId);
        for (let r = 0; r < t.size; ++r)
          i[r] >= 0 && i[r] < e && (a[r * e + i[r]] = n);
        return En.rd(a, [t.size, e], "int32");
      }
      nonMaxSuppression(t, e, n, r, a) {
        Bu(t, "nonMaxSuppression");
        const i = this.readSync(t.dataId),
          o = this.readSync(e.dataId);
        return zu(i, o, n, r, a);
      }
      fft(t) {
        return this.fftBatch(t, !1);
      }
      ifft(t) {
        return this.fftBatch(t, !0);
      }
      fftBatch(t, e) {
        const n = t.shape[0],
          r = t.shape[1],
          a = En.N(t.shape, "float32"),
          i = En.N(t.shape, "float32"),
          o = En.yc(t).as2D(n, r),
          s = En.Fb(t).as2D(n, r);
        for (let t = 0; t < n; t++) {
          const n = o.slice([t, 0], [1, r]),
            u = s.slice([t, 0], [1, r]),
            c = En.R(n, u),
            l = this.readSync(this.fftImpl(c, e).dataId);
          for (let e = 0; e < r; e++) {
            const n = En.F.getComplexWithIndex(l, e);
            (a.values[t * r + e] = n.real), (i.values[t * r + e] = n.imag);
          }
        }
        return En.R(a.toTensor(), i.toTensor()).as2D(n, r);
      }
      fftImpl(t, e) {
        const n = t.as1D(),
          r = n.size;
        if (this.isExponentOf2(r)) {
          let a = this.fftRadix2(n, r, e).as2D(t.shape[0], t.shape[1]);
          return (
            e && (a = En.R(En.yc(a).div(En.Ic(r)), En.Fb(a).div(En.Ic(r)))), a
          );
        }
        {
          const n = this.readSync(t.dataId),
            a = this.fourierTransformByMatmul(n, r, e),
            i = En.F.splitRealAndImagArrays(a);
          return En.R(i.real, i.imag).as2D(t.shape[0], t.shape[1]);
        }
      }
      isExponentOf2(t) {
        return 0 == (t & (t - 1));
      }
      fftRadix2(t, e, n) {
        if (1 === e) return t;
        const r = this.readSync(t.dataId),
          a = e / 2,
          i = En.F.complexWithEvenIndex(r);
        let o = En.R(i.real, i.imag).as1D();
        const s = En.F.complexWithOddIndex(r);
        let u = En.R(s.real, s.imag).as1D();
        (o = this.fftRadix2(o, a, n)), (u = this.fftRadix2(u, a, n));
        const c = En.F.exponents(e, n),
          l = En.R(c.real, c.imag).mul(u),
          h = o.add(l),
          d = o.sub(l),
          p = En.yc(h).concat(En.yc(d)),
          f = En.Fb(h).concat(En.Fb(d));
        return En.R(p, f).as1D();
      }
      fourierTransformByMatmul(t, e, n) {
        const r = new Float32Array(2 * e);
        for (let a = 0; a < e; a++) {
          let i = 0,
            o = 0;
          for (let r = 0; r < e; r++) {
            const s = En.F.exponent(a * r, e, n),
              u = En.F.getComplexWithIndex(t, r);
            (i += u.real * s.real - u.imag * s.imag),
              (o += u.real * s.imag + u.imag * s.real);
          }
          n && ((i /= e), (o /= e)), En.F.assignToTypedArray(r, i, o, a);
        }
        return r;
      }
      depthToSpace(t, e, n) {
        En.Cd.assert(
          "NHWC" === n,
          () =>
            "Only NHWC dataFormat supported on CPU for depthToSpace. Got " + n
        ),
          En.Cd.assert(
            e > 1,
            () => "blockSize should be > 1 for depthToSpace, but was: " + e
          );
        const r = t.shape[0],
          a = t.shape[1],
          i = t.shape[2],
          o = t.shape[3],
          s = a * e,
          u = i * e,
          c = o / (e * e),
          l = this.readSync(t.dataId),
          h = new Float32Array(r * s * u * c);
        let d = 0;
        for (let t = 0; t < r; ++t)
          for (let n = 0; n < s; ++n) {
            const r = Math.floor(n / e),
              s = n % e;
            for (let n = 0; n < u; ++n) {
              const u = Math.floor(n / e),
                p = (s * e + (n % e)) * c;
              for (let e = 0; e < c; ++e) {
                const n = e + p + o * (u + i * (r + a * t));
                h[d++] = l[n];
              }
            }
          }
        return En.sd(h, [r, s, u, c]);
      }
      broadcastedBinaryOp(t, e, n, r) {
        const a = En.F.assertAndGetBroadcastShape(t.shape, e.shape),
          i = En.N(a, n),
          o = this.readSync(t.dataId),
          s = this.readSync(e.dataId),
          u = En.F.getBroadcastDims(t.shape, a),
          c = En.F.getBroadcastDims(e.shape, a),
          l = i.values;
        if (u.length + c.length === 0)
          for (let t = 0; t < l.length; ++t)
            l[t] = r(o[t % o.length], s[t % s.length]);
        else {
          const n = this.bufferSync(t),
            a = this.bufferSync(e);
          for (let h = 0; h < l.length; ++h) {
            const d = i.indexToLoc(h),
              p = d.slice(-t.rank);
            u.forEach((t) => (p[t] = 0));
            const f = n.locToIndex(p),
              m = d.slice(-e.rank);
            c.forEach((t) => (m[t] = 0));
            const g = a.locToIndex(m);
            l[h] = r(o[f], s[g]);
          }
        }
        return i.toTensor();
      }
      broadcastedBinaryComplexOp(t, e, n) {
        const r = En.F.assertAndGetBroadcastShape(t.shape, e.shape),
          a = En.N(r, "float32"),
          i = En.N(r, "float32"),
          o = this.readSync(t.dataId),
          s = this.readSync(e.dataId),
          u = En.F.getBroadcastDims(t.shape, r),
          c = En.F.getBroadcastDims(e.shape, r),
          l = a.values,
          h = i.values;
        if (u.length + c.length === 0)
          for (let t = 0; t < l.length; t++) {
            const e = t % o.length,
              r = t % s.length,
              a = n(o[2 * e], o[2 * e + 1], s[2 * r], s[2 * r + 1]);
            (l[t] = a.real), (h[t] = a.imag);
          }
        else {
          const r = this.bufferSync(
              this.data.get(t.dataId).complexTensors.real
            ),
            i = this.bufferSync(this.data.get(e.dataId).complexTensors.real);
          for (let d = 0; d < l.length; d++) {
            const p = a.indexToLoc(d),
              f = p.slice(-t.rank);
            u.forEach((t) => (f[t] = 0));
            const m = r.locToIndex(f),
              g = p.slice(-e.rank);
            c.forEach((t) => (g[t] = 0));
            const b = i.locToIndex(g),
              v = n(o[2 * m], o[2 * m + 1], s[2 * b], s[2 * b + 1]);
            (l[d] = v.real), (h[d] = v.imag);
          }
        }
        return this.complex(a.toTensor(), i.toTensor());
      }
      split(t, e, n) {
        return Wu(t, e, n);
      }
      dispose() {}
      floatPrecision() {
        return 32;
      }
      epsilon() {
        return super.epsilon();
      }
      cropAndResize(t, e, n, r, a, i) {
        const [o, s, u, c] = t.shape,
          l = e.shape[0],
          [h, d] = r,
          p = En.N([l, h, d, c], "float32"),
          f = this.readSync(e.dataId),
          m = this.readSync(n.dataId),
          g = this.readSync(t.dataId),
          b = t.strides,
          v = p.strides;
        for (let t = 0; t < l; t++) {
          const e = 4 * t,
            n = f[e],
            r = f[e + 1],
            l = f[e + 2],
            y = f[e + 3],
            x = m[t];
          if (x >= o) continue;
          const w = h > 1 ? ((l - n) * (s - 1)) / (h - 1) : 0,
            C = d > 1 ? ((y - r) * (u - 1)) / (d - 1) : 0;
          for (let e = 0; e < h; e++) {
            const o = h > 1 ? n * (s - 1) + e * w : 0.5 * (n + l) * (s - 1);
            if (o < 0 || o > s - 1)
              for (let n = 0; n < d; n++)
                for (let r = 0; r < c; r++) {
                  const a = r + n * v[2] + e * v[1] + t * v[0];
                  p.values[a] = i;
                }
            else if ("bilinear" === a) {
              const n = Math.floor(o),
                a = Math.ceil(o),
                s = o - n;
              for (let o = 0; o < d; o++) {
                const l = d > 1 ? r * (u - 1) + o * C : 0.5 * (r + y) * (u - 1);
                if (l < 0 || l > u - 1) {
                  for (let n = 0; n < c; n++) {
                    const r = n + o * v[2] + e * v[1] + t * v[0];
                    p.values[r] = i;
                  }
                  continue;
                }
                const h = Math.floor(l),
                  f = Math.ceil(l),
                  m = l - h;
                for (let r = 0; r < c; r++) {
                  let i = r + h * b[2] + n * b[1] + x * b[0];
                  const u = g[i];
                  i = r + f * b[2] + n * b[1] + x * b[0];
                  const c = g[i];
                  i = r + h * b[2] + a * b[1] + x * b[0];
                  const l = g[i];
                  i = r + f * b[2] + a * b[1] + x * b[0];
                  const d = u + (c - u) * m,
                    y = l + (g[i] - l) * m;
                  (i = r + o * v[2] + e * v[1] + t * v[0]),
                    (p.values[i] = d + (y - d) * s);
                }
              }
            } else
              for (let n = 0; n < d; ++n) {
                const a = d > 1 ? r * (u - 1) + n * C : 0.5 * (r + y) * (u - 1);
                if (a < 0 || a > u - 1) {
                  for (let r = 0; r < c; r++) {
                    const a = r + n * v[2] + e * v[1] + t * v[0];
                    p.values[a] = i;
                  }
                  continue;
                }
                const s = Math.round(a),
                  l = Math.round(o);
                for (let r = 0; r < c; r++) {
                  const a = r + s * b[2] + l * b[1] + x * b[0],
                    i = r + n * v[2] + e * v[1] + t * v[0];
                  p.values[i] = g[a];
                }
              }
          }
        }
        return p.toTensor();
      }
      sparseToDense(t, e, n, r) {
        const {
          sliceRank: a,
          numUpdates: i,
          sliceSize: o,
          strides: s,
          outputSize: u,
        } = En.F.calculateShapes(e, t, n);
        return this.scatter(t, e, n, u, o, i, a, s, r, !1);
      }
      gatherND(t, e) {
        const n = e.shape,
          r = n[n.length - 1],
          [a, i, o, s] = En.F.prepareAndValidate(t, e);
        if (0 === i) return En.pd([], a, t.dtype);
        const u = new En.m([i, o], t.dtype),
          c = this.readSync(e.dataId),
          l = this.readSync(t.dataId);
        for (let e = 0; e < i; e++) {
          const n = [];
          let a = 0;
          for (let t = 0; t < r; t++) {
            const i = c[e * r + t];
            (a += i * s[t]), n.push(i);
          }
          if (a < 0 || a >= t.size / o)
            throw new Error(
              `Invalid indices: ${n} does not index into ${t.shape}`
            );
          for (let t = 0; t < o; t++) u.values[e * o + t] = l[a * o + t];
        }
        return u.toTensor().reshape(a);
      }
      scatterND(t, e, n) {
        const {
            sliceRank: r,
            numUpdates: a,
            sliceSize: i,
            strides: o,
            outputSize: s,
          } = En.F.calculateShapes(e, t, n),
          u = En.Ic(0);
        return this.scatter(t, e, n, s, i, a, r, o, u, !0);
      }
      fill(t, e, n) {
        n = n || En.Cd.inferDtype(e);
        const r = En.Cd.getArrayFromDType(n, En.Cd.sizeFromShape(t));
        return r.fill(e), Object(En.nb)().makeTensor(r, t, n, this);
      }
      onesLike(t) {
        if ("string" === t.dtype)
          throw new Error("onesLike is not supported for string tensors");
        return this.fill(t.shape, 1, t.dtype);
      }
      zerosLike(t) {
        const e = En.Cd.getArrayFromDType(
          t.dtype,
          En.Cd.sizeFromShape(t.shape)
        );
        return this.makeOutput(e, t.shape, t.dtype);
      }
      linspace(t, e, n) {
        return En.F.linspaceImpl(t, e, n);
      }
      scatter(t, e, n, r, a, i, o, s, u, c) {
        const l = [r / a, a],
          h = this.readSync(t.dataId),
          d = this.readSync(e.dataId);
        if (0 === r) return En.pd([], n, e.dtype);
        const p = new En.m(l, e.dtype);
        p.values.fill(this.readSync(u.dataId)[0]);
        for (let t = 0; t < i; t++) {
          const i = [];
          let u = 0;
          for (let e = 0; e < o; e++) {
            const n = h[t * o + e];
            i.push(n), (u += n * s[e]);
          }
          if (u < 0 || u >= r / a)
            throw new Error(`Invalid indices: ${i} does not index into ${n}`);
          for (let n = 0; n < a; n++)
            c
              ? (p.values[u * a + n] += d[t * a + n])
              : (p.values[u * a + n] = 0 === e.rank ? d[0] : d[t * a + n]);
        }
        return p.toTensor().reshape(n);
      }
    }
    /** @license See the LICENSE file. */
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function Ku(t, e) {
      return {
        kernelName: t,
        backendName: "cpu",
        kernelFunc: ({ inputs: n, backend: r }) => {
          const { a: a, b: i } = n,
            o = r;
          Bu([a, i], t);
          const s = o.data.get(a.dataId).values,
            u = o.data.get(i.dataId).values,
            [c, l] = e(a.shape, i.shape, s, u, a.dtype);
          return { dataId: o.write(c, l, a.dtype), shape: l, dtype: a.dtype };
        },
      };
    }
    function Xu(t) {
      return (e, n, r, a, i) => {
        const o = En.F.assertAndGetBroadcastShape(e, n),
          s = o.length,
          u = En.Cd.computeStrides(o),
          c = En.Cd.sizeFromShape(o),
          l = En.Cd.getTypedArrayFromDType(i, c),
          h = e.length,
          d = n.length,
          p = En.Cd.computeStrides(e),
          f = En.Cd.computeStrides(n),
          m = En.F.getBroadcastDims(e, o),
          g = En.F.getBroadcastDims(n, o);
        if (m.length + g.length === 0)
          for (let e = 0; e < l.length; ++e)
            l[e] = t(r[e % r.length], a[e % a.length]);
        else
          for (let e = 0; e < l.length; ++e) {
            const n = En.Cd.indexToLoc(e, s, u),
              i = n.slice(-h);
            m.forEach((t) => (i[t] = 0));
            const o = En.Cd.locToIndex(i, h, p),
              c = n.slice(-d);
            g.forEach((t) => (c[t] = 0));
            const b = En.Cd.locToIndex(c, d, f);
            l[e] = t(r[o], a[b]);
          }
        return [l, o];
      };
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const Yu = Xu((t, e) => t / e),
      Ju = Ku(En.b, Yu),
      Qu = {
        kernelName: En.e,
        backendName: "cpu",
        kernelFunc: ({ inputs: t, attrs: e, backend: n }) => {
          const { x: r } = t,
            { reductionIndices: a } = e,
            i = n;
          let o = r.shape;
          const s = o.length;
          let u = En.Cd.parseAxisParam(a, o);
          const c = En.F.getAxesPermutation(u, s);
          let l = i.data.get(r.dataId).values;
          if (null != c) {
            const t = new Array(s);
            for (let e = 0; e < t.length; e++) t[e] = o[c[e]];
            (l = $u(l, o, r.dtype, c, t)),
              (u = En.F.getInnerMostAxes(u.length, s)),
              (o = t);
          }
          Bu(r, "max"), En.F.assertAxesAreInnerMostDims("max", u, s);
          const [h, d] = En.F.computeOutAndReduceShapes(o, u),
            p = ju(l, En.Cd.sizeFromShape(d), h, r.dtype);
          return { dataId: i.write(p, h, r.dtype), shape: h, dtype: r.dtype };
        },
      };
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const Zu = {
        kernelName: En.f,
        backendName: "cpu",
        kernelFunc: ({ inputs: t, attrs: e, backend: n }) => {
          const { x: r } = t,
            { filterSize: a, strides: i, pad: o, includeBatchInIndex: s } = e,
            u = n;
          Bu(r, "MaxPoolWithArgmax");
          const c = u.data.get(r.dataId).values,
            l = En.F.computePool2DInfo(r.shape, a, i, [1, 1], o),
            [h, d] =
              /**
               * @license
               * Copyright 2020 Google LLC. All Rights Reserved.
               * Licensed under the Apache License, Version 2.0 (the "License");
               * you may not use this file except in compliance with the License.
               * You may obtain a copy of the License at
               *
               * http://www.apache.org/licenses/LICENSE-2.0
               *
               * Unless required by applicable law or agreed to in writing, software
               * distributed under the License is distributed on an "AS IS" BASIS,
               * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
               * See the License for the specific language governing permissions and
               * limitations under the License.
               * =============================================================================
               */
              (function (t, e, n, r, a) {
                const i = Pu(t, 0, n, En.Cd.computeStrides(e), a, "max"),
                  o = Lu(t, e, n, a, !0, r);
                return [i.values, o.values];
              })(c, r.shape, r.dtype, s, l),
            p = u.write(h, l.outShape, r.dtype),
            f = u.write(d, l.outShape, r.dtype);
          return [
            { dataId: p, shape: l.outShape, dtype: r.dtype },
            { dataId: f, shape: l.outShape, dtype: "int32" },
          ];
        },
      },
      tc = En.Kb.nonMaxSuppressionV5,
      ec = {
        kernelName: En.h,
        backendName: "cpu",
        kernelFunc: ({ inputs: t, backend: e, attrs: n }) => {
          const { boxes: r, scores: a } = t,
            {
              maxOutputSize: i,
              iouThreshold: o,
              scoreThreshold: s,
              softNmsSigma: u,
            } = n,
            c = e;
          Bu(r, "NonMaxSuppressionWithScore");
          const l = c.data.get(r.dataId).values,
            h = c.data.get(a.dataId).values,
            d = i,
            p = o,
            f = s,
            m = u,
            { selectedIndices: g, selectedScores: b } = tc(l, h, d, p, f, m);
          return [g, b];
        },
      },
      nc = {
        kernelName: En.j,
        backendName: "cpu",
        kernelFunc: ({ inputs: t, backend: e }) => {
          const { x: n } = t,
            r = e;
          Bu(n, "square");
          const a = r.data.get(n.dataId).values,
            i = new Float32Array(a.length);
          for (let t = 0; t < a.length; ++t) {
            const e = a[t];
            i[t] = e * e;
          }
          return {
            dataId: r.write(i, n.shape, n.dtype),
            shape: n.shape,
            dtype: n.dtype,
          };
        },
      },
      rc = Xu((t, e) => {
        const n = t - e;
        return n * n;
      }),
      ac = [
        ec,
        nc,
        Ku(En.k, rc),
        Ju,
        {
          kernelName: En.n,
          backendName: "cpu",
          kernelFunc: ({ inputs: t, attrs: e, backend: n }) => {
            const { x: r } = t,
              { perm: a } = e,
              i = n;
            Bu(r, "transpose");
            const o = r.shape.length,
              s = new Array(o);
            for (let t = 0; t < s.length; t++) s[t] = r.shape[a[t]];
            const u = $u(i.data.get(r.dataId).values, r.shape, r.dtype, a, s);
            return { dataId: i.write(u, s, r.dtype), shape: s, dtype: r.dtype };
          },
        },
        Zu,
        Qu,
      ];
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ for (const t of ac) Object(En.Bc)(t);
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ Object(En.Ac)("cpu", () => new qu(), 1);
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const ic = {},
      oc = {
        alpha: !1,
        antialias: !1,
        premultipliedAlpha: !1,
        preserveDrawingBuffer: !1,
        depth: !1,
        stencil: !1,
        failIfMajorPerformanceCaveat: !0,
      };
    function sc(t) {
      t in ic ||
        (ic[t] = (function (t) {
          if (1 !== t && 2 !== t)
            throw new Error(
              "Cannot get WebGL rendering context, WebGL is disabled."
            );
          const e = (function (t) {
            if ("undefined" != typeof OffscreenCanvas && 2 === t)
              return new OffscreenCanvas(300, 150);
            if ("undefined" != typeof document)
              return document.createElement("canvas");
            throw new Error("Cannot create a canvas in this context");
          })(t);
          if (
            (e.addEventListener(
              "webglcontextlost",
              (e) => {
                e.preventDefault(), delete ic[t];
              },
              !1
            ),
            1 === t)
          )
            return (
              e.getContext("webgl", oc) ||
              e.getContext("experimental-webgl", oc)
            );
          return e.getContext("webgl2", oc);
        })(
          /**
           * @license
           * Copyright 2017 Google Inc. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */ t
        ));
      const e = ic[t];
      return e.isContextLost()
        ? (delete ic[t], sc(t))
        : (e.disable(e.DEPTH_TEST),
          e.disable(e.STENCIL_TEST),
          e.disable(e.BLEND),
          e.disable(e.DITHER),
          e.disable(e.POLYGON_OFFSET_FILL),
          e.disable(e.SAMPLE_COVERAGE),
          e.enable(e.SCISSOR_TEST),
          e.enable(e.CULL_FACE),
          e.cullFace(e.BACK),
          ic[t]);
    }
    var uc, cc, lc;
    function hc(t, e) {
      return [e, t];
    }
    function dc(t) {
      const e = En.Cd.sizeFromShape(t),
        n = Math.ceil(e / 4);
      return En.Cd.sizeToSquarishShape(n);
    }
    function pc(t, e) {
      return [Math.max(1, Math.ceil(e / 2)), Math.max(1, Math.ceil(t / 2))];
    }
    function fc(t, e) {
      const n = t;
      let r, a, i, o, s, u, c, l, h, d;
      return (
        2 === Object(En.ob)().getNumber("WEBGL_VERSION")
          ? ((r = n.R32F),
            (a = n.R16F),
            (i = n.RGBA16F),
            (o = n.RGBA32F),
            (s = n.RED),
            (c = 4),
            (l = 1),
            (h = n.HALF_FLOAT),
            (d = n.FLOAT))
          : ((r = t.RGBA),
            (a = t.RGBA),
            (i = t.RGBA),
            (o = n.RGBA),
            (s = t.RGBA),
            (c = 4),
            (l = 4),
            (h = null != e ? e.HALF_FLOAT_OES : null),
            (d = t.FLOAT)),
        (u = t.RGBA),
        {
          internalFormatFloat: r,
          internalFormatHalfFloat: a,
          internalFormatPackedHalfFloat: i,
          internalFormatPackedFloat: o,
          textureFormatFloat: s,
          downloadTextureFormat: u,
          downloadUnpackNumChannels: c,
          defaultNumChannels: l,
          textureTypeHalfFloat: h,
          textureTypeFloat: d,
        }
      );
    }
    /**
     * @license
     * Copyright 2017 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function mc(t, e, n) {
      const r = n();
      return (
        e &&
          (function (t) {
            const e = t.getError();
            if (e !== t.NO_ERROR)
              throw new Error(
                "WebGL Error: " +
                  (function (t, e) {
                    switch (e) {
                      case t.NO_ERROR:
                        return "NO_ERROR";
                      case t.INVALID_ENUM:
                        return "INVALID_ENUM";
                      case t.INVALID_VALUE:
                        return "INVALID_VALUE";
                      case t.INVALID_OPERATION:
                        return "INVALID_OPERATION";
                      case t.INVALID_FRAMEBUFFER_OPERATION:
                        return "INVALID_FRAMEBUFFER_OPERATION";
                      case t.OUT_OF_MEMORY:
                        return "OUT_OF_MEMORY";
                      case t.CONTEXT_LOST_WEBGL:
                        return "CONTEXT_LOST_WEBGL";
                      default:
                        return "Unknown error code " + e;
                    }
                  })(t, e)
              );
          })(t),
        r
      );
    }
    !(function (t) {
      (t[(t.DENSE = 0)] = "DENSE"), (t[(t.SHARED_BATCH = 1)] = "SHARED_BATCH");
    })(uc || (uc = {})),
      (function (t) {
        (t[(t.RENDER = 0)] = "RENDER"),
          (t[(t.UPLOAD = 1)] = "UPLOAD"),
          (t[(t.PIXELS = 2)] = "PIXELS"),
          (t[(t.DOWNLOAD = 3)] = "DOWNLOAD");
      })(cc || (cc = {})),
      (function (t) {
        (t[(t.UNPACKED_FLOAT16 = 0)] = "UNPACKED_FLOAT16"),
          (t[(t.UNPACKED_FLOAT32 = 1)] = "UNPACKED_FLOAT32"),
          (t[(t.PACKED_4X1_UNSIGNED_BYTE = 2)] = "PACKED_4X1_UNSIGNED_BYTE"),
          (t[(t.PACKED_2X2_FLOAT32 = 3)] = "PACKED_2X2_FLOAT32"),
          (t[(t.PACKED_2X2_FLOAT16 = 4)] = "PACKED_2X2_FLOAT16");
      })(lc || (lc = {}));
    function gc(t) {
      return !!(
        Object(En.ob)().getBool("WEBGL_RENDER_FLOAT32_ENABLED") ||
        0 === t ||
        (5.96e-8 < Math.abs(t) && Math.abs(t) < 65504)
      );
    }
    function bc(t, e, n) {
      return Ic(
        t,
        e,
        () => t.getExtension(n),
        'Extension "' + n + '" not supported on this browser.'
      );
    }
    function vc(t, e, n) {
      const r = Ic(
        t,
        e,
        () => t.createShader(t.FRAGMENT_SHADER),
        "Unable to create fragment WebGLShader."
      );
      if (
        (mc(t, e, () => t.shaderSource(r, n)),
        mc(t, e, () => t.compileShader(r)),
        !1 === t.getShaderParameter(r, t.COMPILE_STATUS))
      )
        throw (
          ((function (t, e) {
            const n = yc.exec(e);
            if (null == n)
              return (
                console.log("Couldn't parse line number in error: " + e),
                void console.log(t)
              );
            const r = +n[1],
              a = t.split("\n"),
              i = a.length.toString().length + 2,
              o = a.map((t, e) => En.Cd.rightPad((e + 1).toString(), i) + t);
            let s = 0;
            for (let t = 0; t < o.length; t++) s = Math.max(o[t].length, s);
            const u = o.slice(0, r - 1),
              c = o.slice(r - 1, r),
              l = o.slice(r);
            console.log(u.join("\n")),
              console.log(e.split("\n")[0]),
              console.log(
                "%c " + En.Cd.rightPad(c[0], s),
                "border:1px solid red; background-color:#e3d2d2; color:#a61717"
              ),
              console.log(l.join("\n"));
          })(n, t.getShaderInfoLog(r)),
          new Error("Failed to compile fragment shader."))
        );
      return r;
    }
    const yc = /ERROR: [0-9]+:([0-9]+):/g;
    function xc(t, e, n) {
      if (
        (mc(t, e, () => t.validateProgram(n)),
        !1 === t.getProgramParameter(n, t.VALIDATE_STATUS))
      )
        throw (
          (console.log(t.getProgramInfoLog(n)),
          new Error("Shader program validation failed."))
        );
    }
    function wc(t, e, n, r, a, i, o, s) {
      const u = t.getAttribLocation(n, r);
      return (
        -1 !== u &&
        (mc(t, e, () => t.bindBuffer(t.ARRAY_BUFFER, a)),
        mc(t, e, () => t.vertexAttribPointer(u, i, t.FLOAT, !1, o, s)),
        mc(t, e, () => t.enableVertexAttribArray(u)),
        !0)
      );
    }
    function Cc(t, e, n, r, a, i) {
      mc(t, e, () =>
        (function (t, e, n, r) {
          kc(t, r),
            mc(t, e, () => t.activeTexture(t.TEXTURE0 + r)),
            mc(t, e, () => t.bindTexture(t.TEXTURE_2D, n));
        })(t, e, r, i)
      ),
        mc(t, e, () => t.uniform1i(a, i));
    }
    function Oc(t, e, n, r) {
      mc(t, e, () => t.bindFramebuffer(t.FRAMEBUFFER, r)),
        mc(t, e, () =>
          t.framebufferTexture2D(
            t.FRAMEBUFFER,
            t.COLOR_ATTACHMENT0,
            t.TEXTURE_2D,
            n,
            0
          )
        );
    }
    function Ec(t, e, n) {
      mc(t, e, () => t.bindFramebuffer(t.FRAMEBUFFER, n)),
        mc(t, e, () =>
          t.framebufferTexture2D(
            t.FRAMEBUFFER,
            t.COLOR_ATTACHMENT0,
            t.TEXTURE_2D,
            null,
            0
          )
        );
    }
    function Sc(t) {
      const e = t.checkFramebufferStatus(t.FRAMEBUFFER);
      if (e !== t.FRAMEBUFFER_COMPLETE)
        throw new Error(
          "Error binding framebuffer: " +
            (function (t, e) {
              switch (e) {
                case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
                  return "FRAMEBUFFER_INCOMPLETE_ATTACHMENT";
                case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
                  return "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";
                case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
                  return "FRAMEBUFFER_INCOMPLETE_DIMENSIONS";
                case t.FRAMEBUFFER_UNSUPPORTED:
                  return "FRAMEBUFFER_UNSUPPORTED";
                default:
                  return "unknown error " + e;
              }
            })(t, e)
        );
    }
    function Ic(t, e, n, r) {
      const a = mc(t, e, () => n());
      if (null == a) throw new Error(r);
      return a;
    }
    function kc(t, e) {
      const n = t.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1,
        r = e + t.TEXTURE0;
      if (r < t.TEXTURE0 || r > n) {
        throw new Error(
          `textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${n}]`}.`
        );
      }
    }
    function Nc(t, e = 2) {
      return En.Cd.sizeFromShape(t.slice(0, t.length - e));
    }
    function Rc(t) {
      if (0 === t.length)
        throw Error("Cannot get rows and columns of an empty shape array.");
      return [t.length > 1 ? t[t.length - 2] : 1, t[t.length - 1]];
    }
    function Ac(t) {
      let e = [1, 1, 1];
      return (
        0 === t.length ||
          (1 === t.length && 1 === t[0]) ||
          (e = [Nc(t), ...Rc(t)]),
        e
      );
    }
    function Tc(t) {
      return t % 2 == 0;
    }
    function _c(t, e) {
      if (((t = t.slice(-2)), (e = e.slice(-2)), En.Cd.arraysEqual(t, e)))
        return !0;
      if (!t.length || !e.length) return !0;
      if (0 === t[0] || 0 === t[1] || 0 === e[0] || 0 === e[1]) return !0;
      if (t.length !== e.length) {
        const n = t.slice(-1)[0],
          r = e.slice(-1)[0];
        if (n === r) return !0;
        if (Tc(n) && Tc(r) && (1 === t[0] || 1 === e[0])) return !0;
      }
      return t[1] === e[1] && Tc(t[0]) && Tc(e[0]);
    }
    let Dc, Fc;
    function Mc(t, e) {
      return null != t.getExtension(e);
    }
    function jc(t) {
      try {
        if (null != sc(t)) return !0;
      } catch (t) {
        return !1;
      }
      return !1;
    }
    function $c(t) {
      if (0 === t) return !1;
      const e = sc(t);
      if (1 !== t) {
        if (Mc(e, "EXT_color_buffer_float")) return Bc(e);
        const t = "EXT_color_buffer_half_float";
        if (Mc(e, t)) {
          const n = e.getExtension(t);
          return (function (t, e) {
            const n = fc(t, e),
              r = t.createTexture();
            t.bindTexture(t.TEXTURE_2D, r);
            t.texImage2D(
              t.TEXTURE_2D,
              0,
              n.internalFormatHalfFloat,
              1,
              1,
              0,
              n.textureFormatFloat,
              n.textureTypeHalfFloat,
              null
            );
            const a = t.createFramebuffer();
            t.bindFramebuffer(t.FRAMEBUFFER, a),
              t.framebufferTexture2D(
                t.FRAMEBUFFER,
                t.COLOR_ATTACHMENT0,
                t.TEXTURE_2D,
                r,
                0
              );
            const i =
              t.checkFramebufferStatus(t.FRAMEBUFFER) ===
              t.FRAMEBUFFER_COMPLETE;
            return (
              t.bindTexture(t.TEXTURE_2D, null),
              t.bindFramebuffer(t.FRAMEBUFFER, null),
              t.deleteTexture(r),
              t.deleteFramebuffer(a),
              i
            );
          })(e, n);
        }
        return !1;
      }
      if (!Mc(e, "OES_texture_float")) return !1;
      if (!Mc(e, "WEBGL_color_buffer_float")) return !1;
      return Bc(e);
    }
    function Bc(t) {
      const e = fc(t),
        n = t.createTexture();
      t.bindTexture(t.TEXTURE_2D, n);
      t.texImage2D(
        t.TEXTURE_2D,
        0,
        e.internalFormatFloat,
        1,
        1,
        0,
        e.textureFormatFloat,
        e.textureTypeFloat,
        null
      );
      const r = t.createFramebuffer();
      t.bindFramebuffer(t.FRAMEBUFFER, r),
        t.framebufferTexture2D(
          t.FRAMEBUFFER,
          t.COLOR_ATTACHMENT0,
          t.TEXTURE_2D,
          n,
          0
        );
      const a =
        t.checkFramebufferStatus(t.FRAMEBUFFER) === t.FRAMEBUFFER_COMPLETE;
      return (
        t.bindTexture(t.TEXTURE_2D, null),
        t.bindFramebuffer(t.FRAMEBUFFER, null),
        t.deleteTexture(n),
        t.deleteFramebuffer(r),
        a
      );
    }
    /**
     * @license
     * Copyright 2019 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const Pc = Object(En.ob)();
    Pc.registerFlag("HAS_WEBGL", () => Pc.getNumber("WEBGL_VERSION") > 0),
      Pc.registerFlag("WEBGL_VERSION", () => (jc(2) ? 2 : jc(1) ? 1 : 0)),
      Pc.registerFlag(
        "WEBGL_BUFFER_SUPPORTED",
        () => 2 === Pc.get("WEBGL_VERSION")
      ),
      Pc.registerFlag("WEBGL_CPU_FORWARD", () => !0),
      Pc.registerFlag("WEBGL_FORCE_F16_TEXTURES", () => !1),
      Pc.registerFlag("WEBGL_PACK", () => Pc.getBool("HAS_WEBGL")),
      Pc.registerFlag("WEBGL_PACK_NORMALIZATION", () =>
        Pc.getBool("WEBGL_PACK")
      ),
      Pc.registerFlag("WEBGL_PACK_CLIP", () => Pc.getBool("WEBGL_PACK")),
      Pc.registerFlag("WEBGL_PACK_DEPTHWISECONV", () => !1),
      Pc.registerFlag("WEBGL_PACK_BINARY_OPERATIONS", () =>
        Pc.getBool("WEBGL_PACK")
      ),
      Pc.registerFlag("WEBGL_PACK_UNARY_OPERATIONS", () =>
        Pc.getBool("WEBGL_PACK")
      ),
      Pc.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS", () =>
        Pc.getBool("WEBGL_PACK")
      ),
      Pc.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS", () =>
        Pc.getBool("WEBGL_PACK")
      ),
      Pc.registerFlag("WEBGL_PACK_REDUCE", () => Pc.getBool("WEBGL_PACK")),
      Pc.registerFlag("WEBGL_LAZILY_UNPACK", () => Pc.getBool("WEBGL_PACK")),
      Pc.registerFlag("WEBGL_CONV_IM2COL", () => Pc.getBool("WEBGL_PACK")),
      Pc.registerFlag("WEBGL_MAX_TEXTURE_SIZE", () =>
        (function (t) {
          if (null == Dc) {
            const e = sc(t);
            Dc = e.getParameter(e.MAX_TEXTURE_SIZE);
          }
          return Dc;
        })(Pc.getNumber("WEBGL_VERSION"))
      ),
      Pc.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER", () =>
        (function (t) {
          if (null == Fc) {
            const e = sc(t);
            Fc = e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS);
          }
          return Math.min(16, Fc);
        })(Pc.getNumber("WEBGL_VERSION"))
      ),
      Pc.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION", () => {
        const t = Pc.getNumber("WEBGL_VERSION");
        return 0 === t
          ? 0
          : (function (t) {
              if (0 === t) return 0;
              let e;
              const n = sc(t);
              return (
                (e =
                  Mc(n, "EXT_disjoint_timer_query_webgl2") && 2 === t
                    ? 2
                    : Mc(n, "EXT_disjoint_timer_query")
                    ? 1
                    : 0),
                e
              );
            })(t);
      }),
      Pc.registerFlag(
        "WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",
        () =>
          Pc.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 &&
          !En.gb.isMobile()
      ),
      Pc.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE", () =>
        (function (t) {
          if (0 === t) return !1;
          const e = sc(t);
          if (1 === t) {
            if (!Mc(e, "OES_texture_float")) return !1;
          } else if (!Mc(e, "EXT_color_buffer_float")) return !1;
          return Bc(e);
        })(Pc.getNumber("WEBGL_VERSION"))
      ),
      Pc.registerFlag(
        "WEBGL_RENDER_FLOAT32_ENABLED",
        () =>
          !Pc.getBool("WEBGL_FORCE_F16_TEXTURES") &&
          Pc.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")
      ),
      Pc.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED", () =>
        $c(Pc.getNumber("WEBGL_VERSION"))
      ),
      Pc.registerFlag("WEBGL_FENCE_API_ENABLED", () => {
        return (
          2 === (t = Pc.getNumber("WEBGL_VERSION")) && null != sc(t).fenceSync
        );
        var t;
      }),
      Pc.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM", () =>
        Pc.getBool("WEBGL_RENDER_FLOAT32_ENABLED") ? 4 : 0
      );
    /**
     * @license
     * Copyright 2019 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class Lc {
      constructor(t, e) {
        (this.outputShape = []),
          (this.outputShape = t),
          (this.variableNames = e.map((t, e) => "T" + e));
        const n = [];
        this.variableNames.forEach((t) => {
          n.push(`float v${t} = get${t}AtOutCoords();`);
        });
        const r = this.variableNames.map((t) => "v" + t).join(" + ");
        this.userCode = `\n      void main() {\n        ${n.join(
          "\n        "
        )}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `;
      }
    }
    /**
     * @license
     * Copyright 2019 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class zc {
      constructor(t, e) {
        (this.outputShape = []),
          (this.packedInputs = !0),
          (this.packedOutput = !0),
          (this.outputShape = t),
          (this.variableNames = e.map((t, e) => "T" + e));
        const n = [];
        this.variableNames.forEach((t) => {
          n.push(`vec4 v${t} = get${t}AtOutCoords();`);
        });
        const r = this.variableNames.map((t) => "v" + t).join(" + ");
        this.userCode = `\n      void main() {\n        ${n.join(
          "\n        "
        )}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `;
      }
    }
    /**
     * @license
     * Copyright 2017 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class Wc {
      constructor(t, e, n) {
        this.variableNames = ["A"];
        const r = t.windowSize,
          a = t.batchSize,
          i = t.inSize,
          o = Math.ceil(i / r);
        n || this.variableNames.push("bestIndicesA"),
          (this.outputShape = [a, o]);
        const s = "max" === e ? ">" : "<",
          u = n
            ? "inOffset + i;"
            : "round(getBestIndicesA(batch, inOffset + i));";
        this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${u};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${s} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `;
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Vc(t, e) {
      return ["x", "y", "z", "w", "u", "v"].slice(0, e).map((e) => `${t}.${e}`);
    }
    function Uc(t, e) {
      return 1 === e ? [t] : Vc(t, e);
    }
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function Gc() {
      let t, e, n, r, a, i, o, s, u, c;
      return (
        2 === Object(En.ob)().getNumber("WEBGL_VERSION")
          ? ((t = "#version 300 es"),
            (e = "in"),
            (n = "out"),
            (r = "in"),
            (a = "texture"),
            (i = "outputColor"),
            (o = "out vec4 outputColor;"),
            (s =
              "\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    "),
            (u = ""),
            (c =
              "\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "))
          : ((t = ""),
            (e = "attribute"),
            (n = "varying"),
            (r = "varying"),
            (a = "texture2D"),
            (i = "gl_FragColor"),
            (o = ""),
            (s =
              "\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    "),
            (u =
              "\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    "),
            (c =
              "\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    ")),
        {
          version: t,
          attribute: e,
          varyingVs: n,
          varyingFs: r,
          texture2D: a,
          output: i,
          defineOutput: o,
          defineSpecialNaN: s,
          defineSpecialInf: u,
          defineRound: c,
        }
      );
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Hc(t, e, n = "index") {
      const r = En.Cd.computeStrides(e);
      return r
        .map(
          (e, a) =>
            `${`int ${t[a]} = ${n} / ${e}`}; ${
              a === r.length - 1
                ? `int ${t[a + 1]} = ${n} - ${t[a]} * ${e}`
                : `index -= ${t[a]} * ${e}`
            };`
        )
        .join("");
    }
    function qc(t) {
      const e = En.Cd.computeStrides(t).map((t) => t.toString());
      return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${e[0]} + coords.y * ${e[1]} + coords.z;\n  }\n`;
    }
    const Kc =
        "\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",
      { getBroadcastDims: Xc } = En.F;
    /**
     * @license
     * Copyright 2017 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Yc(t, e, n, r) {
      const a = [];
      t.forEach((t) => {
        const e = En.Cd.sizeFromShape(t.shapeInfo.logicalShape);
        t.shapeInfo.isUniform
          ? a.push(`uniform float ${t.name}${e > 1 ? `[${e}]` : ""};`)
          : (a.push(`uniform sampler2D ${t.name};`),
            a.push(`uniform int offset${t.name};`));
      });
      const i = a.join("\n"),
        o = t
          .map((t) =>
            (function (t, e, n = !1) {
              let r = "";
              r += n ? Qc(t) : Jc(t);
              const a = t.shapeInfo.logicalShape,
                i = e.logicalShape;
              a.length <= i.length &&
                (r += n
                  ? (function (t, e) {
                      const n = t.name,
                        r = n.charAt(0).toUpperCase() + n.slice(1),
                        a = "get" + r + "AtOutCoords",
                        i = t.shapeInfo.logicalShape.length,
                        o = e.logicalShape.length,
                        s = Xc(t.shapeInfo.logicalShape, e.logicalShape),
                        u = ol(o),
                        c = o - i;
                      let l;
                      const h = ["x", "y", "z", "w", "u", "v"];
                      l =
                        0 === i
                          ? ""
                          : o < 2 && s.length >= 1
                          ? "coords = 0;"
                          : s.map((t) => `coords.${h[t + c]} = 0;`).join("\n");
                      let d = "";
                      d =
                        o < 2 && i > 0
                          ? "coords"
                          : t.shapeInfo.logicalShape
                              .map((t, e) => "coords." + h[e + c])
                              .join(", ");
                      let p = "return outputValue;";
                      const f =
                          1 === En.Cd.sizeFromShape(t.shapeInfo.logicalShape),
                        m = 1 === En.Cd.sizeFromShape(e.logicalShape);
                      if (1 !== i || f || m) {
                        if (f && !m)
                          p =
                            1 === o
                              ? "\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      "
                              : "\n        return vec4(outputValue.x);\n      ";
                        else if (s.length) {
                          const t = i - 2,
                            e = i - 1;
                          s.indexOf(t) > -1 && s.indexOf(e) > -1
                            ? (p = "return vec4(outputValue.x);")
                            : s.indexOf(t) > -1
                            ? (p =
                                "return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);")
                            : s.indexOf(e) > -1 &&
                              (p =
                                "return vec4(outputValue.xx, outputValue.zz);");
                        }
                      } else
                        p =
                          "\n      return vec4(outputValue.xy, outputValue.xy);\n    ";
                      return `\n    vec4 ${a}() {\n      ${u} coords = getOutputCoords();\n      ${l}\n      vec4 outputValue = get${r}(${d});\n      ${p}\n    }\n  `;
                    })(t, e)
                  : (function (t, e) {
                      const n = t.name,
                        r = n.charAt(0).toUpperCase() + n.slice(1),
                        a = "get" + r + "AtOutCoords",
                        i = e.texShape,
                        o = t.shapeInfo.texShape,
                        s = t.shapeInfo.logicalShape.length,
                        u = e.logicalShape.length;
                      if (
                        !t.shapeInfo.isUniform &&
                        s === u &&
                        null == t.shapeInfo.flatOffset &&
                        En.Cd.arraysEqual(o, i)
                      )
                        return `\n      float ${a}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;
                      const c = ol(u),
                        l = Xc(t.shapeInfo.logicalShape, e.logicalShape),
                        h = u - s;
                      let d;
                      const p = ["x", "y", "z", "w", "u", "v"];
                      d =
                        0 === s
                          ? ""
                          : u < 2 && l.length >= 1
                          ? "coords = 0;"
                          : l.map((t) => `coords.${p[t + h]} = 0;`).join("\n");
                      let f = "";
                      f =
                        u < 2 && s > 0
                          ? "coords"
                          : t.shapeInfo.logicalShape
                              .map((t, e) => "coords." + p[e + h])
                              .join(", ");
                      return `\n    float ${a}() {\n      ${c} coords = getOutputCoords();\n      ${d}\n      return get${r}(${f});\n    }\n  `;
                    })(t, e));
              return r;
            })(t, e, r)
          )
          .join("\n"),
        s = e.texShape,
        u = Gc(),
        c = (function (t) {
          return `\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${t.texture2D}(textureSampler, uv).r;\n    }\n  `;
        })(u);
      let l,
        h,
        d = (function (t) {
          return `${t.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${t.varyingFs} vec2 resultUV;\n    ${t.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${t.defineSpecialNaN}\n    ${t.defineSpecialInf}\n    ${t.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${Zc}\n    ${tl}\n    ${el}\n  `;
        })(u);
      e.isPacked
        ? ((l = (function (t, e) {
            switch (t.length) {
              case 0:
                return rl();
              case 1:
                return (function (t, e) {
                  const n = [Math.ceil(e[0] / 2), Math.ceil(e[1] / 2)];
                  if (1 === n[0])
                    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${n[1]}.0);\n      }\n    `;
                  if (1 === n[1])
                    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${n[0]}.0);\n      }\n    `;
                  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return 2 * (resTexRC.x * ${n[1]} + resTexRC.y);\n    }\n  `;
                })(0, e);
              case 2:
                return (function (t, e) {
                  const n = [Math.ceil(e[0] / 2), Math.ceil(e[1] / 2)];
                  if (En.Cd.arraysEqual(t, e))
                    return `\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${n[0]}, ${n[1]}));\n      }\n    `;
                  const r = Math.ceil(t[1] / 2);
                  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec2(r, c);\n    }\n  `;
                })(t, e);
              case 3:
                return (function (t, e) {
                  const n = [Math.ceil(e[0] / 2), Math.ceil(e[1] / 2)],
                    r = Math.ceil(t[2] / 2),
                    a = r * Math.ceil(t[1] / 2);
                  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;
                })(t, e);
              default:
                return (function (t, e) {
                  const n = [Math.ceil(e[0] / 2), Math.ceil(e[1] / 2)],
                    r = Math.ceil(t[t.length - 1] / 2),
                    a = r * Math.ceil(t[t.length - 2] / 2);
                  let i = a,
                    o = "",
                    s = "b, r, c";
                  for (let e = 2; e < t.length - 1; e++)
                    (i *= t[t.length - e - 1]),
                      (o =
                        `\n      int b${e} = index / ${i};\n      index -= b${e} * ${i};\n    ` +
                        o),
                      (s = `b${e}, ` + s);
                  return `\n    ivec${t.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      ${o}\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${t.length}(${s});\n    }\n  `;
                })(t, e);
            }
          })(e.logicalShape, s)),
          (h = (function (t) {
            return `\n    void setOutput(vec4 val) {\n      ${t.output} = val;\n    }\n  `;
          })(u)))
        : ((l = (function (t, e) {
            switch (t.length) {
              case 0:
                return rl();
              case 1:
                return (function (t, e) {
                  if (1 === e[0])
                    return `\n      int getOutputCoords() {\n        return int(resultUV.x * ${e[1]}.0);\n      }\n    `;
                  if (1 === e[1])
                    return `\n      int getOutputCoords() {\n        return int(resultUV.y * ${e[0]}.0);\n      }\n    `;
                  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      return resTexRC.x * ${e[1]} + resTexRC.y;\n    }\n  `;
                })(0, e);
              case 2:
                return (function (t, e) {
                  if (En.Cd.arraysEqual(t, e))
                    return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${e[0]}, ${e[1]}));\n      }\n    `;
                  if (1 === t[1])
                    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${e[0]}, ${e[1]}));\n        int index = resTexRC.x * ${e[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;
                  if (1 === t[0])
                    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${e[0]}, ${e[1]}));\n        int index = resTexRC.x * ${e[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;
                  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      int r = index / ${t[1]};\n      int c = index - r * ${t[1]};\n      return ivec2(r, c);\n    }\n  `;
                })(t, e);
              case 3:
                return (function (t, e) {
                  const n = Hc(["r", "c", "d"], t);
                  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      ${n}\n      return ivec3(r, c, d);\n    }\n  `;
                })(t, e);
              case 4:
                return (function (t, e) {
                  const n = Hc(["r", "c", "d", "d2"], t);
                  return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      ${n}\n      return ivec4(r, c, d, d2);\n    }\n  `;
                })(t, e);
              case 5:
                return (function (t, e) {
                  const n = Hc(["r", "c", "d", "d2", "d3"], t);
                  return `\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${e[0]},\n                             ${e[1]}));\n\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `;
                })(t, e);
              case 6:
                return (function (t, e) {
                  const n = Hc(["r", "c", "d", "d2", "d3", "d4"], t);
                  return `\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `;
                })(t, e);
              default:
                throw new Error(
                  t.length + "-D output sampling is not yet supported"
                );
            }
          })(e.logicalShape, s)),
          (h = (function (t) {
            return `\n    void setOutput(float val) {\n      ${t.output} = vec4(val, 0, 0, 0);\n    }\n  `;
          })(u))),
        r && (d += nl);
      return [d, c, h, i, l, o, n].join("\n");
    }
    function Jc(t) {
      const e = t.shapeInfo.logicalShape;
      switch (e.length) {
        case 0:
          return (function (t) {
            const e = t.name,
              n = "get" + e.charAt(0).toUpperCase() + e.slice(1);
            if (t.shapeInfo.isUniform) return `float ${n}() {return ${e};}`;
            const [r, a] = t.shapeInfo.texShape;
            if (1 === r && 1 === a)
              return `\n      float ${n}() {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;
            const [i, o] = t.shapeInfo.texShape,
              s = al(e);
            return `\n    float ${n}() {\n      vec2 uv = uvFromFlat(${i}, ${o}, ${s});\n      return sampleTexture(${e}, uv);\n    }\n  `;
          })(t);
        case 1:
          return (function (t) {
            const e = t.name,
              n = "get" + e.charAt(0).toUpperCase() + e.slice(1);
            if (t.shapeInfo.isUniform)
              return `\n      float ${n}(int index) {\n        ${il(
                t
              )}\n      }\n    `;
            const r = t.shapeInfo.texShape,
              a = r[0],
              i = r[1];
            if (1 === i && 1 === a)
              return `\n      float ${n}(int index) {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;
            const o = al(e);
            if (1 === i)
              return `\n      float ${n}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / ${a}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;
            if (1 === a)
              return `\n      float ${n}(int index) {\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / ${i}.0, 0.5);\n        return sampleTexture(${e}, uv);\n      }\n    `;
            return `\n    float ${n}(int index) {\n      vec2 uv = uvFromFlat(${a}, ${i}, index + ${o});\n      return sampleTexture(${e}, uv);\n    }\n  `;
          })(t);
        case 2:
          return (function (t) {
            const e = t.shapeInfo.logicalShape,
              n = t.name,
              r = "get" + n.charAt(0).toUpperCase() + n.slice(1),
              a = t.shapeInfo.texShape;
            if (null != a && En.Cd.arraysEqual(e, a)) {
              const t = a[0],
                e = a[1];
              return `\n    float ${r}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${e}.0, ${t}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;
            }
            const { newShape: i, keptDims: o } = En.Cd.squeezeShape(e),
              s = i;
            if (s.length < e.length) {
              const e = sl(t, s),
                n = ["row", "col"];
              return `\n      ${Jc(
                e
              )}\n      float ${r}(int row, int col) {\n        return ${r}(${ul(
                n,
                o
              )});\n      }\n    `;
            }
            if (t.shapeInfo.isUniform)
              return `\n      float ${r}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${
                e[1]
              }, 1)));\n        ${il(t)}\n      }\n    `;
            const u = a[0],
              c = a[1],
              l = al(n);
            if (1 === c)
              return `\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${l}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;
            if (1 === u)
              return `\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${l}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);\n      return sampleTexture(${n}, uv);\n    }\n  `;
            return `\n  float ${r}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${e[1]} + col + ${l};\n    vec2 uv = uvFromFlat(${u}, ${c}, index);\n    return sampleTexture(${n}, uv);\n  }\n`;
          })(t);
        case 3:
          return (function (t) {
            const e = t.shapeInfo.logicalShape,
              n = t.name,
              r = "get" + n.charAt(0).toUpperCase() + n.slice(1),
              a = e[1] * e[2],
              i = e[2],
              { newShape: o, keptDims: s } = En.Cd.squeezeShape(e),
              u = o;
            if (u.length < e.length) {
              const e = sl(t, u),
                n = ["row", "col", "depth"];
              return `\n        ${Jc(
                e
              )}\n        float ${r}(int row, int col, int depth) {\n          return ${r}(${ul(
                n,
                s
              )});\n        }\n      `;
            }
            if (t.shapeInfo.isUniform)
              return `\n      float ${r}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${a}, ${i}, 1)));\n        ${il(
                t
              )}\n      }\n    `;
            const c = t.shapeInfo.texShape,
              l = c[0],
              h = c[1],
              d = t.shapeInfo.flatOffset;
            if (h === a && null == d)
              return `\n        float ${r}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${i}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${h}.0, ${l}.0);\n          return sampleTexture(${n}, uv);\n        }\n      `;
            if (h === i && null == d)
              return `\n    float ${r}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${e[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}.0, ${l}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;
            const p = al(n);
            return `\n      float ${r}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${a} + col * ${i} + depth + ${p};\n        vec2 uv = uvFromFlat(${l}, ${h}, index);\n        return sampleTexture(${n}, uv);\n      }\n  `;
          })(t);
        case 4:
          return (function (t) {
            const e = t.shapeInfo.logicalShape,
              n = t.name,
              r = "get" + n.charAt(0).toUpperCase() + n.slice(1),
              a = e[3],
              i = e[2] * a,
              o = e[1] * i,
              { newShape: s, keptDims: u } = En.Cd.squeezeShape(e);
            if (s.length < e.length) {
              const e = sl(t, s),
                n = ["row", "col", "depth", "depth2"];
              return `\n      ${Jc(
                e
              )}\n      float ${r}(int row, int col, int depth, int depth2) {\n        return ${r}(${ul(
                n,
                u
              )});\n      }\n    `;
            }
            if (t.shapeInfo.isUniform)
              return `\n      float ${r}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${o}, ${i}, ${a}, 1)));\n        ${il(
                t
              )}\n      }\n    `;
            const c = t.shapeInfo.flatOffset,
              l = t.shapeInfo.texShape,
              h = l[0],
              d = l[1];
            if (d === o && null == c)
              return `\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${i}, ${a}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;
            if (d === a && null == c)
              return `\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${
                e[1] * e[2]
              }, ${
                e[2]
              }, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;
            const p = al(n);
            return `\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} +\n          depth * ${a} + depth2;\n      vec2 uv = uvFromFlat(${h}, ${d}, index + ${p});\n      return sampleTexture(${n}, uv);\n    }\n  `;
          })(t);
        case 5:
          return (function (t) {
            const e = t.shapeInfo.logicalShape,
              n = t.name,
              r = "get" + n.charAt(0).toUpperCase() + n.slice(1),
              a = e[4],
              i = e[3] * a,
              o = e[2] * i,
              s = e[1] * o,
              { newShape: u, keptDims: c } = En.Cd.squeezeShape(e);
            if (u.length < e.length) {
              const e = sl(t, u),
                n = ["row", "col", "depth", "depth2", "depth3"];
              return `\n      ${Jc(
                e
              )}\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        return ${r}(${ul(
                n,
                c
              )});\n      }\n    `;
            }
            if (t.shapeInfo.isUniform)
              return `\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${s}, ${o}, ${i}, ${a})) +\n          depth3;\n        ${il(
                t
              )}\n      }\n    `;
            const l = t.shapeInfo.flatOffset,
              h = t.shapeInfo.texShape,
              d = h[0],
              p = h[1];
            if (p === s && null == l)
              return `\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${o}, ${i}, ${a}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;
            if (p === a && null == l)
              return `\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${
                e[1] * e[2] * e[3]
              },\n               ${e[2] * e[3]}, ${
                e[3]
              }, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;
            const f = al(n);
            return `\n    float ${r}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${s} + col * ${o} + depth * ${i} +\n          depth2 * ${a} + depth3 + ${f};\n      vec2 uv = uvFromFlat(${d}, ${p}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `;
          })(t);
        case 6:
          return (function (t) {
            const e = t.shapeInfo.logicalShape,
              n = t.name,
              r = "get" + n.charAt(0).toUpperCase() + n.slice(1),
              { newShape: a, keptDims: i } = En.Cd.squeezeShape(e);
            if (a.length < e.length) {
              const e = sl(t, a),
                n = ["row", "col", "depth", "depth2", "depth3", "depth4"];
              return `\n      ${Jc(
                e
              )}\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${r}(${ul(
                n,
                i
              )});\n      }\n    `;
            }
            const o = e[5],
              s = e[4] * o,
              u = e[3] * s,
              c = e[2] * u,
              l = e[1] * c;
            if (t.shapeInfo.isUniform)
              return `\n      float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${l}, ${c}, ${u}, ${s})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${o}, 1)));\n        ${il(
                t
              )}\n      }\n    `;
            const h = t.shapeInfo.flatOffset,
              d = t.shapeInfo.texShape,
              p = d[0],
              f = d[1];
            if (f === l && null == h)
              return `\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${c}, ${u}, ${s}, ${o})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;
            if (f === o && null == h)
              return `\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${
                e[1] * e[2] * e[3] * e[4]
              },\n               ${e[2] * e[3] * e[4]},\n               ${
                e[3] * e[4]
              },\n               ${
                e[4]
              })) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;
            const m = al(n);
            return `\n    float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${l} + col * ${c} + depth * ${u} +\n          depth2 * ${s} + depth3 * ${o} + depth4 + ${m};\n      vec2 uv = uvFromFlat(${p}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `;
          })(t);
        default:
          throw new Error(e.length + "-D input sampling is not yet supported");
      }
    }
    function Qc(t) {
      switch (t.shapeInfo.logicalShape.length) {
        case 0:
          return (function (t) {
            const e = t.name,
              n = "get" + e.charAt(0).toUpperCase() + e.slice(1),
              r = Gc();
            return `\n    vec4 ${n}() {\n      return ${r.texture2D}(${e}, halfCR);\n    }\n  `;
          })(t);
        case 1:
          return (function (t) {
            const e = t.name,
              n = "get" + e.charAt(0).toUpperCase() + e.slice(1),
              r = t.shapeInfo.texShape,
              a = [Math.ceil(r[0] / 2), Math.ceil(r[1] / 2)],
              i = Gc();
            return `\n    vec4 ${n}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${a[0]}, ${a[1]}, index);\n      return ${i.texture2D}(${e}, uv);\n    }\n  `;
          })(t);
        case 2:
          return (function (t) {
            const e = t.shapeInfo.logicalShape,
              n = t.name,
              r = "get" + n.charAt(0).toUpperCase() + n.slice(1),
              a = t.shapeInfo.texShape,
              i = a[0],
              o = a[1],
              s = Gc();
            if (null != a && En.Cd.arraysEqual(e, a))
              return `\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}.0, ${i}.0);\n\n        return ${s.texture2D}(${n}, uv);\n      }\n    `;
            const u = [Math.ceil(a[0] / 2), Math.ceil(a[1] / 2)],
              c = Math.ceil(e[1] / 2);
            return `\n    vec4 ${r}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${c}, ${u[0]}, ${u[1]}, row, col);\n      return ${s.texture2D}(${n}, uv);\n    }\n  `;
          })(t);
        case 3:
          return (function (t) {
            const e = t.shapeInfo.logicalShape,
              n = t.name,
              r = "get" + n.charAt(0).toUpperCase() + n.slice(1),
              a = t.shapeInfo.texShape,
              i = [Math.ceil(a[0] / 2), Math.ceil(a[1] / 2)];
            if (1 === e[0]) {
              const n = e.slice(1),
                a = [1, 2],
                i = sl(t, n),
                o = ["b", "row", "col"];
              return `\n        ${Qc(
                i
              )}\n        vec4 ${r}(int b, int row, int col) {\n          return ${r}(${ul(
                o,
                a
              )});\n        }\n      `;
            }
            const o = i[0],
              s = i[1],
              u = Math.ceil(e[2] / 2),
              c = u * Math.ceil(e[1] / 2),
              l = Gc();
            return `\n    vec4 ${r}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${o}, ${s}, ${c}, ${u}, b, row, col);\n      return ${l.texture2D}(${n}, uv);\n    }\n  `;
          })(t);
        default:
          return (function (t) {
            const e = t.shapeInfo.logicalShape,
              n = e.length,
              r = t.name,
              a = "get" + r.charAt(0).toUpperCase() + r.slice(1),
              i = t.shapeInfo.texShape,
              o = [Math.ceil(i[0] / 2), Math.ceil(i[1] / 2)],
              s = o[0],
              u = o[1],
              c = Math.ceil(e[n - 1] / 2);
            let l = c * Math.ceil(e[n - 2] / 2),
              h = "int b, int row, int col",
              d = `b * ${l} + (row / 2) * ${c} + (col / 2)`;
            for (let t = 2; t < n - 1; t++)
              (h = `int b${t}, ` + h),
                (l *= e[n - t - 1]),
                (d = `b${t} * ${l} + ` + d);
            const p = Gc();
            return `\n    vec4 ${a}(${h}) {\n      int index = ${d};\n      int texR = index / ${u};\n      int texC = index - texR * ${u};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${u}, ${s});\n      return ${p.texture2D}(${r}, uv);\n    }\n  `;
          })(t);
      }
    }
    const Zc =
        "\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",
      tl =
        "\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",
      el =
        "\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",
      nl =
        "\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";
    function rl() {
      return "\n    int getOutputCoords() {\n      return 0;\n    }\n  ";
    }
    function al(t) {
      return "offset" + t;
    }
    function il(t) {
      const e = t.name,
        n = En.Cd.sizeFromShape(t.shapeInfo.logicalShape);
      return n < 2
        ? `return ${e};`
        : `\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${e}[i];\n      }\n    }\n  `;
    }
    function ol(t) {
      if (t <= 1) return "int";
      if (2 === t) return "ivec2";
      if (3 === t) return "ivec3";
      if (4 === t) return "ivec4";
      if (5 === t) return "ivec5";
      if (6 === t) return "ivec6";
      throw Error(`GPU for rank ${t} is not yet supported`);
    }
    function sl(t, e) {
      const n = JSON.parse(JSON.stringify(t));
      return (n.shapeInfo.logicalShape = e), n;
    }
    function ul(t, e) {
      return e.map((e) => t[e]).join(", ");
    }
    /**
     * @license
     * Copyright 2019 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class cl {
      constructor(t, e, n, r) {
        (this.variableNames = ["A"]),
          (this.packedInputs = !0),
          (this.packedOutput = !0),
          En.Cd.assert(
            t.length > 2,
            () =>
              `Packed arg${
                n.charAt(0).toUpperCase() + n.slice(1)
              } supports only inputs with rank above 2.`
          );
        const a = t[t.length - 1],
          i = Math.ceil(a / e);
        (this.outputShape = t.slice(0, -1)),
          i > 1 && this.outputShape.push(i),
          r || this.variableNames.push("bestIndicesA");
        const o = this.outputShape,
          s = o.length,
          u = ol(s),
          c = Uc("coords", s);
        let l, h;
        if (1 === i) {
          h = s + 1;
          const t = ol(h);
          l = `\n        ${t} sourceLocR = ${t}(${c.join()}, 0);\n        ++${
            c[s - 1]
          };\n        ${t} sourceLocG = ${t}(${c.join()}, 0);\n        ++${
            c[s - 2]
          };\n        ${t} sourceLocA = ${t}(${c.join()}, 0);\n        --${
            c[s - 1]
          };\n        ${t} sourceLocB = ${t}(${c.join()}, 0);\n        --${
            c[s - 2]
          };`;
        } else
          (h = s),
            (l = `\n        ${u} sourceLocR = coords;\n        ++${
              c[s - 1]
            };\n        ${u} sourceLocG = coords;\n        ++${
              c[s - 2]
            };\n        ${u} sourceLocA = coords;\n        --${
              c[s - 1]
            };\n        ${u} sourceLocB = coords;\n        --${c[s - 2]};`);
        const d = ["x", "y", "z", "w", "u", "v"].slice(0, h),
          p = "." + d[h - 1],
          f = d.map((t) => "int " + t),
          m = Uc("sourceLocR", h - 1).concat("inIdx.r"),
          g = Uc("sourceLocG", h - 1).concat("inIdx.g"),
          b = Uc("sourceLocB", h - 1).concat("inIdx.b"),
          v = Uc("sourceLocA", h - 1).concat("inIdx.a"),
          y = "max" === n ? "greaterThan" : "lessThan",
          x = r
            ? ""
            : `\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${b.join()}),\n                             getBestIndicesAChannel(${v.join()})));`,
          w = `vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${g.join()}) : 0.,\n            hasNextRow ? getAChannel(${b.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${v.join()}) : 0.)`,
          C = r
            ? ""
            : `\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${d.join()}),\n                                          vec2(${d
                .slice(-2)
                .join()}));\n      }`;
        this.userCode = `\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${d.join()}),\n                               vec2(${d
          .slice(-2)
          .join()}));\n      }\n      ${C}\n      void main() {\n        ${u} coords = getOutputCoords();\n        bool hasNextCol = ${
          c[s - 1]
        } < ${o[s - 1] - 1};\n        bool hasNextRow = ${c[s - 2]} < ${
          o[s - 2] - 1
        };\n        ${l}\n        ivec4 srcIdx = ivec4(sourceLocR${p}, sourceLocG${p},\n          sourceLocB${p}, sourceLocA${p}) * ${e};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${w};\n\n        for (int i = 0; i < ${e}; i++) {\n          inIdx = srcIdx;\n          ${x}\n          vec4 candidate = ${w};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${y}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `;
      }
    }
    /**
     * @license
     * Copyright 2017 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class ll {
      constructor(t) {
        (this.variableNames = ["dy"]), (this.outputShape = t.inShape);
        const e = t.filterHeight,
          n = t.filterWidth,
          r = t.strideHeight,
          a = t.strideWidth,
          i = t.dilationHeight,
          o = t.dilationWidth,
          s = t.effectiveFilterHeight,
          u = t.effectiveFilterWidth,
          c = s - 1 - t.padInfo.top,
          l = u - 1 - t.padInfo.left,
          h = 1 / (e * n);
        this.userCode = `\n      const ivec2 pads = ivec2(${c}, ${l});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${s};\n            wR += ${i}) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${u};\n            wC+= ${o}) {\n            float dyC = float(dyCCorner + wC) / ${a}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;
      }
    }
    class hl {
      constructor(t) {
        (this.variableNames = ["dy"]), (this.outputShape = t.inShape);
        const e = t.filterDepth,
          n = t.filterHeight,
          r = t.filterWidth,
          a = t.strideDepth,
          i = t.strideHeight,
          o = t.strideWidth,
          s = t.dilationDepth,
          u = t.dilationHeight,
          c = t.dilationWidth,
          l = t.effectiveFilterDepth,
          h = t.effectiveFilterHeight,
          d = t.effectiveFilterWidth,
          p = l - 1 - t.padInfo.front,
          f = h - 1 - t.padInfo.top,
          m = d - 1 - t.padInfo.left,
          g = 1 / (e * n * r);
        this.userCode = `\n      const ivec3 pads = ivec3(${p}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${l};\n            wD += ${s}) {\n          float dyD = float(dyDCorner + wD) / ${a}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${u}) {\n            float dyR = float(dyRCorner + wR) / ${i}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${d};\n                wC += ${c}) {\n              float dyC = float(dyCCorner + wC) / ${o}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;
      }
    }
    /**
     * @license
     * Copyright 2017 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class dl {
      constructor(t, e, n, r, a, i) {
        (this.outputShape = []),
          (this.variableNames = ["x", "mean", "variance"]),
          En.F.assertAndGetBroadcastShape(t, e),
          En.F.assertAndGetBroadcastShape(t, n);
        let o = "0.0";
        null != r &&
          (En.F.assertAndGetBroadcastShape(t, r),
          this.variableNames.push("offset"),
          (o = "getOffsetAtOutCoords()"));
        let s = "1.0";
        null != a &&
          (En.F.assertAndGetBroadcastShape(t, a),
          this.variableNames.push("scale"),
          (s = "getScaleAtOutCoords()")),
          (this.outputShape = t),
          (this.userCode = `\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${o};\n        float scale = ${s};\n        float inv = scale * inversesqrt(variance + float(${i}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `);
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class pl {
      constructor(t, e, n, r, a, i) {
        (this.packedInputs = !0),
          (this.packedOutput = !0),
          (this.variableNames = ["x", "mean", "variance"]),
          En.F.assertAndGetBroadcastShape(t, e),
          En.F.assertAndGetBroadcastShape(t, n);
        let o = "vec4(0.0)";
        null != r &&
          (En.F.assertAndGetBroadcastShape(t, r),
          this.variableNames.push("offset"),
          (o = "getOffsetAtOutCoords()"));
        let s = "vec4(1.0)";
        null != a &&
          (En.F.assertAndGetBroadcastShape(t, a),
          this.variableNames.push("scale"),
          (s = "getScaleAtOutCoords()")),
          (this.outputShape = t),
          (this.userCode = `\n      void main() {\n        vec4 offset = ${o};\n        vec4 scale = ${s};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${i}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `);
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const fl = "return areal * breal - aimag * bimag;",
      ml = "return areal * bimag + aimag * breal;";
    class gl {
      constructor(t, e, n) {
        (this.variableNames = ["AReal", "AImag", "BReal", "BImag"]),
          (this.outputShape = En.F.assertAndGetBroadcastShape(e, n)),
          (this.userCode = `\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${t}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `);
      }
    }
    /**
     * @license
     * Copyright 2017 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const bl = "return a + b;",
      vl = "return a - b;",
      yl = "return a * b;",
      xl = "return (a < 0.) ? b * a : a;";
    class wl {
      constructor(t, e, n) {
        (this.variableNames = ["A", "B"]),
          (this.outputShape = En.F.assertAndGetBroadcastShape(e, n)),
          (this.userCode = `\n      float binaryOperation(float a, float b) {\n        ${t}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `);
      }
    }
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const Cl =
      "\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";
    class Ol {
      constructor(t, e, n, r = !1) {
        (this.variableNames = ["A", "B"]),
          (this.supportsBroadcasting = !0),
          (this.packedInputs = !0),
          (this.packedOutput = !0),
          (this.outputShape = En.F.assertAndGetBroadcastShape(e, n));
        const a = this.outputShape.length;
        let i = "";
        if (r)
          if (0 === a || 1 === En.Cd.sizeFromShape(this.outputShape))
            i =
              "\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";
          else {
            if (
              ((i = `\n          ${ol(
                a
              )} coords = getOutputCoords();\n        `),
              1 === a)
            )
              i += `\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;
            else {
              const t = Uc("coords", a);
              i += `\n            bool nextRowOutOfBounds =\n              (${
                t[a - 2]
              } + 1) >= ${
                this.outputShape[a - 2]
              };\n            bool nextColOutOfBounds =\n              (${
                t[a - 1]
              } + 1) >= ${
                this.outputShape[a - 1]
              };\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `;
            }
          }
        this.userCode = `\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${t}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${i}\n\n        setOutput(result);\n      }\n    `;
      }
    }
    /**
     * @license
     * Copyright 2017 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class El {
      constructor(t) {
        (this.variableNames = ["A"]),
          (this.outputShape = t),
          (this.userCode =
            "\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    ");
      }
      getCustomSetupFunc(t, e) {
        return (n, r) => {
          null == this.minLoc &&
            ((this.minLoc = n.getUniformLocationNoThrow(r, "minVal")),
            (this.maxLoc = n.getUniformLocationNoThrow(r, "maxVal"))),
            n.gl.uniform1f(this.minLoc, t),
            n.gl.uniform1f(this.maxLoc, e);
        };
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class Sl {
      constructor(t) {
        (this.variableNames = ["A"]),
          (this.packedInputs = !0),
          (this.packedOutput = !0),
          (this.outputShape = t),
          (this.userCode =
            "\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    ");
      }
      getCustomSetupFunc(t, e) {
        return (n, r) => {
          null == this.minLoc &&
            ((this.minLoc = n.getUniformLocationNoThrow(r, "minVal")),
            (this.maxLoc = n.getUniformLocationNoThrow(r, "maxVal"))),
            n.gl.uniform1f(this.minLoc, t),
            n.gl.uniform1f(this.maxLoc, e);
        };
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class Il {
      constructor(t) {
        (this.variableNames = ["real", "imag"]),
          (this.outputShape = t),
          (this.userCode =
            "\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    ");
      }
    }
    /**
     * @license
     * Copyright 2017 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class kl {
      constructor(t) {
        (this.outputShape = []),
          (this.outputShape = En.F.computeOutShape(t, 1)),
          (this.variableNames = t.map((t, e) => "T" + e));
        const e = new Array(t.length - 1);
        e[0] = t[0][1];
        for (let n = 1; n < e.length; n++) e[n] = e[n - 1] + t[n][1];
        const n = [`if (yC < ${e[0]}) setOutput(getT0(yR, yC));`];
        for (let t = 1; t < e.length; t++) {
          const r = e[t - 1];
          n.push(`else if (yC < ${e[t]}) setOutput(getT${t}(yR, yC-${r}));`);
        }
        const r = e.length,
          a = e[e.length - 1];
        n.push(`else setOutput(getT${r}(yR, yC-${a}));`),
          (this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join(
            "\n        "
          )}\n      }\n    `);
      }
    }
    /**
     * @license
     * Copyright 2019 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class Nl {
      constructor(t, e) {
        (this.packedInputs = !0),
          (this.packedOutput = !0),
          (this.outputShape = []),
          (this.outputShape = En.F.computeOutShape(t, e));
        const n = this.outputShape,
          r = n.length,
          a = ol(r),
          i = Uc("coords", r),
          o = ["x", "y", "z", "w", "u", "v"].slice(0, r);
        this.variableNames = t.map((t, e) => "T" + e);
        const s = new Array(t.length - 1);
        s[0] = t[0][e];
        for (let n = 1; n < s.length; n++) s[n] = s[n - 1] + t[n][e];
        const u = o[e],
          c = o.slice(-2),
          l = o.join();
        let h = `if (${u} < ${
          s[0]
        }) {\n        return getChannel(\n            getT0(${l}), vec2(${c.join()}));\n        }`;
        for (let t = 1; t < s.length; t++) {
          const e = s[t - 1];
          h += `\n        if (${u} < ${s[t]}  && ${u} >= ${
            s[t - 1]
          }) {\n          return getChannel(\n            getT${t}(${Rl(
            o,
            u,
            e
          )}),\n            vec2(${Rl(c, u, e)}));\n        }`;
        }
        const d = s.length,
          p = s[s.length - 1];
        (h += `\n        return getChannel(\n          getT${d}(${Rl(
          o,
          u,
          p
        )}),\n          vec2(${Rl(c, u, p)}));`),
          (this.userCode = `\n      float getValue(${o.map(
            (t) => "int " + t
          )}) {\n        ${h}\n      }\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${i}), 0., 0., 0.);\n\n        ${
            i[r - 1]
          } = ${i[r - 1]} + 1;\n        if (${i[r - 1]} < ${
            n[r - 1]
          }) {\n          result.g = getValue(${i});\n        }\n\n        ${
            i[r - 2]
          } = ${i[r - 2]} + 1;\n        if (${i[r - 2]} < ${
            n[r - 2]
          }) {\n          result.a = getValue(${i});\n        }\n\n        ${
            i[r - 1]
          } = ${i[r - 1]} - 1;\n        if (${i[r - 2]} < ${
            n[r - 2]
          } &&\n            ${i[r - 1]} < ${
            n[r - 1]
          }) {\n          result.b = getValue(${i});\n        }\n        setOutput(result);\n      }\n    `);
      }
    }
    function Rl(t, e, n) {
      const r = t.indexOf(e);
      return t.map((t, e) => (e === r ? `${t} - ${n}` : t)).join();
    }
    /**
     * @license
     * Copyright 2017 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class Al {
      constructor(t) {
        (this.variableNames = ["x", "dy"]), (this.outputShape = t.filterShape);
        const e = t.strideHeight,
          n = t.strideWidth,
          r = t.padInfo.top,
          a = t.padInfo.left,
          i = "channelsLast" === t.dataFormat;
        this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${e} - ${r};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${a};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              if (${i}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;
      }
    }
    class Tl {
      constructor(t) {
        (this.variableNames = ["dy", "W"]), (this.outputShape = t.inShape);
        const e = t.filterHeight,
          n = t.filterWidth,
          r = t.strideHeight,
          a = t.strideWidth,
          i = "channelsLast" === t.dataFormat,
          o = e - 1 - t.padInfo.top,
          s = n - 1 - t.padInfo.left,
          u = i ? 1 : 2,
          c = i ? 2 : 3,
          l = i ? 3 : 1;
        this.userCode = `\n      const ivec2 pads = ivec2(${o}, ${s});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${l}];\n\n        ivec2 dyCorner = ivec2(coords[${u}], coords[${c}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${a}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n\n              if (${i}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;
      }
    }
    class _l {
      constructor(t) {
        (this.variableNames = ["x", "dy"]), (this.outputShape = t.filterShape);
        const e = t.strideDepth,
          n = t.strideHeight,
          r = t.strideWidth,
          a = t.padInfo.front,
          i = t.padInfo.top,
          o = t.padInfo.left;
        this.userCode = `\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yF = 0; yF < ${t.outDepth}; yF++) {\n            int xF = wF + yF * ${e} - ${a};\n\n            if (xF < 0 || xF >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${t.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${i};\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${t.outWidth}; yC++) {\n                int xC = wC + yC * ${r} - ${o};\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;
      }
    }
    class Dl {
      constructor(t) {
        (this.variableNames = ["dy", "W"]), (this.outputShape = t.inShape);
        const e = t.filterDepth,
          n = t.filterHeight,
          r = t.filterWidth,
          a = t.strideDepth,
          i = t.strideHeight,
          o = t.strideWidth,
          s = e - 1 - t.padInfo.front,
          u = n - 1 - t.padInfo.top,
          c = r - 1 - t.padInfo.left;
        this.userCode = `\n      const ivec3 pads = ivec3(${s}, ${u}, ${c});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${e}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${a}.0;\n\n          if (dyF < 0.0 || dyF >= ${t.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${e} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${i}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${o}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;
      }
    }
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class Fl {
      constructor(t) {
        (this.variableNames = ["x", "dy"]), (this.outputShape = t.filterShape);
        const e = t.strideHeight,
          n = t.strideWidth,
          r = t.padInfo.top,
          a = t.padInfo.left,
          i = t.outChannels / t.inChannels;
        this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${i} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${e} - ${r};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${a};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;
      }
    }
    class Ml {
      constructor(t) {
        (this.variableNames = ["dy", "W"]), (this.outputShape = t.inShape);
        const e = t.filterHeight,
          n = t.filterWidth,
          r = t.strideHeight,
          a = t.strideWidth,
          i = e - 1 - t.padInfo.top,
          o = n - 1 - t.padInfo.left,
          s = t.outChannels / t.inChannels;
        this.userCode = `\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${a}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${s}; dm++) {\n              int d2 = d1 * ${s} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;
      }
    }
    /**
     * @license
     * Copyright 2017 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class jl {
      constructor(t, e = !1, n = null, r = !1) {
        (this.variableNames = ["x", "W"]), (this.outputShape = t.outShape);
        const a = t.padInfo.top,
          i = t.padInfo.left,
          o = t.strideHeight,
          s = t.strideWidth,
          u = t.dilationHeight,
          c = t.dilationWidth,
          l = t.filterHeight,
          h = t.filterWidth,
          d = 4 * Math.floor(t.inChannels / 4),
          p = t.inChannels % 4,
          f = "channelsLast" === t.dataFormat,
          m = f ? 1 : 2,
          g = f ? 2 : 3,
          b = f ? 3 : 1;
        let v = "",
          y = "";
        n &&
          ((v = r
            ? `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`
            : `\n          float activation(float x) {\n            ${n}\n          }\n        `),
          (y = "result = activation(result);"));
        const x = e ? "result += getBiasAtOutCoords();" : "";
        e && this.variableNames.push("bias"),
          r && this.variableNames.push("preluActivationWeights"),
          (this.userCode = `\n      ${v}\n\n      const ivec2 strides = ivec2(${o}, ${s});\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${m}], coords[${g}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${l}; wR++) {\n          int xR = xRCorner + wR * ${u};\n\n          if (xR < 0 || xR >= ${
            t.inHeight
          }) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${h}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${
            t.inWidth
          }) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${d}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${f}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${
            1 === p
          }) {\n\n              if (${f}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${d}) *\n                    getW(wR, wC, ${d}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${d}, xR, xC) *\n                    getW(wR, wC, ${d}, d2);\n              }\n\n            } else if (${
            2 === p
          }) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2)\n              );\n\n              if (${f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${
            3 === p
          }) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2),\n                getW(wR, wC, ${d} + 2, d2)\n              );\n\n              if (${f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1),\n                  getX(batch, xR, xC, ${d} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC),\n                  getX(batch, ${d} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${x}\n        ${y}\n        setOutput(result);\n      }\n    `);
      }
    }
    class $l {
      constructor(t) {
        (this.variableNames = ["x", "W"]), (this.outputShape = t.outShape);
        const e = t.padInfo.front,
          n = t.padInfo.top,
          r = t.padInfo.left,
          a = t.strideDepth,
          i = t.strideHeight,
          o = t.strideWidth,
          s = t.dilationDepth,
          u = t.dilationHeight,
          c = t.dilationWidth,
          l = t.filterDepth,
          h = t.filterHeight,
          d = t.filterWidth,
          p = 4 * Math.floor(t.inChannels / 4),
          f = t.inChannels % 4;
        this.userCode = `\n      const ivec3 strides = ivec3(${a}, ${i}, ${o});\n      const ivec3 pads = ivec3(${e}, ${n}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${l}; wF++) {\n          int xF = xFCorner + wF * ${s};\n\n          if (xF < 0 || xF >= ${
          t.inDepth
        }) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${u};\n\n            if (xR < 0 || xR >= ${
          t.inHeight
        }) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${d}; wC++) {\n              int xC = xCCorner + wC * ${c};\n\n              if (xC < 0 || xC >= ${
          t.inWidth
        }) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${p}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${
          1 === f
        }) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${p}) *\n                  getW(wF, wR, wC, ${p}, d2);\n              } else if (${
          2 === f
        }) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${p}),\n                  getX(batch, xF, xR, xC, ${p} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${p}, d2),\n                  getW(wF, wR, wC, ${p} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${
          3 === f
        }) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${p}),\n                  getX(batch, xF, xR, xC, ${p} + 1),\n                  getX(batch, xF, xR, xC, ${p} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${p}, d2),\n                  getW(wF, wR, wC, ${p} + 1, d2),\n                  getW(wF, wR, wC, ${p} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;
      }
    }
    /**
     * @license
     * Copyright 2017 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class Bl {
      constructor(t, e = !1, n = null, r = !1) {
        (this.variableNames = ["x", "W"]), (this.outputShape = t.outShape);
        const a = t.inHeight,
          i = t.inWidth,
          o = t.padInfo.top,
          s = t.padInfo.left,
          u = t.strideHeight,
          c = t.strideWidth,
          l = t.dilationHeight,
          h = t.dilationWidth,
          d = t.filterHeight,
          p = t.filterWidth,
          f = t.outChannels / t.inChannels;
        let m = "",
          g = "";
        n &&
          ((m = r
            ? `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`
            : `\n          float activation(float x) {\n            ${n}\n          }\n        `),
          (g = "result = activation(result);"));
        const b = e ? "result += getBiasAtOutCoords();" : "";
        e && this.variableNames.push("bias"),
          r && this.variableNames.push("preluActivationWeights"),
          (this.userCode = `\n      ${m}\n\n      const ivec2 strides = ivec2(${u}, ${c});\n      const ivec2 pads = ivec2(${o}, ${s});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${f};\n        int q = d2 - d1 * ${f};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${d}; wR++) {\n          int xR = xRCorner + wR * ${l};\n\n          if (xR < 0 || xR >= ${a}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${h};\n\n            if (xC < 0 || xC >= ${i}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${b}\n        ${g}\n        setOutput(result);\n      }\n    `);
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class Pl {
      constructor(t, e = !1, n = null, r = !1) {
        (this.variableNames = ["x", "W"]),
          (this.packedInputs = !0),
          (this.packedOutput = !0),
          (this.outputShape = t.outShape);
        const a = t.inHeight,
          i = t.inWidth,
          o = t.padInfo.top,
          s = t.padInfo.left,
          u = t.strideHeight,
          c = t.strideWidth,
          l = t.dilationHeight,
          h = t.dilationWidth,
          d = t.filterHeight,
          p = t.filterWidth,
          f = p;
        let m = "int xR; int xC; int xCOffset;";
        for (let t = 0; t < d; t++)
          for (let e = 0; e < p; e++)
            m += `\n          vec4 xTexelR${t}C${
              2 * e
            } = vec4(0.);\n          vec4 wR${t}C${e} = vec4(0.);\n          vec4 xR${t}C${e} = vec4(0.);`;
        for (let t = 0; t < d; t++)
          for (let e = 0; e < f; e++) {
            const n = 2 * e;
            if (
              ((m += `\n          xR = xRCorner + ${
                t * l
              };\n          xC = xCCorner + ${n * h};\n        `),
              1 === c)
            ) {
              if (
                n < p &&
                ((m +=
                  s % 2 == 1
                    ? `\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < ${a} && xCOffset >= 0 && xCOffset < ${i}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${i}) {\n                    xTexelR${t}C${n}.zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < ${a} && xCOffset >= 0 && xCOffset < ${i}) {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${i}) {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR${t}C${n} = vec4(previous.zw, xTexelR${t}C${n}.xy);\n                } else {\n                  xR${t}C${n} = vec4(0, 0, xTexelR${t}C${n}.xy);\n                }\n              `
                    : `\n                if(xR >= 0 && xR < ${a} && xC >= 0 && xC < ${i}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xR${t}C${n} = xTexelR${t}C${n};\n              `),
                n + 1 < p)
              ) {
                const e = s % 2 == 0 ? En.Cd.nearestLargerEven(h) : h;
                (h % 2 == 0 && s % 2 == 1) || (h % 2 != 0 && s % 2 != 1)
                  ? ((m += `\n                  xCOffset = xC + ${
                      s % 2
                    } + ${e};\n\n                  if(xR >= 0 && xR < ${a} &&\n                    xCOffset >= 0 && xCOffset < ${i}) {\n                    xTexelR${t}C${
                      n + 2
                    } = getX(batch, xR, xCOffset, d1);\n                  }\n                `),
                    h > 1 &&
                      (m += `\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < ${a} &&\n                      xCOffset >= 0 && xCOffset < ${i}) {\n                      xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR${t}C${n} = vec4(0.);\n                    }\n                  `),
                    (m += `\n                  xR${t}C${
                      n + 1
                    } = vec4(\n                    xTexelR${t}C${n}.zw, xTexelR${t}C${
                      n + 2
                    }.xy);\n                `))
                  : (m += `\n                  xCOffset = xC + ${e};\n\n                  if(xR >= 0 && xR < ${a} &&\n                    xCOffset >= 0 && xCOffset < ${i}) {\n                    xTexelR${t}C${
                      n + 2
                    } = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR${t}C${
                      n + 1
                    } = xTexelR${t}C${n + 2};\n                `);
              }
            } else
              n < p &&
                ((m += `\n              if(xR >= 0 && xR < ${a}) {\n            `),
                s % 2 == 1
                  ? ((m += `\n                xCOffset = xC + 1 - ${c};\n                if(xCOffset >= 0 && xCOffset < ${i}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${i}) {\n                  xTexelR${t}C${
                      n + 2
                    } = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR${t}C${
                      n + 2
                    } = vec4(0.);\n                }\n\n                xR${t}C${n} = vec4(\n                  xTexelR${t}C${n}.zw, xTexelR${t}C${
                      n + 2
                    }.zw);\n              `),
                    n + 1 < p &&
                      (m += `\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + ${c};\n                  if(xCOffset >= 0 && xCOffset < ${i}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR${t}C${
                        n + 1
                      } = vec4(xTexelR${t}C${
                        n + 2
                      }.xy, final.xy);\n                `))
                  : ((m += `\n                if(xC >= 0 && xC < ${i}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + ${c};\n                if(xCOffset >= 0 && xCOffset < ${i}) {\n                  xTexelR${t}C${
                      n + 2
                    } = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${t}C${
                      n + 2
                    } = vec4(0.);\n                }\n\n                xR${t}C${n} = vec4(\n                  xTexelR${t}C${n}.xy, xTexelR${t}C${
                      n + 2
                    }.xy);\n              `),
                    n + 1 < p &&
                      (m += `\n                  xR${t}C${
                        n + 1
                      } = vec4(\n                    xTexelR${t}C${n}.zw, xTexelR${t}C${
                        n + 2
                      }.zw);\n                `)),
                (m += "}"));
            n < p &&
              ((m += `\n            vec4 wTexelR${t}C${n} = getW(${t}, ${n}, d1, q);\n            wR${t}C${n} = vec4(wTexelR${t}C${n}.xz, wTexelR${t}C${n}.xz);\n          `),
              n + 1 < p &&
                (m += `\n              vec4 wTexelR${t}C${n + 1} = getW(${t}, ${
                  n + 1
                }, d1, q);\n              wR${t}C${
                  n + 1
                } =\n                vec4(wTexelR${t}C${
                  n + 1
                }.xz, wTexelR${t}C${n + 1}.xz);`));
          }
        for (let t = 0; t < d; t++)
          for (let e = 0; e < p; e++)
            m += `dotProd += xR${t}C${e} * wR${t}C${e};`;
        let g = "",
          b = "";
        n &&
          ((g = r
            ? `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`
            : `vec4 activation(vec4 x) {\n          ${n}\n        }`),
          (b = "result = activation(result);"));
        const v = e ? "result += getBiasAtOutCoords();" : "";
        e && this.variableNames.push("bias"),
          r && this.variableNames.push("preluActivationWeights"),
          (this.userCode = `\n      ${g}\n\n      const ivec2 strides = ivec2(${u}, ${c});\n      const ivec2 pads = ivec2(${o}, ${s});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        ${m}\n\n        vec4 result = dotProd;\n        ${v}\n        ${b}\n        setOutput(result);\n      }\n    `);
      }
    }
    /**
     * @license
     * Copyright 2017 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class Ll {
      constructor(t, e, n, r, a) {
        (this.variableNames = ["Image", "Boxes", "BoxInd"]),
          (this.outputShape = []);
        const [i, o, s, u] = t,
          [c] = e,
          [l, h] = n;
        this.outputShape = [c, l, h, u];
        const d = "bilinear" === r ? 1 : 0,
          [p, f] = [o - 1 + ".0", s - 1 + ".0"],
          [m, g, b] =
            l > 1
              ? [
                  "" + (o - 1) / (l - 1),
                  "(y2-y1) * height_ratio",
                  `y1*${p} + float(y)*(height_scale)`,
                ]
              : ["0.0", "0.0", "0.5 * (y1+y2) * " + p],
          [v, y, x] =
            h > 1
              ? [
                  "" + (s - 1) / (h - 1),
                  "(x2-x1) * width_ratio",
                  `x1*${f} + float(x)*(width_scale)`,
                ]
              : ["0.0", "0.0", "0.5 * (x1+x2) * " + f];
        this.userCode = `\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${v});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${i}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${y};\n\n        float in_y = ${b};\n        if( in_y < 0.0 || in_y > ${p} ) {\n          setOutput(float(${a}));\n          return;\n        }\n        float in_x = ${x};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${a}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${d} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `;
      }
    }
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class zl {
      constructor(t, e, n) {
        (this.variableNames = ["x"]), (this.outputShape = t);
        const r = t.length,
          a = t[t.length - 1],
          i = n ? "<" : ">";
        this.userCode = `\n      int getIndex(int i) {\n        ${
          n ? `return ${a} -i - 1;` : "return i;"
        }\n      }\n\n      void main() {\n        ${ol(
          r
        )} coords = getOutputCoords();\n        int end = ${Wl(
          r,
          "coords"
        )};\n        float val = 0.0;\n        for (int i = ${a} - 1; i >= 0; i -= 1) {\n          int idx = getIndex(i);\n          if (idx ${i} end) {\n            continue;\n          }\n          if (idx == end && ${e}) {\n            continue;\n          }\n          ${Wl(
          r,
          "coords"
        )} = idx;\n          val += getX(${(function (t, e) {
          if (1 === t) return "" + e;
          if (2 === t) return `${e}.x, ${e}.y`;
          if (3 === t) return `${e}.x, ${e}.y, ${e}.z`;
          if (4 === t) return `${e}.x, ${e}.y, ${e}.z, ${e}.w`;
          throw Error(`Cumulative sum for rank ${t} is not yet supported`);
        })(r, "coords")});\n        }\n        setOutput(val);\n      }\n    `;
      }
    }
    function Wl(t, e) {
      if (1 === t) return "" + e;
      if (2 === t) return e + ".y";
      if (3 === t) return e + ".z";
      if (4 === t) return e + ".w";
      throw Error(`Cumulative sum for rank ${t} is not yet supported`);
    }
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class Vl {
      constructor(t) {
        (this.variableNames = ["A"]),
          (this.packedInputs = !1),
          (this.packedOutput = !0),
          (this.outPackingScheme = uc.DENSE);
        const e = dc(t),
          n = Gc();
        (this.outputShape = t),
          (this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${Hc(
            ["r", "c", "d"],
            t
          )}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${
            e[0]
          }, ${e[1]}));\n        int index = 4 * (resTexRC.x * ${
            e[1]
          } + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${
            n.output
          } = result;\n      }\n    `);
      }
    }
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class Ul {
      constructor(t) {
        (this.variableNames = ["A"]),
          (this.packedInputs = !0),
          (this.packedOutput = !0),
          (this.outPackingScheme = uc.DENSE);
        const e = dc(t),
          n = Gc();
        (this.outputShape = t),
          (this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${Hc(
            ["r", "c", "d"],
            t
          )}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${
            e[0]
          }, ${e[1]}));\n        int index = 4 * (resTexRC.x * ${
            e[1]
          } + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${
            n.output
          } = result;\n      }\n    `);
      }
    }
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class Gl {
      constructor(t, e, n) {
        (this.variableNames = ["x"]),
          (this.outputShape = []),
          (this.outputShape = t),
          (this.blockSize = e),
          (this.dataFormat = n),
          (this.userCode = `\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${e};\n      int offset_h = imod(h, ${e});\n      int in_w = w / ${e};\n      int offset_w = imod(w, ${e});\n      int offset_d = (offset_h * ${e} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `);
      }
      getHeightCoordString() {
        return "NHWC" === this.dataFormat ? "coords[1]" : "coords[2]";
      }
      getWidthCoordString() {
        return "NHWC" === this.dataFormat ? "coords[2]" : "coords[3]";
      }
      getDepthCoordString() {
        return "NHWC" === this.dataFormat ? "coords[3]" : "coords[1]";
      }
      getOutputDepthSize() {
        return "NHWC" === this.dataFormat
          ? this.outputShape[3]
          : this.outputShape[1];
      }
      getInputSamplingString() {
        return "NHWC" === this.dataFormat
          ? "getX(b, in_h, in_w, in_d)"
          : "getX(b, in_d, in_h, in_w)";
      }
    }
    /**
     * @license
     * Copyright 2019 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class Hl {
      constructor(t) {
        (this.variableNames = ["X"]),
          (this.outputShape = [t, t]),
          (this.userCode =
            "\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    ");
      }
    }
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class ql {
      constructor(t) {
        (this.variableNames = ["A"]), (this.outTexUsage = cc.DOWNLOAD);
        const e = Gc();
        (this.outputShape = t),
          (this.userCode = `\n      ${Kc}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${e.output} = encode_float(x);\n      }\n    `);
      }
    }
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class Kl {
      constructor(t) {
        (this.variableNames = ["A"]),
          (this.packedInputs = !0),
          (this.packedOutput = !1),
          (this.outTexUsage = cc.DOWNLOAD);
        const e = Gc();
        (this.outputShape = t),
          (this.userCode = `\n      ${Kc}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${e.output} = encode_float(x);\n      }\n    `);
      }
    }
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class Xl {
      constructor(t, e, n = !1) {
        this.variableNames = ["A"];
        const r = Gc(),
          [a, i] = e;
        this.outputShape = t;
        let o = "result";
        n && (o = "floor(result * 255. + 0.5)"),
          (this.userCode = `\n      ${qc(
            t
          )}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n        \n        int r = flatIndex / ${i};\n        int c = imod(flatIndex, ${i});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${i}.0, ${a}.0);\n        vec4 values = ${
            r.texture2D
          }(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${
            r.output
          } = vec4(${o}, 0., 0., 0.);\n      }\n    `);
      }
    }
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class Yl {
      constructor(t, e, n = !1) {
        (this.variableNames = ["A"]),
          (this.packedInputs = !1),
          (this.packedOutput = !0);
        const r = Gc(),
          [a, i] = e;
        this.outputShape = t;
        let o = "",
          s = "result";
        n && (s = "floor(result * 255. + 0.5)");
        for (let e = 0; e <= 1; e++)
          for (let n = 0; n <= 1; n++) {
            const s = 2 * e + n;
            o += `\n          localCoords = coords;\n          if(localCoords[2] + ${n} < ${t[2]}) {\n            localCoords[2] += ${n};\n            if(localCoords[1] + ${e} < ${t[1]}) {\n              localCoords[1] += ${e};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${i};\n              c = imod(flatIndex, ${i});\n              uv = (vec2(c, r) + halfCR) / vec2(${i}.0, ${a}.0);\n              values = ${r.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${s}] = values[0];\n              } else if(offset == 1) {\n                result[${s}] = values[1];\n              } else if(offset == 2) {\n                result[${s}] = values[2];\n              } else {\n                result[${s}] = values[3];\n              }\n            }\n          }\n        `;
          }
        this.userCode = `\n      ${qc(
          t
        )}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${o}\n\n        ${
          r.output
        } = ${s};\n      }\n    `;
      }
    }
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const Jl = "return real * expR - imag * expI;",
      Ql = "return real * expI + imag * expR;";
    class Zl {
      constructor(t, e, n) {
        this.variableNames = ["real", "imag"];
        const r = e[1];
        this.outputShape = e;
        const a = n ? "2.0 * " + Math.PI : "-2.0 * " + Math.PI,
          i = n ? r + ".0" : "1.0";
        this.userCode = `\n      const float exponentMultiplier = ${a};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${t}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${i};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `;
      }
    }
    /**
     * @license
     * Copyright 2019 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class th {
      constructor(t, e) {
        (this.outputShape = []),
          (this.variableNames = ["x"]),
          (this.outputShape = t),
          (this.userCode =
            "\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    ");
      }
      getCustomSetupFunc(t) {
        return (e, n) => {
          null == this.valueLoc &&
            (this.valueLoc = e.getUniformLocationNoThrow(n, "value")),
            e.gl.uniform1f(this.valueLoc, t);
        };
      }
    }
    /**
     * @license
     * Copyright 2017 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class eh {
      constructor(t, e, n) {
        this.variableNames = ["A", "indices"];
        const r = t.slice();
        (r[n] = e), (this.outputShape = r), (this.rank = r.length);
        const a = ol(this.rank),
          i = (function (t, e) {
            const n = t.length;
            if (n > 4) throw Error(`Gather for rank ${n} is not yet supported`);
            if (1 === n) return "int(getIndices(resRC))";
            const r = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"],
              a = [];
            for (let n = 0; n < t.length; n++)
              n === e ? a.push(`int(getIndices(${r[n]}))`) : a.push("" + r[n]);
            return a.join();
          })(t, n);
        this.userCode = `\n      void main() {\n        ${a} resRC = getOutputCoords();\n        setOutput(getA(${i}));\n      }\n    `;
      }
    }
    class nh {
      constructor(t, e, n) {
        (this.sliceDim = t),
          (this.strides = e),
          (this.variableNames = ["x", "indices"]),
          (this.outputShape = n);
        const r = ol(e.length),
          a = ol(n.length),
          i = this.sliceDim > 1 ? "strides[j]" : "strides";
        this.userCode = `\n        ${r} strides = ${r}(${this.strides});\n         void main() {\n          ${a} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${i};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `;
      }
    }
    /**
     * @license
     * Copyright 2017 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function rh(t, e) {
      const n = Gc();
      return (function (t, e, n) {
        const r = Ic(
          t,
          e,
          () => t.createShader(t.VERTEX_SHADER),
          "Unable to create vertex WebGLShader."
        );
        if (
          (mc(t, e, () => t.shaderSource(r, n)),
          mc(t, e, () => t.compileShader(r)),
          !1 === t.getShaderParameter(r, t.COMPILE_STATUS))
        )
          throw (
            (console.log(t.getShaderInfoLog(r)),
            new Error("Failed to compile vertex shader."))
          );
        return r;
      })(
        t,
        e,
        `${n.version}\n    precision highp float;\n    ${n.attribute} vec3 clipSpacePos;\n    ${n.attribute} vec2 uv;\n    ${n.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`
      );
    }
    function ah(t, e) {
      return (function (t, e, n) {
        const r = Ic(
          t,
          e,
          () => t.createBuffer(),
          "Unable to create WebGLBuffer"
        );
        return (
          mc(t, e, () => t.bindBuffer(t.ARRAY_BUFFER, r)),
          mc(t, e, () => t.bufferData(t.ARRAY_BUFFER, n, t.STATIC_DRAW)),
          r
        );
      })(
        t,
        e,
        new Float32Array([
          -1,
          1,
          0,
          0,
          1,
          -1,
          -1,
          0,
          0,
          0,
          1,
          1,
          0,
          1,
          1,
          1,
          -1,
          0,
          1,
          0,
        ])
      );
    }
    function ih(t, e) {
      return (function (t, e, n) {
        const r = Ic(
          t,
          e,
          () => t.createBuffer(),
          "Unable to create WebGLBuffer"
        );
        return (
          mc(t, e, () => t.bindBuffer(t.ELEMENT_ARRAY_BUFFER, r)),
          mc(t, e, () =>
            t.bufferData(t.ELEMENT_ARRAY_BUFFER, n, t.STATIC_DRAW)
          ),
          r
        );
      })(t, e, new Uint16Array([0, 1, 2, 2, 1, 3]));
    }
    function oh(t, e, n, r, a, i, o) {
      !(function (t, e) {
        const n = Object(En.ob)().getNumber("WEBGL_MAX_TEXTURE_SIZE");
        if (t <= 0 || e <= 0) {
          throw new Error(
            "Requested texture size " + `[${t}x${e}]` + " is invalid."
          );
        }
        if (t > n || e > n) {
          throw new Error(
            "Requested texture size " +
              `[${t}x${e}]` +
              " greater than WebGL maximum on this browser / GPU " +
              `[${n}x${n}]` +
              "."
          );
        }
      })(n, r);
      const s = (function (t, e) {
          return Ic(
            t,
            e,
            () => t.createTexture(),
            "Unable to create WebGLTexture."
          );
        })(t, e),
        u = t.TEXTURE_2D;
      return (
        mc(t, e, () => t.bindTexture(u, s)),
        mc(t, e, () => t.texParameteri(u, t.TEXTURE_WRAP_S, t.CLAMP_TO_EDGE)),
        mc(t, e, () => t.texParameteri(u, t.TEXTURE_WRAP_T, t.CLAMP_TO_EDGE)),
        mc(t, e, () => t.texParameteri(u, t.TEXTURE_MIN_FILTER, t.NEAREST)),
        mc(t, e, () => t.texParameteri(u, t.TEXTURE_MAG_FILTER, t.NEAREST)),
        mc(t, e, () => t.texImage2D(u, 0, a, n, r, 0, i, o, null)),
        mc(t, e, () => t.bindTexture(t.TEXTURE_2D, null)),
        s
      );
    }
    function sh(t, e, n, r, a, i, o, s) {
      const u = t,
        c = new Float32Array(
          (function (t, e) {
            const [n, r] = pc(t, e);
            return n * r * 4;
          })(i, o)
        );
      return (
        u.bindBuffer(u.PIXEL_PACK_BUFFER, e),
        u.getBufferSubData(u.PIXEL_PACK_BUFFER, 0, c),
        u.bindBuffer(u.PIXEL_PACK_BUFFER, null),
        c
      );
    }
    /**
     * @license
     * Copyright 2017 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class uh {
      constructor(t) {
        (this.outputTexture = null),
          (this.program = null),
          (this.disposed = !1),
          (this.vertexAttrsAreBound = !1),
          (this.itemsToPoll = []);
        const e = Object(En.ob)().getNumber("WEBGL_VERSION");
        null != t
          ? ((this.gl = t),
            (function (t, e) {
              ic[t] = e;
            })(e, t))
          : (this.gl = sc(e));
        let n = "WEBGL_color_buffer_float";
        if (1 === Object(En.ob)().getNumber("WEBGL_VERSION")) {
          const t = "OES_texture_float",
            e = "OES_texture_half_float";
          if (
            ((this.textureFloatExtension = bc(this.gl, this.debug, t)),
            Mc(this.gl, e))
          )
            this.textureHalfFloatExtension = bc(this.gl, this.debug, e);
          else if (Object(En.ob)().get("WEBGL_FORCE_F16_TEXTURES"))
            throw new Error(
              "GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true."
            );
          if (
            ((this.colorBufferFloatExtension = this.gl.getExtension(n)),
            Mc(this.gl, "EXT_color_buffer_half_float"))
          )
            this.colorBufferHalfFloatExtension = bc(
              this.gl,
              this.debug,
              "EXT_color_buffer_half_float"
            );
          else if (Object(En.ob)().get("WEBGL_FORCE_F16_TEXTURES"))
            throw new Error(
              "GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true."
            );
        } else if (((n = "EXT_color_buffer_float"), Mc(this.gl, n)))
          this.colorBufferFloatExtension = this.gl.getExtension(n);
        else {
          if (!Mc(this.gl, "EXT_color_buffer_half_float"))
            throw new Error(
              "GL context does not support color renderable floats"
            );
          this.colorBufferHalfFloatExtension = this.gl.getExtension(
            "EXT_color_buffer_half_float"
          );
        }
        (this.vertexBuffer = ah(this.gl, this.debug)),
          (this.indexBuffer = ih(this.gl, this.debug)),
          (this.framebuffer = (function (t, e) {
            return Ic(
              t,
              e,
              () => t.createFramebuffer(),
              "Unable to create WebGLFramebuffer."
            );
          })(this.gl, this.debug)),
          (this.textureConfig = fc(this.gl, this.textureHalfFloatExtension));
      }
      get debug() {
        return Object(En.ob)().getBool("DEBUG");
      }
      dispose() {
        if (this.disposed) return;
        null != this.program &&
          console.warn(
            "Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."
          ),
          null != this.outputTexture &&
            console.warn(
              "Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing."
            );
        const t = this.gl;
        mc(t, this.debug, () => t.finish()),
          mc(t, this.debug, () => t.bindFramebuffer(t.FRAMEBUFFER, null)),
          mc(t, this.debug, () => t.deleteFramebuffer(this.framebuffer)),
          mc(t, this.debug, () => t.bindBuffer(t.ARRAY_BUFFER, null)),
          mc(t, this.debug, () => t.bindBuffer(t.ELEMENT_ARRAY_BUFFER, null)),
          mc(t, this.debug, () => t.deleteBuffer(this.indexBuffer)),
          (this.disposed = !0);
      }
      createFloat32MatrixTexture(t, e) {
        return (
          this.throwIfDisposed(),
          (function (t, e, n, r, a) {
            const [i, o] = hc(n, r);
            return oh(
              t,
              e,
              i,
              o,
              a.internalFormatFloat,
              a.textureFormatFloat,
              t.FLOAT
            );
          })(this.gl, this.debug, t, e, this.textureConfig)
        );
      }
      createFloat16MatrixTexture(t, e) {
        return (
          this.throwIfDisposed(),
          (function (t, e, n, r, a) {
            const [i, o] = hc(n, r);
            return oh(
              t,
              e,
              i,
              o,
              a.internalFormatHalfFloat,
              a.textureFormatFloat,
              a.textureTypeHalfFloat
            );
          })(this.gl, this.debug, t, e, this.textureConfig)
        );
      }
      createUnsignedBytesMatrixTexture(t, e) {
        return (
          this.throwIfDisposed(),
          (function (t, e, n, r, a) {
            const [i, o] = hc(n, r);
            return oh(t, e, i, o, t.RGBA, t.RGBA, t.UNSIGNED_BYTE);
          })(this.gl, this.debug, t, e, this.textureConfig)
        );
      }
      uploadPixelDataToTexture(t, e) {
        this.throwIfDisposed(),
          (function (t, e, n, r) {
            mc(t, e, () => t.bindTexture(t.TEXTURE_2D, n)),
              r.data instanceof Uint8Array
                ? mc(t, e, () =>
                    t.texImage2D(
                      t.TEXTURE_2D,
                      0,
                      t.RGBA,
                      r.width,
                      r.height,
                      0,
                      t.RGBA,
                      t.UNSIGNED_BYTE,
                      r.data
                    )
                  )
                : mc(t, e, () =>
                    t.texImage2D(
                      t.TEXTURE_2D,
                      0,
                      t.RGBA,
                      t.RGBA,
                      t.UNSIGNED_BYTE,
                      r
                    )
                  ),
              mc(t, e, () => t.bindTexture(t.TEXTURE_2D, null));
          })(this.gl, this.debug, t, e);
      }
      uploadDenseMatrixToTexture(t, e, n, r) {
        this.throwIfDisposed(),
          (function (t, e, n, r, a, i, o) {
            let s, u, c;
            mc(t, e, () => t.bindTexture(t.TEXTURE_2D, n)),
              i instanceof Uint8Array
                ? ((s = new Uint8Array(r * a * 4)),
                  (u = t.UNSIGNED_BYTE),
                  (c = t.RGBA))
                : ((s = new Float32Array(r * a * 4)),
                  (u = t.FLOAT),
                  (c = o.internalFormatPackedFloat)),
              s.set(i),
              mc(t, e, () =>
                t.texImage2D(t.TEXTURE_2D, 0, c, r, a, 0, t.RGBA, u, s)
              ),
              mc(t, e, () => t.bindTexture(t.TEXTURE_2D, null));
          })(this.gl, this.debug, t, e, n, r, this.textureConfig);
      }
      createFloat16PackedMatrixTexture(t, e) {
        return (
          this.throwIfDisposed(),
          (function (t, e, n, r, a) {
            const [i, o] = pc(n, r);
            return oh(
              t,
              e,
              i,
              o,
              a.internalFormatPackedHalfFloat,
              t.RGBA,
              a.textureTypeHalfFloat
            );
          })(this.gl, this.debug, t, e, this.textureConfig)
        );
      }
      createPackedMatrixTexture(t, e) {
        return (
          this.throwIfDisposed(),
          (function (t, e, n, r, a) {
            const [i, o] = pc(n, r);
            return oh(t, e, i, o, a.internalFormatPackedFloat, t.RGBA, t.FLOAT);
          })(this.gl, this.debug, t, e, this.textureConfig)
        );
      }
      deleteMatrixTexture(t) {
        this.throwIfDisposed(),
          this.outputTexture === t &&
            (Ec(this.gl, this.debug, this.framebuffer),
            (this.outputTexture = null)),
          mc(this.gl, this.debug, () => this.gl.deleteTexture(t));
      }
      downloadByteEncodedFloatMatrixFromOutputTexture(t, e, n) {
        return this.downloadMatrixDriver(t, () =>
          (function (t, e, n, r, a) {
            const [i, o] = hc(n, r),
              s = new Uint8Array(n * r * 4);
            return (
              mc(t, e, () =>
                t.readPixels(
                  0,
                  0,
                  i,
                  o,
                  a.downloadTextureFormat,
                  t.UNSIGNED_BYTE,
                  s
                )
              ),
              new Float32Array(s.buffer)
            );
          })(this.gl, this.debug, e, n, this.textureConfig)
        );
      }
      downloadPackedMatrixFromBuffer(t, e, n, r, a, i) {
        return sh(this.gl, t, 0, 0, 0, a, i, this.textureConfig);
      }
      downloadFloat32MatrixFromBuffer(t, e) {
        return (function (t, e, n) {
          const r = t,
            a = new Float32Array(n);
          return (
            r.bindBuffer(r.PIXEL_PACK_BUFFER, e),
            r.getBufferSubData(r.PIXEL_PACK_BUFFER, 0, a),
            r.bindBuffer(r.PIXEL_PACK_BUFFER, null),
            a
          );
        })(this.gl, t, e);
      }
      createBufferFromTexture(t, e, n) {
        this.bindTextureToFrameBuffer(t);
        const r = (function (t, e, n, r, a) {
          const i = t.createBuffer();
          mc(t, e, () => t.bindBuffer(t.PIXEL_PACK_BUFFER, i));
          const o = 16 * n * r;
          return (
            mc(t, e, () => t.bufferData(t.PIXEL_PACK_BUFFER, o, t.STREAM_READ)),
            mc(t, e, () => t.readPixels(0, 0, r, n, t.RGBA, t.FLOAT, 0)),
            mc(t, e, () => t.bindBuffer(t.PIXEL_PACK_BUFFER, null)),
            i
          );
        })(this.gl, this.debug, e, n, this.textureConfig);
        return this.unbindTextureToFrameBuffer(), r;
      }
      createAndWaitForFence() {
        const t = this.createFence(this.gl);
        return this.pollFence(t);
      }
      createFence(t) {
        let e, n;
        if (Object(En.ob)().getBool("WEBGL_FENCE_API_ENABLED")) {
          const r = t,
            a = r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE, 0);
          t.flush(),
            (n = () => {
              const t = r.clientWaitSync(a, 0, 0);
              return t === r.ALREADY_SIGNALED || t === r.CONDITION_SATISFIED;
            }),
            (e = a);
        } else
          Object(En.ob)().getNumber(
            "WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"
          ) > 0
            ? ((e = this.beginQuery()),
              this.endQuery(),
              (n = () =>
                this.isQueryAvailable(
                  e,
                  Object(En.ob)().getNumber(
                    "WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"
                  )
                )))
            : (n = () => !0);
        return { query: e, isFencePassed: n };
      }
      downloadMatrixFromPackedTexture(t, e, n) {
        return this.downloadMatrixDriver(t, () =>
          (function (t, e, n, r) {
            const a = new Float32Array(n * r * 4);
            return (
              mc(t, e, () => t.readPixels(0, 0, r, n, t.RGBA, t.FLOAT, a)), a
            );
          })(this.gl, this.debug, e, n)
        );
      }
      createProgram(t) {
        this.throwIfDisposed();
        const e = this.gl,
          n = vc(e, this.debug, t),
          r = rh(e, this.debug),
          a = (function (t, e) {
            return Ic(
              t,
              e,
              () => t.createProgram(),
              "Unable to create WebGLProgram."
            );
          })(e, this.debug);
        return (
          mc(e, this.debug, () => e.attachShader(a, r)),
          mc(e, this.debug, () => e.attachShader(a, n)),
          (function (t, e, n) {
            if (
              (mc(t, e, () => t.linkProgram(n)),
              !1 === t.getProgramParameter(n, t.LINK_STATUS))
            )
              throw (
                (console.log(t.getProgramInfoLog(n)),
                new Error("Failed to link vertex and fragment shaders."))
              );
          })(e, this.debug, a),
          this.debug && xc(e, this.debug, a),
          this.vertexAttrsAreBound ||
            (this.setProgram(a),
            (this.vertexAttrsAreBound = (function (t, e, n, r) {
              return (
                mc(t, e, () => t.bindBuffer(t.ARRAY_BUFFER, r)),
                wc(t, e, n, "clipSpacePos", r, 3, 20, 0) &&
                  wc(t, e, n, "uv", r, 2, 20, 12)
              );
            })(e, this.debug, this.program, this.vertexBuffer))),
          a
        );
      }
      deleteProgram(t) {
        this.throwIfDisposed(),
          t === this.program && (this.program = null),
          null != t && mc(this.gl, this.debug, () => this.gl.deleteProgram(t));
      }
      setProgram(t) {
        this.throwIfDisposed(),
          (this.program = t),
          null != this.program &&
            this.debug &&
            xc(this.gl, this.debug, this.program),
          mc(this.gl, this.debug, () => this.gl.useProgram(t));
      }
      getUniformLocation(t, e, n = !0) {
        return (
          this.throwIfDisposed(),
          n
            ? (function (t, e, n, r) {
                return Ic(
                  t,
                  e,
                  () => t.getUniformLocation(n, r),
                  'uniform "' + r + '" not present in program.'
                );
              })(this.gl, this.debug, t, e)
            : (function (t, e, n) {
                return t.getUniformLocation(e, n);
              })(this.gl, t, e)
        );
      }
      getAttributeLocation(t, e) {
        return (
          this.throwIfDisposed(),
          mc(this.gl, this.debug, () => this.gl.getAttribLocation(t, e))
        );
      }
      getUniformLocationNoThrow(t, e) {
        return this.throwIfDisposed(), this.gl.getUniformLocation(t, e);
      }
      setInputMatrixTexture(t, e, n) {
        this.throwIfDisposed(),
          this.throwIfNoProgram(),
          Cc(this.gl, this.debug, this.program, t, e, n);
      }
      setOutputMatrixTexture(t, e, n) {
        this.setOutputMatrixTextureDriver(t, n, e);
      }
      setOutputPackedMatrixTexture(t, e, n) {
        this.throwIfDisposed();
        const [r, a] = pc(e, n);
        this.setOutputMatrixTextureDriver(t, r, a);
      }
      setOutputMatrixWriteRegion(t, e, n, r) {
        this.setOutputMatrixWriteRegionDriver(n, t, r, e);
      }
      setOutputPackedMatrixWriteRegion(t, e, n, r) {
        throw new Error("setOutputPackedMatrixWriteRegion not implemented.");
      }
      debugValidate() {
        null != this.program && xc(this.gl, this.debug, this.program),
          Sc(this.gl);
      }
      executeProgram() {
        this.throwIfDisposed(), this.throwIfNoProgram();
        const t = this.gl;
        this.debug && this.debugValidate(),
          mc(t, this.debug, () =>
            t.drawElements(t.TRIANGLES, 6, t.UNSIGNED_SHORT, 0)
          );
      }
      blockUntilAllProgramsCompleted() {
        this.throwIfDisposed(), mc(this.gl, this.debug, () => this.gl.finish());
      }
      getQueryTimerExtension() {
        return (
          null == this.disjointQueryTimerExtension &&
            (this.disjointQueryTimerExtension = bc(
              this.gl,
              this.debug,
              2 ===
                Object(En.ob)().getNumber(
                  "WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"
                )
                ? "EXT_disjoint_timer_query_webgl2"
                : "EXT_disjoint_timer_query"
            )),
          this.disjointQueryTimerExtension
        );
      }
      getQueryTimerExtensionWebGL2() {
        return this.getQueryTimerExtension();
      }
      getQueryTimerExtensionWebGL1() {
        return this.getQueryTimerExtension();
      }
      beginQuery() {
        if (
          2 ===
          Object(En.ob)().getNumber(
            "WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"
          )
        ) {
          const t = this.gl,
            e = this.getQueryTimerExtensionWebGL2(),
            n = t.createQuery();
          return t.beginQuery(e.TIME_ELAPSED_EXT, n), n;
        }
        const t = this.getQueryTimerExtensionWebGL1(),
          e = t.createQueryEXT();
        return t.beginQueryEXT(t.TIME_ELAPSED_EXT, e), e;
      }
      endQuery() {
        if (
          2 ===
          Object(En.ob)().getNumber(
            "WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"
          )
        ) {
          const t = this.gl,
            e = this.getQueryTimerExtensionWebGL2();
          return void t.endQuery(e.TIME_ELAPSED_EXT);
        }
        const t = this.getQueryTimerExtensionWebGL1();
        t.endQueryEXT(t.TIME_ELAPSED_EXT);
      }
      async waitForQueryAndGetTime(t) {
        return (
          await En.Cd.repeatedTry(
            () =>
              this.disposed ||
              this.isQueryAvailable(
                t,
                Object(En.ob)().getNumber(
                  "WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"
                )
              )
          ),
          this.getQueryTime(
            t,
            Object(En.ob)().getNumber(
              "WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"
            )
          )
        );
      }
      getQueryTime(t, e) {
        if (0 === e) return null;
        if (2 === e) {
          const e = this.gl;
          return e.getQueryParameter(t, e.QUERY_RESULT) / 1e6;
        }
        {
          const e = this.getQueryTimerExtensionWebGL1();
          return e.getQueryObjectEXT(t, e.QUERY_RESULT_EXT) / 1e6;
        }
      }
      isQueryAvailable(t, e) {
        if (0 === e) return !0;
        if (2 === e) {
          const e = this.gl,
            n = this.getQueryTimerExtensionWebGL2(),
            r = e.getQueryParameter(t, e.QUERY_RESULT_AVAILABLE);
          return (
            null == this.disjoint &&
              (this.disjoint = this.gl.getParameter(n.GPU_DISJOINT_EXT)),
            r && !this.disjoint
          );
        }
        {
          const e = this.getQueryTimerExtensionWebGL1(),
            n = e.getQueryObjectEXT(t, e.QUERY_RESULT_AVAILABLE_EXT);
          return (
            null == this.disjoint &&
              (this.disjoint = this.gl.getParameter(e.GPU_DISJOINT_EXT)),
            n && !this.disjoint
          );
        }
      }
      pollFence(t) {
        return new Promise((e) => {
          this.addItemToPoll(
            () => t.isFencePassed(),
            () => e()
          );
        });
      }
      pollItems() {
        const t = (function (t) {
          let e = 0;
          for (; e < t.length; ++e) {
            if (!t[e]()) break;
          }
          return e - 1;
        })(
          /**
           * @license
           * Copyright 2017 Google Inc. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */ this.itemsToPoll.map((t) => t.isDoneFn)
        );
        for (let e = 0; e <= t; ++e) {
          const { resolveFn: t } = this.itemsToPoll[e];
          t();
        }
        this.itemsToPoll = this.itemsToPoll.slice(t + 1);
      }
      addItemToPoll(t, e) {
        this.itemsToPoll.push({ isDoneFn: t, resolveFn: e }),
          this.itemsToPoll.length > 1 ||
            En.Cd.repeatedTry(
              () => (this.pollItems(), 0 === this.itemsToPoll.length)
            );
      }
      bindTextureToFrameBuffer(t) {
        this.throwIfDisposed(),
          Oc(this.gl, this.debug, t, this.framebuffer),
          this.debug && Sc(this.gl);
      }
      unbindTextureToFrameBuffer() {
        null != this.outputTexture
          ? (Oc(this.gl, this.debug, this.outputTexture, this.framebuffer),
            this.debug && Sc(this.gl))
          : Ec(this.gl, this.debug, this.framebuffer);
      }
      downloadMatrixDriver(t, e) {
        this.bindTextureToFrameBuffer(t);
        const n = e();
        return this.unbindTextureToFrameBuffer(), n;
      }
      setOutputMatrixTextureDriver(t, e, n) {
        this.throwIfDisposed();
        const r = this.gl;
        Oc(r, this.debug, t, this.framebuffer),
          this.debug && Sc(r),
          (this.outputTexture = t),
          mc(r, this.debug, () => r.viewport(0, 0, e, n)),
          mc(r, this.debug, () => r.scissor(0, 0, e, n));
      }
      setOutputMatrixWriteRegionDriver(t, e, n, r) {
        this.throwIfDisposed(),
          mc(this.gl, this.debug, () => this.gl.scissor(t, e, n, r));
      }
      throwIfDisposed() {
        if (this.disposed)
          throw new Error("Attempted to use disposed GPGPUContext.");
      }
      throwIfNoProgram() {
        if (null == this.program)
          throw new Error("No GPU program is currently set.");
      }
    }
    function ch(t, e) {
      if (t.length !== e.length)
        throw Error(
          `Binary was compiled with ${t.length} inputs, but was executed with ${e.length} inputs`
        );
      t.forEach((t, n) => {
        const r = t.logicalShape,
          a = e[n],
          i = a.shape;
        if (!En.Cd.arraysEqual(r, i))
          throw Error(
            `Binary was compiled with different shapes than the current args. Shapes ${r} and ${i} must match`
          );
        if (t.isUniform && a.isUniform) return;
        const o = t.texShape,
          s = a.isUniform ? null : a.texData.texShape;
        if (!En.Cd.arraysEqual(o, s))
          throw Error(
            `Binary was compiled with different texture shapes than the current args. Shape ${o} and ${s} must match`
          );
      });
    }
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class lh {
      constructor(t, e, n) {
        (this.variableNames = ["A"]),
          (this.packedInputs = !0),
          (this.packedOutput = !0),
          (this.outputShape = t);
        const {
            filterWidth: r,
            inChannels: a,
            strideWidth: i,
            strideHeight: o,
            padInfo: s,
            outWidth: u,
            dilationWidth: c,
            dilationHeight: l,
            dataFormat: h,
          } = n,
          { left: d, top: p } = s,
          f = a * r,
          m = Gc(),
          g = "channelsLast" === h,
          b = g ? 0 : 1,
          v = g ? 1 : 2;
        let y = "";
        for (let n = 0; n <= 1; n++)
          for (let r = 0; r <= 1; r++)
            y += `\n          blockIndex = rc.y + ${r};\n          pos = rc.x + ${n};\n\n          if(blockIndex < ${
              t[1]
            } && pos < ${
              t[0]
            }) {\n            offsetY = int(blockIndex / (${u})) * ${o} - ${p};\n            d0 = offsetY + ${l} * (pos / ${f});\n\n            if(d0 < ${
              e[b]
            } && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${u}.) * ${i}. - ${d}.);\n              d1 = offsetX + ${c} * (int(mod(float(pos), ${f}.) / ${a}.));\n\n              if(d1 < ${
              e[v]
            } && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${a}.));\n\n                if (${g}) {\n                  innerDims = vec2(d1, ch);\n                  result[${
              2 * n + r
            }] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${
              2 * n + r
            }] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;
        this.userCode = `\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${y}\n\n        ${m.output} = result;\n      }\n    `;
      }
    }
    /**
     * @license
     * Copyright 2017 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class hh {
      constructor(t, e, n, r, a) {
        (this.variableNames = ["x"]), (this.outputShape = []);
        const i = e,
          o = t[3] - 1;
        let s;
        this.outputShape = t;
        const u = `float(${n}) + float(${r}) * sum`;
        (s =
          0.5 === a
            ? `inversesqrt(${u})`
            : 1 === a
            ? `1.0/(${u})`
            : `exp(log(${u}) * float(-${a}));`),
          (this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${i}; j <= ${i}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${o}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${s};\n        setOutput(val);\n      }\n    `);
      }
    }
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class dh {
      constructor(t, e, n, r, a) {
        (this.variableNames = ["inputImage", "outputImage", "dy"]),
          (this.outputShape = []),
          (this.outputShape = t),
          (this.depth = t[3]),
          (this.depthRadius = e),
          (this.bias = n),
          (this.alpha = r),
          (this.beta = a),
          (this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${e})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${e} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${a})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${a});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `);
      }
    }
    /**
     * @license
     * Copyright 2019 Google LLC All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class ph {
      constructor(t, e, n, r, a) {
        (this.variableNames = ["x"]),
          (this.outputShape = []),
          (this.packedInputs = !0),
          (this.packedOutput = !0);
        const i = e,
          o = t[3] - 1;
        let s;
        this.outputShape = t;
        const u = `float(${n}) + float(${r}) * sum`;
        (s =
          0.5 === a
            ? `inversesqrt(${u})`
            : 1 === a
            ? `1.0/(${u})`
            : `exp(log(${u}) * float(-${a}));`),
          (this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${i};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${i}; j <= ${i}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${o}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${s};\n        setOutput(result);\n      }\n    `);
      }
    }
    /**
     * @license
     * Copyright 2017 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class fh {
      constructor(t) {
        (this.variableNames = ["dy", "maxPos"]), (this.outputShape = t.inShape);
        const e = t.strideHeight,
          n = t.strideWidth,
          r = t.dilationHeight,
          a = t.effectiveFilterHeight,
          i = t.effectiveFilterWidth,
          o = a - 1 - t.padInfo.top,
          s = i - 1 - t.padInfo.left,
          u = a * i - 1;
        this.userCode = `\n      const ivec2 pads = ivec2(${o}, ${s});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${a};\n          wR += ${r}) {\n          float dyR = float(dyRCorner + wR) / ${e}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${i}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${u} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${i} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;
      }
    }
    class mh {
      constructor(t) {
        (this.variableNames = ["dy", "maxPos"]), (this.outputShape = t.inShape);
        const e = t.strideDepth,
          n = t.strideHeight,
          r = t.strideWidth,
          a = t.dilationDepth,
          i = t.dilationHeight,
          o = t.dilationWidth,
          s = t.effectiveFilterDepth,
          u = t.effectiveFilterHeight,
          c = t.effectiveFilterWidth,
          l = s - 1 - t.padInfo.front,
          h = u - 1 - t.padInfo.top,
          d = c - 1 - t.padInfo.left,
          p = s * u * c - 1;
        this.userCode = `\n      const ivec3 pads = ivec3(${l}, ${h}, ${d});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${s};\n           wD += ${a}) {\n          float dyD = float(dyDCorner + wD) / ${e}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${u};\n              wR += ${i}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${c};\n                wC += ${o}) {\n              float dyC = float(dyCCorner + wC) / ${r}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${p} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${u} * ${c} +\n                  wR * ${c} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;
      }
    }
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class gh {
      constructor(t, e, n = !1, r = !1, a = !1, i = null, o = !1) {
        (this.variableNames = ["matrixA", "matrixB"]),
          (this.packedInputs = !0),
          (this.packedOutput = !0),
          (this.outputShape = e);
        const s = n ? t[1] : t[2],
          u = Math.ceil(s / 2),
          c = n ? "i * 2, rc.y" : "rc.y, i * 2",
          l = r ? "rc.z, i * 2" : "i * 2, rc.z",
          h = n ? ["a.xxyy", "a.zzww"] : ["a.xxzz", "a.yyww"],
          d = r ? ["b.xzxz", "b.ywyw"] : ["b.xyxy", "b.zwzw"];
        let p = "",
          f = "";
        i &&
          ((p = o
            ? `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`
            : `vec4 activation(vec4 x) {\n          ${i}\n        }`),
          (f = "result = activation(result);"));
        const m = a ? "result += getBiasAtOutCoords();" : "";
        a && this.variableNames.push("bias"),
          o && this.variableNames.push("preluActivationWeights"),
          (this.userCode = `\n      ${p}\n\n      const float sharedDimension = ${u}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${u}; i++) {\n          vec4 a = getMatrixA(rc.x, ${c});\n          vec4 b = getMatrixB(rc.x, ${l});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${h[0]} * ${d[0]});\n          result += (${h[1]} * ${d[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${m}\n\n        ${f}\n\n        setOutput(result);\n      }\n    `);
      }
    }
    /**
     * @license
     * Copyright 2017 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class bh {
      constructor(t, e, n) {
        (this.variableNames = ["probs"]),
          (this.outputShape = [t, n]),
          (this.userCode = `\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${
            e - 1
          }; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${
            e - 1
          }));\n      }\n    `);
      }
      getCustomSetupFunc(t) {
        return (e, n) => {
          null == this.seedLoc &&
            (this.seedLoc = e.getUniformLocation(n, "seed")),
            e.gl.uniform1f(this.seedLoc, t);
        };
      }
    }
    /**
     * @license
     * Copyright 2017 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class vh {
      constructor(t, e, n, r) {
        (this.variableNames = ["indices"]),
          (this.outputShape = [t, e]),
          (this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `);
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class yh {
      constructor(t) {
        (this.variableNames = ["A"]),
          (this.packedInputs = !1),
          (this.packedOutput = !0),
          (this.outputShape = t);
        const e = t.length;
        if (0 === e)
          this.userCode =
            "\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";
        else {
          const n = Uc("rc", e),
            r = ol(e),
            a = (function (t, e, n) {
              if (1 === t) return "rc > " + e[0];
              let r = "";
              for (let a = t - 2; a < t; a++)
                (r += `${n[a]} >= ${e[a]}`), a < t - 1 && (r += "||");
              return r;
            })(e, t, n),
            i = (function (t, e, n, r) {
              if (1 === t) return "";
              const a = r.slice(-2);
              return `\n    int r = ${a[0]};\n    int c = ${a[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${e};\n    bool rEdge = rp1 >= ${n};\n  `;
            })(e, t[t.length - 1], t[t.length - 2], n),
            o = (function (t, e) {
              const n = t.length,
                r = (function (t, e) {
                  const n = [];
                  for (let r = 0; r <= 1; r++)
                    for (let a = 0; a <= 1; a++) {
                      let i = `${0 === r ? "r" : "rp1"}, ${
                        0 === a ? "c" : "cp1"
                      }`;
                      for (let n = 2; n < t; n++)
                        i = e[e.length - 1 - n] + "," + i;
                      n.push(i);
                    }
                  return n;
                })(n, e);
              if (1 === n)
                return `getA(rc),\n            rc + 1 >= ${t[0]} ? 0. : getA(rc + 1),\n            0, 0`;
              return `getA(${r[0]}),\n          cEdge ? 0. : getA(${r[1]}),\n          rEdge ? 0. : getA(${r[2]}),\n          rEdge || cEdge ? 0. : getA(${r[3]})`;
            })(
              /**
               * @license
               * Copyright 2017 Google Inc. All Rights Reserved.
               * Licensed under the Apache License, Version 2.0 (the "License");
               * you may not use this file except in compliance with the License.
               * You may obtain a copy of the License at
               *
               * http://www.apache.org/licenses/LICENSE-2.0
               *
               * Unless required by applicable law or agreed to in writing, software
               * distributed under the License is distributed on an "AS IS" BASIS,
               * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
               * See the License for the specific language governing permissions and
               * limitations under the License.
               * =============================================================================
               */ t,
              n
            );
          this.userCode = `\n        void main() {\n          ${r} rc = getOutputCoords();\n\n          if(${a}) {\n            setOutput(vec4(0));\n          } else {\n            ${i}\n\n            setOutput(vec4(${o}));\n          }\n        }\n      `;
        }
      }
    }
    class xh {
      constructor(t, e, n) {
        (this.variableNames = ["x"]),
          (this.outputShape = e.map((e, n) => e[0] + t[n] + e[1]));
        const r = t.length,
          a = ol(r),
          i = e.map((t) => t[0]).join(","),
          o = e.map((e, n) => e[0] + t[n]).join(","),
          s = ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(0, r);
        this.userCode =
          1 !== r
            ? `\n      ${a} start = ${a}(${i});\n      ${a} end = ${a}(${o});\n\n      void main() {\n        ${a} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(${n}));\n        } else {\n          ${a} coords = outC - start;\n          setOutput(getX(${s}));\n        }\n      }\n    `
            : `\n        int start = ${i};\n        int end = ${o};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(${n}));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `;
      }
    }
    /**
     * @license
     * Copyright 2019 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class wh {
      constructor(t, e, n) {
        (this.variableNames = ["x"]),
          (this.packedInputs = !0),
          (this.packedOutput = !0),
          (this.outputShape = e.map((e, n) => e[0] + t[n] + e[1]));
        const r = t.length,
          a = ol(r),
          i = e.map((t) => t[0]).join(","),
          o = e.map((e, n) => e[0] + t[n]).join(","),
          s = Uc("rc", r),
          u = Uc("source", r),
          c = `${s[r - 1]} < ${this.outputShape[r - 1]}`,
          l = 1 === r ? "source" : `vec2(${u.slice(-2).join()})`,
          h = [
            a + " rc = outputLoc;",
            `${s[r - 1]} += 1;\n       if(${c}) {\n      `,
            1 === r
              ? ""
              : `}\n       rc = outputLoc;\n       ${
                  s[r - 2]
                } += 1;\n       if(${s[r - 2]} < ${this.outputShape[r - 2]}) {`,
            1 === r ? "" : `  ${s[r - 1]} += 1;\n         if(${c}) {`,
          ],
          d =
            1 === r
              ? "rc < start || rc >= end"
              : "any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";
        let p = "";
        for (let t = 0, e = 1 === r ? 2 : 4; t < e; t++)
          p += `\n        ${
            h[t]
          }\n        if (${d}) {\n          result[${t}] = float(${n});\n        } else {\n          ${a} source = rc - start;\n          result[${t}] = getChannel(getX(${u.join()}), ${l});\n        }\n      `;
        (p += 1 === r ? "} " : "}}"),
          (this.userCode = `\n      const ${a} start = ${a}(${i});\n      const ${a} end = ${a}(${o});\n\n      void main() {\n        ${a} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `);
      }
    }
    /**
     * @license
     * Copyright 2017 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class Ch {
      constructor(t, e, n, r = !1, a = !1) {
        if (((this.variableNames = ["x"]), "avg" === e && n))
          throw new Error("Cannot compute positions for average pool.");
        const i = t.filterWidth,
          o = t.strideHeight,
          s = t.strideWidth,
          u = t.dilationHeight,
          c = t.dilationWidth,
          l = t.effectiveFilterHeight,
          h = t.effectiveFilterWidth,
          d = t.padInfo.top,
          p = t.padInfo.left;
        this.outputShape = t.outShape;
        const f = "avg" === e,
          m = `((batch  * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + d`,
          g = `(xR * ${t.inWidth} + xC) * ${t.inChannels} + d`;
        let b = "0.0";
        if ((f || (b = "-1.0 / 1e-20"), n)) {
          const e = ">=";
          return void (this.userCode = `\n        const ivec2 strides = ivec2(${o}, ${s});\n        const ivec2 pads = ivec2(${d}, ${p});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${l};\n              wR += ${u}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${
            t.inHeight
          }) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${c}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${
            t.inWidth
          }) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${e} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${
            r ? (a ? m : g) : `wR * ${h} + wC`
          };\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `);
        }
        let v = `${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
        "avg" === e && (v = "avgValue / count");
        const y = 4 * Math.floor(i / 4),
          x = i % 4,
          w = `\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;
        this.userCode = `\n      const ivec2 strides = ivec2(${o}, ${s});\n      const ivec2 pads = ivec2(${d}, ${p});\n      const float initializationValue = ${b};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${
          t.inWidth
        }) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${b});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${l};\n            wR += ${u}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${
          t.inHeight
        }) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${y}; wC += 4) {\n            int xC = xCCorner + wC * ${c};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${c}, d),\n              getValue(batch, xR, xC + 2 * ${c}, d),\n              getValue(batch, xR, xC + 3 * ${c}, d)\n            );\n\n            ${w}\n          }\n\n          int xC = xCCorner + ${y};\n          if (${
          1 === x
        }) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${w}\n          } else if (${
          2 === x
        }) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${c}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${w}\n          } else if (${
          3 === x
        }) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${c}, d),\n              getValue(batch, xR, xC + 2 * ${c}, d),\n              initializationValue\n            );\n\n            ${w}\n          }\n        }\n        setOutput(${v});\n      }\n    `;
      }
    }
    class Oh {
      constructor(t, e, n, r = !1, a = !1) {
        if (((this.variableNames = ["x"]), "avg" === e && n))
          throw new Error("Cannot compute positions for average pool.");
        const i = t.filterWidth,
          o = t.strideDepth,
          s = t.strideHeight,
          u = t.strideWidth,
          c = t.dilationDepth,
          l = t.dilationHeight,
          h = t.dilationWidth,
          d = t.effectiveFilterDepth,
          p = t.effectiveFilterHeight,
          f = t.effectiveFilterWidth,
          m = t.padInfo.front,
          g = t.padInfo.top,
          b = t.padInfo.left;
        this.outputShape = t.outShape;
        const v = "avg" === e;
        let y = "0.0";
        if ((v || (y = "-1.0 / 1e-20"), n)) {
          const e = ">=";
          return void (this.userCode = `\n        const ivec3 strides =\n            ivec3(${o}, ${s}, ${u});\n        const ivec3 pads = ivec3(${m}, ${g}, ${b});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${d};\n              wD += ${c}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${
            t.inDepth
          }) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${p};\n                wR += ${l}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${
            t.inHeight
          }) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${
            t.inWidth
          }) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${e} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${
            r
              ? a
                ? `(((batch * ${t.inDepth} + xD) * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`
                : `((xD * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`
              : `wD * ${p} * ${f} +\n                      wR * ${f} + wC`
          };\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `);
        }
        let x = `${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
        "avg" === e && (x = "avgValue / count");
        const w = 4 * Math.floor(i / 4),
          C = i % 4,
          O = `\n      if (${v}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;
        this.userCode = `\n      const ivec3 strides =\n        ivec3(${o}, ${s}, ${u});\n      const ivec3 pads = ivec3(${m}, ${g}, ${b});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${
          t.inWidth
        }) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${d};\n            wD += ${c}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${
          t.inDepth
        }) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${p};\n            wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${
          t.inHeight
        }) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${w}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${O}\n            }\n\n            int xC = xCCorner + ${w};\n            if (${
          1 === C
        }) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${O}\n            } else if (${
          2 === C
        }) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${O}\n            } else if (${
          3 === C
        }) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${O}\n            }\n          }\n          setOutput(${x});\n        }\n      }\n    `;
      }
    }
    /**
     * @license
     * Copyright 2017 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class Eh {
      constructor(t, e) {
        this.variableNames = ["x"];
        const n = t.windowSize,
          r = t.batchSize,
          a = t.inSize,
          i = Math.ceil(a / n);
        this.outputShape = [r, i];
        let o = "0.0",
          s = "";
        "prod" === e
          ? (o = "1.0")
          : "min" === e
          ? ((o = "1.0 / 1e-20"), (s = "min"))
          : "max" === e && ((o = "-1.0 / 1e-20"), (s = "max"));
        let u = `${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
        "sum" === e
          ? (u = "sumValue")
          : "prod" === e
          ? (u = "prodValue")
          : "all" === e
          ? (u = "allValue")
          : "any" === e && (u = "anyValue");
        const c = 4 * Math.floor(n / 4),
          l = n % 4;
        let h = `\n      if (${
            "sum" === e
          }) {\n        sumValue += dot(values, ones);\n      } else if (${
            "prod" === e
          }) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${s}(values, minMaxValue);\n      }\n    `,
          d = "vec4";
        "all" === e
          ? ((o = "1.0"),
            (h =
              "\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      "),
            (d = "bvec4"))
          : "any" === e &&
            ((o = "0.0"),
            (h =
              "\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      "),
            (d = "bvec4"));
        let p = "";
        a % n > 0 &&
          (p = `\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return initializationValue;\n        }\n      `),
          (this.userCode = `\n      const float initializationValue = ${o};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${p}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${o});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${c}; i += 4) {\n          int inIdx = inOffset + i;\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${c};\n        if (${
            1 === l
          }) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${
            2 === l
          }) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${
            3 === l
          }) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${u});\n      }\n    `);
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class Sh {
      constructor(t, e) {
        (this.variableNames = ["A"]),
          (this.packedInputs = !0),
          (this.packedOutput = !0),
          (this.outputShape = t);
        let n = "";
        for (let t = 0; t < 4; t++) {
          let e = "thisRC = rc;";
          t % 2 == 1 && (e += "thisRC.z += 1;"),
            t > 1 && (e += "thisRC.y += 1;"),
            (n += `\n        ${e}\n        ${
              t > 0 ? "if(thisRC.y < rows && thisRC.z < cols){" : ""
            }\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${t}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${
              t > 0 ? "}" : ""
            }\n      `);
        }
        var r;
        /**
         * @license
         * Copyright 2018 Google Inc. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */ this.userCode = `\n      ${
          ((r = e),
          `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${Hc(
            ["r", "c", "d"],
            r
          )}\n      return ivec3(r, c, d);\n    }\n  `)
        }\n      ${qc(
          t
        )}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${
          t[1]
        };\n        int cols = ${
          t[2]
        };\n\n        ${n}\n\n        setOutput(result);\n      }\n    `;
      }
    }
    class Ih {
      constructor(t, e, n) {
        (this.variableNames = ["dy"]),
          (this.outputShape = []),
          (this.outputShape = e.shape);
        const [, r, a] = e.shape,
          [, i, o] = t.shape,
          s = [n && i > 1 ? r - 1 : r, n && o > 1 ? a - 1 : a],
          u = [n && i > 1 ? i - 1 : i, n && o > 1 ? o - 1 : o],
          c = s[0] / u[0],
          l = s[1] / u[1],
          h = 1 / c,
          d = 1 / l,
          p = 2 * Math.ceil(h) + 2,
          f = 2 * Math.ceil(d) + 2;
        this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${c});\n        const float widthScale = float(${l});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${d});\n\n        const int winHeight = int(${p});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${i}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${o}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${
          r - 1
        }.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${
          a - 1
        }.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;
      }
    }
    /**
     * @license
     * Copyright 2017 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class kh {
      constructor(t, e, n, r) {
        (this.variableNames = ["A"]), (this.outputShape = []);
        const [a, i, o, s] = t;
        this.outputShape = [a, e, n, s];
        const u = [r && e > 1 ? i - 1 : i, r && n > 1 ? o - 1 : o],
          c = [r && e > 1 ? e - 1 : e, r && n > 1 ? n - 1 : n];
        this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${
          u[0] / c[0]
        },\n          ${
          u[1] / c[1]
        });\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `;
      }
    }
    /**
     * @license
     * Copyright 2019 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class Nh {
      constructor(t, e, n, r) {
        (this.variableNames = ["A"]),
          (this.packedInputs = !0),
          (this.packedOutput = !0),
          (this.outputShape = []);
        const [a, i, o, s] = t;
        this.outputShape = [a, e, n, s];
        const u = [r && e > 1 ? i - 1 : i, r && n > 1 ? o - 1 : o],
          c = [r && e > 1 ? e - 1 : e, r && n > 1 ? n - 1 : n];
        this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${
          u[0] / c[0]
        },\n          ${u[1] / c[1]},\n          ${
          u[1] / c[1]
        });\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${
          s - 1
        };\n        bool hasNextRow = coords.z < ${
          n - 1
        };\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `;
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class Rh {
      constructor(t, e, n) {
        (this.variableNames = ["dy"]),
          (this.outputShape = []),
          (this.outputShape = e.shape);
        const [, r, a] = e.shape,
          [, i, o] = t.shape,
          s = [n && i > 1 ? r - 1 : r, n && o > 1 ? a - 1 : a],
          u = [n && i > 1 ? i - 1 : i, n && o > 1 ? o - 1 : o],
          c = s[0] / u[0],
          l = s[1] / u[1],
          h = 1 / c,
          d = 1 / l,
          p = 2 * Math.ceil(h) + 2,
          f = 2 * Math.ceil(d) + 2;
        this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${c});\n        const float widthScale = float(${l});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${d});\n\n        const int winHeight = int(${p});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${i}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${o}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${s[0]}) *\n                (float(dyR) / float(${u[0]}));\n\n            float sourceFracCol =\n                float(${s[1]}) *\n                  (float(dyC) / float(${u[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${a}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;
      }
    }
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class Ah {
      constructor(t, e, n, r) {
        (this.variableNames = ["A"]), (this.outputShape = []);
        const [a, i, o, s] = t;
        this.outputShape = [a, e, n, s];
        const u = [r && e > 1 ? i - 1 : i, r && n > 1 ? o - 1 : o],
          c = [r && e > 1 ? e - 1 : e, r && n > 1 ? n - 1 : n],
          l = r ? "0.5" : "0.0";
        this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${
          u[0] / c[0]
        },\n          ${
          u[1] / c[1]
        });\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${l})));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `;
      }
    }
    /**
     * @license
     * Copyright 2017 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class Th {
      constructor(t, e) {
        this.variableNames = ["x"];
        const n = t.length;
        if (n > 4)
          throw new Error(
            `WebGL backend: Reverse of rank-${n} tensor is not yet supported`
          );
        if (((this.outputShape = t), 1 === n))
          return void (this.userCode = `\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${t[0]} - coord - 1));\n        }\n      `);
        const r = t
            .map((n, r) =>
              ((n) =>
                -1 !== e.indexOf(n) && 1 !== t[n]
                  ? `${t[n]} - coords[${n}] - 1`
                  : `coords[${n}]`)(r)
            )
            .join(","),
          a = ol(n);
        this.userCode = `\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${r}));\n      }\n    `;
      }
    }
    /**
     * @license
     * Copyright 2019 Google LLC All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class _h {
      constructor(t, e) {
        (this.variableNames = ["x"]),
          (this.packedInputs = !0),
          (this.packedOutput = !0);
        const n = t.length;
        if (n > 4)
          throw new Error(
            `WebGL backend: Reverse of rank-${n} tensor is not yet supported`
          );
        this.outputShape = t;
        const r = Uc("rc", n),
          a = `${r[n - 1]} + 1 < ${this.outputShape[n - 1]}`,
          i = `${r[n - 2]} + 1 < ${this.outputShape[n - 2]}`,
          o = ol(n);
        function s(n) {
          const r = t.map((r, a) =>
            (function (n, r) {
              return -1 !== e.indexOf(n) && 1 !== t[n]
                ? `${t[n]} - ${r[n]} - 1`
                : "" + r[n];
            })(a, n)
          );
          return `getChannel(getX(${r.join(",")}), vec2(${r
            .slice(-2)
            .join(",")}))`;
        }
        this.userCode =
          1 === n
            ? `\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${t[0]} - rc - 1),\n            ${t[0]} - rc - 1);\n          if(${a}){\n              result.g = getChannel(getX(${t[0]} - (rc  + 1) - 1),\n                ${t[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `
            : `\n        void main() {\n          ${o} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${(function (
                t
              ) {
                return s(t);
              })(
                r.slice()
              )};\n          if(${a}){\n            result.g = ${(function (t) {
                return (t[n - 1] = "(" + t[n - 1] + " + 1)"), s(t);
              })(
                r.slice()
              )};\n          }\n          if(${i}) {\n            result.b = ${(function (
                t
              ) {
                return (t[n - 2] = "(" + t[n - 2] + " + 1)"), s(t);
              })(
                r.slice()
              )};\n            if(${a}) {\n              result.a = ${(function (
                t
              ) {
                return (
                  (t[n - 1] = "(" + t[n - 1] + " + 1)"),
                  (t[n - 2] = "(" + t[n - 2] + " + 1)"),
                  s(t)
                );
              })(
                r.slice()
              )};\n            }\n          }\n          setOutput(result);\n        }\n    `;
      }
    }
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class Dh {
      constructor(t, e, n, r, a, i, o = !0) {
        (this.variableNames = ["updates", "indices", "defaultValue"]),
          (this.outputShape = i);
        const s = ol(a.length),
          u = ol(i.length);
        let c = "";
        1 === n ? (c = "i") : 2 === n && (c = "i, j");
        const l = `getIndices(${c})`;
        let h = "";
        1 === r ? (h = "i") : 2 === r && (h = "i, coords[1]");
        const d = `getUpdates(${h})`,
          p = e > 1 ? "strides[j]" : "strides";
        this.userCode = `\n        ${s} strides = ${s}(${a});\n\n        void main() {\n          ${u} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${t}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${e}; j++) {\n              int index = round(${l});\n              flattenedIndex += index * ${p};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${d};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `;
      }
    }
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class Fh {
      constructor(t, e) {
        this.variableNames = ["x", "segmentIds"];
        const n = t.windowSize,
          r = t.batchSize,
          a = t.inSize,
          i = t.numSegments,
          o = i * Math.ceil(a / n);
        this.outputShape = [r, o];
        const s = 4 * Math.floor(n / 4),
          u = n % 4,
          c = "\n        sumValue += dot(values, segFilter);\n    ";
        let l = "";
        a % n > 0 &&
          (l = `\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return initializationValue;\n        }\n      `);
        let h = "";
        a % n > 0 &&
          (h = `\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return -1.0;\n        }\n      `),
          (this.userCode = `\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${l}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${i})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${i})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${s}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${c}\n        }\n\n        int inIdx = inOffset + ${s};\n        if (${
            1 === u
          }) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${c}\n        } else if (${
            2 === u
          }) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${c}\n        } else if (${
            3 === u
          }) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${c}\n        }\n        setOutput(sumValue);\n      }\n    `);
      }
    }
    /**
     * @license
     * Copyright 2017 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class Mh {
      constructor(t, e, n) {
        let r, a;
        if (
          ((this.variableNames = ["c", "a", "b"]),
          (this.outputShape = e),
          n > 4)
        )
          throw Error(`Where for rank ${n} is not yet supported`);
        if (1 === n) (a = "resRC"), (r = "resRC");
        else {
          const n = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"],
            i = [],
            o = [];
          for (let r = 0; r < e.length; r++)
            o.push("" + n[r]), r < t && i.push("" + n[r]);
          (r = i.join()), (a = o.join());
        }
        const i = ol(n);
        this.userCode = `\n      void main() {\n        ${i} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${a}));\n        } else {\n          setOutput(getB(${a}));\n        }\n      }\n    `;
      }
    }
    /**
     * @license
     * Copyright 2017 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class jh {
      constructor(t) {
        (this.variableNames = ["source"]),
          (this.outputShape = t),
          (this.rank = t.length);
        const e = ol(this.rank),
          n = `uniform int start[${this.rank}];`,
          r = (function (t) {
            if (1 === t) return "sourceLoc";
            if (t <= 6)
              return $h
                .slice(0, t)
                .map((t) => "sourceLoc." + t)
                .join(",");
            throw Error(`Slicing for rank ${t} is not yet supported`);
          })(
            /**
             * @license
             * Copyright 2019 Google Inc. All Rights Reserved.
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             * http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             * =============================================================================
             */ this.rank
          );
        let a;
        (a = `\n        ${e} sourceLoc;\n        ${e} coords = getOutputCoords();\n        ${t
          .map((t, e) => `sourceLoc.${$h[e]} = start[${e}] + coords.${$h[e]};`)
          .join("\n")}\n      `),
          (this.userCode = `\n      ${n}\n      void main() {\n        ${a}\n        setOutput(getSource(${r}));\n      }\n    `);
      }
      getCustomSetupFunc(t) {
        if (t.length !== this.rank)
          throw Error(
            `The rank (${this.rank}) of the program must match the length of start (${t.length})`
          );
        return (e, n) => {
          (null == this.startLoc &&
            ((this.startLoc = e.getUniformLocationNoThrow(n, "start")),
            null == this.startLoc)) ||
            e.gl.uniform1iv(this.startLoc, t);
        };
      }
    }
    const $h = ["x", "y", "z", "w", "u", "v"];
    class Bh {
      constructor(t) {
        (this.variableNames = ["source"]),
          (this.packedInputs = !0),
          (this.packedOutput = !0),
          (this.outputShape = t),
          (this.rank = t.length);
        const e = ol(this.rank),
          n = Uc("coords", this.rank),
          r = Uc("sourceLoc", this.rank),
          a = 1 === this.rank ? "sourceLoc" : `vec2(${r.slice(-2).join()})`,
          i = `getChannel(getSource(${r.join()}), ${a})`,
          o = `\n      result.x = ${i};\n      if (++${n[this.rank - 1]} < ${
            t[this.rank - 1]
          }) {\n        ++${
            r[this.rank - 1]
          };\n        result.y = ${i};\n        --${
            r[this.rank - 1]
          };\n      }\n    `,
          s =
            1 === this.rank
              ? ""
              : `\n      --${n[this.rank - 1]};\n      if (++${
                  n[this.rank - 2]
                } < ${t[this.rank - 2]}) {\n        ++${
                  r[this.rank - 2]
                };\n        result.z = ${i};\n        if (++${
                  n[this.rank - 1]
                } < ${t[this.rank - 1]}) {\n          ++${
                  r[this.rank - 1]
                };\n          result.w = ${i};\n        }\n      }\n    `,
          u =
            this.rank <= 4
              ? `sourceLoc = coords +\n            ${e}(${t
                  .map((t, e) => `start[${e}]`)
                  .join()});`
              : t.map((t, e) => `${r[e]} = ${n[e]} + start[${e}];`).join("\n");
        this.userCode = `\n      uniform int start[${this.rank}];\n      void main() {\n        ${e} coords = getOutputCoords();\n        ${e} sourceLoc;\n        ${u}\n        vec4 result = vec4(0.);\n        ${o}\n        ${s}\n        setOutput(result);\n      }\n    `;
      }
      getCustomSetupFunc(t) {
        if (t.length !== this.rank)
          throw Error(
            `The rank (${this.rank}) of the program must match the length of start (${t.length})`
          );
        return (e, n) => {
          (null == this.startLoc &&
            ((this.startLoc = e.getUniformLocationNoThrow(n, "start")),
            null == this.startLoc)) ||
            e.gl.uniform1iv(this.startLoc, t);
        };
      }
    }
    /**
     * @license
     * Copyright 2017 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class Ph {
      constructor(t, e, n) {
        (this.variableNames = ["x"]), (this.outputShape = n);
        const r = n.length,
          a = ol(n.length),
          i = ol(n.length);
        let o = "";
        if (1 === r) o = "coords * strides + begin";
        else {
          let t = 0;
          o = n
            .map(
              (e, r) => (
                t++,
                1 === n.length
                  ? `coords * strides[${r}] + begin[${r}]`
                  : `coords[${t - 1}] * strides[${r}] + begin[${r}]`
              )
            )
            .join(",");
        }
        this.userCode = `\n      ${a} begin = ${a}(${t});\n      ${a} strides = ${a}(${e});\n\n      void main() {\n        ${i} coords = getOutputCoords();\n        setOutput(getX(${o}));\n      }\n    `;
      }
    }
    /**
     * @license
     * Copyright 2017 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class Lh {
      constructor(t) {
        (this.gpgpu = t),
          (this.numUsedTextures = 0),
          (this.numFreeTextures = 0),
          (this.freeTextures = {}),
          (this.logEnabled = !1),
          (this.usedTextures = {});
      }
      acquireTexture(t, e, n) {
        const r = zh(e, n),
          a = Wh(t, r, n);
        if (
          (a in this.freeTextures || (this.freeTextures[a] = []),
          a in this.usedTextures || (this.usedTextures[a] = []),
          this.freeTextures[a].length > 0)
        ) {
          this.numFreeTextures--, this.numUsedTextures++, this.log();
          const t = this.freeTextures[a].shift();
          return this.usedTextures[a].push(t), t;
        }
        let i;
        return (
          this.numUsedTextures++,
          this.log(),
          r === lc.PACKED_2X2_FLOAT32
            ? (i = this.gpgpu.createPackedMatrixTexture(t[0], t[1]))
            : r === lc.PACKED_2X2_FLOAT16
            ? (i = this.gpgpu.createFloat16PackedMatrixTexture(t[0], t[1]))
            : r === lc.UNPACKED_FLOAT32
            ? (i = this.gpgpu.createFloat32MatrixTexture(t[0], t[1]))
            : r === lc.UNPACKED_FLOAT16
            ? (i = this.gpgpu.createFloat16MatrixTexture(t[0], t[1]))
            : r === lc.PACKED_4X1_UNSIGNED_BYTE &&
              (i = this.gpgpu.createUnsignedBytesMatrixTexture(t[0], t[1])),
          this.usedTextures[a].push(i),
          i
        );
      }
      releaseTexture(t, e, n, r) {
        if (null == this.freeTextures) return;
        const a = Wh(e, zh(n, r), r);
        a in this.freeTextures || (this.freeTextures[a] = []),
          this.freeTextures[a].push(t),
          this.numFreeTextures++,
          this.numUsedTextures--;
        const i = this.usedTextures[a],
          o = i.indexOf(t);
        if (o < 0)
          throw new Error(
            "Cannot release a texture that was never provided by this texture manager"
          );
        i.splice(o, 1), this.log();
      }
      log() {
        if (!this.logEnabled) return;
        const t = this.numFreeTextures + this.numUsedTextures;
        console.log(
          "Free/Used",
          `${this.numFreeTextures} / ${this.numUsedTextures}`,
          `(${t})`
        );
      }
      getNumUsedTextures() {
        return this.numUsedTextures;
      }
      getNumFreeTextures() {
        return this.numFreeTextures;
      }
      dispose() {
        if (null != this.freeTextures) {
          for (const t in this.freeTextures)
            this.freeTextures[t].forEach((t) => {
              this.gpgpu.deleteMatrixTexture(t);
            });
          for (const t in this.usedTextures)
            this.usedTextures[t].forEach((t) => {
              this.gpgpu.deleteMatrixTexture(t);
            });
          (this.freeTextures = null),
            (this.usedTextures = null),
            (this.numUsedTextures = 0),
            (this.numFreeTextures = 0);
        }
      }
    }
    function zh(t, e) {
      if (t === cc.UPLOAD) return lc.PACKED_2X2_FLOAT32;
      if (t === cc.RENDER || null == t)
        return (function (t) {
          return Object(En.ob)().getBool("WEBGL_RENDER_FLOAT32_ENABLED")
            ? t
              ? lc.PACKED_2X2_FLOAT32
              : lc.UNPACKED_FLOAT32
            : t
            ? lc.PACKED_2X2_FLOAT16
            : lc.UNPACKED_FLOAT16;
        })(e);
      if (t === cc.DOWNLOAD || t === cc.PIXELS)
        return lc.PACKED_4X1_UNSIGNED_BYTE;
      throw new Error("Unknown logical texture type " + t);
    }
    function Wh(t, e, n) {
      return `${t[0]}_${t[1]}_${e}_${n}`;
    }
    /**
     * @license
     * Copyright 2017 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class Vh {
      constructor(t, e) {
        this.variableNames = ["A"];
        const n = new Array(t.length);
        for (let r = 0; r < n.length; r++) n[r] = t[r] * e[r];
        (this.outputShape = n), (this.rank = n.length);
        const r = ol(this.rank),
          a = (function (t) {
            const e = t.length;
            if (e > 5) throw Error(`Tile for rank ${e} is not yet supported`);
            if (1 === e) return `imod(resRC, ${t[0]})`;
            const n = ["resRC.x", "resRC.y", "resRC.z", "resRC.w", "resRC.u"],
              r = [];
            for (let e = 0; e < t.length; e++) r.push(`imod(${n[e]}, ${t[e]})`);
            return r.join();
          })(
            /**
             * @license
             * Copyright 2017 Google Inc. All Rights Reserved.
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             * http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             * =============================================================================
             */ t
          );
        this.userCode = `\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${a}));\n      }\n    `;
      }
    }
    class Uh {
      constructor(t, e) {
        (this.variableNames = ["A"]),
          (this.outputShape = t),
          (this.userCode = `\n      float unaryOperation(float x) {\n        ${e}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `);
      }
    }
    const Gh = "return abs(x);",
      Hh = "if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",
      qh = "if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",
      Kh = `\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${En.F.SELU_SCALEALPHA};\n  float scale = ${En.F.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`;
    const Xh = "return -x;",
      Yh = "return ceil(x);",
      Jh = "return floor(x);",
      Qh = "return exp(x);",
      Zh = "return exp(x) - 1.0;",
      td = `\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${En.F.ERF_P};\n  float a1 = ${En.F.ERF_A1};\n  float a2 = ${En.F.ERF_A2};\n  float a3 = ${En.F.ERF_A3};\n  float a4 = ${En.F.ERF_A4};\n  float a5 = ${En.F.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`,
      ed = "return x;",
      nd =
        "\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",
      rd =
        "\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",
      ad =
        "\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n";
    class id {
      constructor(t, e) {
        (this.variableNames = ["A"]),
          (this.packedInputs = !0),
          (this.packedOutput = !0),
          (this.outputShape = t),
          (this.userCode = `\n      vec4 unaryOperation(vec4 x) {\n        ${e}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `);
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class od {
      constructor(t) {
        (this.variableNames = ["A"]),
          (this.packedInputs = !0),
          (this.packedOutput = !1),
          (this.outputShape = t);
        const e = t.length,
          n = Uc("rc", e),
          r = ol(e),
          a = (function (t, e) {
            if (1 === t) return "rc";
            let n = "";
            for (let r = 0; r < t; r++) (n += e[r]), r < t - 1 && (n += ",");
            return n;
          })(e, n),
          i = n.slice(-2),
          o = e <= 1 ? "rc" : `vec2(${i.join(",")})`;
        this.userCode = `\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${a});\n\n        setOutput(getChannel(packedInput, ${o}));\n      }\n    `;
      }
    }
    /**
     * @license
     * Copyright 2017 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const { segment_util: sd } = En.F,
      ud = En.Kb.split,
      cd = En.Kb.tile,
      ld = En.Kb.topkImpl,
      hd = En.Kb.whereImpl,
      dd = {};
    function pd(t, e = !1) {
      if ("linear" === t) return "return x;";
      if ("relu" === t) return e ? nd : Hh;
      if ("elu" === t)
        return e ? ad : "return (x >= 0.0) ? x : (exp(x) - 1.0);";
      if ("relu6" === t) return e ? rd : qh;
      if ("prelu" === t) return e ? Cl : xl;
      throw new Error(
        `Activation ${t} has not been implemented for the WebGL backend.`
      );
    }
    class fd extends En.d {
      constructor(t) {
        if (
          (super(),
          (this.pendingRead = new WeakMap()),
          (this.pendingDisposal = new WeakSet()),
          (this.dataRefCount = new WeakMap()),
          (this.numBytesInGPU = 0),
          (this.uploadWaitMs = 0),
          (this.downloadWaitMs = 0),
          (this.warnedAboutMemory = !1),
          (this.pendingDeletes = 0),
          (this.disposed = !1),
          !Object(En.ob)().getBool("HAS_WEBGL"))
        )
          throw new Error("WebGL is not supported on this device");
        if (null == t) {
          const t = sc(Object(En.ob)().getNumber("WEBGL_VERSION"));
          (this.binaryCache =
            ((e = Object(En.ob)().getNumber("WEBGL_VERSION")) in dd ||
              (dd[e] = {}),
            dd[e])),
            (this.gpgpu = new uh(t)),
            (this.canvas = t.canvas),
            (this.gpgpuCreatedLocally = !0);
        } else
          (this.gpgpu = t),
            (this.binaryCache = {}),
            (this.gpgpuCreatedLocally = !1),
            (this.canvas = t.gl.canvas);
        var e;
        (this.textureManager = new Lh(this.gpgpu)),
          (this.numMBBeforeWarning =
            null == Object(En.ob)().global.screen
              ? 1024
              : (Object(En.ob)().global.screen.height *
                  Object(En.ob)().global.screen.width *
                  window.devicePixelRatio *
                  600) /
                1024 /
                1024),
          (this.texData = new En.a(this, Object(En.nb)()));
      }
      numDataIds() {
        return (
          this.texData.numDataIds() +
          (this.cpuBackend ? this.cpuBackend.numDataIds() : 0) -
          this.pendingDeletes
        );
      }
      write(t, e, n) {
        if (
          (Object(En.ob)().getBool("DEBUG") && this.checkNumericalProblems(t),
          "complex64" === n && null != t)
        )
          throw new Error(
            "Cannot write to a complex64 dtype. Please use tf.complex(real, imag)."
          );
        const r = {};
        return (
          this.texData.set(r, {
            shape: e,
            dtype: n,
            values: t,
            usage: cc.UPLOAD,
          }),
          r
        );
      }
      move(t, e, n, r) {
        if (
          (Object(En.ob)().getBool("DEBUG") && this.checkNumericalProblems(e),
          "complex64" === r)
        )
          throw new Error(
            "Cannot write to a complex64 dtype. Please use tf.complex(real, imag)."
          );
        this.texData.set(t, {
          shape: n,
          dtype: r,
          values: e,
          usage: cc.UPLOAD,
        });
      }
      readSync(t) {
        const e = this.texData.get(t),
          {
            values: n,
            dtype: r,
            complexTensors: a,
            slice: i,
            shape: o,
            isPacked: s,
          } = e;
        if (null != i) {
          let e;
          e = s ? new id(o, ed) : new Uh(o, ed);
          const n = this.runWebGLProgram(
              e,
              [{ dataId: t, shape: o, dtype: r }],
              r
            ),
            a = this.readSync(n.dataId);
          return this.disposeData(n.dataId), a;
        }
        if (null != n) return this.convertAndCacheOnCPU(t);
        if ("string" === r) return n;
        const u = null != this.activeTimers;
        let c, l;
        if ((u && (c = En.Cd.now()), "complex64" === r)) {
          const t = a.real.dataSync(),
            e = a.imag.dataSync();
          l = En.F.mergeRealAndImagArrays(t, e);
        } else l = this.getValuesFromTexture(t);
        return (
          u && (this.downloadWaitMs += En.Cd.now() - c),
          this.convertAndCacheOnCPU(t, l)
        );
      }
      async read(t) {
        if (this.pendingRead.has(t)) {
          const e = this.pendingRead.get(t);
          return new Promise((t) => e.push(t));
        }
        const e = this.texData.get(t),
          {
            values: n,
            shape: r,
            slice: a,
            dtype: i,
            complexTensors: o,
            isPacked: s,
          } = e;
        if (null != a) {
          let e;
          e = s ? new id(r, ed) : new Uh(r, ed);
          const n = this.runWebGLProgram(
              e,
              [{ dataId: t, shape: r, dtype: i }],
              i
            ),
            a = this.read(n.dataId);
          return this.disposeData(n.dataId), a;
        }
        if (null != n) return this.convertAndCacheOnCPU(t);
        if (
          !Object(En.ob)().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED") &&
          2 === Object(En.ob)().getNumber("WEBGL_VERSION")
        )
          throw new Error(
            "tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported."
          );
        let u,
          c,
          l = null;
        if (
          "complex64" !== i &&
          Object(En.ob)().get("WEBGL_BUFFER_SUPPORTED")
        ) {
          u = this.decode(t);
          const e = this.texData.get(u.dataId);
          l = this.gpgpu.createBufferFromTexture(e.texture, ...dc(r));
        }
        if (
          (this.pendingRead.set(t, []),
          "complex64" !== i && (await this.gpgpu.createAndWaitForFence()),
          "complex64" === i)
        ) {
          const t = await Promise.all([o.real.data(), o.imag.data()]),
            e = t[0],
            n = t[1];
          c = En.F.mergeRealAndImagArrays(e, n);
        } else if (null == l) c = this.getValuesFromTexture(t);
        else {
          const t = En.Cd.sizeFromShape(r);
          c = this.gpgpu.downloadFloat32MatrixFromBuffer(l, t);
        }
        null != u && this.disposeData(u.dataId);
        const h = this.convertAndCacheOnCPU(t, c),
          d = this.pendingRead.get(t);
        return (
          this.pendingRead.delete(t),
          d.forEach((t) => t(h)),
          this.pendingDisposal.has(t) &&
            (this.pendingDisposal.delete(t),
            this.disposeData(t),
            this.pendingDeletes--),
          h
        );
      }
      checkNumericalProblems(t) {
        if (null != t)
          for (let e = 0; e < t.length; e++) {
            const n = t[e];
            if (!gc(n)) {
              if (Object(En.ob)().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))
                throw Error(
                  `The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`
                );
              throw Error(
                `The value ${n} cannot be represented on this device.`
              );
            }
          }
      }
      getValuesFromTexture(t) {
        const { shape: e, dtype: n, isPacked: r } = this.texData.get(t),
          a = En.Cd.sizeFromShape(e);
        if (Object(En.ob)().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")) {
          const n = this.decode(t),
            r = this.texData.get(n.dataId),
            i = this.gpgpu
              .downloadMatrixFromPackedTexture(r.texture, ...dc(e))
              .subarray(0, a);
          return this.disposeData(n.dataId), i;
        }
        const i = Object(En.ob)().getBool("WEBGL_PACK") && !0 === r,
          o = i ? Ac(e) : e,
          s = i ? new Kl(o) : new ql(o),
          u = this.runWebGLProgram(
            s,
            [{ shape: o, dtype: n, dataId: t }],
            "float32"
          ),
          c = this.texData.get(u.dataId),
          l = this.gpgpu
            .downloadByteEncodedFloatMatrixFromOutputTexture(
              c.texture,
              c.texShape[0],
              c.texShape[1]
            )
            .subarray(0, a);
        return this.disposeData(u.dataId), l;
      }
      async time(t) {
        const e = this.activeTimers,
          n = [];
        let r = !1;
        null == this.programTimersStack
          ? ((this.programTimersStack = n), (r = !0))
          : this.activeTimers.push(n),
          (this.activeTimers = n),
          t();
        const a = En.Cd.flatten(this.activeTimers.map((t) => t.query)).filter(
            (t) => null != t
          ),
          i = En.Cd.flatten(this.activeTimers.map((t) => t.name)).filter(
            (t) => null != t
          );
        (this.activeTimers = e), r && (this.programTimersStack = null);
        const o = {
          uploadWaitMs: this.uploadWaitMs,
          downloadWaitMs: this.downloadWaitMs,
          kernelMs: null,
          wallMs: null,
        };
        if (
          Object(En.ob)().getNumber(
            "WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE"
          ) > 0
        ) {
          const t = await Promise.all(a);
          (o.kernelMs = En.Cd.sum(t)),
            (o.getExtraProfileInfo = () =>
              t
                .map((t, e) => ({ name: i[e], ms: t }))
                .map((t) => `${t.name}: ${t.ms}`)
                .join(", "));
        } else
          o.kernelMs = {
            error: "WebGL query timers are not supported in this environment.",
          };
        return (this.uploadWaitMs = 0), (this.downloadWaitMs = 0), o;
      }
      memory() {
        return { unreliable: !1, numBytesInGPU: this.numBytesInGPU };
      }
      startTimer() {
        return Object(En.ob)().getNumber(
          "WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE"
        ) > 0
          ? this.gpgpu.beginQuery()
          : { startMs: En.Cd.now(), endMs: null };
      }
      endTimer(t) {
        return Object(En.ob)().getNumber(
          "WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE"
        ) > 0
          ? (this.gpgpu.endQuery(), t)
          : ((t.endMs = En.Cd.now()), t);
      }
      async getQueryTime(t) {
        if (
          Object(En.ob)().getNumber(
            "WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE"
          ) > 0
        )
          return this.gpgpu.waitForQueryAndGetTime(t);
        const e = t;
        return e.endMs - e.startMs;
      }
      disposeData(t) {
        if (this.pendingDisposal.has(t)) return;
        if (this.pendingRead.has(t))
          return this.pendingDisposal.add(t), void this.pendingDeletes++;
        if (!this.texData.has(t)) return;
        this.releaseGPUData(t);
        const { complexTensors: e } = this.texData.get(t);
        null != e && (e.real.dispose(), e.imag.dispose()),
          this.texData.delete(t);
      }
      releaseGPUData(t) {
        const {
            texture: e,
            dtype: n,
            texShape: r,
            usage: a,
            isPacked: i,
            slice: o,
          } = this.texData.get(t),
          s = (o && o.origDataId) || t,
          u = this.dataRefCount.get(s);
        u > 1
          ? this.dataRefCount.set(s, u - 1)
          : (this.dataRefCount.delete(s),
            null != e &&
              ((this.numBytesInGPU -= this.computeBytes(r, n)),
              this.textureManager.releaseTexture(e, r, a, i)));
        const c = this.texData.get(t);
        (c.texture = null),
          (c.texShape = null),
          (c.isPacked = !1),
          (c.slice = null);
      }
      getTexture(t) {
        return this.uploadToGPU(t), this.texData.get(t).texture;
      }
      getDataInfo(t) {
        return this.texData.get(t);
      }
      getCPUBackend() {
        return Object(En.ob)().getBool("WEBGL_CPU_FORWARD")
          ? (null == this.cpuBackend &&
              (this.cpuBackend = Object(En.nb)().findBackend("cpu")),
            this.cpuBackend)
          : null;
      }
      shouldExecuteOnCPU(t, e = 128) {
        return (
          null != this.getCPUBackend() &&
          t.every(
            (t) =>
              null == this.texData.get(t.dataId).texture &&
              En.Cd.sizeFromShape(t.shape) < e
          )
        );
      }
      getGPGPUContext() {
        return this.gpgpu;
      }
      complex(t, e) {
        const n = this.makeOutput(t.shape, "complex64");
        return (
          (this.texData.get(n.dataId).complexTensors = {
            real: Object(En.nb)().keep(t.clone()),
            imag: Object(En.nb)().keep(e.clone()),
          }),
          n
        );
      }
      real(t) {
        return this.texData.get(t.dataId).complexTensors.real.clone();
      }
      imag(t) {
        return this.texData.get(t.dataId).complexTensors.imag.clone();
      }
      slice(t, e, n) {
        if (this.shouldExecuteOnCPU([t])) return this.cpuBackend.slice(t, e, n);
        if (0 === En.Cd.sizeFromShape(n)) return Object(En.pd)([], n, t.dtype);
        const { isPacked: r } = this.texData.get(t.dataId),
          a = En.Yc.isSliceContinous(t.shape, e, n);
        if (r || !a) {
          const r = Object(En.ob)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")
              ? new Bh(n)
              : new jh(n),
            a = r.getCustomSetupFunc(e);
          return this.compileAndRun(r, [t], null, a);
        }
        return this.uploadToGPU(t.dataId), this.shallowSlice(t, e, n);
      }
      shallowSlice(t, e, n) {
        const r = this.texData.get(t.dataId),
          a = this.makeOutput(n, t.dtype),
          i = this.texData.get(a.dataId);
        Object.assign(i, r), (i.shape = n), (i.dtype = t.dtype);
        let o = En.Yc.computeFlatOffset(e, t.strides);
        r.slice && (o += r.slice.flatOffset),
          (i.slice = {
            flatOffset: o,
            origDataId: (r.slice && r.slice.origDataId) || t.dataId,
          });
        const s = this.dataRefCount.get(i.slice.origDataId) || 1;
        return this.dataRefCount.set(i.slice.origDataId, s + 1), a;
      }
      stridedSlice(t, e, n, r) {
        if (this.shouldExecuteOnCPU([t]))
          return this.cpuBackend.stridedSlice(t, e, n, r);
        const a = En.Yc.computeOutShape(e, n, r);
        if (a.some((t) => 0 === t)) return Object(En.pd)([], a);
        const i = new Ph(e, r, a);
        return this.compileAndRun(i, [t]);
      }
      reverse(t, e) {
        const n = Object(En.ob)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")
          ? new _h(t.shape, e)
          : new Th(t.shape, e);
        return this.compileAndRun(n, [t]);
      }
      concat(t, e) {
        if ("complex64" === t[0].dtype) {
          const n = t.map((t) => Object(En.yc)(t)),
            r = t.map((t) => Object(En.Fb)(t));
          return Object(En.R)(this.concat(n, e), this.concat(r, e));
        }
        if (this.shouldExecuteOnCPU(t)) return this.cpuBackend.concat(t, e);
        if (1 === t.length) return t[0];
        if (
          t.length > Object(En.ob)().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")
        ) {
          const n = Math.floor(t.length / 2),
            r = this.concat(t.slice(0, n), e),
            a = this.concat(t.slice(n), e);
          return this.concat([r, a], e);
        }
        if (
          Object(En.ob)().getBool("WEBGL_PACK_ARRAY_OPERATIONS") &&
          t[0].rank > 1
        ) {
          const n = new Nl(
            t.map((t) => t.shape),
            e
          );
          return this.compileAndRun(n, t);
        }
        const n = En.F.computeOutShape(
            t.map((t) => t.shape),
            e
          ),
          r = t.map((t) => t.as2D(-1, En.Cd.sizeFromShape(t.shape.slice(e)))),
          a = new kl(r.map((t) => t.shape));
        return this.compileAndRun(a, r).reshape(n);
      }
      neg(t) {
        if (this.shouldExecuteOnCPU([t])) return this.cpuBackend.neg(t);
        if (Object(En.ob)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))
          return this.packedUnaryOp(t, Xh, t.dtype);
        const e = new Uh(t.shape, Xh);
        return this.compileAndRun(e, [t]);
      }
      batchMatMul(t, e, n, r) {
        const a = n ? t.shape[2] : t.shape[1],
          i = r ? e.shape[1] : e.shape[2],
          o = n ? t.shape[1] : t.shape[2],
          [s, ,] = t.shape;
        if ((1 === a || 1 === i) && o > 1e3) {
          n && (t = Object(En.yd)(t, [0, 2, 1])),
            r && (e = Object(En.yd)(e, [0, 2, 1]));
          const a = 1 === i ? t : t.as3D(s, o, 1),
            u = 1 === i ? 2 : 1,
            c = 1 === i ? e.as3D(s, 1, o) : e;
          return this.multiply(a, c).sum(u, !0);
        }
        const u = Object(En.Bd)(t.dtype, e.dtype),
          c = new gh(t.shape, [s, a, i], n, r);
        return this.compileAndRun(c, [t, e], u);
      }
      fusedBatchMatMul({
        a: t,
        b: e,
        transposeA: n,
        transposeB: r,
        bias: a,
        activation: i,
        preluActivationWeights: o,
      }) {
        const s = n ? t.shape[2] : t.shape[1],
          u = r ? e.shape[1] : e.shape[2],
          [c, ,] = t.shape,
          l = Object(En.Bd)(t.dtype, e.dtype),
          h = null != a,
          d = null != o,
          p = i ? pd(i, !0) : null,
          f = new gh(t.shape, [c, s, u], n, r, h, p, d),
          m = [t, e];
        return a && m.push(a), o && m.push(o), this.compileAndRun(f, m, l);
      }
      multiply(t, e) {
        if ("complex64" === t.dtype) {
          const n = this.texData.get(t.dataId),
            r = this.texData.get(e.dataId),
            a = new gl(fl, t.shape, e.shape),
            i = new gl(ml, t.shape, e.shape),
            o = [
              this.makeComplexComponentTensorInfo(t, n.complexTensors.real),
              this.makeComplexComponentTensorInfo(t, n.complexTensors.imag),
              this.makeComplexComponentTensorInfo(e, r.complexTensors.real),
              this.makeComplexComponentTensorInfo(e, r.complexTensors.imag),
            ],
            s = this.compileAndRun(a, o),
            u = this.compileAndRun(i, o),
            c = this.complex(s, u);
          return s.dispose(), u.dispose(), c;
        }
        if (this.shouldExecuteOnCPU([t, e]))
          return this.cpuBackend.multiply(t, e);
        if (Object(En.ob)().getBool("WEBGL_PACK_BINARY_OPERATIONS"))
          return this.packedBinaryOp(t, e, yl, t.dtype);
        const n = new wl(yl, t.shape, e.shape);
        return this.compileAndRun(n, [t, e], t.dtype);
      }
      batchNorm(t, e, n, r, a, i) {
        const o = [t, e, n];
        let s = null;
        null != r && ((s = r.shape), o.push(r));
        let u = null;
        if (
          (null != a && ((u = a.shape), o.push(a)),
          Object(En.ob)().getBool("WEBGL_PACK_NORMALIZATION"))
        ) {
          const r = new pl(t.shape, e.shape, n.shape, s, u, i);
          return this.compileAndRun(r, o);
        }
        const c = new dl(t.shape, e.shape, n.shape, s, u, i);
        return this.compileAndRun(c, o);
      }
      localResponseNormalization4D(t, e, n, r, a) {
        const i = Object(En.ob)().getBool("WEBGL_PACK_NORMALIZATION")
          ? new ph(t.shape, e, n, r, a)
          : new hh(t.shape, e, n, r, a);
        return this.compileAndRun(i, [t]);
      }
      LRNGrad(t, e, n, r, a, i, o) {
        const s = new dh(e.shape, r, a, i, o);
        return this.compileAndRun(s, [e, n, t]);
      }
      tile(t, e) {
        if ("string" === t.dtype) {
          const n = this.readSync(t.dataId).map((t) => En.Cd.decodeString(t)),
            r = Object(En.N)(t.shape, t.dtype, n);
          return cd(r, e);
        }
        const n = new Vh(t.shape, e);
        return this.compileAndRun(n, [t]);
      }
      pad(t, e, n) {
        const r = Object(En.ob)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")
          ? new wh(t.shape, e, n)
          : new xh(t.shape, e, n);
        return this.compileAndRun(r, [t]);
      }
      gather(t, e, n) {
        if (this.shouldExecuteOnCPU([t, e]))
          return this.cpuBackend.gather(t, e, n);
        const r = new eh(t.shape, e.size, n);
        return this.compileAndRun(r, [t, e]);
      }
      batchToSpaceND(t, e, n) {
        En.Cd.assert(
          t.rank <= 4,
          () =>
            "batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"
        );
        const r = e.reduce((t, e) => t * e),
          a = En.F.getReshaped(t.shape, e, r),
          i = En.F.getPermuted(a.length, e.length),
          o = En.F.getReshapedPermuted(t.shape, e, r),
          s = En.F.getSliceBeginCoords(n, e.length),
          u = En.F.getSliceSize(o, n, e.length);
        return Object(En.yd)(t.reshape(a), i).reshape(o).slice(s, u);
      }
      spaceToBatchND(t, e, n) {
        En.Cd.assert(
          t.rank <= 4,
          () =>
            "spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"
        );
        const r = e.reduce((t, e) => t * e),
          a = [[0, 0]];
        a.push(...n);
        for (let n = 1 + e.length; n < t.shape.length; ++n) a.push([0, 0]);
        const i = t.pad(a),
          o = En.F.getReshaped(i.shape, e, r, !1),
          s = En.F.getPermuted(o.length, e.length, !1),
          u = En.F.getReshapedPermuted(i.shape, e, r, !1);
        return Object(En.yd)(i.reshape(o), s).reshape(u);
      }
      reduce(t, e, n) {
        const r = t.shape[0],
          a = t.shape[1],
          i = En.F.computeOptimalWindowSize(a),
          o = new Eh({ windowSize: i, inSize: a, batchSize: r }, e),
          s = this.compileAndRun(o, [t], n);
        return 1 === s.shape[1] ? s : this.reduce(s, e, n);
      }
      argReduce(t, e, n = null) {
        let r = t.shape[0],
          a = t.shape[1];
        null != n && ((r = n.shape[0]), (a = n.shape[1]));
        const i = En.F.computeOptimalWindowSize(a),
          o = new Wc({ windowSize: i, inSize: a, batchSize: r }, e, null == n),
          s = [t];
        null != n && s.push(n);
        const u = this.compileAndRun(o, s, "int32");
        return 1 === u.shape[1] ? u : this.argReduce(t, e, u);
      }
      argReducePacked(t, e, n = null) {
        const r = null != n ? n.shape : t.shape,
          a = r[r.length - 1],
          i = En.F.computeOptimalWindowSize(a),
          o = new cl(r, i, e, null == n),
          s = null == n ? [t] : [t, n],
          u = this.compileAndRun(o, s, "int32");
        return u.rank === t.rank ? this.argReducePacked(t, e, u) : u;
      }
      sum(t, e) {
        En.F.assertAxesAreInnerMostDims("sum", e, t.rank);
        const [n, r] = En.F.computeOutAndReduceShapes(t.shape, e),
          a = En.Cd.sizeFromShape(r),
          i = t.as2D(-1, a),
          o = En.md(t.dtype);
        return this.reduce(i, "sum", o).reshape(n);
      }
      prod(t, e) {
        if (this.shouldExecuteOnCPU([t])) return this.cpuBackend.prod(t, e);
        const [n, r] = En.F.computeOutAndReduceShapes(t.shape, e),
          a = En.Cd.sizeFromShape(r),
          i = t.as2D(-1, a),
          o = En.md(t.dtype);
        return this.reduce(i, "prod", o).reshape(n);
      }
      unsortedSegmentSum(t, e, n) {
        let r = 0;
        const a = En.F.getAxesPermutation([r], t.rank);
        let i = t;
        null != a &&
          ((i = Object(En.yd)(t, a)),
          (r = En.F.getInnerMostAxes(1, t.rank)[0]));
        const o = sd.computeOutShape(i.shape, r, n),
          s = En.Cd.sizeFromShape([i.shape[r]]),
          u = i.as2D(-1, s),
          c = En.md(t.dtype);
        let l = this.segOpCompute(u, "unsortedSegmentSum", e, c, n).reshape(o);
        return (
          null != a && (l = Object(En.yd)(l, En.F.getUndoAxesPermutation(a))), l
        );
      }
      segOpCompute(t, e, n, r, a) {
        const i = t.shape[0],
          o = t.shape[1],
          s = sd.segOpComputeOptimalWindowSize(o, a),
          u = new Fh(
            { windowSize: s, inSize: o, batchSize: i, numSegments: a },
            e
          ),
          c = this.compileAndRun(u, [t, n], r);
        return c.shape[1] === a
          ? c
          : ((n = Object(En.xc)(0, a).tile([o / s])),
            this.segOpCompute(c, e, n, r, a));
      }
      argMinMaxReduce(t, e, n) {
        const r = [e];
        if (
          (En.F.assertAxesAreInnerMostDims(
            "arg" + n.charAt(0).toUpperCase() + n.slice(1),
            r,
            t.rank
          ),
          !Object(En.ob)().getBool("WEBGL_PACK_REDUCE") || t.rank <= 2)
        ) {
          const [e, a] = En.F.computeOutAndReduceShapes(t.shape, r),
            i = En.Cd.sizeFromShape(a),
            o = t.as2D(-1, i);
          return this.argReduce(o, n).reshape(e);
        }
        return this.argReducePacked(t, n);
      }
      argMin(t, e) {
        return this.argMinMaxReduce(t, e, "min");
      }
      argMax(t, e) {
        return this.argMinMaxReduce(t, e, "max");
      }
      cumsum(t, e, n, r) {
        if (e !== t.rank - 1)
          throw new Error(
            `WebGL cumsum shader expects an inner-most axis=${
              t.rank - 1
            } but got axis=` + e
          );
        const a = new zl(t.shape, n, r);
        return this.compileAndRun(a, [t]);
      }
      equal(t, e) {
        if (Object(En.ob)().getBool("WEBGL_PACK_BINARY_OPERATIONS"))
          return this.packedBinaryOp(
            t,
            e,
            "\n  return vec4(equal(a, b));\n",
            "bool"
          );
        const n = new wl("return float(a == b);", t.shape, e.shape);
        return this.compileAndRun(n, [t, e], "bool");
      }
      notEqual(t, e) {
        if (Object(En.ob)().getBool("WEBGL_PACK_BINARY_OPERATIONS"))
          return this.packedBinaryOp(
            t,
            e,
            "\n  return vec4(notEqual(a, b));\n",
            "bool"
          );
        const n = new wl("return float(a != b);", t.shape, e.shape);
        return this.compileAndRun(n, [t, e], "bool");
      }
      less(t, e) {
        if (this.shouldExecuteOnCPU([t, e])) return this.cpuBackend.less(t, e);
        if (Object(En.ob)().getBool("WEBGL_PACK_BINARY_OPERATIONS"))
          return this.packedBinaryOp(
            t,
            e,
            "\n  return vec4(lessThan(a, b));\n",
            "bool"
          );
        const n = new wl("return float(a < b);", t.shape, e.shape);
        return this.compileAndRun(n, [t, e], "bool");
      }
      lessEqual(t, e) {
        if (Object(En.ob)().getBool("WEBGL_PACK_BINARY_OPERATIONS"))
          return this.packedBinaryOp(
            t,
            e,
            "\n  return vec4(lessThanEqual(a, b));\n",
            "bool"
          );
        const n = new wl("return float(a <= b);", t.shape, e.shape);
        return this.compileAndRun(n, [t, e], "bool");
      }
      greater(t, e) {
        if (this.shouldExecuteOnCPU([t, e]))
          return this.cpuBackend.greater(t, e);
        if (Object(En.ob)().getBool("WEBGL_PACK_BINARY_OPERATIONS"))
          return this.packedBinaryOp(
            t,
            e,
            "\n  return vec4(greaterThan(a, b));\n",
            "bool"
          );
        const n = new wl("return float(a > b);", t.shape, e.shape);
        return this.compileAndRun(n, [t, e], "bool");
      }
      greaterEqual(t, e) {
        if (Object(En.ob)().getBool("WEBGL_PACK_BINARY_OPERATIONS"))
          return this.packedBinaryOp(
            t,
            e,
            "\n  return vec4(greaterThanEqual(a, b));\n",
            "bool"
          );
        const n = new wl("return float(a >= b);", t.shape, e.shape);
        return this.compileAndRun(n, [t, e], "bool");
      }
      logicalNot(t) {
        const e = new Uh(t.shape, "return float(!(x >= 1.0));");
        return this.compileAndRun(e, [t]);
      }
      logicalAnd(t, e) {
        if (Object(En.ob)().getBool("WEBGL_PACK_BINARY_OPERATIONS"))
          return this.packedBinaryOp(
            t,
            e,
            "\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",
            "bool"
          );
        const n = new wl(
          "return float(a >= 1.0 && b >= 1.0);",
          t.shape,
          e.shape
        );
        return this.compileAndRun(n, [t, e], "bool");
      }
      logicalOr(t, e) {
        if (Object(En.ob)().getBool("WEBGL_PACK_BINARY_OPERATIONS"))
          return this.packedBinaryOp(
            t,
            e,
            "\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",
            "bool"
          );
        const n = new wl(
          "return float(a >= 1.0 || b >= 1.0);",
          t.shape,
          e.shape
        );
        return this.compileAndRun(n, [t, e], "bool");
      }
      select(t, e, n) {
        const r = new Mh(t.rank, e.shape, e.rank);
        return this.compileAndRun(
          r,
          [t, e, n],
          Object(En.Bd)(e.dtype, n.dtype)
        );
      }
      where(t) {
        En.F.warn(
          "tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead"
        );
        const e = t.dataSync();
        return hd(t.shape, e);
      }
      topk(t, e, n) {
        const r = t.dataSync();
        return ld(r, t.shape, t.dtype, e, n);
      }
      min(t, e) {
        En.F.assertAxesAreInnerMostDims("min", e, t.rank);
        const [n, r] = En.F.computeOutAndReduceShapes(t.shape, e),
          a = En.Cd.sizeFromShape(r),
          i = t.as2D(-1, a);
        return this.reduce(i, "min", i.dtype).reshape(n);
      }
      minimum(t, e) {
        if (this.shouldExecuteOnCPU([t, e]))
          return this.cpuBackend.minimum(t, e);
        const n = Object(En.ob)().getBool("WEBGL_PACK_BINARY_OPERATIONS")
          ? new Ol(
              "\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",
              t.shape,
              e.shape
            )
          : new wl(
              "\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",
              t.shape,
              e.shape
            );
        return this.compileAndRun(n, [t, e]);
      }
      mod(t, e) {
        const n = Object(En.ob)().getBool("WEBGL_PACK_BINARY_OPERATIONS")
          ? new Ol(
              "\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",
              t.shape,
              e.shape
            )
          : new wl(
              "if (b == 0.0) return NAN;\n  return mod(a, b);",
              t.shape,
              e.shape
            );
        return this.compileAndRun(n, [t, e]);
      }
      maximum(t, e) {
        if (this.shouldExecuteOnCPU([t, e]))
          return this.cpuBackend.maximum(t, e);
        const n = Object(En.ob)().getBool("WEBGL_PACK_BINARY_OPERATIONS")
          ? new Ol(
              "\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",
              t.shape,
              e.shape
            )
          : new wl(
              "\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",
              t.shape,
              e.shape
            );
        return this.compileAndRun(n, [t, e]);
      }
      all(t, e) {
        En.F.assertAxesAreInnerMostDims("all", e, t.rank);
        const [n, r] = En.F.computeOutAndReduceShapes(t.shape, e),
          a = En.Cd.sizeFromShape(r),
          i = t.as2D(-1, a);
        return this.reduce(i, "all", i.dtype).reshape(n);
      }
      any(t, e) {
        En.F.assertAxesAreInnerMostDims("any", e, t.rank);
        const [n, r] = En.F.computeOutAndReduceShapes(t.shape, e),
          a = En.Cd.sizeFromShape(r),
          i = t.as2D(-1, a);
        return this.reduce(i, "any", i.dtype).reshape(n);
      }
      floorDiv(t, e) {
        if (Object(En.ob)().getBool("WEBGL_PACK_BINARY_OPERATIONS"))
          return this.packedBinaryOp(
            t,
            e,
            "\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",
            "int32"
          );
        const n = new wl(
          "\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",
          t.shape,
          e.shape
        );
        return this.compileAndRun(n, [t, e], "int32");
      }
      add(t, e) {
        if ("complex64" === t.dtype && "complex64" === e.dtype)
          return this.complexSeparableBinaryOp(t, e, bl);
        if (this.shouldExecuteOnCPU([t, e])) return this.cpuBackend.add(t, e);
        const n = Object(En.Bd)(t.dtype, e.dtype);
        if (Object(En.ob)().getBool("WEBGL_PACK_BINARY_OPERATIONS"))
          return this.packedBinaryOp(t, e, bl, n);
        const r = new wl(bl, t.shape, e.shape);
        return this.compileAndRun(r, [t, e], n);
      }
      packedUnaryOp(t, e, n) {
        const r = new id(t.shape, e);
        return this.compileAndRun(r, [t], n);
      }
      packedBinaryOp(t, e, n, r, a = !1) {
        const i = new Ol(n, t.shape, e.shape, a);
        return this.compileAndRun(i, [t, e], r);
      }
      complexSeparableBinaryOp(t, e, n) {
        const r = this.texData.get(t.dataId),
          a = this.texData.get(e.dataId),
          [i, o] = [
            [r.complexTensors.real, a.complexTensors.real],
            [r.complexTensors.imag, a.complexTensors.imag],
          ].map((r) => {
            const [a, i] = r,
              o = this.makeComplexComponentTensorInfo(t, a),
              s = this.makeComplexComponentTensorInfo(e, i),
              u = new wl(n, t.shape, e.shape);
            return this.compileAndRun(
              u,
              [o, s],
              Object(En.Bd)(a.dtype, i.dtype)
            );
          }),
          s = this.complex(i, o);
        return i.dispose(), o.dispose(), s;
      }
      makeComplexComponentTensorInfo(t, e) {
        return { dataId: e.dataId, dtype: e.dtype, shape: t.shape };
      }
      addN(t) {
        if (1 === t.length) return t[0];
        if (t.length > Object(En.ob)().get("WEBGL_MAX_TEXTURES_IN_SHADER")) {
          const e = Math.floor(t.length / 2),
            n = this.addN(t.slice(0, e)),
            r = this.addN(t.slice(e));
          return this.addN([n, r]);
        }
        const e = t.map((t) => t.dtype).reduce((t, e) => Object(En.Bd)(t, e)),
          n = t.map((t) => t.shape),
          r = Object(En.ob)().getBool("WEBGL_PACK")
            ? new zc(t[0].shape, n)
            : new Lc(t[0].shape, n);
        return this.compileAndRun(r, t, e);
      }
      subtract(t, e) {
        if ("complex64" === t.dtype && "complex64" === e.dtype)
          return this.complexSeparableBinaryOp(t, e, vl);
        if (this.shouldExecuteOnCPU([t, e]))
          return this.cpuBackend.subtract(t, e);
        const n = Object(En.Bd)(t.dtype, e.dtype);
        if (Object(En.ob)().getBool("WEBGL_PACK_BINARY_OPERATIONS"))
          return this.packedBinaryOp(t, e, vl, t.dtype);
        const r = new wl(vl, t.shape, e.shape);
        return this.compileAndRun(r, [t, e], n);
      }
      pow(t, e) {
        const n = Object(En.ob)().getBool("WEBGL_PACK_BINARY_OPERATIONS")
            ? new Ol(
                "\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",
                t.shape,
                e.shape
              )
            : new wl(
                "\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nif (b == 0.0) {\n  return 1.0;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",
                t.shape,
                e.shape
              ),
          r = Object(En.Bd)(t.dtype, e.dtype);
        return this.compileAndRun(n, [t, e], r);
      }
      ceil(t) {
        if (this.shouldExecuteOnCPU([t])) return this.cpuBackend.ceil(t);
        if (Object(En.ob)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))
          return this.packedUnaryOp(t, Yh, t.dtype);
        const e = new Uh(t.shape, Yh);
        return this.compileAndRun(e, [t]);
      }
      floor(t) {
        if (this.shouldExecuteOnCPU([t])) return this.cpuBackend.floor(t);
        if (Object(En.ob)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))
          return this.packedUnaryOp(t, Jh, t.dtype);
        const e = new Uh(t.shape, Jh);
        return this.compileAndRun(e, [t]);
      }
      sign(t) {
        const e = new Uh(
          t.shape,
          "\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"
        );
        return this.compileAndRun(e, [t]);
      }
      isNaN(t) {
        const e = new Uh(t.shape, "return float(isnan(x));");
        return this.compileAndRun(e, [t], "bool");
      }
      isInf(t) {
        const e = new Uh(t.shape, "return float(isinf(x));");
        return this.compileAndRun(e, [t], "bool");
      }
      isFinite(t) {
        const e = new Uh(t.shape, "return float(!isnan(x) && !isinf(x));");
        return this.compileAndRun(e, [t], "bool");
      }
      round(t) {
        const e = new Uh(
          t.shape,
          "\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"
        );
        return this.compileAndRun(e, [t]);
      }
      exp(t) {
        if (this.shouldExecuteOnCPU([t])) return this.cpuBackend.exp(t);
        if (Object(En.ob)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))
          return this.packedUnaryOp(t, Qh, t.dtype);
        const e = new Uh(t.shape, Qh);
        return this.compileAndRun(e, [t]);
      }
      expm1(t) {
        if (this.shouldExecuteOnCPU([t])) return this.cpuBackend.expm1(t);
        if (Object(En.ob)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))
          return this.packedUnaryOp(t, Zh, t.dtype);
        const e = new Uh(t.shape, Zh);
        return this.compileAndRun(e, [t]);
      }
      softmax(t, e) {
        const n = En.Cd.parseAxisParam([e], t.shape),
          r = Object(En.Yb)(t, n),
          a = En.F.expandShapeToKeepDim(r.shape, n),
          i = this.subtract(t, r.reshape(a)),
          o = this.exp(i),
          s = this.sum(o, n).reshape(a);
        return Object(En.ib)(o, s);
      }
      log(t) {
        if (this.shouldExecuteOnCPU([t])) return this.cpuBackend.log(t);
        if (Object(En.ob)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))
          return this.packedUnaryOp(
            t,
            "\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",
            t.dtype
          );
        const e = new Uh(t.shape, "if (x < 0.0) return NAN;\n  return log(x);");
        return this.compileAndRun(e, [t]);
      }
      log1p(t) {
        const e = new Uh(t.shape, "return log(1.0 + x);");
        return this.compileAndRun(e, [t]);
      }
      sqrt(t) {
        const e = new Uh(t.shape, "return sqrt(x);");
        return this.compileAndRun(e, [t]);
      }
      rsqrt(t) {
        if (this.shouldExecuteOnCPU([t])) return this.cpuBackend.rsqrt(t);
        const e = new Uh(t.shape, "return inversesqrt(x);");
        return this.compileAndRun(e, [t]);
      }
      reciprocal(t) {
        const e = new Uh(t.shape, "return 1.0 / x;");
        return this.compileAndRun(e, [t]);
      }
      relu(t) {
        let e;
        return (
          (e = Object(En.ob)().getBool("WEBGL_PACK")
            ? new id(t.shape, nd)
            : new Uh(t.shape, Hh)),
          this.compileAndRun(e, [t])
        );
      }
      relu6(t) {
        let e;
        return (
          (e = Object(En.ob)().getBool("WEBGL_PACK")
            ? new id(t.shape, rd)
            : new Uh(t.shape, qh)),
          this.compileAndRun(e, [t])
        );
      }
      prelu(t, e) {
        const n = Object(En.ob)().getBool("WEBGL_PACK_BINARY_OPERATIONS")
          ? new Ol(Cl, t.shape, e.shape)
          : new wl(xl, t.shape, e.shape);
        return this.compileAndRun(n, [t, e]);
      }
      elu(t) {
        if (Object(En.ob)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))
          return this.packedUnaryOp(t, ad, t.dtype);
        const e = new Uh(t.shape, "return (x >= 0.0) ? x : (exp(x) - 1.0);");
        return this.compileAndRun(e, [t]);
      }
      eluDer(t, e) {
        const n = Object(En.ob)().getBool("WEBGL_PACK_BINARY_OPERATIONS")
          ? new Ol(
              "\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",
              t.shape,
              e.shape
            )
          : new wl("return (b >= 1.0) ? a : a * (b + 1.0);", t.shape, e.shape);
        return this.compileAndRun(n, [t, e]);
      }
      selu(t) {
        const e = new Uh(t.shape, Kh);
        return this.compileAndRun(e, [t]);
      }
      int(t) {
        const e = new Uh(t.shape, "return float(int(x));");
        return this.compileAndRun(e, [t], "int32");
      }
      clip(t, e, n) {
        let r;
        r = Object(En.ob)().getBool("WEBGL_PACK_CLIP")
          ? new Sl(t.shape)
          : new El(t.shape);
        const a = r.getCustomSetupFunc(e, n);
        return this.compileAndRun(r, [t], null, a);
      }
      abs(t) {
        if (this.shouldExecuteOnCPU([t])) return this.cpuBackend.abs(t);
        if (Object(En.ob)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))
          return this.packedUnaryOp(t, Gh, t.dtype);
        const e = new Uh(t.shape, Gh);
        return this.compileAndRun(e, [t]);
      }
      complexAbs(t) {
        const e = this.texData.get(t.dataId),
          n = new Il(t.shape),
          r = [
            this.makeComplexComponentTensorInfo(t, e.complexTensors.real),
            this.makeComplexComponentTensorInfo(t, e.complexTensors.imag),
          ];
        return this.compileAndRun(n, r);
      }
      sigmoid(t) {
        const e = new Uh(t.shape, "return 1.0 / (1.0 + exp(-1.0 * x));");
        return this.compileAndRun(e, [t]);
      }
      softplus(t) {
        const e = new Uh(
          t.shape,
          "\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"
        );
        return this.compileAndRun(e, [t]);
      }
      sin(t) {
        const e = new Uh(
          t.shape,
          "if (isnan(x)) return x;\n  return sin(x);\n"
        );
        return this.compileAndRun(e, [t]);
      }
      cos(t) {
        const e = new Uh(
          t.shape,
          "if (isnan(x)) return x;\n  return cos(x);\n"
        );
        return this.compileAndRun(e, [t]);
      }
      tan(t) {
        const e = new Uh(t.shape, "return tan(x);");
        return this.compileAndRun(e, [t]);
      }
      asin(t) {
        const e = new Uh(
          t.shape,
          "if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"
        );
        return this.compileAndRun(e, [t]);
      }
      acos(t) {
        const e = new Uh(
          t.shape,
          "if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"
        );
        return this.compileAndRun(e, [t]);
      }
      atan(t) {
        const e = new Uh(
          t.shape,
          "if (isnan(x)) return x;\n  return atan(x);\n"
        );
        return this.compileAndRun(e, [t]);
      }
      atan2(t, e) {
        const n = Object(En.ob)().getBool("WEBGL_PACK_BINARY_OPERATIONS")
          ? new Ol(
              "\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",
              t.shape,
              e.shape
            )
          : new wl(
              "\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",
              t.shape,
              e.shape
            );
        return this.compileAndRun(n, [t, e]);
      }
      sinh(t) {
        const e = new Uh(
          t.shape,
          "\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"
        );
        return this.compileAndRun(e, [t]);
      }
      cosh(t) {
        const e = new Uh(
          t.shape,
          "\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"
        );
        return this.compileAndRun(e, [t]);
      }
      tanh(t) {
        const e = new Uh(
          t.shape,
          "\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"
        );
        return this.compileAndRun(e, [t]);
      }
      asinh(t) {
        const e = new Uh(
          t.shape,
          "if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));"
        );
        return this.compileAndRun(e, [t]);
      }
      acosh(t) {
        const e = new Uh(
          t.shape,
          "if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));"
        );
        return this.compileAndRun(e, [t]);
      }
      atanh(t) {
        const e = new Uh(
          t.shape,
          "if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;"
        );
        return this.compileAndRun(e, [t]);
      }
      erf(t) {
        const e = new Uh(t.shape, td);
        return this.compileAndRun(e, [t]);
      }
      step(t, e) {
        const n = new Uh(
          t.shape,
          (function (t = 0) {
            return `if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t});\n  `;
          })(e)
        );
        return this.compileAndRun(n, [t]);
      }
      conv2dByMatMul(t, e, n, r, a, i) {
        const o = t.shape,
          s = this.texData.get(t.dataId),
          u = n.inChannels,
          c = o[0] * o[1] * o[2],
          l = n.outChannels,
          h = "channelsLast" === n.dataFormat,
          d = (1 === c || 1 === l) && u > 1e3,
          p = o[2] % 2 != 0 && !!s.isPacked;
        if (
          d ||
          !Object(En.ob)().getBool("WEBGL_LAZILY_UNPACK") ||
          !Object(En.ob)().getBool("WEBGL_PACK_BINARY_OPERATIONS") ||
          !p
        ) {
          const s = h ? o[0] * o[1] * o[2] : o[0] * o[2] * o[3],
            u = this.reshape(t, [1, s, n.inChannels]),
            c = this.reshape(e, [1, n.inChannels, n.outChannels]);
          return this.reshape(
            this.fusedBatchMatMul({
              a: u,
              b: c,
              transposeA: !1,
              transposeB: !1,
              bias: r,
              activation: a,
              preluActivationWeights: i,
            }),
            n.outShape
          );
        }
        const f = h ? o[0] * o[1] * (o[2] + 1) : o[0] * o[2] * (o[3] + 1),
          m = { dataId: t.dataId, shape: [1, f, n.inChannels], dtype: t.dtype },
          g = s.shape;
        (s.shape = s.shape.slice()),
          s.shape[s.shape.length - 2]++,
          En.Cd.assert(
            _c(s.shape, m.shape),
            () => `packed reshape ${s.shape} to ${m.shape} isn't free`
          );
        const b = this.reshape(e, [1, n.inChannels, n.outChannels]),
          v = this.fusedBatchMatMul({
            a: m,
            b: b,
            transposeA: !1,
            transposeB: !1,
            bias: r,
            activation: a,
            preluActivationWeights: i,
          }),
          y = this.texData.get(v.dataId);
        return (
          En.Cd.assert(
            y.isPacked,
            () => "batchMatMul result is expected to be packed"
          ),
          (s.shape = g),
          (y.shape = n.outShape),
          Object(En.nb)().makeTensorFromDataId(v.dataId, n.outShape, v.dtype)
        );
      }
      conv2dWithIm2Row(t, e, n, r, a, i) {
        const {
            filterWidth: o,
            filterHeight: s,
            inChannels: u,
            outWidth: c,
            outHeight: l,
            dataFormat: h,
          } = n,
          d = "channelsLast" === h,
          p = o * s * u,
          f = l * c,
          m = [p, f],
          g = t.squeeze([0]),
          b = e.reshape([1, p, -1]),
          v = new lh(m, g.shape, n),
          y = this.compileAndRun(v, [g]).reshape([1, m[0], m[1]]),
          x = null != r,
          w = null != i,
          C = a ? pd(a, !0) : null,
          O = new gh(y.shape, [1, f, n.outChannels], !0, !1, x, C, w),
          E = [y, b];
        r && E.push(r), w && E.push(i);
        const S = this.compileAndRun(O, E);
        return d
          ? S.reshape([1, l, c, n.outChannels])
          : S.reshape([1, n.outChannels, l, c]);
      }
      fusedConv2d({
        input: t,
        filter: e,
        convInfo: n,
        bias: r,
        activation: a,
        preluActivationWeights: i,
      }) {
        if (
          1 === n.filterHeight &&
          1 === n.filterWidth &&
          1 === n.dilationHeight &&
          1 === n.dilationWidth &&
          1 === n.strideHeight &&
          1 === n.strideWidth &&
          ("SAME" === n.padInfo.type || "VALID" === n.padInfo.type)
        )
          return this.conv2dByMatMul(t, e, n, r, a, i);
        if (Object(En.ob)().getBool("WEBGL_CONV_IM2COL") && 1 === t.shape[0])
          return this.conv2dWithIm2Row(t, e, n, r, a, i);
        const o = null != r,
          s = null != i,
          u = a ? pd(a, !1) : null,
          c = new jl(n, o, u, s),
          l = [t, e];
        return r && l.push(r), i && l.push(i), this.compileAndRun(c, l);
      }
      conv2d(t, e, n) {
        if (
          1 === n.filterHeight &&
          1 === n.filterWidth &&
          1 === n.dilationHeight &&
          1 === n.dilationWidth &&
          1 === n.strideHeight &&
          1 === n.strideWidth &&
          ("SAME" === n.padInfo.type || "VALID" === n.padInfo.type)
        )
          return this.conv2dByMatMul(t, e, n);
        if (Object(En.ob)().getBool("WEBGL_CONV_IM2COL") && 1 === t.shape[0])
          return this.conv2dWithIm2Row(t, e, n);
        const r = new jl(n);
        return this.compileAndRun(r, [t, e]);
      }
      conv2dDerInput(t, e, n) {
        const r = new Tl(n);
        return this.compileAndRun(r, [t, e]);
      }
      conv2dDerFilter(t, e, n) {
        const r = new Al(n);
        return this.compileAndRun(r, [t, e]);
      }
      fusedDepthwiseConv2D({
        input: t,
        filter: e,
        convInfo: n,
        bias: r,
        activation: a,
        preluActivationWeights: i,
      }) {
        const o =
            Object(En.ob)().getBool("WEBGL_PACK_DEPTHWISECONV") &&
            n.strideWidth <= 2 &&
            n.outChannels / n.inChannels == 1,
          s = a ? pd(a, o) : null,
          u = [t, e],
          c = null != r,
          l = null != i;
        let h;
        return (
          c && u.push(r),
          l && u.push(i),
          o
            ? ((h = new Pl(n, c, s, l)), this.compileAndRun(h, u))
            : ((h = new Bl(n, c, s, l)), this.compileAndRun(h, u))
        );
      }
      depthwiseConv2D(t, e, n) {
        let r;
        return Object(En.ob)().getBool("WEBGL_PACK_DEPTHWISECONV") &&
          n.strideWidth <= 2 &&
          n.outChannels / n.inChannels == 1
          ? ((r = new Pl(n)), this.compileAndRun(r, [t, e]))
          : ((r = new Bl(n)), this.compileAndRun(r, [t, e]));
      }
      depthwiseConv2DDerInput(t, e, n) {
        const r = new Ml(n);
        return this.compileAndRun(r, [t, e]);
      }
      depthwiseConv2DDerFilter(t, e, n) {
        const r = new Fl(n);
        return this.compileAndRun(r, [t, e]);
      }
      conv3d(t, e, n) {
        const r = new $l(n);
        return this.compileAndRun(r, [t, e]);
      }
      conv3dDerInput(t, e, n) {
        const r = new Dl(n);
        return this.compileAndRun(r, [t, e]);
      }
      conv3dDerFilter(t, e, n) {
        const r = new _l(n);
        return this.compileAndRun(r, [t, e]);
      }
      maxPool(t, e) {
        const n = new Ch(e, "max", !1);
        return this.compileAndRun(n, [t]);
      }
      avgPool(t, e) {
        const n = new Ch(e, "avg", !1);
        return this.compileAndRun(n, [t], "float32");
      }
      maxPoolBackprop(t, e, n, r) {
        const a = new Ch(r, "max", !0),
          i = this.compileAndRun(a, [e]),
          o = new fh(r),
          s = this.compileAndRun(o, [t, i], e.dtype);
        return i.dispose(), s;
      }
      avgPoolBackprop(t, e, n) {
        const r = new ll(n);
        return this.compileAndRun(r, [t], e.dtype);
      }
      cast(t, e) {
        return En.F.castTensor(t, e, this);
      }
      unstack(t, e) {
        const n = t.shape[e],
          r = new Array(t.rank - 1);
        let a = 0;
        for (let n = 0; n < t.rank; n++) n !== e && (r[a++] = t.shape[n]);
        const i = new Array(t.rank).fill(0),
          o = t.shape.slice();
        o[e] = 1;
        const s = new Array(n);
        for (let n = 0; n < s.length; n++)
          (i[e] = n), (s[n] = this.slice(t, i, o).reshape(r));
        return s;
      }
      avgPool3d(t, e) {
        const n = new Oh(e, "avg", !1);
        return this.compileAndRun(n, [t], "float32");
      }
      avgPool3dBackprop(t, e, n) {
        const r = new hl(n);
        return this.compileAndRun(r, [t], e.dtype);
      }
      maxPool3d(t, e) {
        const n = new Oh(e, "max", !1);
        return this.compileAndRun(n, [t], "float32");
      }
      maxPool3dBackprop(t, e, n, r) {
        const a = new Oh(r, "max", !0),
          i = this.compileAndRun(a, [e]),
          o = new mh(r),
          s = this.compileAndRun(o, [t, i], e.dtype);
        return i.dispose(), s;
      }
      reshape(t, e) {
        const n = this.texData.get(t.dataId);
        if (
          n.isPacked &&
          !_c(t.shape, e) &&
          (null === n.texture || !_c(n.shape, e))
        ) {
          const n = this.packedReshape(t, e);
          return Object(En.nb)().makeTensorFromDataId(
            n.dataId,
            n.shape,
            n.dtype
          );
        }
        return En.F.reshapeTensor(t, e);
      }
      resizeBilinear(t, e, n, r) {
        const a = Object(En.ob)().getBool("WEBGL_PACK_IMAGE_OPERATIONS")
          ? new Nh(t.shape, e, n, r)
          : new kh(t.shape, e, n, r);
        return this.compileAndRun(a, [t], "float32");
      }
      resizeBilinearBackprop(t, e, n) {
        const r = new Ih(t, e, n);
        return this.compileAndRun(r, [t]);
      }
      resizeNearestNeighbor(t, e, n, r) {
        const a = new Ah(t.shape, e, n, r);
        return this.compileAndRun(a, [t]);
      }
      resizeNearestNeighborBackprop(t, e, n) {
        const r = new Rh(t, e, n);
        return this.compileAndRun(r, [t]);
      }
      multinomial(t, e, n, r) {
        const a = e ? t : Object(En.Zc)(t),
          i = a.shape[0],
          o = a.shape[1],
          s = new bh(i, o, n),
          u = s.getCustomSetupFunc(r);
        return this.compileAndRun(s, [a], "int32", u);
      }
      oneHot(t, e, n, r) {
        const a = new vh(t.size, e, n, r);
        return this.compileAndRun(a, [t]);
      }
      diag(t) {
        const e = new Hl(t.size);
        return this.compileAndRun(e, [t]);
      }
      cropAndResize(t, e, n, r, a, i) {
        const o = new Ll(t.shape, e.shape, r, a, i);
        return this.compileAndRun(o, [t, e, n], "float32");
      }
      depthToSpace(t, e, n) {
        En.Cd.assert(
          e > 1,
          () => "blockSize should be > 1 for depthToSpace, but was: " + e
        );
        const r = t.shape[0],
          a = "NHWC" === n ? t.shape[1] : t.shape[2],
          i = "NHWC" === n ? t.shape[2] : t.shape[3],
          o = "NHWC" === n ? t.shape[3] : t.shape[1],
          s = a * e,
          u = i * e,
          c = o / (e * e),
          l = new Gl("NHWC" === n ? [r, s, u, c] : [r, c, s, u], e, n);
        return this.compileAndRun(l, [t]);
      }
      split(t, e, n) {
        return ud(t, e, n);
      }
      scatterND(t, e, n) {
        const {
            sliceRank: r,
            numUpdates: a,
            sliceSize: i,
            strides: o,
            outputSize: s,
          } = En.F.calculateShapes(e, t, n),
          u = [s / i, i],
          c = t.reshape([a, r]),
          l = e.reshape([a, i]);
        if (0 === s) return En.F.reshapeTensor(Object(En.pd)([]), n);
        const h = Object(En.Ic)(0),
          d = new Dh(a, r, c.rank, l.rank, o, u);
        return this.compileAndRun(d, [l, c, h]).reshape(n);
      }
      sparseToDense(t, e, n, r) {
        const {
            sliceRank: a,
            numUpdates: i,
            strides: o,
            outputSize: s,
          } = En.F.calculateShapes(e, t, n),
          u = new Dh(i, a, t.rank, e.rank, o, [s, 1], !1);
        return this.compileAndRun(u, [e, t, r]).reshape(n);
      }
      fft(t) {
        return this.fftImpl(t, !1);
      }
      ifft(t) {
        return this.fftImpl(t, !0);
      }
      fftImpl(t, e) {
        const n = this.texData.get(t.dataId),
          r = new Zl(Jl, t.shape, e),
          a = new Zl(Ql, t.shape, e),
          i = [
            this.makeComplexComponentTensorInfo(t, n.complexTensors.real),
            this.makeComplexComponentTensorInfo(t, n.complexTensors.imag),
          ],
          o = this.compileAndRun(r, i),
          s = this.compileAndRun(a, i),
          u = this.complex(o, s).as2D(t.shape[0], t.shape[1]);
        return o.dispose(), s.dispose(), u;
      }
      gatherND(t, e) {
        const n = e.shape,
          r = n[n.length - 1],
          [a, i, o, s] = En.F.prepareAndValidate(t, e),
          u = e.reshape([i, r]),
          c = t.reshape([t.size / o, o]),
          l = new nh(r, s, [i, o]);
        return this.compileAndRun(l, [c, u]).reshape(a);
      }
      fill(t, e, n) {
        if ("string" === (n = n || En.Cd.inferDtype(e))) {
          const r = En.Cd.getArrayFromDType(n, En.Cd.sizeFromShape(t));
          return r.fill(e), Object(En.nb)().makeTensor(r, t, n, this);
        }
        {
          const r = new th(t, e),
            a = r.getCustomSetupFunc(e);
          return this.compileAndRun(r, [], n, a);
        }
      }
      onesLike(t) {
        if ("string" === t.dtype)
          throw new Error("onesLike is not supported under string dtype");
        return this.fill(t.shape, 1, t.dtype);
      }
      zerosLike(t) {
        return this.fill(t.shape, "string" === t.dtype ? "" : 0, t.dtype);
      }
      linspace(t, e, n) {
        return En.F.linspaceImpl(t, e, n);
      }
      makeTensorInfo(t, e) {
        const n = this.write(null, t, e);
        return (
          (this.texData.get(n).usage = null), { dataId: n, shape: t, dtype: e }
        );
      }
      makeOutput(t, e) {
        const { dataId: n } = this.makeTensorInfo(t, e);
        return Object(En.nb)().makeTensorFromDataId(n, t, e, this);
      }
      unpackTensor(t) {
        const e = new od(t.shape);
        return this.runWebGLProgram(e, [t], t.dtype);
      }
      packTensor(t) {
        const e = new yh(t.shape);
        return this.runWebGLProgram(e, [t], t.dtype, null, !0);
      }
      packedReshape(t, e) {
        const n = [Nc(t.shape), ...Rc(t.shape)],
          r = { dtype: t.dtype, shape: n, dataId: t.dataId },
          a = [Nc(e), ...Rc(e)],
          i = new Sh(a, n),
          o = this.runWebGLProgram(i, [r], t.dtype, null, !0);
        return { dataId: o.dataId, shape: e, dtype: o.dtype };
      }
      decode(t) {
        const e = this.texData.get(t),
          { isPacked: n, shape: r, dtype: a } = e,
          i = Ac(r);
        let o;
        o = n ? new Ul(i) : new Vl(i);
        return {
          dtype: a,
          shape: r,
          dataId: this.runWebGLProgram(
            o,
            [{ shape: i, dtype: a, dataId: t }],
            a,
            null,
            !0
          ).dataId,
        };
      }
      runWebGLProgram(t, e, n, r, a = !1) {
        const i = this.makeTensorInfo(t.outputShape, n),
          o = this.texData.get(i.dataId);
        if (
          (t.packedOutput && (o.isPacked = !0), t.outPackingScheme === uc.DENSE)
        ) {
          const e = dc(t.outputShape);
          o.texShape = e.map((t) => 2 * t);
        }
        if (
          (null != t.outTexUsage && (o.usage = t.outTexUsage),
          0 === En.Cd.sizeFromShape(i.shape))
        )
          return (o.values = En.Cd.getTypedArrayFromDType(i.dtype, 0)), i;
        const s = [],
          u = e.map((e) => {
            if ("complex64" === e.dtype)
              throw new Error(
                "GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts."
              );
            let n = this.texData.get(e.dataId);
            if (null == n.texture) {
              if (
                !t.packedInputs &&
                En.Cd.sizeFromShape(e.shape) <=
                  Object(En.ob)().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM")
              )
                return {
                  shape: e.shape,
                  texData: null,
                  isUniform: !0,
                  uniformValues: n.values,
                };
              t.packedInputs && ((n.isPacked = !0), (n.shape = e.shape));
            } else if (!!n.isPacked != !!t.packedInputs)
              (e = n.isPacked ? this.unpackTensor(e) : this.packTensor(e)),
                s.push(e),
                (n = this.texData.get(e.dataId));
            else if (n.isPacked && !_c(n.shape, e.shape)) {
              const t = e,
                r = e.shape;
              (e.shape = n.shape),
                (e = this.packedReshape(e, r)),
                s.push(e),
                (n = this.texData.get(e.dataId)),
                (t.shape = r);
            }
            return (
              this.uploadToGPU(e.dataId),
              { shape: e.shape, texData: n, isUniform: !1 }
            );
          });
        this.uploadToGPU(i.dataId);
        const c = { shape: i.shape, texData: o, isUniform: !1 },
          l = (function (t, e, n) {
            let r = "";
            e.concat(n).forEach((t) => {
              const e =
                  null != t.texData &&
                  null != t.texData.slice &&
                  t.texData.slice.flatOffset > 0,
                n = t.isUniform ? "uniform" : t.texData.texShape;
              r += `${t.shape}_${n}_${e}`;
            });
            const a = t.userCode;
            let i = t.constructor.name;
            return (i += "_" + r + "_" + a), i;
          })(t, u, c),
          h = this.getAndSaveBinary(l, () =>
            (function (t, e, n, r) {
              const a = e.userCode,
                i = n.map((t, n) => {
                  const r = {
                    logicalShape: t.shape,
                    texShape: t.isUniform ? null : t.texData.texShape,
                    isUniform: t.isUniform,
                    isPacked: !t.isUniform && t.texData.isPacked,
                    flatOffset: null,
                  };
                  return (
                    null != t.texData &&
                      null != t.texData.slice &&
                      t.texData.slice.flatOffset > 0 &&
                      (r.flatOffset = t.texData.slice.flatOffset),
                    { name: e.variableNames[n], shapeInfo: r }
                  );
                }),
                o = i.map((t) => t.shapeInfo),
                s = {
                  logicalShape: r.shape,
                  texShape: r.texData.texShape,
                  isUniform: !1,
                  isPacked: r.texData.isPacked,
                  flatOffset: null,
                },
                u = Yc(i, s, a, e.packedInputs),
                c = t.createProgram(u);
              let l = null;
              const h = t.getUniformLocation(c, "NAN", !1);
              1 === Object(En.ob)().getNumber("WEBGL_VERSION") &&
                (l = t.getUniformLocation(c, "INFINITY", !1));
              const d = {};
              for (let n = 0; n < e.variableNames.length; n++) {
                const r = e.variableNames[n],
                  a = !1;
                (d[r] = t.getUniformLocation(c, r, a)),
                  (d["offset" + r] = t.getUniformLocation(c, "offset" + r, a));
              }
              return {
                program: e,
                source: u,
                webGLProgram: c,
                uniformLocations: d,
                inShapeInfos: o,
                outShapeInfo: s,
                infLoc: l,
                nanLoc: h,
              };
            })(this.gpgpu, t, u, c)
          ),
          d = null != this.activeTimers;
        let p;
        if (
          (d && (p = this.startTimer()),
          (function (t, e, n, r, a) {
            ch(e.inShapeInfos, n), ch([e.outShapeInfo], [r]);
            const i = r.texData.texture,
              o = r.texData.texShape;
            r.texData.isPacked
              ? t.setOutputPackedMatrixTexture(i, o[0], o[1])
              : t.setOutputMatrixTexture(i, o[0], o[1]),
              t.setProgram(e.webGLProgram),
              1 === Object(En.ob)().getNumber("WEBGL_VERSION") &&
                null !== e.infLoc &&
                t.gl.uniform1f(e.infLoc, 1 / 0),
              null !== e.nanLoc && t.gl.uniform1f(e.nanLoc, NaN),
              n.forEach((n, r) => {
                const a = e.program.variableNames[r],
                  i = e.uniformLocations[a],
                  o = e.uniformLocations["offset" + a];
                if (null != i)
                  if (n.isUniform)
                    if (En.Cd.sizeFromShape(n.shape) < 2)
                      t.gl.uniform1f(i, n.uniformValues[0]);
                    else {
                      let e = n.uniformValues;
                      e instanceof Float32Array || (e = new Float32Array(e)),
                        t.gl.uniform1fv(i, e);
                    }
                  else
                    null != n.texData.slice &&
                      null != o &&
                      t.gl.uniform1i(o, n.texData.slice.flatOffset),
                      t.setInputMatrixTexture(n.texData.texture, i, r);
              }),
              null != a && a(t, e.webGLProgram),
              t.executeProgram();
          })(this.gpgpu, h, u, c, r),
          s.forEach((t) => this.disposeData(t.dataId)),
          d &&
            ((p = this.endTimer(p)),
            this.activeTimers.push({
              name: t.constructor.name,
              query: this.getQueryTime(p),
            })),
          !Object(En.ob)().getBool("WEBGL_LAZILY_UNPACK") &&
            o.isPacked &&
            !1 === a)
        ) {
          const t = this.unpackTensor(i);
          return this.disposeData(i.dataId), t;
        }
        return i;
      }
      compileAndRun(t, e, n, r, a = !1) {
        n = n || e[0].dtype;
        const i = this.runWebGLProgram(t, e, n, r, a);
        return Object(En.nb)().makeTensorFromDataId(i.dataId, i.shape, i.dtype);
      }
      getAndSaveBinary(t, e) {
        return (
          t in this.binaryCache || (this.binaryCache[t] = e()),
          this.binaryCache[t]
        );
      }
      getTextureManager() {
        return this.textureManager;
      }
      dispose() {
        if (!this.disposed) {
          if (!Object(En.ob)().getBool("IS_TEST")) {
            Object.keys(this.binaryCache).forEach((t) => {
              this.gpgpu.deleteProgram(this.binaryCache[t].webGLProgram),
                delete this.binaryCache[t];
            });
          }
          this.textureManager.dispose(),
            null != this.canvas &&
            "undefined" != typeof HTMLCanvasElement &&
            this.canvas instanceof HTMLCanvasElement
              ? this.canvas.remove()
              : (this.canvas = null),
            this.gpgpuCreatedLocally &&
              ((this.gpgpu.program = null), this.gpgpu.dispose()),
            (this.disposed = !0);
        }
      }
      floatPrecision() {
        return (
          null == this.floatPrecisionValue &&
            (this.floatPrecisionValue = Object(En.ud)(() => {
              if (!Object(En.ob)().get("WEBGL_RENDER_FLOAT32_ENABLED")) {
                const t = Object(En.ob)().getBool("DEBUG");
                Object(En.ob)().set("DEBUG", !1);
                const e = this.abs(Object(En.Ic)(1e-8)).dataSync()[0];
                if ((Object(En.ob)().set("DEBUG", t), e > 0)) return 32;
              }
              return 16;
            })),
          this.floatPrecisionValue
        );
      }
      epsilon() {
        return 32 === this.floatPrecision() ? 1e-7 : 1e-4;
      }
      uploadToGPU(t) {
        const e = this.texData.get(t),
          {
            shape: n,
            dtype: r,
            values: a,
            texture: i,
            usage: o,
            isPacked: s,
          } = e;
        if (null != i) return;
        const u = null != this.activeTimers;
        let c;
        u && (c = En.Cd.now());
        let l = e.texShape;
        if (
          (null == l &&
            ((l = (function (t, e = !1) {
              let n = Object(En.ob)().getNumber("WEBGL_MAX_TEXTURE_SIZE");
              if (
                (e &&
                  ((n *= 2),
                  1 ===
                    (t = t.map((e, n) =>
                      n >= t.length - 2 ? En.Cd.nearestLargerEven(t[n]) : t[n]
                    )).length && (t = [2, t[0]])),
                2 !== t.length)
              ) {
                const e = En.Cd.squeezeShape(t);
                t = e.newShape;
              }
              let r = En.Cd.sizeFromShape(t);
              if (t.length <= 1 && r <= n) return [1, r];
              if (2 === t.length && t[0] <= n && t[1] <= n) return t;
              if (3 === t.length && t[0] * t[1] <= n && t[2] <= n)
                return [t[0] * t[1], t[2]];
              if (3 === t.length && t[0] <= n && t[1] * t[2] <= n)
                return [t[0], t[1] * t[2]];
              if (4 === t.length && t[0] * t[1] * t[2] <= n && t[3] <= n)
                return [t[0] * t[1] * t[2], t[3]];
              if (4 === t.length && t[0] <= n && t[1] * t[2] * t[3] <= n)
                return [t[0], t[1] * t[2] * t[3]];
              if (e) {
                const e = Nc(t);
                let n = 2,
                  a = 2;
                return (
                  t.length && ([n, a] = Rc(t)),
                  (r = e * (n / 2) * (a / 2)),
                  En.Cd.sizeToSquarishShape(r).map((t) => 2 * t)
                );
              }
              return En.Cd.sizeToSquarishShape(r);
            })(n, s)),
            (e.texShape = l)),
          null != a)
        ) {
          const t = Ac(n);
          let i,
            o = l[1],
            h = l[0];
          const d = a instanceof Uint8Array;
          s
            ? (([o, h] = pc(l[0], l[1])), (i = new Yl(t, [h, o], d)))
            : (i = new Xl(t, [h, o], d));
          const p = this.makeTensorInfo([h, o], r);
          (this.texData.get(p.dataId).usage = d ? cc.PIXELS : cc.UPLOAD),
            this.gpgpu.uploadDenseMatrixToTexture(
              this.getTexture(p.dataId),
              o,
              h,
              a
            );
          const f = !0,
            m = this.runWebGLProgram(i, [p], r, null, f),
            g = this.texData.get(m.dataId);
          (e.texture = g.texture),
            (e.texShape = g.texShape),
            (e.isPacked = g.isPacked),
            (e.usage = g.usage),
            this.disposeData(p.dataId),
            this.texData.delete(m.dataId),
            (e.values = null),
            u && (this.uploadWaitMs += En.Cd.now() - c);
        } else {
          const t = this.acquireTexture(l, o, r, s);
          e.texture = t;
        }
      }
      convertAndCacheOnCPU(t, e) {
        const n = this.texData.get(t),
          { dtype: r } = n;
        return (
          this.releaseGPUData(t),
          null != e &&
            (n.values = (function (t, e) {
              if ("float32" === e || "complex64" === e) return t;
              if ("int32" === e || "bool" === e) {
                const n =
                  "int32" === e
                    ? new Int32Array(t.length)
                    : new Uint8Array(t.length);
                for (let e = 0; e < n.length; ++e) n[e] = Math.round(t[e]);
                return n;
              }
              throw new Error("Unknown dtype " + e);
            })(/** @license See the LICENSE file. */ e, r)),
          n.values
        );
      }
      acquireTexture(t, e, n, r) {
        if (
          ((this.numBytesInGPU += this.computeBytes(t, n)),
          !this.warnedAboutMemory &&
            this.numBytesInGPU > 1024 * this.numMBBeforeWarning * 1024)
        ) {
          const t = (this.numBytesInGPU / 1024 / 1024).toFixed(2);
          (this.warnedAboutMemory = !0),
            console.warn(
              `High memory usage in GPU: ${t} MB, most likely due to a memory leak`
            );
        }
        return this.textureManager.acquireTexture(t, e, r);
      }
      computeBytes(t, e) {
        return t[0] * t[1] * En.Cd.bytesPerElement(e);
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const md = {
      kernelName: En.b,
      backendName: "webgl",
      kernelFunc: ({ inputs: t, backend: e }) => {
        const { a: n, b: r } = t;
        /**
         * @license
         * Copyright 2020 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        return (function (t, e, n) {
          let r = new wl(
            "\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",
            t.shape,
            e.shape
          );
          return (
            Object(En.ob)().getBool("WEBGL_PACK_BINARY_OPERATIONS") &&
              (r = new Ol(
                "\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",
                t.shape,
                e.shape,
                !0
              )),
            n.runWebGLProgram(r, [t, e], "float32")
          );
        })(n, r, e);
      },
    };
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class gd {
      constructor(t) {
        this.variableNames = ["A"];
        const e = Gc(),
          [n, r] = t;
        (this.outputShape = t),
          (this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${n}.0);\n\n        vec4 values = ${e.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `);
      }
    }
    /**
     * @license
     * Copyright 2018 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class bd {
      constructor(t) {
        (this.variableNames = ["A"]),
          (this.packedInputs = !1),
          (this.packedOutput = !0);
        const e = Gc(),
          [n, r] = t;
        (this.outputShape = t),
          (this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${n}.0);\n            vec4 values = ${e.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${e.output} = result;\n      }\n    `);
      }
    }
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const vd = {
      kernelName: En.c,
      backendName: "webgl",
      kernelFunc: function (t) {
        const { inputs: e, backend: n, attrs: r } = t;
        let { pixels: a } = e;
        const { numChannels: i } = r,
          o =
            "undefined" != typeof HTMLVideoElement &&
            a instanceof HTMLVideoElement,
          s =
            "undefined" != typeof HTMLImageElement &&
            a instanceof HTMLImageElement,
          [u, c] = o ? [a.videoWidth, a.videoHeight] : [a.width, a.height],
          l = [c, u],
          h = [c, u, i];
        (s || o) &&
          (null == yd &&
            (yd = document.createElement("canvas").getContext("2d")),
          (yd.canvas.width = u),
          (yd.canvas.height = c),
          yd.drawImage(a, 0, 0, u, c),
          (a = yd.canvas));
        const d = n.makeTensorInfo(l, "int32");
        (n.texData.get(d.dataId).usage = cc.PIXELS),
          n.gpgpu.uploadPixelDataToTexture(n.getTexture(d.dataId), a);
        const p = Object(En.ob)().getBool("WEBGL_PACK") ? new bd(h) : new gd(h),
          f = n.runWebGLProgram(p, [d], "int32");
        return n.disposeData(d.dataId), f;
      },
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
    };
    let yd;
    const { maxImpl: xd, transposeImpl: wd } = i;
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Cd(t, e, n) {
      const r = n.texData.get(t.dataId);
      return !r.isPacked ||
        _c(t.shape, e) ||
        (null !== r.texture && _c(r.shape, e))
        ? { dataId: t.dataId, shape: e, dtype: t.dtype }
        : /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          (function (t, e, n) {
            const r = [Nc(t.shape), ...Rc(t.shape)],
              a = { dtype: t.dtype, shape: r, dataId: t.dataId },
              i = [Nc(e), ...Rc(e)],
              o = new Sh(i, r),
              s = n.runWebGLProgram(o, [a], t.dtype, null, !0);
            return { dataId: s.dataId, shape: e, dtype: s.dtype };
          })(t, e, n);
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Od(t, e, n, r) {
      const a = En.Cd.sizeFromShape(e),
        i = Cd(t, [En.Cd.sizeFromShape(t.shape) / a, a], r),
        o = (function t(e, n, r, a) {
          const [i, o] = e.shape,
            s = En.F.computeOptimalWindowSize(o),
            u = new Eh({ windowSize: s, inSize: o, batchSize: i }, r),
            c = a.runWebGLProgram(u, [e], n);
          return 1 === c.shape[1] ? c : t(c, n, r, a);
        })(i, t.dtype, "max", r);
      return i.dataId !== t.dataId && r.disposeData(i.dataId), Cd(o, n, r);
    }
    /**
     * @license
     * Copyright 2017 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class Ed {
      constructor(t, e) {
        this.variableNames = ["A"];
        const n = new Array(t.length);
        for (let r = 0; r < n.length; r++) n[r] = t[e[r]];
        (this.outputShape = n), (this.rank = n.length);
        const r = ol(this.rank),
          a = (function (t) {
            const e = t.length;
            if (e > 6)
              throw Error(`Transpose for rank ${e} is not yet supported`);
            const n = [
                "resRC.x",
                "resRC.y",
                "resRC.z",
                "resRC.w",
                "resRC.u",
                "resRC.v",
              ],
              r = new Array(e);
            for (let e = 0; e < t.length; e++) r[t[e]] = n[e];
            return r.join();
          })(
            /**
             * @license
             * Copyright 2019 Google Inc. All Rights Reserved.
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             * http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             * =============================================================================
             */ e
          );
        this.userCode = `\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${a}));\n    }\n    `;
      }
    }
    class Sd {
      constructor(t, e) {
        (this.variableNames = ["A"]),
          (this.packedInputs = !0),
          (this.packedOutput = !0);
        const n = new Array(t.length);
        for (let r = 0; r < n.length; r++) n[r] = t[e[r]];
        if (((this.outputShape = n), (this.rank = n.length), this.rank > 6))
          throw Error(
            `Packed transpose for rank ${this.rank} is not yet supported.`
          );
        const r = ol(this.rank),
          a = Vc("rc", this.rank),
          i = new Array(this.rank);
        for (let t = 0; t < e.length; t++) i[e[t]] = a[t];
        const o = `vec2(${i.slice(-2).join()})`,
          s = `++${a[this.rank - 1]} < ${n[this.rank - 1]}`,
          u = `getChannel(getA(${i.join()}), ${o})`;
        this.userCode = `\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${u};\n      if(${s}) {\n        result[1] = ${u};\n      }\n      --${
          a[this.rank - 1]
        };\n      if(++${a[this.rank - 2]} < ${
          n[this.rank - 2]
        }) {\n        result[2] = ${u};\n        if(${s}) {\n          result[3] = ${u};\n        }\n      }\n      setOutput(result);\n    }\n    `;
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Id(t, e, n) {
      const r = Object(En.ob)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")
        ? new Sd(t.shape, e)
        : new Ed(t.shape, e);
      return n.runWebGLProgram(r, [t], t.dtype);
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const kd = {
      kernelName: En.e,
      backendName: "webgl",
      kernelFunc: ({ inputs: t, attrs: e, backend: n }) => {
        const { x: r } = t,
          { reductionIndices: a } = e,
          i = n,
          o = r.shape.length;
        let s = En.Cd.parseAxisParam(a, r.shape);
        const u = En.F.getAxesPermutation(s, o),
          c = null != u,
          l = i.shouldExecuteOnCPU([r]);
        let h = r;
        if (c) {
          if (l) {
            const t = i.texData.get(h.dataId).values,
              e = new Array(o);
            for (let t = 0; t < e.length; t++) e[t] = r.shape[u[t]];
            const n = wd(t, r.shape, r.dtype, u, e);
            h = i.makeTensorInfo(e, r.dtype);
            i.texData.get(h.dataId).values = n;
          } else h = Id(r, u, i);
          s = En.F.getInnerMostAxes(s.length, o);
        }
        En.F.assertAxesAreInnerMostDims("max", s, o);
        const [d, p] = En.F.computeOutAndReduceShapes(h.shape, s);
        let f;
        if (l) {
          const t = i.texData.get(h.dataId).values,
            e = xd(t, En.Cd.sizeFromShape(p), d, r.dtype);
          f = i.makeTensorInfo(d, r.dtype);
          i.texData.get(f.dataId).values = e;
        } else f = Od(h, p, d, i);
        return c && i.disposeData(h.dataId), f;
      },
    };
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const Nd = {
        kernelName: En.f,
        backendName: "webgl",
        kernelFunc: ({ inputs: t, attrs: e, backend: n }) => {
          const { x: r } = t,
            { filterSize: a, strides: i, pad: o, includeBatchInIndex: s } = e,
            u = n;
          En.Cd.assert(
            4 === r.shape.length,
            () =>
              `Error in maxPool: input must be rank 4 but got rank ${r.shape.length}.`
          );
          const c = [1, 1];
          En.Cd.assert(
            En.F.eitherStridesOrDilationsAreOne(i, c),
            () =>
              `Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`
          );
          const l = En.F.computePool2DInfo(r.shape, a, i, c, o),
            [h, d] = (function (t, e, n, r) {
              let a = new Ch(n, "max", !1);
              const i = r.runWebGLProgram(a, [t], "float32");
              return (
                (a = new Ch(n, "max", !0, !0, e)),
                [i, r.runWebGLProgram(a, [t], "float32")]
              );
            })(r, s, l, u);
          return [h, d];
        },
      },
      Rd = {
        kernelName: En.g,
        backendName: "webgl",
        kernelFunc: ({ inputs: t, backend: e, attrs: n }) => {
          En.F.warn(
            "tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead"
          );
          const { boxes: r, scores: a } = t,
            { maxOutputSize: i, iouThreshold: o, scoreThreshold: s } = n,
            u = e,
            c = u.readSync(r.dataId),
            l = u.readSync(a.dataId),
            h = i,
            d = o,
            p = s;
          return En.Kb.nonMaxSuppressionV3(c, l, h, d, p);
        },
      },
      Ad = En.Kb.nonMaxSuppressionV5,
      Td = [
        kd,
        vd,
        md,
        Rd,
        {
          kernelName: En.h,
          backendName: "webgl",
          kernelFunc: ({ inputs: t, backend: e, attrs: n }) => {
            En.F.warn(
              "tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead"
            );
            const { boxes: r, scores: a } = t,
              {
                maxOutputSize: i,
                iouThreshold: o,
                scoreThreshold: s,
                softNmsSigma: u,
              } = n,
              c = e,
              l = c.readSync(r.dataId),
              h = c.readSync(a.dataId),
              d = i,
              p = o,
              f = s,
              m = u,
              { selectedIndices: g, selectedScores: b } = Ad(l, h, d, p, f, m);
            return [g, b];
          },
        },
        {
          kernelName: En.j,
          backendName: "webgl",
          kernelFunc: ({ inputs: t, backend: e }) => {
            const { x: n } = t,
              r = e,
              a = new Uh(n.shape, "return x * x;");
            return r.runWebGLProgram(a, [n], n.dtype);
          },
        },
        {
          kernelName: En.k,
          backendName: "webgl",
          kernelFunc: ({ inputs: t, backend: e }) => {
            const { a: n, b: r } = t,
              a = e,
              i = Object(En.ob)().getBool("WEBGL_PACK_BINARY_OPERATIONS")
                ? new Ol("return (a - b) * (a - b);", n.shape, r.shape)
                : new wl("return (a - b) * (a - b);", n.shape, r.shape);
            return a.compileAndRun(i, [n, r]);
          },
        },
        {
          kernelName: En.n,
          backendName: "webgl",
          kernelFunc: ({ inputs: t, attrs: e, backend: n }) => {
            const { x: r } = t,
              { perm: a } = e,
              i = n,
              o = r.shape.length,
              s = new Array(o);
            for (let t = 0; t < s.length; t++) s[t] = r.shape[a[t]];
            let u;
            if (i.shouldExecuteOnCPU([r])) {
              const t = i.texData.get(r.dataId).values,
                e = wd(t, r.shape, r.dtype, a, s);
              u = i.makeTensorInfo(s, r.dtype);
              i.texData.get(u.dataId).values = e;
            } else u = Id(r, a, i);
            return u;
          },
        },
        Nd,
      ];
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ for (const t of Td) Object(En.Bc)(t);
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    En.gb.isBrowser() && Object(En.Ac)("webgl", () => new fd(), 2);
    En.Fd;
    /** @license See the LICENSE file. */ let _d = {
      undetected: !1,
      turned: !1,
      turnedFactor: 0,
      bowed: !1,
      bowedFactor: 0,
      eyesClosed: !1,
      eyesClosedFactor: 0,
    };
    const Dd = { undetected: 50, turned: 30, bowed: 40, eyesClosed: 50 };
    function Fd(t, e) {
      return Math.sqrt(Math.pow(t._x - e._x, 2) + Math.pow(t._y - e._y, 2));
    }
    function Md(t) {
      const e = Fd(t[33], t[3]),
        n = Fd(t[33], t[13]),
        [r, a] = (function (t, e, n) {
          if (t < e) {
            let n = t;
            (t = e), (e = n);
          }
          return [e * n < t, (t / e).toFixed(2) + ">3.5"];
        })(e, n, 3.5),
        i = (t[1]._y + t[15]._y) / 2,
        o = (t[39]._y + t[42]._y) / 2,
        s = (Fd(t[0], t[1]) + Fd(t[15], t[16])) / 2,
        u = i < o + 0.1 * s,
        c = (-(i - o) / s).toFixed(2) + ">-0.1",
        l = (Fd(t[38], t[40]) + Fd(t[43], t[47])) / 2,
        h = (Fd(t[36], t[39]) + Fd(t[42], t[45])) / 2,
        d =
          Math.pow(Math.max(e, n) - Math.min(e, n), 2) /
          Math.pow(Math.max(e, n), 2);
      return {
        turned: r,
        turnedFactor: a,
        bowed: u,
        bowedFactor: c,
        eyesClosed: h / l + 2.5 * d >= 5.8,
        eyesClosedFactor: (h / l + 2.5 * d).toFixed(2) + ">5.8",
      };
    }
    const jd = new (class {
      constructor() {
        (this.model = null),
          (this.loadModel = this.loadFromUri.bind(this)),
          (this.execute = this.execute.bind(this));
      }
      async loadFromUri(t) {
        return (
          await (async function (t, e = {}) {
            if (null == t)
              throw new Error(
                "modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model"
              );
            null == e && (e = {}),
              e.fromTFHub &&
                null == t.load &&
                (t.endsWith("/") || (t += "/"),
                (t += "model.json?tfjs-format=file"));
            const n = new iu(t, e);
            return await n.load(), n;
          })(/** @license See the LICENSE file. */ t).then((t) => {
            this.model = t;
          }),
          new Promise((t) => {
            t();
          })
        );
      }
      execute(t, e) {
        if (void 0 !== t) return this.model.execute(t, e);
      }
    })();
    const $d = new (class {
      constructor() {
        (this.cam = null),
          (this.setCam = this.setCam.bind(this)),
          (this.capture = this.capture.bind(this));
      }
      async setCam(t) {
        this.cam = await a.webcam(t);
      }
      capture(t) {
        return new Promise((e, n) => {
          try {
            this.cam.capture().then((n) => {
              const r = En.Dc(n, t);
              En.hb(n), e(r);
            });
          } catch (t) {
            n(t);
          }
        });
      }
    })();
    En.mb();
    let Bd = 0,
      Pd = 0;
    const Ld = document.getElementById("video"),
      { ImageData: zd } = o,
      Wd = new Be({ inputSize: 160, scoreThreshold: 0.3 });
    K.monkeyPatch({
      Canvas: HTMLCanvasElement,
      Image: HTMLImageElement,
      ImageData: zd,
      Video: HTMLVideoElement,
      createCanvasElement: () => document.createElement("canvas"),
      createImageElement: () => document.createElement("img"),
    }),
      Promise.all([
        rn.tinyFaceDetector.loadFromUri("./models-faceapi"),
        jd.loadFromUri("../dist/models-tfjs/keypoints_tfjs/model.json"),
      ]).then(function () {
        navigator.getUserMedia(
          { video: { width: 640, height: 480 } },
          (t) => (Ld.srcObject = t),
          (t) => console.error(t)
        );
      }),
      Ld.addEventListener("play", async () => {
        const t = it(Ld),
          e = t.getContext("2d");
        document.body.append(t);
        const n = { width: 640, height: 480 };
        !(function (t, e, n) {
          void 0 === n && (n = !1);
          var r = n ? rt(e) : e,
            a = r.width,
            i = r.height;
          (t.width = a), (t.height = i);
        })(t, n),
          $d.setCam(Ld),
          setInterval(async () => {
            Pd % 10 == 0 && console.time("time fd" + Pd);
            const [a, i] = await Promise.all([
              ((o = Ld),
              (s = Wd),
              void 0 === s && (s = new Oe()),
              new On(o, s)),
              $d.capture([1, 480, 640, 3]),
            ]);
            var o, s;
            Pd % 10 == 0 && console.timeEnd("time fd" + Pd),
              Pd % 10 == 0 && console.time("time lm" + Pd);
            const u = a ? a._box : void 0,
              c = (function (t, e) {
                return void 0 === t
                  ? void 0
                  : En.Gb.cropAndResize(
                      e,
                      [
                        [
                          t.y / 480,
                          t.x / 640,
                          (t.y + t.height) / 480,
                          (t.x + t.width) / 640,
                        ],
                      ],
                      [0],
                      [160, 160]
                    );
              })(u, i),
              h = jd.execute(c, "Identity_2");
            (async function (t, e) {
              if (void 0 === t) return;
              const n = await t.array();
              let r = new Array();
              for (let t = 0; t < 136; ++t) {
                t % 2 || (r[Math.floor(t / 2)] = new Object());
                let a =
                  t % 2
                    ? { key: "_y", offset: e.y, mult: e.height }
                    : { key: "_x", offset: e.x, mult: e.width };
                r[Math.floor(t / 2)][a.key] = a.offset + n[0][t] * a.mult;
              }
              return r;
            })(h, u).then((i) => {
              (Bd = (function (t, e) {
                return (
                  (_d = {}),
                  (_d.undetected = !t),
                  e && (_d = { ..._d, ...Md(e) }),
                  Object.keys(Dd).reduce(
                    (t, e) => (_d[e] ? t + _d[e] * Dd[e] : t),
                    0
                  )
                );
              })(a, i)),
                (function (t, e, n, a, i, o) {
                  if ((e.clearRect(0, 0, t.width, t.height), void 0 !== n)) {
                    const e = (function t(e, n) {
                      var r = new l(n.width, n.height),
                        a = r.width,
                        i = r.height;
                      if (a <= 0 || i <= 0)
                        throw new Error(
                          "resizeResults - invalid dimensions: " +
                            JSON.stringify({ width: a, height: i })
                        );
                      if (Array.isArray(e))
                        return e.map(function (e) {
                          return t(e, { width: a, height: i });
                        });
                      if (zt(e)) {
                        var o = e.detection.forSize(a, i),
                          s = e.unshiftedLandmarks.forSize(
                            o.box.width,
                            o.box.height
                          );
                        return Wt(B(e, o), s);
                      }
                      return $(e)
                        ? B(e, e.detection.forSize(a, i))
                        : e instanceof T || e instanceof S
                        ? e.forSize(a, i)
                        : e;
                    })(n, i);
                    r.drawDetections(t, e);
                  }
                  if (((e.fillStyle = "#FF00FF"), void 0 !== a))
                    for (let t = 0; t < 68; ++t)
                      e.fillRect(a[t]._x, a[t]._y, 3, 3);
                  !(function (t, e) {
                    (t.fillStyle = "#FF00FF"),
                      (t.font = "30px Arial"),
                      t.fillText("score: " + e, 30, 50),
                      (t.font = "18px Arial");
                    for (
                      var n = JSON.stringify(_d, null, 2).split("\n"), r = 0;
                      r < n.length;
                      r++
                    )
                      t.fillText(n[r], 10, 310 + 20 * r);
                    (t.font = "12px Arial"),
                      t.fillText(JSON.stringify(En.ec()), 20, 470);
                  })(e, o);
                })(t, e, a, i, n, Bd);
            }),
              En.hb(h),
              En.hb(c),
              Pd % 10 == 0 && console.timeEnd("time lm" + Pd),
              (Pd += 1),
              En.hb(i);
          }, 50);
      });
  },
]);
